cscope 15 $HOME/Projects/register_level/usb_1st_attempt -q 0000010535 0001057861
	@Extra_codde.c

8 
	gINTERFACE_DESC_TYPE
:

9 
FUSART_Síd
(
USART1
 , '4');

10 
	gReque°
->
	gReque°Found
=
åue
;

13 
	gENDPOINT_DESC_TYPE
:

14 
FUSART_Síd
(
USART1
 , '5');

15 
	gReque°
->
	gReque°Found
=
åue
;

18 
	gDEVICE_QUALIFIER_TYPE
:

19 
_SëEPTxSètus
(
ENDP0
,
EP_TX_STALL
);

20 
FUSART_Síd
(
USART1
 , '6');

21 
	gReque°
->
	gReque°Found
=
åue
;

	@main.c

29 
	~"maö.h
"

30 
	~"°m32f30x_rcc.h
"

31 
	~"°m32f30x_gpio.h
"

32 
	~"°m32f30x.h
"

33 
	~"ußπ.h
"

34 
	~"usb_ªgs.h
"

35 
	~"usb.h
"

36 
	~"°dio.h
"

37 
	~"°dlib.h
"

38 
	~"usb_mem.h
"

39 
	~"usb_hid.h
"

43 
	#USE_FULL_ASSERT
 1

	)

50 
	#BSRR_VAL
 0xff00

	)

61 
uöt8_t
 
	gPªv
 = 0;

63 
ölöe
 
dñay
(
uöt32_t
 delay);

64 
ölöe
 
Dñay_Inôülize
();

67 
	gbuf„r
[8];

69 
	$maö
()

73 
	`Sîül_öôülize
();

74 
	`USBH¨dw¨eInô
();

75 
	`Dñay_Inôülize
();

77 
uöt8_t
 
m
[4]={0,0,20,0};

80 
	`Pröt
(
USART1
,"hello\n\r");

81 if((*
DADDR
&0b01111111)>0)

83 
	`Pröt
(
USART1
,"ok\n\r");

85 
	`Pröt
(
USART1
,
buf„r
);

86 
	`dñay
(1000000);

89 if(
Pªv
)

92 
Pªv
 = 0;

95 
	`U£rToPMABuf„rC›y
(
m
,(
uöt16_t
)
EP1TX_ADDRESS
,4);

97 
	`SëEPTxVÆid
(
ENDP1
);

100 
	}
}

111 
ölöe
 
	$dñay
(
uöt32_t
 
dñay
)

114 
dñay
 = delay * 72;

115 
	`Dñay_Inôülize
();

116 *
DWT_CYCCNT
 < 
dñay
);

117 
	}
}

119 
ölöe
 
	$Dñay_Inôülize
()

122 
DEMCR
 |
DEMCR_TRCENA
;

123 *
DWT_CYCCNT
 = 0;

125 
DWT_CTRL
 |
CYCCNTENA
;

126 
	}
}

129 #ifde‡ 
USE_FULL_ASSERT


138 
	$as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
)

147 
	}
}

	@main.h

29 #i‚de‡
__MAIN_H


30 
	#__MAIN_H


	)

34 
	~"°m32f30x_c⁄f.h
"

35 
	~"°m32f30x.h
"

36 
	~"°m32f30x_ô.h
"

43 
	#DEMCR
 (*((vﬁ©ûê
uöt32_t
 *)0xE000EDFC))

	)

44 
	#DWT_CTRL
 (*(vﬁ©ûê
uöt32_t
 *)0xe0001000)

	)

45 
	#CYCCNTENA
 (1<<0)

	)

46 
	#DWT_CYCCNT
 ((vﬁ©ûê
uöt32_t
 *)0xE0001004)

	)

47 
	#DEMCR_TRCENA
 0x01000000

	)

	@resources/Include/arm_common_tables.h

24 #i‚de‡
_ARM_COMMON_TABLES_H


25 
	#_ARM_COMMON_TABLES_H


	)

27 
	~"¨m_m©h.h
"

29 
uöt16_t
 
¨mBôRevTabÀ
[1024];

30 
q15_t
 
¨mRecùTabÀQ15
[64];

31 
q31_t
 
¨mRecùTabÀQ31
[64];

32 c⁄° 
q31_t
 
ªÆC€fAQ31
[1024];

33 c⁄° 
q31_t
 
ªÆC€fBQ31
[1024];

	@resources/Include/arm_math.h

251 #i‚de‡
_ARM_MATH_H


252 
	#_ARM_MATH_H


	)

254 
	#__CMSIS_GENERIC


	)

256 #i‡
deföed
 (
ARM_MATH_CM4
)

257 
	~"c‹e_cm4.h
"

258 #ñi‡
deföed
 (
ARM_MATH_CM3
)

259 
	~"c‹e_cm3.h
"

260 #ñi‡
deföed
 (
ARM_MATH_CM0
)

261 
	~"c‹e_cm0.h
"

263 
	~"ARMCM4.h
"

267 #unde‡
__CMSIS_GENERIC


268 
	~"°rög.h
"

269 
	~"m©h.h
"

270 #ifdef 
__˝lu•lus


280 
	#DELTA_Q31
 (0x100)

	)

281 
	#DELTA_Q15
 0x5

	)

282 
	#INDEX_MASK
 0x0000003F

	)

283 
	#PI
 3.14159265358979f

	)

289 
	#TABLE_SIZE
 256

	)

290 
	#TABLE_SPACING_Q31
 0x800000

	)

291 
	#TABLE_SPACING_Q15
 0x80

	)

298 
	#INPUT_SPACING
 0xB60B61

	)

307 
ARM_MATH_SUCCESS
 = 0,

308 
ARM_MATH_ARGUMENT_ERROR
 = -1,

309 
ARM_MATH_LENGTH_ERROR
 = -2,

310 
ARM_MATH_SIZE_MISMATCH
 = -3,

311 
ARM_MATH_NANINF
 = -4,

312 
ARM_MATH_SINGULAR
 = -5,

313 
ARM_MATH_TEST_FAILURE
 = -6

314 } 
	t¨m_°©us
;

319 
öt8_t
 
	tq7_t
;

324 
öt16_t
 
	tq15_t
;

329 
öt32_t
 
	tq31_t
;

334 
öt64_t
 
	tq63_t
;

339 
	tÊﬂt32_t
;

344 
	tÊﬂt64_t
;

349 
	#__SIMD32
(
addr
Ë(*(
öt32_t
 **Ë& (addr))

	)

351 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

355 
	#__PKHBT
(
ARG1
, 
ARG2
, 
ARG3
Ë–(((
öt32_t
)(ARG1Ë<< 0Ë& (öt32_t)0x0000FFFFË| \

	)

356 (((
öt32_t
)(
ARG2
Ë<< 
ARG3
) & (int32_t)0xFFFF0000) )

364 #i‚de‡
ARM_MATH_BIG_ENDIAN


366 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v0Ë<< 0Ë& (öt32_t)0x000000FFË| \

	)

367 (((
öt32_t
)(
v1
) << 8) & (int32_t)0x0000FF00) | \

368 (((
öt32_t
)(
v2
) << 16) & (int32_t)0x00FF0000) | \

369 (((
öt32_t
)(
v3
) << 24) & (int32_t)0xFF000000) )

372 
	#__PACKq7
(
v0
,
v1
,
v2
,
v3
Ë–(((
öt32_t
)(v3Ë<< 0Ë& (öt32_t)0x000000FFË| \

	)

373 (((
öt32_t
)(
v2
) << 8) & (int32_t)0x0000FF00) | \

374 (((
öt32_t
)(
v1
) << 16) & (int32_t)0x00FF0000) | \

375 (((
öt32_t
)(
v0
) << 24) & (int32_t)0xFF000000) )

383 
__STATIC_INLINE
 
q31_t
 
˛ù_q63_to_q31
(

384 
q63_t
 
x
)

386  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

387 ((0x7FFFFFFF ^ ((
q31_t
Ë(
x
 >> 63)))) : (q31_t) x;

393 
__STATIC_INLINE
 
q15_t
 
˛ù_q63_to_q15
(

394 
q63_t
 
x
)

396  ((
q31_t
Ë(
x
 >> 32) != ((q31_t) x >> 31)) ?

397 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 63)))) : (q15_t) (x >> 15);

403 
__STATIC_INLINE
 
q7_t
 
˛ù_q31_to_q7
(

404 
q31_t
 
x
)

406  ((
q31_t
Ë(
x
 >> 24) != ((q31_t) x >> 23)) ?

407 ((0x7F ^ ((
q7_t
Ë(
x
 >> 31)))) : (q7_t) x;

413 
__STATIC_INLINE
 
q15_t
 
˛ù_q31_to_q15
(

414 
q31_t
 
x
)

416  ((
q31_t
Ë(
x
 >> 16) != ((q31_t) x >> 15)) ?

417 ((0x7FFF ^ ((
q15_t
Ë(
x
 >> 31)))) : (q15_t) x;

424 
__STATIC_INLINE
 
q63_t
 
mu…32x64
(

425 
q63_t
 
x
,

426 
q31_t
 
y
)

428  ((((
q63_t
Ë(
x
 & 0x00000000FFFFFFFFË* 
y
) >> 32) +

429 (((
q63_t
Ë(
x
 >> 32Ë* 
y
)));

433 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& deföed ( 
__CC_ARM
 )

434 
	#__CLZ
 
__˛z


	)

437 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& deföed ( 
__TASKING__
 )

441 #i‡
deföed
 (
ARM_MATH_CM0
Ë&& ((deföed (
__ICCARM__
)Ë||(deföed (
__GNUC__
)) )

443 
__STATIC_INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
);

446 
__STATIC_INLINE
 
uöt32_t
 
__CLZ
(
q31_t
 
d©a
)

448 
uöt32_t
 
cou¡
 = 0;

449 
uöt32_t
 
mask
 = 0x80000000;

451 (
d©a
 & 
mask
) == 0)

453 
cou¡
 += 1u;

454 
mask
 = mask >> 1u;

457 (
cou¡
);

467 
__STATIC_INLINE
 
uöt32_t
 
¨m_ªcù_q31
(

468 
q31_t
 
ö
,

469 
q31_t
 * 
d°
,

470 
q31_t
 * 
pRecùTabÀ
)

473 
uöt32_t
 
out
, 
ãmpVÆ
;

474 
uöt32_t
 
ödex
, 
i
;

475 
uöt32_t
 
signBôs
;

477 if(
ö
 > 0)

479 
signBôs
 = 
__CLZ
(
ö
) - 1;

483 
signBôs
 = 
__CLZ
(-
ö
) - 1;

487 
ö
 = i¿<< 
signBôs
;

490 
ödex
 = (
uöt32_t
Ë(
ö
 >> 24u);

491 
ödex
 = (ödex & 
INDEX_MASK
);

494 
out
 = 
pRecùTabÀ
[
ödex
];

498 
i
 = 0u; i < 2u; i++)

500 
ãmpVÆ
 = (
q31_t
Ë(((
q63_t
Ë
ö
 * 
out
) >> 31u);

501 
ãmpVÆ
 = 0x7FFFFFFF -ÅempVal;

504 
out
 = (
q31_t
Ë
˛ù_q63_to_q31
(((
q63_t
Ëouà* 
ãmpVÆ
) >> 30u);

508 *
d°
 = 
out
;

511  (
signBôs
 + 1u);

518 
__STATIC_INLINE
 
uöt32_t
 
¨m_ªcù_q15
(

519 
q15_t
 
ö
,

520 
q15_t
 * 
d°
,

521 
q15_t
 * 
pRecùTabÀ
)

524 
uöt32_t
 
out
 = 0, 
ãmpVÆ
 = 0;

525 
uöt32_t
 
ödex
 = 0, 
i
 = 0;

526 
uöt32_t
 
signBôs
 = 0;

528 if(
ö
 > 0)

530 
signBôs
 = 
__CLZ
(
ö
) - 17;

534 
signBôs
 = 
__CLZ
(-
ö
) - 17;

538 
ö
 = i¿<< 
signBôs
;

541 
ödex
 = 
ö
 >> 8;

542 
ödex
 = (ödex & 
INDEX_MASK
);

545 
out
 = 
pRecùTabÀ
[
ödex
];

549 
i
 = 0; i < 2; i++)

551 
ãmpVÆ
 = (
q15_t
Ë(((
q31_t
Ë
ö
 * 
out
) >> 15);

552 
ãmpVÆ
 = 0x7FFF -ÅempVal;

554 
out
 = (
q15_t
Ë(((
q31_t
Ëouà* 
ãmpVÆ
) >> 14);

558 *
d°
 = 
out
;

561  (
signBôs
 + 1);

569 #i‡
deföed
(
ARM_MATH_CM0
)

571 
__STATIC_INLINE
 
q31_t
 
__SSAT
(

572 
q31_t
 
x
,

573 
uöt32_t
 
y
)

575 
öt32_t
 
posMax
, 
√gMö
;

576 
uöt32_t
 
i
;

578 
posMax
 = 1;

579 
i
 = 0; i < (
y
 - 1); i++)

581 
posMax
 =ÖosMax * 2;

584 if(
x
 > 0)

586 
posMax
 = (posMax - 1);

588 if(
x
 > 
posMax
)

590 
x
 = 
posMax
;

595 
√gMö
 = -
posMax
;

597 if(
x
 < 
√gMö
)

599 
x
 = 
√gMö
;

602  (
x
);

614 #i‡
deföed
 (
ARM_MATH_CM3
Ë|| deföed (
ARM_MATH_CM0
)

619 
__STATIC_INLINE
 
q31_t
 
__QADD8
(

620 
q31_t
 
x
,

621 
q31_t
 
y
)

624 
q31_t
 
sum
;

625 
q7_t
 
r
, 
s
, 
t
, 
u
;

627 
r
 = (Ë
x
;

628 
s
 = (Ë
y
;

630 
r
 = 
__SSAT
((
q31_t
Ë‘ + 
s
), 8);

631 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë+ ((
y
 << 16) >> 24))), 8);

632 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë+ ((
y
 << 8) >> 24))), 8);

633 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë+ (
y
 >> 24))), 8);

635 
sum
 = (((
q31_t
Ë
u
 << 24Ë& 0xFF000000Ë| (((q31_tË
t
 << 16) & 0x00FF0000) |

636 (((
q31_t
Ë
s
 << 8Ë& 0x0000FF00Ë| (
r
 & 0x000000FF);

638  
sum
;

645 
__STATIC_INLINE
 
q31_t
 
__QSUB8
(

646 
q31_t
 
x
,

647 
q31_t
 
y
)

650 
q31_t
 
sum
;

651 
q31_t
 
r
, 
s
, 
t
, 
u
;

653 
r
 = (Ë
x
;

654 
s
 = (Ë
y
;

656 
r
 = 
__SSAT
(‘ - 
s
), 8);

657 
s
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 16Ë>> 24Ë- ((
y
 << 16) >> 24))), 8) << 8;

658 
t
 = 
__SSAT
(((
q31_t
Ë(((
x
 << 8Ë>> 24Ë- ((
y
 << 8) >> 24))), 8) << 16;

659 
u
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 24Ë- (
y
 >> 24))), 8) << 24;

661 
sum
 =

662 (
u
 & 0xFF000000Ë| (
t
 & 0x00FF0000Ë| (
s
 & 0x0000FF00Ë| (
r
 & 0x000000FF);

664  
sum
;

674 
__STATIC_INLINE
 
q31_t
 
__QADD16
(

675 
q31_t
 
x
,

676 
q31_t
 
y
)

679 
q31_t
 
sum
;

680 
q31_t
 
r
, 
s
;

682 
r
 = (Ë
x
;

683 
s
 = (Ë
y
;

685 
r
 = 
__SSAT
‘ + 
s
, 16);

686 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë+ (
y
 >> 16))), 16) << 16;

688 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

690  
sum
;

697 
__STATIC_INLINE
 
q31_t
 
__SHADD16
(

698 
q31_t
 
x
,

699 
q31_t
 
y
)

702 
q31_t
 
sum
;

703 
q31_t
 
r
, 
s
;

705 
r
 = (Ë
x
;

706 
s
 = (Ë
y
;

708 
r
 = (‘ >> 1Ë+ (
s
 >> 1));

709 
s
 = ((
q31_t
Ë((
x
 >> 17Ë+ (
y
 >> 17))) << 16;

711 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

713  
sum
;

720 
__STATIC_INLINE
 
q31_t
 
__QSUB16
(

721 
q31_t
 
x
,

722 
q31_t
 
y
)

725 
q31_t
 
sum
;

726 
q31_t
 
r
, 
s
;

728 
r
 = (Ë
x
;

729 
s
 = (Ë
y
;

731 
r
 = 
__SSAT
‘ - 
s
, 16);

732 
s
 = 
__SSAT
(((
q31_t
Ë((
x
 >> 16Ë- (
y
 >> 16))), 16) << 16;

734 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

736  
sum
;

742 
__STATIC_INLINE
 
q31_t
 
__SHSUB16
(

743 
q31_t
 
x
,

744 
q31_t
 
y
)

747 
q31_t
 
diff
;

748 
q31_t
 
r
, 
s
;

750 
r
 = (Ë
x
;

751 
s
 = (Ë
y
;

753 
r
 = (‘ >> 1Ë- (
s
 >> 1));

754 
s
 = (((
x
 >> 17Ë- (
y
 >> 17)) << 16);

756 
diff
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

758  
diff
;

764 
__STATIC_INLINE
 
q31_t
 
__QASX
(

765 
q31_t
 
x
,

766 
q31_t
 
y
)

769 
q31_t
 
sum
 = 0;

771 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë+ (Ë
y
))) << 16) +

772 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 - (Ë(
y
 >> 16)));

774  
sum
;

780 
__STATIC_INLINE
 
q31_t
 
__SHASX
(

781 
q31_t
 
x
,

782 
q31_t
 
y
)

785 
q31_t
 
sum
;

786 
q31_t
 
r
, 
s
;

788 
r
 = (Ë
x
;

789 
s
 = (Ë
y
;

791 
r
 = (‘ >> 1Ë- (
y
 >> 17));

792 
s
 = (((
x
 >> 17) + (s >> 1)) << 16);

794 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

796  
sum
;

803 
__STATIC_INLINE
 
q31_t
 
__QSAX
(

804 
q31_t
 
x
,

805 
q31_t
 
y
)

808 
q31_t
 
sum
 = 0;

810 
sum
 = ((sum + 
˛ù_q31_to_q15
((
q31_t
Ë((Ë(
x
 >> 16Ë- (Ë
y
))) << 16) +

811 
˛ù_q31_to_q15
((
q31_t
Ë((Ë
x
 + (Ë(
y
 >> 16)));

813  
sum
;

819 
__STATIC_INLINE
 
q31_t
 
__SHSAX
(

820 
q31_t
 
x
,

821 
q31_t
 
y
)

824 
q31_t
 
sum
;

825 
q31_t
 
r
, 
s
;

827 
r
 = (Ë
x
;

828 
s
 = (Ë
y
;

830 
r
 = (‘ >> 1Ë+ (
y
 >> 17));

831 
s
 = (((
x
 >> 17) - (s >> 1)) << 16);

833 
sum
 = (
s
 & 0xFFFF0000Ë| (
r
 & 0x0000FFFF);

835  
sum
;

841 
__STATIC_INLINE
 
q31_t
 
__SMUSDX
(

842 
q31_t
 
x
,

843 
q31_t
 
y
)

846  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) -

847 ((Ë(
x
 >> 16Ë* (Ë
y
)));

853 
__STATIC_INLINE
 
q31_t
 
__SMUADX
(

854 
q31_t
 
x
,

855 
q31_t
 
y
)

858  ((
q31_t
)(((Ë
x
 * (Ë(
y
 >> 16)) +

859 ((Ë(
x
 >> 16Ë* (Ë
y
)));

865 
__STATIC_INLINE
 
q31_t
 
__QADD
(

866 
q31_t
 
x
,

867 
q31_t
 
y
)

869  
˛ù_q63_to_q31
((
q63_t
Ë
x
 + 
y
);

875 
__STATIC_INLINE
 
q31_t
 
__QSUB
(

876 
q31_t
 
x
,

877 
q31_t
 
y
)

879  
˛ù_q63_to_q31
((
q63_t
Ë
x
 - 
y
);

885 
__STATIC_INLINE
 
q31_t
 
__SMLAD
(

886 
q31_t
 
x
,

887 
q31_t
 
y
,

888 
q31_t
 
sum
)

891  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

892 ((Ë
x
 * (Ë
y
));

898 
__STATIC_INLINE
 
q31_t
 
__SMLADX
(

899 
q31_t
 
x
,

900 
q31_t
 
y
,

901 
q31_t
 
sum
)

904  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

905 ((Ë
x
 * (Ë(
y
 >> 16)));

911 
__STATIC_INLINE
 
q31_t
 
__SMLSDX
(

912 
q31_t
 
x
,

913 
q31_t
 
y
,

914 
q31_t
 
sum
)

917  (
sum
 - ((Ë(
x
 >> 16Ë* (Ë(
y
)) +

918 ((Ë
x
 * (Ë(
y
 >> 16)));

924 
__STATIC_INLINE
 
q63_t
 
__SMLALD
(

925 
q31_t
 
x
,

926 
q31_t
 
y
,

927 
q63_t
 
sum
)

930  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë(
y
 >> 16)) +

931 ((Ë
x
 * (Ë
y
));

937 
__STATIC_INLINE
 
q63_t
 
__SMLALDX
(

938 
q31_t
 
x
,

939 
q31_t
 
y
,

940 
q63_t
 
sum
)

943  (
sum
 + ((Ë(
x
 >> 16Ë* (Ë
y
)) +

944 ((Ë
x
 * (Ë(
y
 >> 16));

950 
__STATIC_INLINE
 
q31_t
 
__SMUAD
(

951 
q31_t
 
x
,

952 
q31_t
 
y
)

955  (((
x
 >> 16Ë* (
y
 >> 16)) +

956 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

962 
__STATIC_INLINE
 
q31_t
 
__SMUSD
(

963 
q31_t
 
x
,

964 
q31_t
 
y
)

967  (-((
x
 >> 16Ë* (
y
 >> 16)) +

968 (((
x
 << 16Ë>> 16Ë* ((
y
 << 16) >> 16)));

982 
uöt16_t
 
numT≠s
;

983 
q7_t
 *
pSèã
;

984 
q7_t
 *
pC€ffs
;

985 } 
	t¨m_fú_ö°™˚_q7
;

992 
uöt16_t
 
numT≠s
;

993 
q15_t
 *
pSèã
;

994 
q15_t
 *
pC€ffs
;

995 } 
	t¨m_fú_ö°™˚_q15
;

1002 
uöt16_t
 
numT≠s
;

1003 
q31_t
 *
pSèã
;

1004 
q31_t
 *
pC€ffs
;

1005 } 
	t¨m_fú_ö°™˚_q31
;

1012 
uöt16_t
 
numT≠s
;

1013 
Êﬂt32_t
 *
pSèã
;

1014 
Êﬂt32_t
 *
pC€ffs
;

1015 } 
	t¨m_fú_ö°™˚_f32
;

1026 
¨m_fú_q7
(

1027 c⁄° 
¨m_fú_ö°™˚_q7
 * 
S
,

1028 
q7_t
 * 
pSrc
,

1029 
q7_t
 * 
pD°
,

1030 
uöt32_t
 
blockSize
);

1042 
¨m_fú_öô_q7
(

1043 
¨m_fú_ö°™˚_q7
 * 
S
,

1044 
uöt16_t
 
numT≠s
,

1045 
q7_t
 * 
pC€ffs
,

1046 
q7_t
 * 
pSèã
,

1047 
uöt32_t
 
blockSize
);

1058 
¨m_fú_q15
(

1059 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1060 
q15_t
 * 
pSrc
,

1061 
q15_t
 * 
pD°
,

1062 
uöt32_t
 
blockSize
);

1072 
¨m_fú_Á°_q15
(

1073 c⁄° 
¨m_fú_ö°™˚_q15
 * 
S
,

1074 
q15_t
 * 
pSrc
,

1075 
q15_t
 * 
pD°
,

1076 
uöt32_t
 
blockSize
);

1089 
¨m_°©us
 
¨m_fú_öô_q15
(

1090 
¨m_fú_ö°™˚_q15
 * 
S
,

1091 
uöt16_t
 
numT≠s
,

1092 
q15_t
 * 
pC€ffs
,

1093 
q15_t
 * 
pSèã
,

1094 
uöt32_t
 
blockSize
);

1104 
¨m_fú_q31
(

1105 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1106 
q31_t
 * 
pSrc
,

1107 
q31_t
 * 
pD°
,

1108 
uöt32_t
 
blockSize
);

1118 
¨m_fú_Á°_q31
(

1119 c⁄° 
¨m_fú_ö°™˚_q31
 * 
S
,

1120 
q31_t
 * 
pSrc
,

1121 
q31_t
 * 
pD°
,

1122 
uöt32_t
 
blockSize
);

1133 
¨m_fú_öô_q31
(

1134 
¨m_fú_ö°™˚_q31
 * 
S
,

1135 
uöt16_t
 
numT≠s
,

1136 
q31_t
 * 
pC€ffs
,

1137 
q31_t
 * 
pSèã
,

1138 
uöt32_t
 
blockSize
);

1148 
¨m_fú_f32
(

1149 c⁄° 
¨m_fú_ö°™˚_f32
 * 
S
,

1150 
Êﬂt32_t
 * 
pSrc
,

1151 
Êﬂt32_t
 * 
pD°
,

1152 
uöt32_t
 
blockSize
);

1163 
¨m_fú_öô_f32
(

1164 
¨m_fú_ö°™˚_f32
 * 
S
,

1165 
uöt16_t
 
numT≠s
,

1166 
Êﬂt32_t
 * 
pC€ffs
,

1167 
Êﬂt32_t
 * 
pSèã
,

1168 
uöt32_t
 
blockSize
);

1176 
öt8_t
 
numSèges
;

1177 
q15_t
 *
pSèã
;

1178 
q15_t
 *
pC€ffs
;

1179 
öt8_t
 
po°Shi·
;

1181 } 
	t¨m_biquad_ˇsd_df1_ö°_q15
;

1189 
uöt32_t
 
numSèges
;

1190 
q31_t
 *
pSèã
;

1191 
q31_t
 *
pC€ffs
;

1192 
uöt8_t
 
po°Shi·
;

1194 } 
	t¨m_biquad_ˇsd_df1_ö°_q31
;

1201 
uöt32_t
 
numSèges
;

1202 
Êﬂt32_t
 *
pSèã
;

1203 
Êﬂt32_t
 *
pC€ffs
;

1206 } 
	t¨m_biquad_ˇsd_df1_ö°_f32
;

1219 
¨m_biquad_ˇsˇde_df1_q15
(

1220 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1221 
q15_t
 * 
pSrc
,

1222 
q15_t
 * 
pD°
,

1223 
uöt32_t
 
blockSize
);

1235 
¨m_biquad_ˇsˇde_df1_öô_q15
(

1236 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1237 
uöt8_t
 
numSèges
,

1238 
q15_t
 * 
pC€ffs
,

1239 
q15_t
 * 
pSèã
,

1240 
öt8_t
 
po°Shi·
);

1252 
¨m_biquad_ˇsˇde_df1_Á°_q15
(

1253 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q15
 * 
S
,

1254 
q15_t
 * 
pSrc
,

1255 
q15_t
 * 
pD°
,

1256 
uöt32_t
 
blockSize
);

1268 
¨m_biquad_ˇsˇde_df1_q31
(

1269 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1270 
q31_t
 * 
pSrc
,

1271 
q31_t
 * 
pD°
,

1272 
uöt32_t
 
blockSize
);

1283 
¨m_biquad_ˇsˇde_df1_Á°_q31
(

1284 c⁄° 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1285 
q31_t
 * 
pSrc
,

1286 
q31_t
 * 
pD°
,

1287 
uöt32_t
 
blockSize
);

1299 
¨m_biquad_ˇsˇde_df1_öô_q31
(

1300 
¨m_biquad_ˇsd_df1_ö°_q31
 * 
S
,

1301 
uöt8_t
 
numSèges
,

1302 
q31_t
 * 
pC€ffs
,

1303 
q31_t
 * 
pSèã
,

1304 
öt8_t
 
po°Shi·
);

1315 
¨m_biquad_ˇsˇde_df1_f32
(

1316 c⁄° 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1317 
Êﬂt32_t
 * 
pSrc
,

1318 
Êﬂt32_t
 * 
pD°
,

1319 
uöt32_t
 
blockSize
);

1330 
¨m_biquad_ˇsˇde_df1_öô_f32
(

1331 
¨m_biquad_ˇsd_df1_ö°_f32
 * 
S
,

1332 
uöt8_t
 
numSèges
,

1333 
Êﬂt32_t
 * 
pC€ffs
,

1334 
Êﬂt32_t
 * 
pSèã
);

1343 
uöt16_t
 
numRows
;

1344 
uöt16_t
 
numCﬁs
;

1345 
Êﬂt32_t
 *
pD©a
;

1346 } 
	t¨m_m©rix_ö°™˚_f32
;

1354 
uöt16_t
 
numRows
;

1355 
uöt16_t
 
numCﬁs
;

1356 
q15_t
 *
pD©a
;

1358 } 
	t¨m_m©rix_ö°™˚_q15
;

1366 
uöt16_t
 
numRows
;

1367 
uöt16_t
 
numCﬁs
;

1368 
q31_t
 *
pD©a
;

1370 } 
	t¨m_m©rix_ö°™˚_q31
;

1383 
¨m_°©us
 
¨m_m©_add_f32
(

1384 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1385 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1386 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1397 
¨m_°©us
 
¨m_m©_add_q15
(

1398 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1399 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1400 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1411 
¨m_°©us
 
¨m_m©_add_q31
(

1412 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1413 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1414 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1425 
¨m_°©us
 
¨m_m©_å™s_f32
(

1426 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1427 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1438 
¨m_°©us
 
¨m_m©_å™s_q15
(

1439 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1440 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1450 
¨m_°©us
 
¨m_m©_å™s_q31
(

1451 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1452 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1464 
¨m_°©us
 
¨m_m©_mu…_f32
(

1465 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1466 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1467 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1478 
¨m_°©us
 
¨m_m©_mu…_q15
(

1479 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1480 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1481 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1482 
q15_t
 * 
pSèã
);

1494 
¨m_°©us
 
¨m_m©_mu…_Á°_q15
(

1495 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1496 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1497 
¨m_m©rix_ö°™˚_q15
 * 
pD°
,

1498 
q15_t
 * 
pSèã
);

1509 
¨m_°©us
 
¨m_m©_mu…_q31
(

1510 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1511 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1512 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1523 
¨m_°©us
 
¨m_m©_mu…_Á°_q31
(

1524 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1525 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1526 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1538 
¨m_°©us
 
¨m_m©_sub_f32
(

1539 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcA
,

1540 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrcB
,

1541 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1552 
¨m_°©us
 
¨m_m©_sub_q15
(

1553 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcA
,

1554 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrcB
,

1555 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1566 
¨m_°©us
 
¨m_m©_sub_q31
(

1567 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcA
,

1568 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrcB
,

1569 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1580 
¨m_°©us
 
¨m_m©_sˇÀ_f32
(

1581 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
pSrc
,

1582 
Êﬂt32_t
 
sˇÀ
,

1583 
¨m_m©rix_ö°™˚_f32
 * 
pD°
);

1595 
¨m_°©us
 
¨m_m©_sˇÀ_q15
(

1596 c⁄° 
¨m_m©rix_ö°™˚_q15
 * 
pSrc
,

1597 
q15_t
 
sˇÀFø˘
,

1598 
öt32_t
 
shi·
,

1599 
¨m_m©rix_ö°™˚_q15
 * 
pD°
);

1611 
¨m_°©us
 
¨m_m©_sˇÀ_q31
(

1612 c⁄° 
¨m_m©rix_ö°™˚_q31
 * 
pSrc
,

1613 
q31_t
 
sˇÀFø˘
,

1614 
öt32_t
 
shi·
,

1615 
¨m_m©rix_ö°™˚_q31
 * 
pD°
);

1627 
¨m_m©_öô_q31
(

1628 
¨m_m©rix_ö°™˚_q31
 * 
S
,

1629 
uöt16_t
 
nRows
,

1630 
uöt16_t
 
nCﬁumns
,

1631 
q31_t
 *
pD©a
);

1642 
¨m_m©_öô_q15
(

1643 
¨m_m©rix_ö°™˚_q15
 * 
S
,

1644 
uöt16_t
 
nRows
,

1645 
uöt16_t
 
nCﬁumns
,

1646 
q15_t
 *
pD©a
);

1657 
¨m_m©_öô_f32
(

1658 
¨m_m©rix_ö°™˚_f32
 * 
S
,

1659 
uöt16_t
 
nRows
,

1660 
uöt16_t
 
nCﬁumns
,

1661 
Êﬂt32_t
 *
pD©a
);

1670 
q15_t
 
A0
;

1671 #ifde‡
ARM_MATH_CM0


1672 
q15_t
 
A1
;

1673 
q15_t
 
A2
;

1675 
q31_t
 
A1
;

1677 
q15_t
 
°©e
[3];

1678 
q15_t
 
Kp
;

1679 
q15_t
 
Ki
;

1680 
q15_t
 
Kd
;

1681 } 
	t¨m_pid_ö°™˚_q15
;

1688 
q31_t
 
A0
;

1689 
q31_t
 
A1
;

1690 
q31_t
 
A2
;

1691 
q31_t
 
°©e
[3];

1692 
q31_t
 
Kp
;

1693 
q31_t
 
Ki
;

1694 
q31_t
 
Kd
;

1696 } 
	t¨m_pid_ö°™˚_q31
;

1703 
Êﬂt32_t
 
A0
;

1704 
Êﬂt32_t
 
A1
;

1705 
Êﬂt32_t
 
A2
;

1706 
Êﬂt32_t
 
°©e
[3];

1707 
Êﬂt32_t
 
Kp
;

1708 
Êﬂt32_t
 
Ki
;

1709 
Êﬂt32_t
 
Kd
;

1710 } 
	t¨m_pid_ö°™˚_f32
;

1720 
¨m_pid_öô_f32
(

1721 
¨m_pid_ö°™˚_f32
 * 
S
,

1722 
öt32_t
 
ª£tSèãFœg
);

1729 
¨m_pid_ª£t_f32
(

1730 
¨m_pid_ö°™˚_f32
 * 
S
);

1739 
¨m_pid_öô_q31
(

1740 
¨m_pid_ö°™˚_q31
 * 
S
,

1741 
öt32_t
 
ª£tSèãFœg
);

1750 
¨m_pid_ª£t_q31
(

1751 
¨m_pid_ö°™˚_q31
 * 
S
);

1759 
¨m_pid_öô_q15
(

1760 
¨m_pid_ö°™˚_q15
 * 
S
,

1761 
öt32_t
 
ª£tSèãFœg
);

1768 
¨m_pid_ª£t_q15
(

1769 
¨m_pid_ö°™˚_q15
 * 
S
);

1777 
uöt32_t
 
nVÆues
;

1778 
Êﬂt32_t
 
x1
;

1779 
Êﬂt32_t
 
xS∑cög
;

1780 
Êﬂt32_t
 *
pYD©a
;

1781 } 
	t¨m_löór_öãΩ_ö°™˚_f32
;

1789 
uöt16_t
 
numRows
;

1790 
uöt16_t
 
numCﬁs
;

1791 
Êﬂt32_t
 *
pD©a
;

1792 } 
	t¨m_bûöór_öãΩ_ö°™˚_f32
;

1800 
uöt16_t
 
numRows
;

1801 
uöt16_t
 
numCﬁs
;

1802 
q31_t
 *
pD©a
;

1803 } 
	t¨m_bûöór_öãΩ_ö°™˚_q31
;

1811 
uöt16_t
 
numRows
;

1812 
uöt16_t
 
numCﬁs
;

1813 
q15_t
 *
pD©a
;

1814 } 
	t¨m_bûöór_öãΩ_ö°™˚_q15
;

1822 
uöt16_t
 
numRows
;

1823 
uöt16_t
 
numCﬁs
;

1824 
q7_t
 *
pD©a
;

1825 } 
	t¨m_bûöór_öãΩ_ö°™˚_q7
;

1837 
¨m_mu…_q7
(

1838 
q7_t
 * 
pSrcA
,

1839 
q7_t
 * 
pSrcB
,

1840 
q7_t
 * 
pD°
,

1841 
uöt32_t
 
blockSize
);

1852 
¨m_mu…_q15
(

1853 
q15_t
 * 
pSrcA
,

1854 
q15_t
 * 
pSrcB
,

1855 
q15_t
 * 
pD°
,

1856 
uöt32_t
 
blockSize
);

1867 
¨m_mu…_q31
(

1868 
q31_t
 * 
pSrcA
,

1869 
q31_t
 * 
pSrcB
,

1870 
q31_t
 * 
pD°
,

1871 
uöt32_t
 
blockSize
);

1882 
¨m_mu…_f32
(

1883 
Êﬂt32_t
 * 
pSrcA
,

1884 
Êﬂt32_t
 * 
pSrcB
,

1885 
Êﬂt32_t
 * 
pD°
,

1886 
uöt32_t
 
blockSize
);

1895 
uöt16_t
 
f·Lí
;

1896 
uöt8_t
 
if·Fœg
;

1897 
uöt8_t
 
bôRevî£Fœg
;

1898 
q15_t
 *
pTwiddÀ
;

1899 
uöt16_t
 *
pBôRevTabÀ
;

1900 
uöt16_t
 
twidC€fModifõr
;

1901 
uöt16_t
 
bôRevFa˘‹
;

1902 } 
	t¨m_cf·_ødix4_ö°™˚_q15
;

1910 
uöt16_t
 
f·Lí
;

1911 
uöt8_t
 
if·Fœg
;

1912 
uöt8_t
 
bôRevî£Fœg
;

1913 
q31_t
 *
pTwiddÀ
;

1914 
uöt16_t
 *
pBôRevTabÀ
;

1915 
uöt16_t
 
twidC€fModifõr
;

1916 
uöt16_t
 
bôRevFa˘‹
;

1917 } 
	t¨m_cf·_ødix4_ö°™˚_q31
;

1925 
uöt16_t
 
f·Lí
;

1926 
uöt8_t
 
if·Fœg
;

1927 
uöt8_t
 
bôRevî£Fœg
;

1928 
Êﬂt32_t
 *
pTwiddÀ
;

1929 
uöt16_t
 *
pBôRevTabÀ
;

1930 
uöt16_t
 
twidC€fModifõr
;

1931 
uöt16_t
 
bôRevFa˘‹
;

1932 
Êﬂt32_t
 
⁄ebyf·Lí
;

1933 } 
	t¨m_cf·_ødix4_ö°™˚_f32
;

1942 
¨m_cf·_ødix4_q15
(

1943 c⁄° 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1944 
q15_t
 * 
pSrc
);

1955 
¨m_°©us
 
¨m_cf·_ødix4_öô_q15
(

1956 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S
,

1957 
uöt16_t
 
f·Lí
,

1958 
uöt8_t
 
if·Fœg
,

1959 
uöt8_t
 
bôRevî£Fœg
);

1968 
¨m_cf·_ødix4_q31
(

1969 c⁄° 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1970 
q31_t
 * 
pSrc
);

1981 
¨m_°©us
 
¨m_cf·_ødix4_öô_q31
(

1982 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S
,

1983 
uöt16_t
 
f·Lí
,

1984 
uöt8_t
 
if·Fœg
,

1985 
uöt8_t
 
bôRevî£Fœg
);

1994 
¨m_cf·_ødix4_f32
(

1995 c⁄° 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

1996 
Êﬂt32_t
 * 
pSrc
);

2007 
¨m_°©us
 
¨m_cf·_ødix4_öô_f32
(

2008 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S
,

2009 
uöt16_t
 
f·Lí
,

2010 
uöt8_t
 
if·Fœg
,

2011 
uöt8_t
 
bôRevî£Fœg
);

2028 
¨m_ødix4_buâîÊy_f32
(

2029 
Êﬂt32_t
 * 
pSrc
,

2030 
uöt16_t
 
f·Lí
,

2031 
Êﬂt32_t
 * 
pC€f
,

2032 
uöt16_t
 
twidC€fModifõr
);

2044 
¨m_ødix4_buâîÊy_övî£_f32
(

2045 
Êﬂt32_t
 * 
pSrc
,

2046 
uöt16_t
 
f·Lí
,

2047 
Êﬂt32_t
 * 
pC€f
,

2048 
uöt16_t
 
twidC€fModifõr
,

2049 
Êﬂt32_t
 
⁄ebyf·Lí
);

2060 
¨m_bôªvîßl_f32
(

2061 
Êﬂt32_t
 *
pSrc
,

2062 
uöt16_t
 
f·Size
,

2063 
uöt16_t
 
bôRevFa˘‹
,

2064 
uöt16_t
 *
pBôRevTab
);

2075 
¨m_ødix4_buâîÊy_q31
(

2076 
q31_t
 *
pSrc
,

2077 
uöt32_t
 
f·Lí
,

2078 
q31_t
 *
pC€f
,

2079 
uöt32_t
 
twidC€fModifõr
);

2090 
¨m_ødix4_buâîÊy_övî£_q31
(

2091 
q31_t
 * 
pSrc
,

2092 
uöt32_t
 
f·Lí
,

2093 
q31_t
 * 
pC€f
,

2094 
uöt32_t
 
twidC€fModifõr
);

2105 
¨m_bôªvîßl_q31
(

2106 
q31_t
 * 
pSrc
,

2107 
uöt32_t
 
f·Lí
,

2108 
uöt16_t
 
bôRevFa˘‹
,

2109 
uöt16_t
 *
pBôRevTab
);

2120 
¨m_ødix4_buâîÊy_q15
(

2121 
q15_t
 *
pSrc16
,

2122 
uöt32_t
 
f·Lí
,

2123 
q15_t
 *
pC€f16
,

2124 
uöt32_t
 
twidC€fModifõr
);

2135 
¨m_ødix4_buâîÊy_övî£_q15
(

2136 
q15_t
 *
pSrc16
,

2137 
uöt32_t
 
f·Lí
,

2138 
q15_t
 *
pC€f16
,

2139 
uöt32_t
 
twidC€fModifõr
);

2150 
¨m_bôªvîßl_q15
(

2151 
q15_t
 * 
pSrc
,

2152 
uöt32_t
 
f·Lí
,

2153 
uöt16_t
 
bôRevFa˘‹
,

2154 
uöt16_t
 *
pBôRevTab
);

2162 
uöt32_t
 
f·LíRól
;

2163 
uöt32_t
 
f·LíBy2
;

2164 
uöt8_t
 
if·FœgR
;

2165 
uöt8_t
 
bôRevî£FœgR
;

2166 
uöt32_t
 
twidC€fRModifõr
;

2167 
q15_t
 *
pTwiddÀARól
;

2168 
q15_t
 *
pTwiddÀBRól
;

2169 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2170 } 
	t¨m_rf·_ö°™˚_q15
;

2178 
uöt32_t
 
f·LíRól
;

2179 
uöt32_t
 
f·LíBy2
;

2180 
uöt8_t
 
if·FœgR
;

2181 
uöt8_t
 
bôRevî£FœgR
;

2182 
uöt32_t
 
twidC€fRModifõr
;

2183 
q31_t
 *
pTwiddÀARól
;

2184 
q31_t
 *
pTwiddÀBRól
;

2185 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2186 } 
	t¨m_rf·_ö°™˚_q31
;

2194 
uöt32_t
 
f·LíRól
;

2195 
uöt16_t
 
f·LíBy2
;

2196 
uöt8_t
 
if·FœgR
;

2197 
uöt8_t
 
bôRevî£FœgR
;

2198 
uöt32_t
 
twidC€fRModifõr
;

2199 
Êﬂt32_t
 *
pTwiddÀARól
;

2200 
Êﬂt32_t
 *
pTwiddÀBRól
;

2201 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2202 } 
	t¨m_rf·_ö°™˚_f32
;

2212 
¨m_rf·_q15
(

2213 c⁄° 
¨m_rf·_ö°™˚_q15
 * 
S
,

2214 
q15_t
 * 
pSrc
,

2215 
q15_t
 * 
pD°
);

2227 
¨m_°©us
 
¨m_rf·_öô_q15
(

2228 
¨m_rf·_ö°™˚_q15
 * 
S
,

2229 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2230 
uöt32_t
 
f·LíRól
,

2231 
uöt32_t
 
if·FœgR
,

2232 
uöt32_t
 
bôRevî£Fœg
);

2242 
¨m_rf·_q31
(

2243 c⁄° 
¨m_rf·_ö°™˚_q31
 * 
S
,

2244 
q31_t
 * 
pSrc
,

2245 
q31_t
 * 
pD°
);

2257 
¨m_°©us
 
¨m_rf·_öô_q31
(

2258 
¨m_rf·_ö°™˚_q31
 * 
S
,

2259 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2260 
uöt32_t
 
f·LíRól
,

2261 
uöt32_t
 
if·FœgR
,

2262 
uöt32_t
 
bôRevî£Fœg
);

2274 
¨m_°©us
 
¨m_rf·_öô_f32
(

2275 
¨m_rf·_ö°™˚_f32
 * 
S
,

2276 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2277 
uöt32_t
 
f·LíRól
,

2278 
uöt32_t
 
if·FœgR
,

2279 
uöt32_t
 
bôRevî£Fœg
);

2289 
¨m_rf·_f32
(

2290 c⁄° 
¨m_rf·_ö°™˚_f32
 * 
S
,

2291 
Êﬂt32_t
 * 
pSrc
,

2292 
Êﬂt32_t
 * 
pD°
);

2300 
uöt16_t
 
N
;

2301 
uöt16_t
 
Nby2
;

2302 
Êﬂt32_t
 
n‹mÆize
;

2303 
Êﬂt32_t
 *
pTwiddÀ
;

2304 
Êﬂt32_t
 *
pCosFa˘‹
;

2305 
¨m_rf·_ö°™˚_f32
 *
pRf·
;

2306 
¨m_cf·_ødix4_ö°™˚_f32
 *
pCf·
;

2307 } 
	t¨m_d˘4_ö°™˚_f32
;

2320 
¨m_°©us
 
¨m_d˘4_öô_f32
(

2321 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2322 
¨m_rf·_ö°™˚_f32
 * 
S_RFFT
,

2323 
¨m_cf·_ødix4_ö°™˚_f32
 * 
S_CFFT
,

2324 
uöt16_t
 
N
,

2325 
uöt16_t
 
Nby2
,

2326 
Êﬂt32_t
 
n‹mÆize
);

2336 
¨m_d˘4_f32
(

2337 c⁄° 
¨m_d˘4_ö°™˚_f32
 * 
S
,

2338 
Êﬂt32_t
 * 
pSèã
,

2339 
Êﬂt32_t
 * 
pI∆öeBuf„r
);

2347 
uöt16_t
 
N
;

2348 
uöt16_t
 
Nby2
;

2349 
q31_t
 
n‹mÆize
;

2350 
q31_t
 *
pTwiddÀ
;

2351 
q31_t
 *
pCosFa˘‹
;

2352 
¨m_rf·_ö°™˚_q31
 *
pRf·
;

2353 
¨m_cf·_ødix4_ö°™˚_q31
 *
pCf·
;

2354 } 
	t¨m_d˘4_ö°™˚_q31
;

2367 
¨m_°©us
 
¨m_d˘4_öô_q31
(

2368 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2369 
¨m_rf·_ö°™˚_q31
 * 
S_RFFT
,

2370 
¨m_cf·_ødix4_ö°™˚_q31
 * 
S_CFFT
,

2371 
uöt16_t
 
N
,

2372 
uöt16_t
 
Nby2
,

2373 
q31_t
 
n‹mÆize
);

2383 
¨m_d˘4_q31
(

2384 c⁄° 
¨m_d˘4_ö°™˚_q31
 * 
S
,

2385 
q31_t
 * 
pSèã
,

2386 
q31_t
 * 
pI∆öeBuf„r
);

2394 
uöt16_t
 
N
;

2395 
uöt16_t
 
Nby2
;

2396 
q15_t
 
n‹mÆize
;

2397 
q15_t
 *
pTwiddÀ
;

2398 
q15_t
 *
pCosFa˘‹
;

2399 
¨m_rf·_ö°™˚_q15
 *
pRf·
;

2400 
¨m_cf·_ødix4_ö°™˚_q15
 *
pCf·
;

2401 } 
	t¨m_d˘4_ö°™˚_q15
;

2414 
¨m_°©us
 
¨m_d˘4_öô_q15
(

2415 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2416 
¨m_rf·_ö°™˚_q15
 * 
S_RFFT
,

2417 
¨m_cf·_ødix4_ö°™˚_q15
 * 
S_CFFT
,

2418 
uöt16_t
 
N
,

2419 
uöt16_t
 
Nby2
,

2420 
q15_t
 
n‹mÆize
);

2430 
¨m_d˘4_q15
(

2431 c⁄° 
¨m_d˘4_ö°™˚_q15
 * 
S
,

2432 
q15_t
 * 
pSèã
,

2433 
q15_t
 * 
pI∆öeBuf„r
);

2444 
¨m_add_f32
(

2445 
Êﬂt32_t
 * 
pSrcA
,

2446 
Êﬂt32_t
 * 
pSrcB
,

2447 
Êﬂt32_t
 * 
pD°
,

2448 
uöt32_t
 
blockSize
);

2459 
¨m_add_q7
(

2460 
q7_t
 * 
pSrcA
,

2461 
q7_t
 * 
pSrcB
,

2462 
q7_t
 * 
pD°
,

2463 
uöt32_t
 
blockSize
);

2474 
¨m_add_q15
(

2475 
q15_t
 * 
pSrcA
,

2476 
q15_t
 * 
pSrcB
,

2477 
q15_t
 * 
pD°
,

2478 
uöt32_t
 
blockSize
);

2489 
¨m_add_q31
(

2490 
q31_t
 * 
pSrcA
,

2491 
q31_t
 * 
pSrcB
,

2492 
q31_t
 * 
pD°
,

2493 
uöt32_t
 
blockSize
);

2504 
¨m_sub_f32
(

2505 
Êﬂt32_t
 * 
pSrcA
,

2506 
Êﬂt32_t
 * 
pSrcB
,

2507 
Êﬂt32_t
 * 
pD°
,

2508 
uöt32_t
 
blockSize
);

2519 
¨m_sub_q7
(

2520 
q7_t
 * 
pSrcA
,

2521 
q7_t
 * 
pSrcB
,

2522 
q7_t
 * 
pD°
,

2523 
uöt32_t
 
blockSize
);

2534 
¨m_sub_q15
(

2535 
q15_t
 * 
pSrcA
,

2536 
q15_t
 * 
pSrcB
,

2537 
q15_t
 * 
pD°
,

2538 
uöt32_t
 
blockSize
);

2549 
¨m_sub_q31
(

2550 
q31_t
 * 
pSrcA
,

2551 
q31_t
 * 
pSrcB
,

2552 
q31_t
 * 
pD°
,

2553 
uöt32_t
 
blockSize
);

2564 
¨m_sˇÀ_f32
(

2565 
Êﬂt32_t
 * 
pSrc
,

2566 
Êﬂt32_t
 
sˇÀ
,

2567 
Êﬂt32_t
 * 
pD°
,

2568 
uöt32_t
 
blockSize
);

2580 
¨m_sˇÀ_q7
(

2581 
q7_t
 * 
pSrc
,

2582 
q7_t
 
sˇÀFø˘
,

2583 
öt8_t
 
shi·
,

2584 
q7_t
 * 
pD°
,

2585 
uöt32_t
 
blockSize
);

2597 
¨m_sˇÀ_q15
(

2598 
q15_t
 * 
pSrc
,

2599 
q15_t
 
sˇÀFø˘
,

2600 
öt8_t
 
shi·
,

2601 
q15_t
 * 
pD°
,

2602 
uöt32_t
 
blockSize
);

2614 
¨m_sˇÀ_q31
(

2615 
q31_t
 * 
pSrc
,

2616 
q31_t
 
sˇÀFø˘
,

2617 
öt8_t
 
shi·
,

2618 
q31_t
 * 
pD°
,

2619 
uöt32_t
 
blockSize
);

2629 
¨m_abs_q7
(

2630 
q7_t
 * 
pSrc
,

2631 
q7_t
 * 
pD°
,

2632 
uöt32_t
 
blockSize
);

2642 
¨m_abs_f32
(

2643 
Êﬂt32_t
 * 
pSrc
,

2644 
Êﬂt32_t
 * 
pD°
,

2645 
uöt32_t
 
blockSize
);

2655 
¨m_abs_q15
(

2656 
q15_t
 * 
pSrc
,

2657 
q15_t
 * 
pD°
,

2658 
uöt32_t
 
blockSize
);

2668 
¨m_abs_q31
(

2669 
q31_t
 * 
pSrc
,

2670 
q31_t
 * 
pD°
,

2671 
uöt32_t
 
blockSize
);

2682 
¨m_dŸ_¥od_f32
(

2683 
Êﬂt32_t
 * 
pSrcA
,

2684 
Êﬂt32_t
 * 
pSrcB
,

2685 
uöt32_t
 
blockSize
,

2686 
Êﬂt32_t
 * 
ªsu…
);

2697 
¨m_dŸ_¥od_q7
(

2698 
q7_t
 * 
pSrcA
,

2699 
q7_t
 * 
pSrcB
,

2700 
uöt32_t
 
blockSize
,

2701 
q31_t
 * 
ªsu…
);

2712 
¨m_dŸ_¥od_q15
(

2713 
q15_t
 * 
pSrcA
,

2714 
q15_t
 * 
pSrcB
,

2715 
uöt32_t
 
blockSize
,

2716 
q63_t
 * 
ªsu…
);

2727 
¨m_dŸ_¥od_q31
(

2728 
q31_t
 * 
pSrcA
,

2729 
q31_t
 * 
pSrcB
,

2730 
uöt32_t
 
blockSize
,

2731 
q63_t
 * 
ªsu…
);

2742 
¨m_shi·_q7
(

2743 
q7_t
 * 
pSrc
,

2744 
öt8_t
 
shi·Bôs
,

2745 
q7_t
 * 
pD°
,

2746 
uöt32_t
 
blockSize
);

2757 
¨m_shi·_q15
(

2758 
q15_t
 * 
pSrc
,

2759 
öt8_t
 
shi·Bôs
,

2760 
q15_t
 * 
pD°
,

2761 
uöt32_t
 
blockSize
);

2772 
¨m_shi·_q31
(

2773 
q31_t
 * 
pSrc
,

2774 
öt8_t
 
shi·Bôs
,

2775 
q31_t
 * 
pD°
,

2776 
uöt32_t
 
blockSize
);

2787 
¨m_off£t_f32
(

2788 
Êﬂt32_t
 * 
pSrc
,

2789 
Êﬂt32_t
 
off£t
,

2790 
Êﬂt32_t
 * 
pD°
,

2791 
uöt32_t
 
blockSize
);

2802 
¨m_off£t_q7
(

2803 
q7_t
 * 
pSrc
,

2804 
q7_t
 
off£t
,

2805 
q7_t
 * 
pD°
,

2806 
uöt32_t
 
blockSize
);

2817 
¨m_off£t_q15
(

2818 
q15_t
 * 
pSrc
,

2819 
q15_t
 
off£t
,

2820 
q15_t
 * 
pD°
,

2821 
uöt32_t
 
blockSize
);

2832 
¨m_off£t_q31
(

2833 
q31_t
 * 
pSrc
,

2834 
q31_t
 
off£t
,

2835 
q31_t
 * 
pD°
,

2836 
uöt32_t
 
blockSize
);

2846 
¨m_√g©e_f32
(

2847 
Êﬂt32_t
 * 
pSrc
,

2848 
Êﬂt32_t
 * 
pD°
,

2849 
uöt32_t
 
blockSize
);

2859 
¨m_√g©e_q7
(

2860 
q7_t
 * 
pSrc
,

2861 
q7_t
 * 
pD°
,

2862 
uöt32_t
 
blockSize
);

2872 
¨m_√g©e_q15
(

2873 
q15_t
 * 
pSrc
,

2874 
q15_t
 * 
pD°
,

2875 
uöt32_t
 
blockSize
);

2885 
¨m_√g©e_q31
(

2886 
q31_t
 * 
pSrc
,

2887 
q31_t
 * 
pD°
,

2888 
uöt32_t
 
blockSize
);

2896 
¨m_c›y_f32
(

2897 
Êﬂt32_t
 * 
pSrc
,

2898 
Êﬂt32_t
 * 
pD°
,

2899 
uöt32_t
 
blockSize
);

2908 
¨m_c›y_q7
(

2909 
q7_t
 * 
pSrc
,

2910 
q7_t
 * 
pD°
,

2911 
uöt32_t
 
blockSize
);

2920 
¨m_c›y_q15
(

2921 
q15_t
 * 
pSrc
,

2922 
q15_t
 * 
pD°
,

2923 
uöt32_t
 
blockSize
);

2932 
¨m_c›y_q31
(

2933 
q31_t
 * 
pSrc
,

2934 
q31_t
 * 
pD°
,

2935 
uöt32_t
 
blockSize
);

2943 
¨m_fûl_f32
(

2944 
Êﬂt32_t
 
vÆue
,

2945 
Êﬂt32_t
 * 
pD°
,

2946 
uöt32_t
 
blockSize
);

2955 
¨m_fûl_q7
(

2956 
q7_t
 
vÆue
,

2957 
q7_t
 * 
pD°
,

2958 
uöt32_t
 
blockSize
);

2967 
¨m_fûl_q15
(

2968 
q15_t
 
vÆue
,

2969 
q15_t
 * 
pD°
,

2970 
uöt32_t
 
blockSize
);

2979 
¨m_fûl_q31
(

2980 
q31_t
 
vÆue
,

2981 
q31_t
 * 
pD°
,

2982 
uöt32_t
 
blockSize
);

2994 
¨m_c⁄v_f32
(

2995 
Êﬂt32_t
 * 
pSrcA
,

2996 
uöt32_t
 
§cALí
,

2997 
Êﬂt32_t
 * 
pSrcB
,

2998 
uöt32_t
 
§cBLí
,

2999 
Êﬂt32_t
 * 
pD°
);

3011 
¨m_c⁄v_q15
(

3012 
q15_t
 * 
pSrcA
,

3013 
uöt32_t
 
§cALí
,

3014 
q15_t
 * 
pSrcB
,

3015 
uöt32_t
 
§cBLí
,

3016 
q15_t
 * 
pD°
);

3028 
¨m_c⁄v_Á°_q15
(

3029 
q15_t
 * 
pSrcA
,

3030 
uöt32_t
 
§cALí
,

3031 
q15_t
 * 
pSrcB
,

3032 
uöt32_t
 
§cBLí
,

3033 
q15_t
 * 
pD°
);

3045 
¨m_c⁄v_q31
(

3046 
q31_t
 * 
pSrcA
,

3047 
uöt32_t
 
§cALí
,

3048 
q31_t
 * 
pSrcB
,

3049 
uöt32_t
 
§cBLí
,

3050 
q31_t
 * 
pD°
);

3062 
¨m_c⁄v_Á°_q31
(

3063 
q31_t
 * 
pSrcA
,

3064 
uöt32_t
 
§cALí
,

3065 
q31_t
 * 
pSrcB
,

3066 
uöt32_t
 
§cBLí
,

3067 
q31_t
 * 
pD°
);

3079 
¨m_c⁄v_q7
(

3080 
q7_t
 * 
pSrcA
,

3081 
uöt32_t
 
§cALí
,

3082 
q7_t
 * 
pSrcB
,

3083 
uöt32_t
 
§cBLí
,

3084 
q7_t
 * 
pD°
);

3098 
¨m_°©us
 
¨m_c⁄v_∑πül_f32
(

3099 
Êﬂt32_t
 * 
pSrcA
,

3100 
uöt32_t
 
§cALí
,

3101 
Êﬂt32_t
 * 
pSrcB
,

3102 
uöt32_t
 
§cBLí
,

3103 
Êﬂt32_t
 * 
pD°
,

3104 
uöt32_t
 
fú°Index
,

3105 
uöt32_t
 
numPoöts
);

3119 
¨m_°©us
 
¨m_c⁄v_∑πül_q15
(

3120 
q15_t
 * 
pSrcA
,

3121 
uöt32_t
 
§cALí
,

3122 
q15_t
 * 
pSrcB
,

3123 
uöt32_t
 
§cBLí
,

3124 
q15_t
 * 
pD°
,

3125 
uöt32_t
 
fú°Index
,

3126 
uöt32_t
 
numPoöts
);

3140 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q15
(

3141 
q15_t
 * 
pSrcA
,

3142 
uöt32_t
 
§cALí
,

3143 
q15_t
 * 
pSrcB
,

3144 
uöt32_t
 
§cBLí
,

3145 
q15_t
 * 
pD°
,

3146 
uöt32_t
 
fú°Index
,

3147 
uöt32_t
 
numPoöts
);

3161 
¨m_°©us
 
¨m_c⁄v_∑πül_q31
(

3162 
q31_t
 * 
pSrcA
,

3163 
uöt32_t
 
§cALí
,

3164 
q31_t
 * 
pSrcB
,

3165 
uöt32_t
 
§cBLí
,

3166 
q31_t
 * 
pD°
,

3167 
uöt32_t
 
fú°Index
,

3168 
uöt32_t
 
numPoöts
);

3183 
¨m_°©us
 
¨m_c⁄v_∑πül_Á°_q31
(

3184 
q31_t
 * 
pSrcA
,

3185 
uöt32_t
 
§cALí
,

3186 
q31_t
 * 
pSrcB
,

3187 
uöt32_t
 
§cBLí
,

3188 
q31_t
 * 
pD°
,

3189 
uöt32_t
 
fú°Index
,

3190 
uöt32_t
 
numPoöts
);

3204 
¨m_°©us
 
¨m_c⁄v_∑πül_q7
(

3205 
q7_t
 * 
pSrcA
,

3206 
uöt32_t
 
§cALí
,

3207 
q7_t
 * 
pSrcB
,

3208 
uöt32_t
 
§cBLí
,

3209 
q7_t
 * 
pD°
,

3210 
uöt32_t
 
fú°Index
,

3211 
uöt32_t
 
numPoöts
);

3220 
uöt8_t
 
M
;

3221 
uöt16_t
 
numT≠s
;

3222 
q15_t
 *
pC€ffs
;

3223 
q15_t
 *
pSèã
;

3224 } 
	t¨m_fú_decim©e_ö°™˚_q15
;

3232 
uöt8_t
 
M
;

3233 
uöt16_t
 
numT≠s
;

3234 
q31_t
 *
pC€ffs
;

3235 
q31_t
 *
pSèã
;

3237 } 
	t¨m_fú_decim©e_ö°™˚_q31
;

3245 
uöt8_t
 
M
;

3246 
uöt16_t
 
numT≠s
;

3247 
Êﬂt32_t
 *
pC€ffs
;

3248 
Êﬂt32_t
 *
pSèã
;

3250 } 
	t¨m_fú_decim©e_ö°™˚_f32
;

3263 
¨m_fú_decim©e_f32
(

3264 c⁄° 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3265 
Êﬂt32_t
 * 
pSrc
,

3266 
Êﬂt32_t
 * 
pD°
,

3267 
uöt32_t
 
blockSize
);

3282 
¨m_°©us
 
¨m_fú_decim©e_öô_f32
(

3283 
¨m_fú_decim©e_ö°™˚_f32
 * 
S
,

3284 
uöt16_t
 
numT≠s
,

3285 
uöt8_t
 
M
,

3286 
Êﬂt32_t
 * 
pC€ffs
,

3287 
Êﬂt32_t
 * 
pSèã
,

3288 
uöt32_t
 
blockSize
);

3299 
¨m_fú_decim©e_q15
(

3300 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3301 
q15_t
 * 
pSrc
,

3302 
q15_t
 * 
pD°
,

3303 
uöt32_t
 
blockSize
);

3314 
¨m_fú_decim©e_Á°_q15
(

3315 c⁄° 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3316 
q15_t
 * 
pSrc
,

3317 
q15_t
 * 
pD°
,

3318 
uöt32_t
 
blockSize
);

3334 
¨m_°©us
 
¨m_fú_decim©e_öô_q15
(

3335 
¨m_fú_decim©e_ö°™˚_q15
 * 
S
,

3336 
uöt16_t
 
numT≠s
,

3337 
uöt8_t
 
M
,

3338 
q15_t
 * 
pC€ffs
,

3339 
q15_t
 * 
pSèã
,

3340 
uöt32_t
 
blockSize
);

3351 
¨m_fú_decim©e_q31
(

3352 c⁄° 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3353 
q31_t
 * 
pSrc
,

3354 
q31_t
 * 
pD°
,

3355 
uöt32_t
 
blockSize
);

3366 
¨m_fú_decim©e_Á°_q31
(

3367 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3368 
q31_t
 * 
pSrc
,

3369 
q31_t
 * 
pD°
,

3370 
uöt32_t
 
blockSize
);

3385 
¨m_°©us
 
¨m_fú_decim©e_öô_q31
(

3386 
¨m_fú_decim©e_ö°™˚_q31
 * 
S
,

3387 
uöt16_t
 
numT≠s
,

3388 
uöt8_t
 
M
,

3389 
q31_t
 * 
pC€ffs
,

3390 
q31_t
 * 
pSèã
,

3391 
uöt32_t
 
blockSize
);

3401 
uöt8_t
 
L
;

3402 
uöt16_t
 
pha£Lígth
;

3403 
q15_t
 *
pC€ffs
;

3404 
q15_t
 *
pSèã
;

3405 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q15
;

3413 
uöt8_t
 
L
;

3414 
uöt16_t
 
pha£Lígth
;

3415 
q31_t
 *
pC€ffs
;

3416 
q31_t
 *
pSèã
;

3417 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_q31
;

3425 
uöt8_t
 
L
;

3426 
uöt16_t
 
pha£Lígth
;

3427 
Êﬂt32_t
 *
pC€ffs
;

3428 
Êﬂt32_t
 *
pSèã
;

3429 } 
	t¨m_fú_öãΩﬁ©e_ö°™˚_f32
;

3441 
¨m_fú_öãΩﬁ©e_q15
(

3442 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3443 
q15_t
 * 
pSrc
,

3444 
q15_t
 * 
pD°
,

3445 
uöt32_t
 
blockSize
);

3460 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q15
(

3461 
¨m_fú_öãΩﬁ©e_ö°™˚_q15
 * 
S
,

3462 
uöt8_t
 
L
,

3463 
uöt16_t
 
numT≠s
,

3464 
q15_t
 * 
pC€ffs
,

3465 
q15_t
 * 
pSèã
,

3466 
uöt32_t
 
blockSize
);

3477 
¨m_fú_öãΩﬁ©e_q31
(

3478 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3479 
q31_t
 * 
pSrc
,

3480 
q31_t
 * 
pD°
,

3481 
uöt32_t
 
blockSize
);

3495 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_q31
(

3496 
¨m_fú_öãΩﬁ©e_ö°™˚_q31
 * 
S
,

3497 
uöt8_t
 
L
,

3498 
uöt16_t
 
numT≠s
,

3499 
q31_t
 * 
pC€ffs
,

3500 
q31_t
 * 
pSèã
,

3501 
uöt32_t
 
blockSize
);

3513 
¨m_fú_öãΩﬁ©e_f32
(

3514 c⁄° 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3515 
Êﬂt32_t
 * 
pSrc
,

3516 
Êﬂt32_t
 * 
pD°
,

3517 
uöt32_t
 
blockSize
);

3531 
¨m_°©us
 
¨m_fú_öãΩﬁ©e_öô_f32
(

3532 
¨m_fú_öãΩﬁ©e_ö°™˚_f32
 * 
S
,

3533 
uöt8_t
 
L
,

3534 
uöt16_t
 
numT≠s
,

3535 
Êﬂt32_t
 * 
pC€ffs
,

3536 
Êﬂt32_t
 * 
pSèã
,

3537 
uöt32_t
 
blockSize
);

3545 
uöt8_t
 
numSèges
;

3546 
q63_t
 *
pSèã
;

3547 
q31_t
 *
pC€ffs
;

3548 
uöt8_t
 
po°Shi·
;

3550 } 
	t¨m_biquad_ˇs_df1_32x64_ös_q31
;

3561 
¨m_biquad_ˇs_df1_32x64_q31
(

3562 c⁄° 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3563 
q31_t
 * 
pSrc
,

3564 
q31_t
 * 
pD°
,

3565 
uöt32_t
 
blockSize
);

3577 
¨m_biquad_ˇs_df1_32x64_öô_q31
(

3578 
¨m_biquad_ˇs_df1_32x64_ös_q31
 * 
S
,

3579 
uöt8_t
 
numSèges
,

3580 
q31_t
 * 
pC€ffs
,

3581 
q63_t
 * 
pSèã
,

3582 
uöt8_t
 
po°Shi·
);

3592 
uöt8_t
 
numSèges
;

3593 
Êﬂt32_t
 *
pSèã
;

3594 
Êﬂt32_t
 *
pC€ffs
;

3595 } 
	t¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
;

3607 
¨m_biquad_ˇsˇde_df2T_f32
(

3608 c⁄° 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3609 
Êﬂt32_t
 * 
pSrc
,

3610 
Êﬂt32_t
 * 
pD°
,

3611 
uöt32_t
 
blockSize
);

3623 
¨m_biquad_ˇsˇde_df2T_öô_f32
(

3624 
¨m_biquad_ˇsˇde_df2T_ö°™˚_f32
 * 
S
,

3625 
uöt8_t
 
numSèges
,

3626 
Êﬂt32_t
 * 
pC€ffs
,

3627 
Êﬂt32_t
 * 
pSèã
);

3637 
uöt16_t
 
numSèges
;

3638 
q15_t
 *
pSèã
;

3639 
q15_t
 *
pC€ffs
;

3640 } 
	t¨m_fú_œâi˚_ö°™˚_q15
;

3648 
uöt16_t
 
numSèges
;

3649 
q31_t
 *
pSèã
;

3650 
q31_t
 *
pC€ffs
;

3651 } 
	t¨m_fú_œâi˚_ö°™˚_q31
;

3659 
uöt16_t
 
numSèges
;

3660 
Êﬂt32_t
 *
pSèã
;

3661 
Êﬂt32_t
 *
pC€ffs
;

3662 } 
	t¨m_fú_œâi˚_ö°™˚_f32
;

3673 
¨m_fú_œâi˚_öô_q15
(

3674 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3675 
uöt16_t
 
numSèges
,

3676 
q15_t
 * 
pC€ffs
,

3677 
q15_t
 * 
pSèã
);

3688 
¨m_fú_œâi˚_q15
(

3689 c⁄° 
¨m_fú_œâi˚_ö°™˚_q15
 * 
S
,

3690 
q15_t
 * 
pSrc
,

3691 
q15_t
 * 
pD°
,

3692 
uöt32_t
 
blockSize
);

3703 
¨m_fú_œâi˚_öô_q31
(

3704 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3705 
uöt16_t
 
numSèges
,

3706 
q31_t
 * 
pC€ffs
,

3707 
q31_t
 * 
pSèã
);

3719 
¨m_fú_œâi˚_q31
(

3720 c⁄° 
¨m_fú_œâi˚_ö°™˚_q31
 * 
S
,

3721 
q31_t
 * 
pSrc
,

3722 
q31_t
 * 
pD°
,

3723 
uöt32_t
 
blockSize
);

3734 
¨m_fú_œâi˚_öô_f32
(

3735 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3736 
uöt16_t
 
numSèges
,

3737 
Êﬂt32_t
 * 
pC€ffs
,

3738 
Êﬂt32_t
 * 
pSèã
);

3749 
¨m_fú_œâi˚_f32
(

3750 c⁄° 
¨m_fú_œâi˚_ö°™˚_f32
 * 
S
,

3751 
Êﬂt32_t
 * 
pSrc
,

3752 
Êﬂt32_t
 * 
pD°
,

3753 
uöt32_t
 
blockSize
);

3760 
uöt16_t
 
numSèges
;

3761 
q15_t
 *
pSèã
;

3762 
q15_t
 *
pkC€ffs
;

3763 
q15_t
 *
pvC€ffs
;

3764 } 
	t¨m_iú_œâi˚_ö°™˚_q15
;

3771 
uöt16_t
 
numSèges
;

3772 
q31_t
 *
pSèã
;

3773 
q31_t
 *
pkC€ffs
;

3774 
q31_t
 *
pvC€ffs
;

3775 } 
	t¨m_iú_œâi˚_ö°™˚_q31
;

3782 
uöt16_t
 
numSèges
;

3783 
Êﬂt32_t
 *
pSèã
;

3784 
Êﬂt32_t
 *
pkC€ffs
;

3785 
Êﬂt32_t
 *
pvC€ffs
;

3786 } 
	t¨m_iú_œâi˚_ö°™˚_f32
;

3797 
¨m_iú_œâi˚_f32
(

3798 c⁄° 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3799 
Êﬂt32_t
 * 
pSrc
,

3800 
Êﬂt32_t
 * 
pD°
,

3801 
uöt32_t
 
blockSize
);

3814 
¨m_iú_œâi˚_öô_f32
(

3815 
¨m_iú_œâi˚_ö°™˚_f32
 * 
S
,

3816 
uöt16_t
 
numSèges
,

3817 
Êﬂt32_t
 *
pkC€ffs
,

3818 
Êﬂt32_t
 *
pvC€ffs
,

3819 
Êﬂt32_t
 *
pSèã
,

3820 
uöt32_t
 
blockSize
);

3832 
¨m_iú_œâi˚_q31
(

3833 c⁄° 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3834 
q31_t
 * 
pSrc
,

3835 
q31_t
 * 
pD°
,

3836 
uöt32_t
 
blockSize
);

3850 
¨m_iú_œâi˚_öô_q31
(

3851 
¨m_iú_œâi˚_ö°™˚_q31
 * 
S
,

3852 
uöt16_t
 
numSèges
,

3853 
q31_t
 *
pkC€ffs
,

3854 
q31_t
 *
pvC€ffs
,

3855 
q31_t
 *
pSèã
,

3856 
uöt32_t
 
blockSize
);

3868 
¨m_iú_œâi˚_q15
(

3869 c⁄° 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3870 
q15_t
 * 
pSrc
,

3871 
q15_t
 * 
pD°
,

3872 
uöt32_t
 
blockSize
);

3886 
¨m_iú_œâi˚_öô_q15
(

3887 
¨m_iú_œâi˚_ö°™˚_q15
 * 
S
,

3888 
uöt16_t
 
numSèges
,

3889 
q15_t
 *
pkC€ffs
,

3890 
q15_t
 *
pvC€ffs
,

3891 
q15_t
 *
pSèã
,

3892 
uöt32_t
 
blockSize
);

3900 
uöt16_t
 
numT≠s
;

3901 
Êﬂt32_t
 *
pSèã
;

3902 
Êﬂt32_t
 *
pC€ffs
;

3903 
Êﬂt32_t
 
mu
;

3904 } 
	t¨m_lms_ö°™˚_f32
;

3917 
¨m_lms_f32
(

3918 c⁄° 
¨m_lms_ö°™˚_f32
 * 
S
,

3919 
Êﬂt32_t
 * 
pSrc
,

3920 
Êﬂt32_t
 * 
pRef
,

3921 
Êﬂt32_t
 * 
pOut
,

3922 
Êﬂt32_t
 * 
pEº
,

3923 
uöt32_t
 
blockSize
);

3936 
¨m_lms_öô_f32
(

3937 
¨m_lms_ö°™˚_f32
 * 
S
,

3938 
uöt16_t
 
numT≠s
,

3939 
Êﬂt32_t
 * 
pC€ffs
,

3940 
Êﬂt32_t
 * 
pSèã
,

3941 
Êﬂt32_t
 
mu
,

3942 
uöt32_t
 
blockSize
);

3950 
uöt16_t
 
numT≠s
;

3951 
q15_t
 *
pSèã
;

3952 
q15_t
 *
pC€ffs
;

3953 
q15_t
 
mu
;

3954 
uöt32_t
 
po°Shi·
;

3955 } 
	t¨m_lms_ö°™˚_q15
;

3970 
¨m_lms_öô_q15
(

3971 
¨m_lms_ö°™˚_q15
 * 
S
,

3972 
uöt16_t
 
numT≠s
,

3973 
q15_t
 * 
pC€ffs
,

3974 
q15_t
 * 
pSèã
,

3975 
q15_t
 
mu
,

3976 
uöt32_t
 
blockSize
,

3977 
uöt32_t
 
po°Shi·
);

3990 
¨m_lms_q15
(

3991 c⁄° 
¨m_lms_ö°™˚_q15
 * 
S
,

3992 
q15_t
 * 
pSrc
,

3993 
q15_t
 * 
pRef
,

3994 
q15_t
 * 
pOut
,

3995 
q15_t
 * 
pEº
,

3996 
uöt32_t
 
blockSize
);

4005 
uöt16_t
 
numT≠s
;

4006 
q31_t
 *
pSèã
;

4007 
q31_t
 *
pC€ffs
;

4008 
q31_t
 
mu
;

4009 
uöt32_t
 
po°Shi·
;

4011 } 
	t¨m_lms_ö°™˚_q31
;

4024 
¨m_lms_q31
(

4025 c⁄° 
¨m_lms_ö°™˚_q31
 * 
S
,

4026 
q31_t
 * 
pSrc
,

4027 
q31_t
 * 
pRef
,

4028 
q31_t
 * 
pOut
,

4029 
q31_t
 * 
pEº
,

4030 
uöt32_t
 
blockSize
);

4044 
¨m_lms_öô_q31
(

4045 
¨m_lms_ö°™˚_q31
 * 
S
,

4046 
uöt16_t
 
numT≠s
,

4047 
q31_t
 *
pC€ffs
,

4048 
q31_t
 *
pSèã
,

4049 
q31_t
 
mu
,

4050 
uöt32_t
 
blockSize
,

4051 
uöt32_t
 
po°Shi·
);

4059 
uöt16_t
 
numT≠s
;

4060 
Êﬂt32_t
 *
pSèã
;

4061 
Êﬂt32_t
 *
pC€ffs
;

4062 
Êﬂt32_t
 
mu
;

4063 
Êﬂt32_t
 
íîgy
;

4064 
Êﬂt32_t
 
x0
;

4065 } 
	t¨m_lms_n‹m_ö°™˚_f32
;

4078 
¨m_lms_n‹m_f32
(

4079 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4080 
Êﬂt32_t
 * 
pSrc
,

4081 
Êﬂt32_t
 * 
pRef
,

4082 
Êﬂt32_t
 * 
pOut
,

4083 
Êﬂt32_t
 * 
pEº
,

4084 
uöt32_t
 
blockSize
);

4097 
¨m_lms_n‹m_öô_f32
(

4098 
¨m_lms_n‹m_ö°™˚_f32
 * 
S
,

4099 
uöt16_t
 
numT≠s
,

4100 
Êﬂt32_t
 * 
pC€ffs
,

4101 
Êﬂt32_t
 * 
pSèã
,

4102 
Êﬂt32_t
 
mu
,

4103 
uöt32_t
 
blockSize
);

4111 
uöt16_t
 
numT≠s
;

4112 
q31_t
 *
pSèã
;

4113 
q31_t
 *
pC€ffs
;

4114 
q31_t
 
mu
;

4115 
uöt8_t
 
po°Shi·
;

4116 
q31_t
 *
ªcùTabÀ
;

4117 
q31_t
 
íîgy
;

4118 
q31_t
 
x0
;

4119 } 
	t¨m_lms_n‹m_ö°™˚_q31
;

4132 
¨m_lms_n‹m_q31
(

4133 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4134 
q31_t
 * 
pSrc
,

4135 
q31_t
 * 
pRef
,

4136 
q31_t
 * 
pOut
,

4137 
q31_t
 * 
pEº
,

4138 
uöt32_t
 
blockSize
);

4152 
¨m_lms_n‹m_öô_q31
(

4153 
¨m_lms_n‹m_ö°™˚_q31
 * 
S
,

4154 
uöt16_t
 
numT≠s
,

4155 
q31_t
 * 
pC€ffs
,

4156 
q31_t
 * 
pSèã
,

4157 
q31_t
 
mu
,

4158 
uöt32_t
 
blockSize
,

4159 
uöt8_t
 
po°Shi·
);

4167 
uöt16_t
 
numT≠s
;

4168 
q15_t
 *
pSèã
;

4169 
q15_t
 *
pC€ffs
;

4170 
q15_t
 
mu
;

4171 
uöt8_t
 
po°Shi·
;

4172 
q15_t
 *
ªcùTabÀ
;

4173 
q15_t
 
íîgy
;

4174 
q15_t
 
x0
;

4175 } 
	t¨m_lms_n‹m_ö°™˚_q15
;

4188 
¨m_lms_n‹m_q15
(

4189 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4190 
q15_t
 * 
pSrc
,

4191 
q15_t
 * 
pRef
,

4192 
q15_t
 * 
pOut
,

4193 
q15_t
 * 
pEº
,

4194 
uöt32_t
 
blockSize
);

4209 
¨m_lms_n‹m_öô_q15
(

4210 
¨m_lms_n‹m_ö°™˚_q15
 * 
S
,

4211 
uöt16_t
 
numT≠s
,

4212 
q15_t
 * 
pC€ffs
,

4213 
q15_t
 * 
pSèã
,

4214 
q15_t
 
mu
,

4215 
uöt32_t
 
blockSize
,

4216 
uöt8_t
 
po°Shi·
);

4228 
¨m_c‹ªœã_f32
(

4229 
Êﬂt32_t
 * 
pSrcA
,

4230 
uöt32_t
 
§cALí
,

4231 
Êﬂt32_t
 * 
pSrcB
,

4232 
uöt32_t
 
§cBLí
,

4233 
Êﬂt32_t
 * 
pD°
);

4245 
¨m_c‹ªœã_q15
(

4246 
q15_t
 * 
pSrcA
,

4247 
uöt32_t
 
§cALí
,

4248 
q15_t
 * 
pSrcB
,

4249 
uöt32_t
 
§cBLí
,

4250 
q15_t
 * 
pD°
);

4262 
¨m_c‹ªœã_Á°_q15
(

4263 
q15_t
 * 
pSrcA
,

4264 
uöt32_t
 
§cALí
,

4265 
q15_t
 * 
pSrcB
,

4266 
uöt32_t
 
§cBLí
,

4267 
q15_t
 * 
pD°
);

4279 
¨m_c‹ªœã_q31
(

4280 
q31_t
 * 
pSrcA
,

4281 
uöt32_t
 
§cALí
,

4282 
q31_t
 * 
pSrcB
,

4283 
uöt32_t
 
§cBLí
,

4284 
q31_t
 * 
pD°
);

4296 
¨m_c‹ªœã_Á°_q31
(

4297 
q31_t
 * 
pSrcA
,

4298 
uöt32_t
 
§cALí
,

4299 
q31_t
 * 
pSrcB
,

4300 
uöt32_t
 
§cBLí
,

4301 
q31_t
 * 
pD°
);

4313 
¨m_c‹ªœã_q7
(

4314 
q7_t
 * 
pSrcA
,

4315 
uöt32_t
 
§cALí
,

4316 
q7_t
 * 
pSrcB
,

4317 
uöt32_t
 
§cBLí
,

4318 
q7_t
 * 
pD°
);

4325 
uöt16_t
 
numT≠s
;

4326 
uöt16_t
 
°©eIndex
;

4327 
Êﬂt32_t
 *
pSèã
;

4328 
Êﬂt32_t
 *
pC€ffs
;

4329 
uöt16_t
 
maxDñay
;

4330 
öt32_t
 *
pT≠Dñay
;

4331 } 
	t¨m_fú_•¨£_ö°™˚_f32
;

4339 
uöt16_t
 
numT≠s
;

4340 
uöt16_t
 
°©eIndex
;

4341 
q31_t
 *
pSèã
;

4342 
q31_t
 *
pC€ffs
;

4343 
uöt16_t
 
maxDñay
;

4344 
öt32_t
 *
pT≠Dñay
;

4345 } 
	t¨m_fú_•¨£_ö°™˚_q31
;

4353 
uöt16_t
 
numT≠s
;

4354 
uöt16_t
 
°©eIndex
;

4355 
q15_t
 *
pSèã
;

4356 
q15_t
 *
pC€ffs
;

4357 
uöt16_t
 
maxDñay
;

4358 
öt32_t
 *
pT≠Dñay
;

4359 } 
	t¨m_fú_•¨£_ö°™˚_q15
;

4367 
uöt16_t
 
numT≠s
;

4368 
uöt16_t
 
°©eIndex
;

4369 
q7_t
 *
pSèã
;

4370 
q7_t
 *
pC€ffs
;

4371 
uöt16_t
 
maxDñay
;

4372 
öt32_t
 *
pT≠Dñay
;

4373 } 
	t¨m_fú_•¨£_ö°™˚_q7
;

4385 
¨m_fú_•¨£_f32
(

4386 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4387 
Êﬂt32_t
 * 
pSrc
,

4388 
Êﬂt32_t
 * 
pD°
,

4389 
Êﬂt32_t
 * 
pS¸©chIn
,

4390 
uöt32_t
 
blockSize
);

4404 
¨m_fú_•¨£_öô_f32
(

4405 
¨m_fú_•¨£_ö°™˚_f32
 * 
S
,

4406 
uöt16_t
 
numT≠s
,

4407 
Êﬂt32_t
 * 
pC€ffs
,

4408 
Êﬂt32_t
 * 
pSèã
,

4409 
öt32_t
 * 
pT≠Dñay
,

4410 
uöt16_t
 
maxDñay
,

4411 
uöt32_t
 
blockSize
);

4423 
¨m_fú_•¨£_q31
(

4424 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4425 
q31_t
 * 
pSrc
,

4426 
q31_t
 * 
pD°
,

4427 
q31_t
 * 
pS¸©chIn
,

4428 
uöt32_t
 
blockSize
);

4442 
¨m_fú_•¨£_öô_q31
(

4443 
¨m_fú_•¨£_ö°™˚_q31
 * 
S
,

4444 
uöt16_t
 
numT≠s
,

4445 
q31_t
 * 
pC€ffs
,

4446 
q31_t
 * 
pSèã
,

4447 
öt32_t
 * 
pT≠Dñay
,

4448 
uöt16_t
 
maxDñay
,

4449 
uöt32_t
 
blockSize
);

4462 
¨m_fú_•¨£_q15
(

4463 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4464 
q15_t
 * 
pSrc
,

4465 
q15_t
 * 
pD°
,

4466 
q15_t
 * 
pS¸©chIn
,

4467 
q31_t
 * 
pS¸©chOut
,

4468 
uöt32_t
 
blockSize
);

4483 
¨m_fú_•¨£_öô_q15
(

4484 
¨m_fú_•¨£_ö°™˚_q15
 * 
S
,

4485 
uöt16_t
 
numT≠s
,

4486 
q15_t
 * 
pC€ffs
,

4487 
q15_t
 * 
pSèã
,

4488 
öt32_t
 * 
pT≠Dñay
,

4489 
uöt16_t
 
maxDñay
,

4490 
uöt32_t
 
blockSize
);

4503 
¨m_fú_•¨£_q7
(

4504 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4505 
q7_t
 * 
pSrc
,

4506 
q7_t
 * 
pD°
,

4507 
q7_t
 * 
pS¸©chIn
,

4508 
q31_t
 * 
pS¸©chOut
,

4509 
uöt32_t
 
blockSize
);

4523 
¨m_fú_•¨£_öô_q7
(

4524 
¨m_fú_•¨£_ö°™˚_q7
 * 
S
,

4525 
uöt16_t
 
numT≠s
,

4526 
q7_t
 * 
pC€ffs
,

4527 
q7_t
 * 
pSèã
,

4528 
öt32_t
 *
pT≠Dñay
,

4529 
uöt16_t
 
maxDñay
,

4530 
uöt32_t
 
blockSize
);

4541 
¨m_sö_cos_f32
(

4542 
Êﬂt32_t
 
thëa
,

4543 
Êﬂt32_t
 *
pSöVÆ
,

4544 
Êﬂt32_t
 *
pCcosVÆ
);

4554 
¨m_sö_cos_q31
(

4555 
q31_t
 
thëa
,

4556 
q31_t
 *
pSöVÆ
,

4557 
q31_t
 *
pCosVÆ
);

4568 
¨m_cm∂x_c⁄j_f32
(

4569 
Êﬂt32_t
 * 
pSrc
,

4570 
Êﬂt32_t
 * 
pD°
,

4571 
uöt32_t
 
numSam∂es
);

4581 
¨m_cm∂x_c⁄j_q31
(

4582 
q31_t
 * 
pSrc
,

4583 
q31_t
 * 
pD°
,

4584 
uöt32_t
 
numSam∂es
);

4594 
¨m_cm∂x_c⁄j_q15
(

4595 
q15_t
 * 
pSrc
,

4596 
q15_t
 * 
pD°
,

4597 
uöt32_t
 
numSam∂es
);

4609 
¨m_cm∂x_mag_squ¨ed_f32
(

4610 
Êﬂt32_t
 * 
pSrc
,

4611 
Êﬂt32_t
 * 
pD°
,

4612 
uöt32_t
 
numSam∂es
);

4622 
¨m_cm∂x_mag_squ¨ed_q31
(

4623 
q31_t
 * 
pSrc
,

4624 
q31_t
 * 
pD°
,

4625 
uöt32_t
 
numSam∂es
);

4635 
¨m_cm∂x_mag_squ¨ed_q15
(

4636 
q15_t
 * 
pSrc
,

4637 
q15_t
 * 
pD°
,

4638 
uöt32_t
 
numSam∂es
);

4715 
__STATIC_INLINE
 
Êﬂt32_t
 
¨m_pid_f32
(

4716 
¨m_pid_ö°™˚_f32
 * 
S
,

4717 
Êﬂt32_t
 
ö
)

4719 
Êﬂt32_t
 
out
;

4722 
out
 = (
S
->
A0
 * 
ö
) +

4723 (
S
->
A1
 * S->
°©e
[0]Ë+ (S->
A2
 * S->state[1]) + (S->state[2]);

4726 
S
->
°©e
[1] = S->state[0];

4727 
S
->
°©e
[0] = 
ö
;

4728 
S
->
°©e
[2] = 
out
;

4731  (
out
);

4750 
__STATIC_INLINE
 
q31_t
 
¨m_pid_q31
(

4751 
¨m_pid_ö°™˚_q31
 * 
S
,

4752 
q31_t
 
ö
)

4754 
q63_t
 
acc
;

4755 
q31_t
 
out
;

4758 
acc
 = (
q63_t
Ë
S
->
A0
 * 
ö
;

4761 
acc
 +(
q63_t
Ë
S
->
A1
 * S->
°©e
[0];

4764 
acc
 +(
q63_t
Ë
S
->
A2
 * S->
°©e
[1];

4767 
out
 = (
q31_t
Ë(
acc
 >> 31u);

4770 
out
 +
S
->
°©e
[2];

4773 
S
->
°©e
[1] = S->state[0];

4774 
S
->
°©e
[0] = 
ö
;

4775 
S
->
°©e
[2] = 
out
;

4778  (
out
);

4798 
__STATIC_INLINE
 
q15_t
 
¨m_pid_q15
(

4799 
¨m_pid_ö°™˚_q15
 * 
S
,

4800 
q15_t
 
ö
)

4802 
q63_t
 
acc
;

4803 
q15_t
 
out
;

4807 #ifde‡
ARM_MATH_CM0


4810 
acc
 = ((
q31_t
Ë
S
->
A0
 )* 
ö
 ;

4815 
acc
 = (
q31_t
Ë
__SMUAD
(
S
->
A0
, 
ö
);

4819 #ifde‡
ARM_MATH_CM0


4822 
acc
 +(
q31_t
Ë
S
->
A1
 * S->
°©e
[0] ;

4823 
acc
 +(
q31_t
Ë
S
->
A2
 * S->
°©e
[1] ;

4828 
acc
 = 
__SMLALD
(
S
->
A1
, (
q31_t
)
__SIMD32
(S->
°©e
),ácc);

4833 
acc
 +(
q31_t
Ë
S
->
°©e
[2] << 15;

4836 
out
 = (
q15_t
Ë(
__SSAT
((
acc
 >> 15), 16));

4839 
S
->
°©e
[1] = S->state[0];

4840 
S
->
°©e
[0] = 
ö
;

4841 
S
->
°©e
[2] = 
out
;

4844  (
out
);

4861 
¨m_°©us
 
¨m_m©_övî£_f32
(

4862 c⁄° 
¨m_m©rix_ö°™˚_f32
 * 
§c
,

4863 
¨m_m©rix_ö°™˚_f32
 * 
d°
);

4909 
__STATIC_INLINE
 
¨m_˛¨ke_f32
(

4910 
Êﬂt32_t
 
Ia
,

4911 
Êﬂt32_t
 
Ib
,

4912 
Êﬂt32_t
 * 
pIÆpha
,

4913 
Êﬂt32_t
 * 
pIbëa
)

4916 *
pIÆpha
 = 
Ia
;

4919 *
pIbëa
 = ((
Êﬂt32_t
Ë0.57735026919 * 
Ia
 + (Êﬂt32_tË1.15470053838 * 
Ib
);

4938 
__STATIC_INLINE
 
¨m_˛¨ke_q31
(

4939 
q31_t
 
Ia
,

4940 
q31_t
 
Ib
,

4941 
q31_t
 * 
pIÆpha
,

4942 
q31_t
 * 
pIbëa
)

4944 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

4947 *
pIÆpha
 = 
Ia
;

4950 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë
Ia
 * 0x24F34E8B) >> 30);

4953 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë
Ib
 * 0x49E69D16) >> 30);

4956 *
pIbëa
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

4970 
¨m_q7_to_q31
(

4971 
q7_t
 * 
pSrc
,

4972 
q31_t
 * 
pD°
,

4973 
uöt32_t
 
blockSize
);

5013 
__STATIC_INLINE
 
¨m_öv_˛¨ke_f32
(

5014 
Êﬂt32_t
 
IÆpha
,

5015 
Êﬂt32_t
 
Ibëa
,

5016 
Êﬂt32_t
 * 
pIa
,

5017 
Êﬂt32_t
 * 
pIb
)

5020 *
pIa
 = 
IÆpha
;

5023 *
pIb
 = -0.5 * 
IÆpha
 + (
Êﬂt32_t
Ë0.8660254039 *
Ibëa
;

5042 
__STATIC_INLINE
 
¨m_öv_˛¨ke_q31
(

5043 
q31_t
 
IÆpha
,

5044 
q31_t
 
Ibëa
,

5045 
q31_t
 * 
pIa
,

5046 
q31_t
 * 
pIb
)

5048 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5051 *
pIa
 = 
IÆpha
;

5054 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
) * (0x40000000)) >> 31);

5057 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
) * (0x6ED9EBA1)) >> 31);

5060 *
pIb
 = 
__QSUB
(
¥odu˘2
, 
¥odu˘1
);

5075 
¨m_q7_to_q15
(

5076 
q7_t
 * 
pSrc
,

5077 
q15_t
 * 
pD°
,

5078 
uöt32_t
 
blockSize
);

5129 
__STATIC_INLINE
 
¨m_∑rk_f32
(

5130 
Êﬂt32_t
 
IÆpha
,

5131 
Êﬂt32_t
 
Ibëa
,

5132 
Êﬂt32_t
 * 
pId
,

5133 
Êﬂt32_t
 * 
pIq
,

5134 
Êﬂt32_t
 
söVÆ
,

5135 
Êﬂt32_t
 
cosVÆ
)

5138 *
pId
 = 
IÆpha
 * 
cosVÆ
 + 
Ibëa
 * 
söVÆ
;

5141 *
pIq
 = -
IÆpha
 * 
söVÆ
 + 
Ibëa
 * 
cosVÆ
;

5163 
__STATIC_INLINE
 
¨m_∑rk_q31
(

5164 
q31_t
 
IÆpha
,

5165 
q31_t
 
Ibëa
,

5166 
q31_t
 * 
pId
,

5167 
q31_t
 * 
pIq
,

5168 
q31_t
 
söVÆ
,

5169 
q31_t
 
cosVÆ
)

5171 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5172 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5175 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
cosVÆ
)) >> 31);

5178 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
söVÆ
)) >> 31);

5182 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
IÆpha
Ë* (
söVÆ
)) >> 31);

5185 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Ibëa
Ë* (
cosVÆ
)) >> 31);

5188 *
pId
 = 
__QADD
(
¥odu˘1
, 
¥odu˘2
);

5191 *
pIq
 = 
__QSUB
(
¥odu˘4
, 
¥odu˘3
);

5205 
¨m_q7_to_Êﬂt
(

5206 
q7_t
 * 
pSrc
,

5207 
Êﬂt32_t
 * 
pD°
,

5208 
uöt32_t
 
blockSize
);

5248 
__STATIC_INLINE
 
¨m_öv_∑rk_f32
(

5249 
Êﬂt32_t
 
Id
,

5250 
Êﬂt32_t
 
Iq
,

5251 
Êﬂt32_t
 * 
pIÆpha
,

5252 
Êﬂt32_t
 * 
pIbëa
,

5253 
Êﬂt32_t
 
söVÆ
,

5254 
Êﬂt32_t
 
cosVÆ
)

5257 *
pIÆpha
 = 
Id
 * 
cosVÆ
 - 
Iq
 * 
söVÆ
;

5260 *
pIbëa
 = 
Id
 * 
söVÆ
 + 
Iq
 * 
cosVÆ
;

5283 
__STATIC_INLINE
 
¨m_öv_∑rk_q31
(

5284 
q31_t
 
Id
,

5285 
q31_t
 
Iq
,

5286 
q31_t
 * 
pIÆpha
,

5287 
q31_t
 * 
pIbëa
,

5288 
q31_t
 
söVÆ
,

5289 
q31_t
 
cosVÆ
)

5291 
q31_t
 
¥odu˘1
, 
¥odu˘2
;

5292 
q31_t
 
¥odu˘3
, 
¥odu˘4
;

5295 
¥odu˘1
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
cosVÆ
)) >> 31);

5298 
¥odu˘2
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
söVÆ
)) >> 31);

5302 
¥odu˘3
 = (
q31_t
Ë(((
q63_t
Ë(
Id
Ë* (
söVÆ
)) >> 31);

5305 
¥odu˘4
 = (
q31_t
Ë(((
q63_t
Ë(
Iq
Ë* (
cosVÆ
)) >> 31);

5308 *
pIÆpha
 = 
__QSUB
(
¥odu˘1
, 
¥odu˘2
);

5311 *
pIbëa
 = 
__QADD
(
¥odu˘4
, 
¥odu˘3
);

5327 
¨m_q31_to_Êﬂt
(

5328 
q31_t
 * 
pSrc
,

5329 
Êﬂt32_t
 * 
pD°
,

5330 
uöt32_t
 
blockSize
);

5381 
__STATIC_INLINE
 
Êﬂt32_t
 
¨m_löór_öãΩ_f32
(

5382 
¨m_löór_öãΩ_ö°™˚_f32
 * 
S
,

5383 
Êﬂt32_t
 
x
)

5386 
Êﬂt32_t
 
y
;

5387 
Êﬂt32_t
 
x0
, 
x1
;

5388 
Êﬂt32_t
 
y0
, 
y1
;

5389 
Êﬂt32_t
 
xS∑cög
 = 
S
->xSpacing;

5390 
öt32_t
 
i
;

5391 
Êﬂt32_t
 *
pYD©a
 = 
S
->pYData;

5394 
i
 = (
x
 - 
S
->
x1
Ë/ 
xS∑cög
;

5396 if(
i
 < 0)

5399 
y
 = 
pYD©a
[0];

5401 if(
i
 >
S
->
nVÆues
)

5404 
y
 = 
pYD©a
[
S
->
nVÆues
-1];

5409 
x0
 = 
S
->
x1
 + 
i
 * 
xS∑cög
;

5410 
x1
 = 
S
->x1 + (
i
 +1Ë* 
xS∑cög
;

5413 
y0
 = 
pYD©a
[
i
];

5414 
y1
 = 
pYD©a
[
i
 + 1];

5417 
y
 = 
y0
 + (
x
 - 
x0
Ë* ((
y1
 - y0)/(
x1
-x0));

5422  (
y
);

5440 
__STATIC_INLINE
 
q31_t
 
¨m_löór_öãΩ_q31
(q31_à*
pYD©a
,

5441 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5443 
q31_t
 
y
;

5444 
q31_t
 
y0
, 
y1
;

5445 
q31_t
 
‰a˘
;

5446 
öt32_t
 
ödex
;

5451 
ödex
 = ((
x
 & 0xFFF00000) >> 20);

5453 if(
ödex
 >(
nVÆues
 - 1))

5455 (
pYD©a
[
nVÆues
 - 1]);

5457 if(
ödex
 < 0)

5459 (
pYD©a
[0]);

5466 
‰a˘
 = (
x
 & 0x000FFFFF) << 11;

5469 
y0
 = 
pYD©a
[
ödex
];

5470 
y1
 = 
pYD©a
[
ödex
 + 1u];

5473 
y
 = ((
q31_t
Ë((
q63_t
Ë
y0
 * (0x7FFFFFFF - 
‰a˘
) >> 32));

5476 
y
 +((
q31_t
Ë(((
q63_t
Ë
y1
 * 
‰a˘
) >> 32));

5479  (
y
 << 1u);

5500 
__STATIC_INLINE
 
q15_t
 
¨m_löór_öãΩ_q15
(q15_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5502 
q63_t
 
y
;

5503 
q15_t
 
y0
, 
y1
;

5504 
q31_t
 
‰a˘
;

5505 
öt32_t
 
ödex
;

5510 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5512 if(
ödex
 >(
nVÆues
 - 1))

5514 (
pYD©a
[
nVÆues
 - 1]);

5516 if(
ödex
 < 0)

5518 (
pYD©a
[0]);

5524 
‰a˘
 = (
x
 & 0x000FFFFF);

5527 
y0
 = 
pYD©a
[
ödex
];

5528 
y1
 = 
pYD©a
[
ödex
 + 1u];

5531 
y
 = ((
q63_t
Ë
y0
 * (0xFFFFF - 
‰a˘
));

5534 
y
 +((
q63_t
Ë
y1
 * (
‰a˘
));

5537  (
y
 >> 20);

5557 
__STATIC_INLINE
 
q7_t
 
¨m_löór_öãΩ_q7
(q7_à*
pYD©a
, 
q31_t
 
x
, 
uöt32_t
 
nVÆues
)

5559 
q31_t
 
y
;

5560 
q7_t
 
y0
, 
y1
;

5561 
q31_t
 
‰a˘
;

5562 
öt32_t
 
ödex
;

5567 
ödex
 = ((
x
 & 0xFFF00000) >> 20u);

5570 if(
ödex
 >(
nVÆues
 - 1))

5572 (
pYD©a
[
nVÆues
 - 1]);

5574 if(
ödex
 < 0)

5576 (
pYD©a
[0]);

5583 
‰a˘
 = (
x
 & 0x000FFFFF);

5586 
y0
 = 
pYD©a
[
ödex
];

5587 
y1
 = 
pYD©a
[
ödex
 + 1u];

5590 
y
 = ((
y0
 * (0xFFFFF - 
‰a˘
)));

5593 
y
 +(
y1
 * 
‰a˘
);

5596  (
y
 >> 20u);

5611 
Êﬂt32_t
 
¨m_sö_f32
(

5612 
Êﬂt32_t
 
x
);

5620 
q31_t
 
¨m_sö_q31
(

5621 
q31_t
 
x
);

5629 
q15_t
 
¨m_sö_q15
(

5630 
q15_t
 
x
);

5638 
Êﬂt32_t
 
¨m_cos_f32
(

5639 
Êﬂt32_t
 
x
);

5647 
q31_t
 
¨m_cos_q31
(

5648 
q31_t
 
x
);

5656 
q15_t
 
¨m_cos_q15
(

5657 
q15_t
 
x
);

5699 
__STATIC_INLINE
 
¨m_°©us
 
¨m_sqπ_f32
(

5700 
Êﬂt32_t
 
ö
, flﬂt32_à*
pOut
)

5702 if(
ö
 > 0)

5706 #i‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__CC_ARM
 )

5707 *
pOut
 = 
__sqπf
(
ö
);

5708 #ñi‡(
__FPU_USED
 =1Ë&& 
deföed
 ( 
__TMS_740
 )

5709 *
pOut
 = 
__buûtö_sqπf
(
ö
);

5711 *
pOut
 = 
sqπf
(
ö
);

5714  (
ARM_MATH_SUCCESS
);

5718 *
pOut
 = 0.0f;

5719  (
ARM_MATH_ARGUMENT_ERROR
);

5732 
¨m_°©us
 
¨m_sqπ_q31
(

5733 
q31_t
 
ö
, q31_à*
pOut
);

5742 
¨m_°©us
 
¨m_sqπ_q15
(

5743 
q15_t
 
ö
, q15_à*
pOut
);

5758 
__STATIC_INLINE
 
¨m_cúcuœrWrôe_f32
(

5759 
öt32_t
 * 
cúcBuf„r
,

5760 
öt32_t
 
L
,

5761 
uöt16_t
 * 
wrôeOff£t
,

5762 
öt32_t
 
buf„rInc
,

5763 c⁄° 
öt32_t
 * 
§c
,

5764 
öt32_t
 
§cInc
,

5765 
uöt32_t
 
blockSize
)

5767 
uöt32_t
 
i
 = 0u;

5768 
öt32_t
 
wOff£t
;

5772 
wOff£t
 = *
wrôeOff£t
;

5775 
i
 = 
blockSize
;

5777 
i
 > 0u)

5780 
cúcBuf„r
[
wOff£t
] = *
§c
;

5783 
§c
 +
§cInc
;

5786 
wOff£t
 +
buf„rInc
;

5787 if(
wOff£t
 >
L
)

5788 
wOff£t
 -
L
;

5791 
i
--;

5795 *
wrôeOff£t
 = 
wOff£t
;

5803 
__STATIC_INLINE
 
¨m_cúcuœrRód_f32
(

5804 
öt32_t
 * 
cúcBuf„r
,

5805 
öt32_t
 
L
,

5806 
öt32_t
 * 
ªadOff£t
,

5807 
öt32_t
 
buf„rInc
,

5808 
öt32_t
 * 
d°
,

5809 
öt32_t
 * 
d°_ba£
,

5810 
öt32_t
 
d°_Àngth
,

5811 
öt32_t
 
d°Inc
,

5812 
uöt32_t
 
blockSize
)

5814 
uöt32_t
 
i
 = 0u;

5815 
öt32_t
 
rOff£t
, 
d°_íd
;

5819 
rOff£t
 = *
ªadOff£t
;

5820 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5823 
i
 = 
blockSize
;

5825 
i
 > 0u)

5828 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5831 
d°
 +
d°Inc
;

5833 if(
d°
 =(
öt32_t
 *Ë
d°_íd
)

5835 
d°
 = 
d°_ba£
;

5839 
rOff£t
 +
buf„rInc
;

5841 if(
rOff£t
 >
L
)

5843 
rOff£t
 -
L
;

5847 
i
--;

5851 *
ªadOff£t
 = 
rOff£t
;

5858 
__STATIC_INLINE
 
¨m_cúcuœrWrôe_q15
(

5859 
q15_t
 * 
cúcBuf„r
,

5860 
öt32_t
 
L
,

5861 
uöt16_t
 * 
wrôeOff£t
,

5862 
öt32_t
 
buf„rInc
,

5863 c⁄° 
q15_t
 * 
§c
,

5864 
öt32_t
 
§cInc
,

5865 
uöt32_t
 
blockSize
)

5867 
uöt32_t
 
i
 = 0u;

5868 
öt32_t
 
wOff£t
;

5872 
wOff£t
 = *
wrôeOff£t
;

5875 
i
 = 
blockSize
;

5877 
i
 > 0u)

5880 
cúcBuf„r
[
wOff£t
] = *
§c
;

5883 
§c
 +
§cInc
;

5886 
wOff£t
 +
buf„rInc
;

5887 if(
wOff£t
 >
L
)

5888 
wOff£t
 -
L
;

5891 
i
--;

5895 *
wrôeOff£t
 = 
wOff£t
;

5903 
__STATIC_INLINE
 
¨m_cúcuœrRód_q15
(

5904 
q15_t
 * 
cúcBuf„r
,

5905 
öt32_t
 
L
,

5906 
öt32_t
 * 
ªadOff£t
,

5907 
öt32_t
 
buf„rInc
,

5908 
q15_t
 * 
d°
,

5909 
q15_t
 * 
d°_ba£
,

5910 
öt32_t
 
d°_Àngth
,

5911 
öt32_t
 
d°Inc
,

5912 
uöt32_t
 
blockSize
)

5914 
uöt32_t
 
i
 = 0;

5915 
öt32_t
 
rOff£t
, 
d°_íd
;

5919 
rOff£t
 = *
ªadOff£t
;

5921 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

5924 
i
 = 
blockSize
;

5926 
i
 > 0u)

5929 *
d°
 = 
cúcBuf„r
[
rOff£t
];

5932 
d°
 +
d°Inc
;

5934 if(
d°
 =(
q15_t
 *Ë
d°_íd
)

5936 
d°
 = 
d°_ba£
;

5940 
rOff£t
 +
buf„rInc
;

5942 if(
rOff£t
 >
L
)

5944 
rOff£t
 -
L
;

5948 
i
--;

5952 *
ªadOff£t
 = 
rOff£t
;

5960 
__STATIC_INLINE
 
¨m_cúcuœrWrôe_q7
(

5961 
q7_t
 * 
cúcBuf„r
,

5962 
öt32_t
 
L
,

5963 
uöt16_t
 * 
wrôeOff£t
,

5964 
öt32_t
 
buf„rInc
,

5965 c⁄° 
q7_t
 * 
§c
,

5966 
öt32_t
 
§cInc
,

5967 
uöt32_t
 
blockSize
)

5969 
uöt32_t
 
i
 = 0u;

5970 
öt32_t
 
wOff£t
;

5974 
wOff£t
 = *
wrôeOff£t
;

5977 
i
 = 
blockSize
;

5979 
i
 > 0u)

5982 
cúcBuf„r
[
wOff£t
] = *
§c
;

5985 
§c
 +
§cInc
;

5988 
wOff£t
 +
buf„rInc
;

5989 if(
wOff£t
 >
L
)

5990 
wOff£t
 -
L
;

5993 
i
--;

5997 *
wrôeOff£t
 = 
wOff£t
;

6005 
__STATIC_INLINE
 
¨m_cúcuœrRód_q7
(

6006 
q7_t
 * 
cúcBuf„r
,

6007 
öt32_t
 
L
,

6008 
öt32_t
 * 
ªadOff£t
,

6009 
öt32_t
 
buf„rInc
,

6010 
q7_t
 * 
d°
,

6011 
q7_t
 * 
d°_ba£
,

6012 
öt32_t
 
d°_Àngth
,

6013 
öt32_t
 
d°Inc
,

6014 
uöt32_t
 
blockSize
)

6016 
uöt32_t
 
i
 = 0;

6017 
öt32_t
 
rOff£t
, 
d°_íd
;

6021 
rOff£t
 = *
ªadOff£t
;

6023 
d°_íd
 = (
öt32_t
Ë(
d°_ba£
 + 
d°_Àngth
);

6026 
i
 = 
blockSize
;

6028 
i
 > 0u)

6031 *
d°
 = 
cúcBuf„r
[
rOff£t
];

6034 
d°
 +
d°Inc
;

6036 if(
d°
 =(
q7_t
 *Ë
d°_íd
)

6038 
d°
 = 
d°_ba£
;

6042 
rOff£t
 +
buf„rInc
;

6044 if(
rOff£t
 >
L
)

6046 
rOff£t
 -
L
;

6050 
i
--;

6054 *
ªadOff£t
 = 
rOff£t
;

6066 
¨m_powî_q31
(

6067 
q31_t
 * 
pSrc
,

6068 
uöt32_t
 
blockSize
,

6069 
q63_t
 * 
pResu…
);

6079 
¨m_powî_f32
(

6080 
Êﬂt32_t
 * 
pSrc
,

6081 
uöt32_t
 
blockSize
,

6082 
Êﬂt32_t
 * 
pResu…
);

6092 
¨m_powî_q15
(

6093 
q15_t
 * 
pSrc
,

6094 
uöt32_t
 
blockSize
,

6095 
q63_t
 * 
pResu…
);

6105 
¨m_powî_q7
(

6106 
q7_t
 * 
pSrc
,

6107 
uöt32_t
 
blockSize
,

6108 
q31_t
 * 
pResu…
);

6118 
¨m_món_q7
(

6119 
q7_t
 * 
pSrc
,

6120 
uöt32_t
 
blockSize
,

6121 
q7_t
 * 
pResu…
);

6130 
¨m_món_q15
(

6131 
q15_t
 * 
pSrc
,

6132 
uöt32_t
 
blockSize
,

6133 
q15_t
 * 
pResu…
);

6142 
¨m_món_q31
(

6143 
q31_t
 * 
pSrc
,

6144 
uöt32_t
 
blockSize
,

6145 
q31_t
 * 
pResu…
);

6154 
¨m_món_f32
(

6155 
Êﬂt32_t
 * 
pSrc
,

6156 
uöt32_t
 
blockSize
,

6157 
Êﬂt32_t
 * 
pResu…
);

6167 
¨m_v¨_f32
(

6168 
Êﬂt32_t
 * 
pSrc
,

6169 
uöt32_t
 
blockSize
,

6170 
Êﬂt32_t
 * 
pResu…
);

6180 
¨m_v¨_q31
(

6181 
q31_t
 * 
pSrc
,

6182 
uöt32_t
 
blockSize
,

6183 
q63_t
 * 
pResu…
);

6193 
¨m_v¨_q15
(

6194 
q15_t
 * 
pSrc
,

6195 
uöt32_t
 
blockSize
,

6196 
q31_t
 * 
pResu…
);

6206 
¨m_rms_f32
(

6207 
Êﬂt32_t
 * 
pSrc
,

6208 
uöt32_t
 
blockSize
,

6209 
Êﬂt32_t
 * 
pResu…
);

6219 
¨m_rms_q31
(

6220 
q31_t
 * 
pSrc
,

6221 
uöt32_t
 
blockSize
,

6222 
q31_t
 * 
pResu…
);

6232 
¨m_rms_q15
(

6233 
q15_t
 * 
pSrc
,

6234 
uöt32_t
 
blockSize
,

6235 
q15_t
 * 
pResu…
);

6245 
¨m_°d_f32
(

6246 
Êﬂt32_t
 * 
pSrc
,

6247 
uöt32_t
 
blockSize
,

6248 
Êﬂt32_t
 * 
pResu…
);

6258 
¨m_°d_q31
(

6259 
q31_t
 * 
pSrc
,

6260 
uöt32_t
 
blockSize
,

6261 
q31_t
 * 
pResu…
);

6271 
¨m_°d_q15
(

6272 
q15_t
 * 
pSrc
,

6273 
uöt32_t
 
blockSize
,

6274 
q15_t
 * 
pResu…
);

6284 
¨m_cm∂x_mag_f32
(

6285 
Êﬂt32_t
 * 
pSrc
,

6286 
Êﬂt32_t
 * 
pD°
,

6287 
uöt32_t
 
numSam∂es
);

6297 
¨m_cm∂x_mag_q31
(

6298 
q31_t
 * 
pSrc
,

6299 
q31_t
 * 
pD°
,

6300 
uöt32_t
 
numSam∂es
);

6310 
¨m_cm∂x_mag_q15
(

6311 
q15_t
 * 
pSrc
,

6312 
q15_t
 * 
pD°
,

6313 
uöt32_t
 
numSam∂es
);

6325 
¨m_cm∂x_dŸ_¥od_q15
(

6326 
q15_t
 * 
pSrcA
,

6327 
q15_t
 * 
pSrcB
,

6328 
uöt32_t
 
numSam∂es
,

6329 
q31_t
 * 
ªÆResu…
,

6330 
q31_t
 * 
imagResu…
);

6342 
¨m_cm∂x_dŸ_¥od_q31
(

6343 
q31_t
 * 
pSrcA
,

6344 
q31_t
 * 
pSrcB
,

6345 
uöt32_t
 
numSam∂es
,

6346 
q63_t
 * 
ªÆResu…
,

6347 
q63_t
 * 
imagResu…
);

6359 
¨m_cm∂x_dŸ_¥od_f32
(

6360 
Êﬂt32_t
 * 
pSrcA
,

6361 
Êﬂt32_t
 * 
pSrcB
,

6362 
uöt32_t
 
numSam∂es
,

6363 
Êﬂt32_t
 * 
ªÆResu…
,

6364 
Êﬂt32_t
 * 
imagResu…
);

6375 
¨m_cm∂x_mu…_ªÆ_q15
(

6376 
q15_t
 * 
pSrcCm∂x
,

6377 
q15_t
 * 
pSrcRól
,

6378 
q15_t
 * 
pCm∂xD°
,

6379 
uöt32_t
 
numSam∂es
);

6390 
¨m_cm∂x_mu…_ªÆ_q31
(

6391 
q31_t
 * 
pSrcCm∂x
,

6392 
q31_t
 * 
pSrcRól
,

6393 
q31_t
 * 
pCm∂xD°
,

6394 
uöt32_t
 
numSam∂es
);

6405 
¨m_cm∂x_mu…_ªÆ_f32
(

6406 
Êﬂt32_t
 * 
pSrcCm∂x
,

6407 
Êﬂt32_t
 * 
pSrcRól
,

6408 
Êﬂt32_t
 * 
pCm∂xD°
,

6409 
uöt32_t
 
numSam∂es
);

6420 
¨m_mö_q7
(

6421 
q7_t
 * 
pSrc
,

6422 
uöt32_t
 
blockSize
,

6423 
q7_t
 * 
ªsu…
,

6424 
uöt32_t
 * 
ödex
);

6435 
¨m_mö_q15
(

6436 
q15_t
 * 
pSrc
,

6437 
uöt32_t
 
blockSize
,

6438 
q15_t
 * 
pResu…
,

6439 
uöt32_t
 * 
pIndex
);

6449 
¨m_mö_q31
(

6450 
q31_t
 * 
pSrc
,

6451 
uöt32_t
 
blockSize
,

6452 
q31_t
 * 
pResu…
,

6453 
uöt32_t
 * 
pIndex
);

6464 
¨m_mö_f32
(

6465 
Êﬂt32_t
 * 
pSrc
,

6466 
uöt32_t
 
blockSize
,

6467 
Êﬂt32_t
 * 
pResu…
,

6468 
uöt32_t
 * 
pIndex
);

6479 
¨m_max_q7
(

6480 
q7_t
 * 
pSrc
,

6481 
uöt32_t
 
blockSize
,

6482 
q7_t
 * 
pResu…
,

6483 
uöt32_t
 * 
pIndex
);

6494 
¨m_max_q15
(

6495 
q15_t
 * 
pSrc
,

6496 
uöt32_t
 
blockSize
,

6497 
q15_t
 * 
pResu…
,

6498 
uöt32_t
 * 
pIndex
);

6509 
¨m_max_q31
(

6510 
q31_t
 * 
pSrc
,

6511 
uöt32_t
 
blockSize
,

6512 
q31_t
 * 
pResu…
,

6513 
uöt32_t
 * 
pIndex
);

6524 
¨m_max_f32
(

6525 
Êﬂt32_t
 * 
pSrc
,

6526 
uöt32_t
 
blockSize
,

6527 
Êﬂt32_t
 * 
pResu…
,

6528 
uöt32_t
 * 
pIndex
);

6539 
¨m_cm∂x_mu…_cm∂x_q15
(

6540 
q15_t
 * 
pSrcA
,

6541 
q15_t
 * 
pSrcB
,

6542 
q15_t
 * 
pD°
,

6543 
uöt32_t
 
numSam∂es
);

6554 
¨m_cm∂x_mu…_cm∂x_q31
(

6555 
q31_t
 * 
pSrcA
,

6556 
q31_t
 * 
pSrcB
,

6557 
q31_t
 * 
pD°
,

6558 
uöt32_t
 
numSam∂es
);

6569 
¨m_cm∂x_mu…_cm∂x_f32
(

6570 
Êﬂt32_t
 * 
pSrcA
,

6571 
Êﬂt32_t
 * 
pSrcB
,

6572 
Êﬂt32_t
 * 
pD°
,

6573 
uöt32_t
 
numSam∂es
);

6582 
¨m_Êﬂt_to_q31
(

6583 
Êﬂt32_t
 * 
pSrc
,

6584 
q31_t
 * 
pD°
,

6585 
uöt32_t
 
blockSize
);

6594 
¨m_Êﬂt_to_q15
(

6595 
Êﬂt32_t
 * 
pSrc
,

6596 
q15_t
 * 
pD°
,

6597 
uöt32_t
 
blockSize
);

6606 
¨m_Êﬂt_to_q7
(

6607 
Êﬂt32_t
 * 
pSrc
,

6608 
q7_t
 * 
pD°
,

6609 
uöt32_t
 
blockSize
);

6619 
¨m_q31_to_q15
(

6620 
q31_t
 * 
pSrc
,

6621 
q15_t
 * 
pD°
,

6622 
uöt32_t
 
blockSize
);

6631 
¨m_q31_to_q7
(

6632 
q31_t
 * 
pSrc
,

6633 
q7_t
 * 
pD°
,

6634 
uöt32_t
 
blockSize
);

6643 
¨m_q15_to_Êﬂt
(

6644 
q15_t
 * 
pSrc
,

6645 
Êﬂt32_t
 * 
pD°
,

6646 
uöt32_t
 
blockSize
);

6656 
¨m_q15_to_q31
(

6657 
q15_t
 * 
pSrc
,

6658 
q31_t
 * 
pD°
,

6659 
uöt32_t
 
blockSize
);

6669 
¨m_q15_to_q7
(

6670 
q15_t
 * 
pSrc
,

6671 
q7_t
 * 
pD°
,

6672 
uöt32_t
 
blockSize
);

6746 
__STATIC_INLINE
 
Êﬂt32_t
 
¨m_bûöór_öãΩ_f32
(

6747 c⁄° 
¨m_bûöór_öãΩ_ö°™˚_f32
 * 
S
,

6748 
Êﬂt32_t
 
X
,

6749 
Êﬂt32_t
 
Y
)

6751 
Êﬂt32_t
 
out
;

6752 
Êﬂt32_t
 
f00
, 
f01
, 
f10
, 
f11
;

6753 
Êﬂt32_t
 *
pD©a
 = 
S
->pData;

6754 
öt32_t
 
xIndex
, 
yIndex
, 
ödex
;

6755 
Êﬂt32_t
 
xdiff
, 
ydiff
;

6756 
Êﬂt32_t
 
b1
, 
b2
, 
b3
, 
b4
;

6758 
xIndex
 = (
öt32_t
Ë
X
;

6759 
yIndex
 = (
öt32_t
Ë
Y
;

6763 if(
xIndex
 < 0 || xIndex > (
S
->
numRows
-1Ë|| 
yIndex
 < 0 || yIndex > ( S->
numCﬁs
-1))

6769 
ödex
 = (
xIndex
 - 1Ë+ (
yIndex
-1Ë* 
S
->
numCﬁs
 ;

6773 
f00
 = 
pD©a
[
ödex
];

6774 
f01
 = 
pD©a
[
ödex
 + 1];

6777 
ödex
 = (
xIndex
-1Ë+ (
yIndex
Ë* 
S
->
numCﬁs
;

6781 
f10
 = 
pD©a
[
ödex
];

6782 
f11
 = 
pD©a
[
ödex
 + 1];

6785 
b1
 = 
f00
;

6786 
b2
 = 
f01
 - 
f00
;

6787 
b3
 = 
f10
 - 
f00
;

6788 
b4
 = 
f00
 - 
f01
 - 
f10
 + 
f11
;

6791 
xdiff
 = 
X
 - 
xIndex
;

6794 
ydiff
 = 
Y
 - 
yIndex
;

6797 
out
 = 
b1
 + 
b2
 * 
xdiff
 + 
b3
 * 
ydiff
 + 
b4
 * xdiff * ydiff;

6800  (
out
);

6813 
__STATIC_INLINE
 
q31_t
 
¨m_bûöór_öãΩ_q31
(

6814 
¨m_bûöór_öãΩ_ö°™˚_q31
 * 
S
,

6815 
q31_t
 
X
,

6816 
q31_t
 
Y
)

6818 
q31_t
 
out
;

6819 
q31_t
 
acc
 = 0;

6820 
q31_t
 
x‰a˘
, 
y‰a˘
;

6821 
q31_t
 
x1
, 
x2
, 
y1
, 
y2
;

6822 
öt32_t
 
rI
, 
cI
;

6823 
q31_t
 *
pYD©a
 = 
S
->
pD©a
;

6824 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6830 
rI
 = ((
X
 & 0xFFF00000) >> 20u);

6835 
cI
 = ((
Y
 & 0xFFF00000) >> 20u);

6839 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6846 
x‰a˘
 = (
X
 & 0x000FFFFF) << 11u;

6849 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6850 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6854 
y‰a˘
 = (
Y
 & 0x000FFFFF) << 11u;

6857 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6858 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6861 
out
 = ((
q31_t
Ë(((
q63_t
Ë
x1
 * (0x7FFFFFFF - 
x‰a˘
)) >> 32));

6862 
acc
 = ((
q31_t
Ë(((
q63_t
Ë
out
 * (0x7FFFFFFF - 
y‰a˘
)) >> 32));

6865 
out
 = ((
q31_t
Ë((
q63_t
Ë
x2
 * (0x7FFFFFFF - 
y‰a˘
) >> 32));

6866 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
x‰a˘
) >> 32));

6869 
out
 = ((
q31_t
Ë((
q63_t
Ë
y1
 * (0x7FFFFFFF - 
x‰a˘
) >> 32));

6870 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6873 
out
 = ((
q31_t
Ë((
q63_t
Ë
y2
 * (
x‰a˘
) >> 32));

6874 
acc
 +((
q31_t
Ë((
q63_t
Ë
out
 * (
y‰a˘
) >> 32));

6877  (
acc
 << 2u);

6889 
__STATIC_INLINE
 
q15_t
 
¨m_bûöór_öãΩ_q15
(

6890 
¨m_bûöór_öãΩ_ö°™˚_q15
 * 
S
,

6891 
q31_t
 
X
,

6892 
q31_t
 
Y
)

6894 
q63_t
 
acc
 = 0;

6895 
q31_t
 
out
;

6896 
q15_t
 
x1
, 
x2
, 
y1
, 
y2
;

6897 
q31_t
 
x‰a˘
, 
y‰a˘
;

6898 
öt32_t
 
rI
, 
cI
;

6899 
q15_t
 *
pYD©a
 = 
S
->
pD©a
;

6900 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6905 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6910 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6914 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

6921 
x‰a˘
 = (
X
 & 0x000FFFFF);

6924 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

6925 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

6930 
y‰a˘
 = (
Y
 & 0x000FFFFF);

6933 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

6934 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

6940 
out
 = (
q31_t
Ë(((
q63_t
Ë
x1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6941 
acc
 = ((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
));

6944 
out
 = (
q31_t
Ë(((
q63_t
Ë
x2
 * (0xFFFFF - 
y‰a˘
)) >> 4u);

6945 
acc
 +((
q63_t
Ë
out
 * (
x‰a˘
));

6948 
out
 = (
q31_t
Ë(((
q63_t
Ë
y1
 * (0xFFFFF - 
x‰a˘
)) >> 4u);

6949 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6952 
out
 = (
q31_t
Ë(((
q63_t
Ë
y2
 * (
x‰a˘
)) >> 4u);

6953 
acc
 +((
q63_t
Ë
out
 * (
y‰a˘
));

6957  (
acc
 >> 36);

6969 
__STATIC_INLINE
 
q7_t
 
¨m_bûöór_öãΩ_q7
(

6970 
¨m_bûöór_öãΩ_ö°™˚_q7
 * 
S
,

6971 
q31_t
 
X
,

6972 
q31_t
 
Y
)

6974 
q63_t
 
acc
 = 0;

6975 
q31_t
 
out
;

6976 
q31_t
 
x‰a˘
, 
y‰a˘
;

6977 
q7_t
 
x1
, 
x2
, 
y1
, 
y2
;

6978 
öt32_t
 
rI
, 
cI
;

6979 
q7_t
 *
pYD©a
 = 
S
->
pD©a
;

6980 
uöt32_t
 
nCﬁs
 = 
S
->
numCﬁs
;

6985 
rI
 = ((
X
 & 0xFFF00000) >> 20);

6990 
cI
 = ((
Y
 & 0xFFF00000) >> 20);

6994 if(
rI
 < 0 ||ÑI > (
S
->
numRows
-1Ë|| 
cI
 < 0 || cI > ( S->
numCﬁs
-1))

7001 
x‰a˘
 = (
X
 & 0x000FFFFF);

7004 
x1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
)];

7005 
x2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
) + 1u];

7010 
y‰a˘
 = (
Y
 & 0x000FFFFF);

7013 
y1
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1)];

7014 
y2
 = 
pYD©a
[(
rI
Ë+ 
nCﬁs
 * (
cI
 + 1) + 1u];

7017 
out
 = ((
x1
 * (0xFFFFF - 
x‰a˘
)));

7018 
acc
 = (((
q63_t
Ë
out
 * (0xFFFFF - 
y‰a˘
)));

7021 
out
 = ((
x2
 * (0xFFFFF - 
y‰a˘
)));

7022 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7025 
out
 = ((
y1
 * (0xFFFFF - 
x‰a˘
)));

7026 
acc
 +(((
q63_t
Ë
out
 * (
y‰a˘
)));

7029 
out
 = ((
y2
 * (
y‰a˘
)));

7030 
acc
 +(((
q63_t
Ë
out
 * (
x‰a˘
)));

7033  (
acc
 >> 40);

7046 #ifdef 
__˝lu•lus


	@resources/Include/core_cm0.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM0_H_GENERIC


32 
	#__CORE_CM0_H_GENERIC


	)

56 
	#__CM0_CMSIS_VERSION_MAIN
 (0x03Ë

	)

57 
	#__CM0_CMSIS_VERSION_SUB
 (0x00Ë

	)

58 
	#__CM0_CMSIS_VERSION
 ((
__CM0_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

59 
__CM0_CMSIS_VERSION_SUB
 )

61 
	#__CORTEX_M
 (0x00Ë

	)

64 #i‡ 
deföed
 ( 
__CC_ARM
 )

65 
	#__ASM
 
__asm


	)

66 
	#__INLINE
 
__ölöe


	)

67 
	#__STATIC_INLINE
 
__ölöe


	)

69 #ñi‡
deföed
 ( 
__ICCARM__
 )

70 
	#__ASM
 
__asm


	)

71 
	#__INLINE
 
ölöe


	)

72 
	#__STATIC_INLINE
 
ölöe


	)

74 #ñi‡
deföed
 ( 
__GNUC__
 )

75 
	#__ASM
 
__asm


	)

76 
	#__INLINE
 
ölöe


	)

77 
	#__STATIC_INLINE
 
ölöe


	)

79 #ñi‡
deföed
 ( 
__TASKING__
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
ölöe


	)

82 
	#__STATIC_INLINE
 
ölöe


	)

88 
	#__FPU_USED
 0

	)

90 #i‡
deföed
 ( 
__CC_ARM
 )

91 #i‡
deföed
 
__TARGET_FPU_VFP


95 #ñi‡
deföed
 ( 
__ICCARM__
 )

96 #i‡
deföed
 
__ARMVFP__


100 #ñi‡
deföed
 ( 
__GNUC__
 )

101 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

105 #ñi‡
deföed
 ( 
__TASKING__
 )

109 
	~<°döt.h
>

110 
	~<c‹e_cmIn°r.h
>

111 
	~<c‹e_cmFunc.h
>

115 #i‚de‡
__CMSIS_GENERIC


117 #i‚de‡
__CORE_CM0_H_DEPENDANT


118 
	#__CORE_CM0_H_DEPENDANT


	)

121 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


122 #i‚de‡
__CM0_REV


123 
	#__CM0_REV
 0x0000

	)

127 #i‚de‡
__NVIC_PRIO_BITS


128 
	#__NVIC_PRIO_BITS
 2

	)

132 #i‚de‡
__Víd‹_SysTickC⁄fig


133 
	#__Víd‹_SysTickC⁄fig
 0

	)

146 #ifde‡
__˝lu•lus


147 
	#__I
 vﬁ©ûê

	)

149 
	#__I
 vﬁ©ûêc⁄°

	)

151 
	#__O
 vﬁ©ûê

	)

152 
	#__IO
 vﬁ©ûê

	)

182 #i‡(
__CORTEX_M
 != 0x04)

183 
uöt32_t
 
_ª£rved0
:27;

185 
uöt32_t
 
_ª£rved0
:16;

186 
uöt32_t
 
GE
:4;

187 
uöt32_t
 
_ª£rved1
:7;

189 
uöt32_t
 
Q
:1;

190 
uöt32_t
 
V
:1;

191 
uöt32_t
 
C
:1;

192 
uöt32_t
 
Z
:1;

193 
uöt32_t
 
N
:1;

194 } 
b
;

195 
uöt32_t
 
w
;

196 } 
	tAPSR_Ty≥
;

205 
uöt32_t
 
	mISR
:9;

206 
uöt32_t
 
	m_ª£rved0
:23;

207 } 
	mb
;

208 
uöt32_t
 
	mw
;

209 } 
	tIPSR_Ty≥
;

218 
uöt32_t
 
	mISR
:9;

219 #i‡(
__CORTEX_M
 != 0x04)

220 
uöt32_t
 
	m_ª£rved0
:15;

222 
uöt32_t
 
	m_ª£rved0
:7;

223 
uöt32_t
 
	mGE
:4;

224 
uöt32_t
 
	m_ª£rved1
:4;

226 
uöt32_t
 
	mT
:1;

227 
uöt32_t
 
	mIT
:2;

228 
uöt32_t
 
	mQ
:1;

229 
uöt32_t
 
	mV
:1;

230 
uöt32_t
 
	mC
:1;

231 
uöt32_t
 
	mZ
:1;

232 
uöt32_t
 
	mN
:1;

233 } 
	mb
;

234 
uöt32_t
 
	mw
;

235 } 
	txPSR_Ty≥
;

244 
uöt32_t
 
	mnPRIV
:1;

245 
uöt32_t
 
	mSPSEL
:1;

246 
uöt32_t
 
	mFPCA
:1;

247 
uöt32_t
 
	m_ª£rved0
:29;

248 } 
	mb
;

249 
uöt32_t
 
	mw
;

250 } 
	tCONTROL_Ty≥
;

265 
__IO
 
uöt32_t
 
	mISER
[1];

266 
uöt32_t
 
	mRESERVED0
[31];

267 
__IO
 
uöt32_t
 
	mICER
[1];

268 
uöt32_t
 
	mRSERVED1
[31];

269 
__IO
 
uöt32_t
 
	mISPR
[1];

270 
uöt32_t
 
	mRESERVED2
[31];

271 
__IO
 
uöt32_t
 
	mICPR
[1];

272 
uöt32_t
 
	mRESERVED3
[31];

273 
uöt32_t
 
	mRESERVED4
[64];

274 
__IO
 
uöt32_t
 
	mIP
[8];

275 } 
	tNVIC_Ty≥
;

290 
__I
 
uöt32_t
 
	mCPUID
;

291 
__IO
 
uöt32_t
 
	mICSR
;

292 
uöt32_t
 
	mRESERVED0
;

293 
__IO
 
uöt32_t
 
	mAIRCR
;

294 
__IO
 
uöt32_t
 
	mSCR
;

295 
__IO
 
uöt32_t
 
	mCCR
;

296 
uöt32_t
 
	mRESERVED1
;

297 
__IO
 
uöt32_t
 
	mSHP
[2];

298 
__IO
 
uöt32_t
 
	mSHCSR
;

299 } 
	tSCB_Ty≥
;

302 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

303 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

305 
	#SCB_CPUID_VARIANT_Pos
 20

	)

306 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

308 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

309 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

311 
	#SCB_CPUID_PARTNO_Pos
 4

	)

312 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

314 
	#SCB_CPUID_REVISION_Pos
 0

	)

315 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

318 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

319 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

321 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

322 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

324 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

325 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

327 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

328 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

330 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

331 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

333 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

334 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

336 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

337 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

339 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

340 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

342 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

343 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

346 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

347 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

349 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

350 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

352 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

353 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

355 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

356 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

358 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

359 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

362 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

363 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

365 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

366 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

368 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

369 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

372 
	#SCB_CCR_STKALIGN_Pos
 9

	)

373 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

375 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

376 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

379 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

380 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

395 
__IO
 
uöt32_t
 
	mCTRL
;

396 
__IO
 
uöt32_t
 
	mLOAD
;

397 
__IO
 
uöt32_t
 
	mVAL
;

398 
__I
 
uöt32_t
 
	mCALIB
;

399 } 
	tSysTick_Ty≥
;

402 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

403 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

405 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

406 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

408 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

409 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

411 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

412 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

415 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

416 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

419 
	#SysTick_VAL_CURRENT_Pos
 0

	)

420 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

423 
	#SysTick_CALIB_NOREF_Pos
 31

	)

424 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

426 
	#SysTick_CALIB_SKEW_Pos
 30

	)

427 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

429 
	#SysTick_CALIB_TENMS_Pos
 0

	)

430 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

452 
	#SCS_BASE
 (0xE000E000ULË

	)

453 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

454 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

455 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

457 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

458 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

459 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

487 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

488 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

489 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

498 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

500 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

501 
	}
}

510 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

512 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

513 
	}
}

526 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

528 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

529 
	}
}

538 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

540 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

541 
	}
}

550 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

552 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

553 
	}
}

565 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

567 if(
IRQn
 < 0) {

568 
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

569 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

571 
NVIC
->
IP
[
	`_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

572 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

573 
	}
}

587 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

590 if(
IRQn
 < 0) {

591 ((
uöt32_t
)((
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË>> (8 - 
__NVIC_PRIO_BITS
))); }

593 ((
uöt32_t
)((
NVIC
->
IP
[ 
	`_IP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË>> (8 - 
__NVIC_PRIO_BITS
))); }

594 
	}
}

601 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

603 
	`__DSB
();

605 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

606 
SCB_AIRCR_SYSRESETREQ_Msk
);

607 
	`__DSB
();

609 
	}
}

622 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

639 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

641 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

643 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

644 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

645 
SysTick
->
VAL
 = 0;

646 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

647 
SysTick_CTRL_TICKINT_Msk
 |

648 
SysTick_CTRL_ENABLE_Msk
;

650 
	}
}

663 #ifde‡
__˝lu•lus


	@resources/Include/core_cm3.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM3_H_GENERIC


32 
	#__CORE_CM3_H_GENERIC


	)

56 
	#__CM3_CMSIS_VERSION_MAIN
 (0x03Ë

	)

57 
	#__CM3_CMSIS_VERSION_SUB
 (0x00Ë

	)

58 
	#__CM3_CMSIS_VERSION
 ((
__CM3_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

59 
__CM3_CMSIS_VERSION_SUB
 )

61 
	#__CORTEX_M
 (0x03Ë

	)

64 #i‡ 
deföed
 ( 
__CC_ARM
 )

65 
	#__ASM
 
__asm


	)

66 
	#__INLINE
 
__ölöe


	)

67 
	#__STATIC_INLINE
 
__ölöe


	)

69 #ñi‡
deföed
 ( 
__ICCARM__
 )

70 
	#__ASM
 
__asm


	)

71 
	#__INLINE
 
ölöe


	)

72 
	#__STATIC_INLINE
 
ölöe


	)

74 #ñi‡
deföed
 ( 
__TMS470__
 )

75 
	#__ASM
 
__asm


	)

76 
	#__STATIC_INLINE
 
ölöe


	)

78 #ñi‡
deföed
 ( 
__GNUC__
 )

79 
	#__ASM
 
__asm


	)

80 
	#__INLINE
 
ölöe


	)

81 
	#__STATIC_INLINE
 
ölöe


	)

83 #ñi‡
deföed
 ( 
__TASKING__
 )

84 
	#__ASM
 
__asm


	)

85 
	#__INLINE
 
ölöe


	)

86 
	#__STATIC_INLINE
 
ölöe


	)

92 
	#__FPU_USED
 0

	)

94 #i‡
deföed
 ( 
__CC_ARM
 )

95 #i‡
deföed
 
__TARGET_FPU_VFP


99 #ñi‡
deföed
 ( 
__ICCARM__
 )

100 #i‡
deföed
 
__ARMVFP__


104 #ñi‡
deföed
 ( 
__TMS470__
 )

105 #i‡
deföed
 
__TI__VFP_SUPPORT____


109 #ñi‡
deföed
 ( 
__GNUC__
 )

110 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

114 #ñi‡
deföed
 ( 
__TASKING__
 )

118 
	~<°döt.h
>

119 
	~<c‹e_cmIn°r.h
>

120 
	~<c‹e_cmFunc.h
>

124 #i‚de‡
__CMSIS_GENERIC


126 #i‚de‡
__CORE_CM3_H_DEPENDANT


127 
	#__CORE_CM3_H_DEPENDANT


	)

130 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


131 #i‚de‡
__CM3_REV


132 
	#__CM3_REV
 0x0200

	)

136 #i‚de‡
__MPU_PRESENT


137 
	#__MPU_PRESENT
 0

	)

141 #i‚de‡
__NVIC_PRIO_BITS


142 
	#__NVIC_PRIO_BITS
 4

	)

146 #i‚de‡
__Víd‹_SysTickC⁄fig


147 
	#__Víd‹_SysTickC⁄fig
 0

	)

160 #ifde‡
__˝lu•lus


161 
	#__I
 vﬁ©ûê

	)

163 
	#__I
 vﬁ©ûêc⁄°

	)

165 
	#__O
 vﬁ©ûê

	)

166 
	#__IO
 vﬁ©ûê

	)

198 #i‡(
__CORTEX_M
 != 0x04)

199 
uöt32_t
 
_ª£rved0
:27;

201 
uöt32_t
 
_ª£rved0
:16;

202 
uöt32_t
 
GE
:4;

203 
uöt32_t
 
_ª£rved1
:7;

205 
uöt32_t
 
Q
:1;

206 
uöt32_t
 
V
:1;

207 
uöt32_t
 
C
:1;

208 
uöt32_t
 
Z
:1;

209 
uöt32_t
 
N
:1;

210 } 
b
;

211 
uöt32_t
 
w
;

212 } 
	tAPSR_Ty≥
;

221 
uöt32_t
 
	mISR
:9;

222 
uöt32_t
 
	m_ª£rved0
:23;

223 } 
	mb
;

224 
uöt32_t
 
	mw
;

225 } 
	tIPSR_Ty≥
;

234 
uöt32_t
 
	mISR
:9;

235 #i‡(
__CORTEX_M
 != 0x04)

236 
uöt32_t
 
	m_ª£rved0
:15;

238 
uöt32_t
 
	m_ª£rved0
:7;

239 
uöt32_t
 
	mGE
:4;

240 
uöt32_t
 
	m_ª£rved1
:4;

242 
uöt32_t
 
	mT
:1;

243 
uöt32_t
 
	mIT
:2;

244 
uöt32_t
 
	mQ
:1;

245 
uöt32_t
 
	mV
:1;

246 
uöt32_t
 
	mC
:1;

247 
uöt32_t
 
	mZ
:1;

248 
uöt32_t
 
	mN
:1;

249 } 
	mb
;

250 
uöt32_t
 
	mw
;

251 } 
	txPSR_Ty≥
;

260 
uöt32_t
 
	mnPRIV
:1;

261 
uöt32_t
 
	mSPSEL
:1;

262 
uöt32_t
 
	mFPCA
:1;

263 
uöt32_t
 
	m_ª£rved0
:29;

264 } 
	mb
;

265 
uöt32_t
 
	mw
;

266 } 
	tCONTROL_Ty≥
;

281 
__IO
 
uöt32_t
 
	mISER
[8];

282 
uöt32_t
 
	mRESERVED0
[24];

283 
__IO
 
uöt32_t
 
	mICER
[8];

284 
uöt32_t
 
	mRSERVED1
[24];

285 
__IO
 
uöt32_t
 
	mISPR
[8];

286 
uöt32_t
 
	mRESERVED2
[24];

287 
__IO
 
uöt32_t
 
	mICPR
[8];

288 
uöt32_t
 
	mRESERVED3
[24];

289 
__IO
 
uöt32_t
 
	mIABR
[8];

290 
uöt32_t
 
	mRESERVED4
[56];

291 
__IO
 
uöt8_t
 
	mIP
[240];

292 
uöt32_t
 
	mRESERVED5
[644];

293 
__O
 
uöt32_t
 
	mSTIR
;

294 } 
	tNVIC_Ty≥
;

297 
	#NVIC_STIR_INTID_Pos
 0

	)

298 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

313 
__I
 
uöt32_t
 
	mCPUID
;

314 
__IO
 
uöt32_t
 
	mICSR
;

315 
__IO
 
uöt32_t
 
	mVTOR
;

316 
__IO
 
uöt32_t
 
	mAIRCR
;

317 
__IO
 
uöt32_t
 
	mSCR
;

318 
__IO
 
uöt32_t
 
	mCCR
;

319 
__IO
 
uöt8_t
 
	mSHP
[12];

320 
__IO
 
uöt32_t
 
	mSHCSR
;

321 
__IO
 
uöt32_t
 
	mCFSR
;

322 
__IO
 
uöt32_t
 
	mHFSR
;

323 
__IO
 
uöt32_t
 
	mDFSR
;

324 
__IO
 
uöt32_t
 
	mMMFAR
;

325 
__IO
 
uöt32_t
 
	mBFAR
;

326 
__IO
 
uöt32_t
 
	mAFSR
;

327 
__I
 
uöt32_t
 
	mPFR
[2];

328 
__I
 
uöt32_t
 
	mDFR
;

329 
__I
 
uöt32_t
 
	mADR
;

330 
__I
 
uöt32_t
 
	mMMFR
[4];

331 
__I
 
uöt32_t
 
	mISAR
[5];

332 
uöt32_t
 
	mRESERVED0
[5];

333 
__IO
 
uöt32_t
 
	mCPACR
;

334 } 
	tSCB_Ty≥
;

337 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

338 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

340 
	#SCB_CPUID_VARIANT_Pos
 20

	)

341 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

343 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

344 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

346 
	#SCB_CPUID_PARTNO_Pos
 4

	)

347 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

349 
	#SCB_CPUID_REVISION_Pos
 0

	)

350 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

353 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

354 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

356 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

357 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

359 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

360 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

362 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

363 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

365 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

366 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

368 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

369 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

371 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

372 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

374 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

375 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

377 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

378 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

380 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

381 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

384 #i‡(
__CM3_REV
 < 0x0201)

385 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

386 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

388 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

389 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

391 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

392 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

396 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

397 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

399 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

400 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

402 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

403 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

405 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

406 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

408 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

409 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

411 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

412 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

414 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

415 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

418 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

419 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

421 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

422 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

424 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

425 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

428 
	#SCB_CCR_STKALIGN_Pos
 9

	)

429 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

431 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

432 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

434 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

435 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

437 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

438 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

440 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

441 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

443 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

444 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

447 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

448 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

450 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

451 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

453 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

454 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

456 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

457 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

459 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

460 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

462 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

463 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

465 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

466 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

468 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

469 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

471 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

472 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

474 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

475 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

477 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

478 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

480 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

481 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

483 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

484 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

486 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

487 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

490 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

491 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

493 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

494 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

496 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

497 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

500 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

501 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

503 
	#SCB_HFSR_FORCED_Pos
 30

	)

504 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

506 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

507 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

510 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

511 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

513 
	#SCB_DFSR_VCATCH_Pos
 3

	)

514 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

516 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

517 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

519 
	#SCB_DFSR_BKPT_Pos
 1

	)

520 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

522 
	#SCB_DFSR_HALTED_Pos
 0

	)

523 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

538 
uöt32_t
 
	mRESERVED0
[1];

539 
__I
 
uöt32_t
 
	mICTR
;

540 #i‡((
deföed
 
__CM3_REV
) && (__CM3_REV >= 0x200))

541 
__IO
 
uöt32_t
 
	mACTLR
;

543 
uöt32_t
 
	mRESERVED1
[1];

545 } 
	tSCnSCB_Ty≥
;

548 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

549 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

553 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

554 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

556 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

557 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

559 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

560 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

575 
__IO
 
uöt32_t
 
	mCTRL
;

576 
__IO
 
uöt32_t
 
	mLOAD
;

577 
__IO
 
uöt32_t
 
	mVAL
;

578 
__I
 
uöt32_t
 
	mCALIB
;

579 } 
	tSysTick_Ty≥
;

582 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

583 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

585 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

586 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

588 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

589 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

591 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

592 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

595 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

596 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

599 
	#SysTick_VAL_CURRENT_Pos
 0

	)

600 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

603 
	#SysTick_CALIB_NOREF_Pos
 31

	)

604 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

606 
	#SysTick_CALIB_SKEW_Pos
 30

	)

607 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

609 
	#SysTick_CALIB_TENMS_Pos
 0

	)

610 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

625 
__O
 union

627 
__O
 
uöt8_t
 
	mu8
;

628 
__O
 
uöt16_t
 
	mu16
;

629 
__O
 
uöt32_t
 
	mu32
;

630 } 
	mPORT
 [32];

631 
uöt32_t
 
	mRESERVED0
[864];

632 
__IO
 
uöt32_t
 
	mTER
;

633 
uöt32_t
 
	mRESERVED1
[15];

634 
__IO
 
uöt32_t
 
	mTPR
;

635 
uöt32_t
 
	mRESERVED2
[15];

636 
__IO
 
uöt32_t
 
	mTCR
;

637 } 
	tITM_Ty≥
;

640 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

641 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

644 
	#ITM_TCR_BUSY_Pos
 23

	)

645 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

647 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

648 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

650 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

651 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

653 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

654 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

656 
	#ITM_TCR_SWOENA_Pos
 4

	)

657 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

659 
	#ITM_TCR_TXENA_Pos
 3

	)

660 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

662 
	#ITM_TCR_SYNCENA_Pos
 2

	)

663 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

665 
	#ITM_TCR_TSENA_Pos
 1

	)

666 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

668 
	#ITM_TCR_ITMENA_Pos
 0

	)

669 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

684 
__IO
 
uöt32_t
 
	mCTRL
;

685 
__IO
 
uöt32_t
 
	mCYCCNT
;

686 
__IO
 
uöt32_t
 
	mCPICNT
;

687 
__IO
 
uöt32_t
 
	mEXCCNT
;

688 
__IO
 
uöt32_t
 
	mSLEEPCNT
;

689 
__IO
 
uöt32_t
 
	mLSUCNT
;

690 
__IO
 
uöt32_t
 
	mFOLDCNT
;

691 
__I
 
uöt32_t
 
	mPCSR
;

692 
__IO
 
uöt32_t
 
	mCOMP0
;

693 
__IO
 
uöt32_t
 
	mMASK0
;

694 
__IO
 
uöt32_t
 
	mFUNCTION0
;

695 
uöt32_t
 
	mRESERVED0
[1];

696 
__IO
 
uöt32_t
 
	mCOMP1
;

697 
__IO
 
uöt32_t
 
	mMASK1
;

698 
__IO
 
uöt32_t
 
	mFUNCTION1
;

699 
uöt32_t
 
	mRESERVED1
[1];

700 
__IO
 
uöt32_t
 
	mCOMP2
;

701 
__IO
 
uöt32_t
 
	mMASK2
;

702 
__IO
 
uöt32_t
 
	mFUNCTION2
;

703 
uöt32_t
 
	mRESERVED2
[1];

704 
__IO
 
uöt32_t
 
	mCOMP3
;

705 
__IO
 
uöt32_t
 
	mMASK3
;

706 
__IO
 
uöt32_t
 
	mFUNCTION3
;

707 } 
	tDWT_Ty≥
;

710 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

711 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

713 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

714 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

716 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

717 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

719 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

720 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

722 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

723 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

725 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

726 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

728 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

729 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

731 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

732 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

734 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

735 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

737 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

738 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

740 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

741 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

743 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

744 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

746 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

747 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

749 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

750 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

752 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

753 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

755 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

756 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

758 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

759 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

761 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

762 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

765 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

766 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

769 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

770 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

773 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

774 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

777 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

778 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

781 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

782 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

785 
	#DWT_MASK_MASK_Pos
 0

	)

786 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

789 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

790 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

792 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

793 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

795 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

796 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

798 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

799 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

801 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

802 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

804 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

805 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

807 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

808 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

810 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

811 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

813 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

814 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

829 
__IO
 
uöt32_t
 
	mSSPSR
;

830 
__IO
 
uöt32_t
 
	mCSPSR
;

831 
uöt32_t
 
	mRESERVED0
[2];

832 
__IO
 
uöt32_t
 
	mACPR
;

833 
uöt32_t
 
	mRESERVED1
[55];

834 
__IO
 
uöt32_t
 
	mSPPR
;

835 
uöt32_t
 
	mRESERVED2
[131];

836 
__I
 
uöt32_t
 
	mFFSR
;

837 
__IO
 
uöt32_t
 
	mFFCR
;

838 
__I
 
uöt32_t
 
	mFSCR
;

839 
uöt32_t
 
	mRESERVED3
[759];

840 
__I
 
uöt32_t
 
	mTRIGGER
;

841 
__I
 
uöt32_t
 
	mFIFO0
;

842 
__I
 
uöt32_t
 
	mITATBCTR2
;

843 
uöt32_t
 
	mRESERVED4
[1];

844 
__I
 
uöt32_t
 
	mITATBCTR0
;

845 
__I
 
uöt32_t
 
	mFIFO1
;

846 
__IO
 
uöt32_t
 
	mITCTRL
;

847 
uöt32_t
 
	mRESERVED5
[39];

848 
__IO
 
uöt32_t
 
	mCLAIMSET
;

849 
__IO
 
uöt32_t
 
	mCLAIMCLR
;

850 
uöt32_t
 
	mRESERVED7
[8];

851 
__I
 
uöt32_t
 
	mDEVID
;

852 
__I
 
uöt32_t
 
	mDEVTYPE
;

853 } 
	tTPI_Ty≥
;

856 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

857 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

860 
	#TPI_SPPR_TXMODE_Pos
 0

	)

861 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

864 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

865 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

867 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

868 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

870 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

871 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

873 
	#TPI_FFSR_FlInProg_Pos
 0

	)

874 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

877 
	#TPI_FFCR_TrigIn_Pos
 8

	)

878 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

880 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

881 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

884 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

885 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

888 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

889 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

891 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

892 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

894 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

895 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

897 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

898 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

900 
	#TPI_FIFO0_ETM2_Pos
 16

	)

901 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

903 
	#TPI_FIFO0_ETM1_Pos
 8

	)

904 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

906 
	#TPI_FIFO0_ETM0_Pos
 0

	)

907 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

910 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

911 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

914 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

915 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

917 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

918 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

920 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

921 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

923 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

924 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

926 
	#TPI_FIFO1_ITM2_Pos
 16

	)

927 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

929 
	#TPI_FIFO1_ITM1_Pos
 8

	)

930 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

932 
	#TPI_FIFO1_ITM0_Pos
 0

	)

933 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

936 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

937 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

940 
	#TPI_ITCTRL_Mode_Pos
 0

	)

941 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

944 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

945 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

947 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

948 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

950 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

951 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

953 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

954 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

956 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

957 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

959 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

960 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

963 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

964 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

966 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

967 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

972 #i‡(
__MPU_PRESENT
 == 1)

983 
__I
 
uöt32_t
 
	mTYPE
;

984 
__IO
 
uöt32_t
 
	mCTRL
;

985 
__IO
 
uöt32_t
 
	mRNR
;

986 
__IO
 
uöt32_t
 
	mRBAR
;

987 
__IO
 
uöt32_t
 
	mRASR
;

988 
__IO
 
uöt32_t
 
	mRBAR_A1
;

989 
__IO
 
uöt32_t
 
	mRASR_A1
;

990 
__IO
 
uöt32_t
 
	mRBAR_A2
;

991 
__IO
 
uöt32_t
 
	mRASR_A2
;

992 
__IO
 
uöt32_t
 
	mRBAR_A3
;

993 
__IO
 
uöt32_t
 
	mRASR_A3
;

994 } 
	tMPU_Ty≥
;

997 
	#MPU_TYPE_IREGION_Pos
 16

	)

998 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1000 
	#MPU_TYPE_DREGION_Pos
 8

	)

1001 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1003 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1004 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1007 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1008 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1010 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1011 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1013 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1014 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1017 
	#MPU_RNR_REGION_Pos
 0

	)

1018 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1021 
	#MPU_RBAR_ADDR_Pos
 5

	)

1022 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1024 
	#MPU_RBAR_VALID_Pos
 4

	)

1025 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1027 
	#MPU_RBAR_REGION_Pos
 0

	)

1028 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1031 
	#MPU_RASR_ATTRS_Pos
 16

	)

1032 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1034 
	#MPU_RASR_SRD_Pos
 8

	)

1035 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1037 
	#MPU_RASR_SIZE_Pos
 1

	)

1038 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1040 
	#MPU_RASR_ENABLE_Pos
 0

	)

1041 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1057 
__IO
 
uöt32_t
 
	mDHCSR
;

1058 
__O
 
uöt32_t
 
	mDCRSR
;

1059 
__IO
 
uöt32_t
 
	mDCRDR
;

1060 
__IO
 
uöt32_t
 
	mDEMCR
;

1061 } 
	tC‹eDebug_Ty≥
;

1064 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1065 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1067 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1068 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1070 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1071 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1073 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1074 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1076 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1077 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1079 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1080 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1082 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1083 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1085 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1086 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1088 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1089 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1091 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1092 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1094 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1095 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1097 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1098 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1101 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1102 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1104 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1105 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1108 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1109 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1111 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1112 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1114 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1115 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1117 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1118 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1120 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1121 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1123 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1124 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1126 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1127 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1129 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1130 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1132 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1133 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1135 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1136 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1138 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1139 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1141 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1142 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1144 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1145 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1157 
	#SCS_BASE
 (0xE000E000ULË

	)

1158 
	#ITM_BASE
 (0xE0000000ULË

	)

1159 
	#DWT_BASE
 (0xE0001000ULË

	)

1160 
	#TPI_BASE
 (0xE0040000ULË

	)

1161 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1162 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1163 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1164 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1166 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1167 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1168 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1169 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1170 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1171 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1172 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1173 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1175 #i‡(
__MPU_PRESENT
 == 1)

1176 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1177 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1214 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1216 
uöt32_t
 
ªg_vÆue
;

1217 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1219 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1220 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1221 
ªg_vÆue
 = (reg_value |

1222 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1223 (
Pri‹ôyGroupTmp
 << 8));

1224 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1225 
	}
}

1234 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôyGroupög
()

1236  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1237 
	}
}

1246 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1248 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1249 
	}
}

1258 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1260 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1261 
	}
}

1274 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1276 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1277 
	}
}

1286 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1288 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1289 
	}
}

1298 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1300 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1301 
	}
}

1313 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1315 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1316 
	}
}

1328 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1330 if(
IRQn
 < 0) {

1331 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1333 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1334 
	}
}

1348 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1351 if(
IRQn
 < 0) {

1352 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1354 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1355 
	}
}

1370 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_EncodePri‹ôy
 (
uöt32_t
 
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1372 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1373 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1374 
uöt32_t
 
SubPri‹ôyBôs
;

1376 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1377 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1380 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1381 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1383 
	}
}

1398 
__STATIC_INLINE
 
	$NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1400 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1401 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1402 
uöt32_t
 
SubPri‹ôyBôs
;

1404 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1405 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1407 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1408 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1409 
	}
}

1416 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

1418 
	`__DSB
();

1420 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1421 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1422 
SCB_AIRCR_SYSRESETREQ_Msk
);

1423 
	`__DSB
();

1425 
	}
}

1438 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1455 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

1457 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1459 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1460 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1461 
SysTick
->
VAL
 = 0;

1462 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1463 
SysTick_CTRL_TICKINT_Msk
 |

1464 
SysTick_CTRL_ENABLE_Msk
;

1466 
	}
}

1481 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1482 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1495 
__STATIC_INLINE
 
uöt32_t
 
	$ITM_SídCh¨
 (
uöt32_t
 
ch
)

1497 i‡((
ITM
->
TCR
 & 
ITM_TCR_ITMENA_Msk
) &&

1498 (
ITM
->
TER
 & (1UL << 0) ) )

1500 
ITM
->
PORT
[0].
u32
 == 0);

1501 
ITM
->
PORT
[0].
u8
 = (
uöt8_t
Ë
ch
;

1503  (
ch
);

1504 
	}
}

1514 
__STATIC_INLINE
 
öt32_t
 
	$ITM_Re˚iveCh¨
 () {

1515 
öt32_t
 
ch
 = -1;

1517 i‡(
ITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1518 
ch
 = 
ITM_RxBuf„r
;

1519 
ITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1522  (
ch
);

1523 
	}
}

1533 
__STATIC_INLINE
 
öt32_t
 
	$ITM_CheckCh¨
 () {

1535 i‡(
ITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1540 
	}
}

1548 #ifde‡
__˝lu•lus


	@resources/Include/core_cm4.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_CM4_H_GENERIC


32 
	#__CORE_CM4_H_GENERIC


	)

56 
	#__CM4_CMSIS_VERSION_MAIN
 (0x03Ë

	)

57 
	#__CM4_CMSIS_VERSION_SUB
 (0x00Ë

	)

58 
	#__CM4_CMSIS_VERSION
 ((
__CM4_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

59 
__CM4_CMSIS_VERSION_SUB
 )

61 
	#__CORTEX_M
 (0x04Ë

	)

64 #i‡ 
deföed
 ( 
__CC_ARM
 )

65 
	#__ASM
 
__asm


	)

66 
	#__INLINE
 
__ölöe


	)

67 
	#__STATIC_INLINE
 
__ölöe


	)

69 #ñi‡
deföed
 ( 
__ICCARM__
 )

70 
	#__ASM
 
__asm


	)

71 
	#__INLINE
 
ölöe


	)

72 
	#__STATIC_INLINE
 
ölöe


	)

74 #ñi‡
deföed
 ( 
__TMS470__
 )

75 
	#__ASM
 
__asm


	)

76 
	#__STATIC_INLINE
 
ölöe


	)

78 #ñi‡
deföed
 ( 
__GNUC__
 )

79 
	#__ASM
 
__asm


	)

80 
	#__INLINE
 
ölöe


	)

81 
	#__STATIC_INLINE
 
ölöe


	)

83 #ñi‡
deföed
 ( 
__TASKING__
 )

84 
	#__ASM
 
__asm


	)

85 
	#__INLINE
 
ölöe


	)

86 
	#__STATIC_INLINE
 
ölöe


	)

92 #i‡
deföed
 ( 
__CC_ARM
 )

93 #i‡
deföed
 
__TARGET_FPU_VFP


94 #i‡(
__FPU_PRESENT
 == 1)

95 
	#__FPU_USED
 1

	)

98 
	#__FPU_USED
 0

	)

101 
	#__FPU_USED
 0

	)

104 #ñi‡
deföed
 ( 
__ICCARM__
 )

105 #i‡
deföed
 
__ARMVFP__


106 #i‡(
__FPU_PRESENT
 == 1)

107 
	#__FPU_USED
 1

	)

110 
	#__FPU_USED
 0

	)

113 
	#__FPU_USED
 0

	)

116 #ñi‡
deföed
 ( 
__TMS470__
 )

117 #i‡
deföed
 
__TI_VFP_SUPPORT__


118 #i‡(
__FPU_PRESENT
 == 1)

119 
	#__FPU_USED
 1

	)

122 
	#__FPU_USED
 0

	)

125 
	#__FPU_USED
 0

	)

128 #ñi‡
deföed
 ( 
__GNUC__
 )

129 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

130 #i‡(
__FPU_PRESENT
 == 1)

131 
	#__FPU_USED
 1

	)

134 
	#__FPU_USED
 0

	)

137 
	#__FPU_USED
 0

	)

140 #ñi‡
deföed
 ( 
__TASKING__
 )

142 
	#__FPU_USED
 0

	)

145 
	~<°döt.h
>

146 
	~<c‹e_cmIn°r.h
>

147 
	~<c‹e_cmFunc.h
>

148 
	~<c‹e_cm4_simd.h
>

152 #i‚de‡
__CMSIS_GENERIC


154 #i‚de‡
__CORE_CM4_H_DEPENDANT


155 
	#__CORE_CM4_H_DEPENDANT


	)

158 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


159 #i‚de‡
__CM4_REV


160 
	#__CM4_REV
 0x0000

	)

164 #i‚de‡
__FPU_PRESENT


165 
	#__FPU_PRESENT
 0

	)

169 #i‚de‡
__MPU_PRESENT


170 
	#__MPU_PRESENT
 0

	)

174 #i‚de‡
__NVIC_PRIO_BITS


175 
	#__NVIC_PRIO_BITS
 4

	)

179 #i‚de‡
__Víd‹_SysTickC⁄fig


180 
	#__Víd‹_SysTickC⁄fig
 0

	)

193 #ifde‡
__˝lu•lus


194 
	#__I
 vﬁ©ûê

	)

196 
	#__I
 vﬁ©ûêc⁄°

	)

198 
	#__O
 vﬁ©ûê

	)

199 
	#__IO
 vﬁ©ûê

	)

232 #i‡(
__CORTEX_M
 != 0x04)

233 
uöt32_t
 
_ª£rved0
:27;

235 
uöt32_t
 
_ª£rved0
:16;

236 
uöt32_t
 
GE
:4;

237 
uöt32_t
 
_ª£rved1
:7;

239 
uöt32_t
 
Q
:1;

240 
uöt32_t
 
V
:1;

241 
uöt32_t
 
C
:1;

242 
uöt32_t
 
Z
:1;

243 
uöt32_t
 
N
:1;

244 } 
b
;

245 
uöt32_t
 
w
;

246 } 
	tAPSR_Ty≥
;

255 
uöt32_t
 
ISR
:9;

256 
uöt32_t
 
_ª£rved0
:23;

257 } 
b
;

258 
uöt32_t
 
w
;

259 } 
	tIPSR_Ty≥
;

268 
uöt32_t
 
ISR
:9;

269 #i‡(
__CORTEX_M
 != 0x04)

270 
uöt32_t
 
_ª£rved0
:15;

272 
uöt32_t
 
_ª£rved0
:7;

273 
uöt32_t
 
GE
:4;

274 
uöt32_t
 
_ª£rved1
:4;

276 
uöt32_t
 
T
:1;

277 
uöt32_t
 
IT
:2;

278 
uöt32_t
 
Q
:1;

279 
uöt32_t
 
V
:1;

280 
uöt32_t
 
C
:1;

281 
uöt32_t
 
Z
:1;

282 
uöt32_t
 
N
:1;

283 } 
b
;

284 
uöt32_t
 
w
;

285 } 
	txPSR_Ty≥
;

294 
uöt32_t
 
nPRIV
:1;

295 
uöt32_t
 
SPSEL
:1;

296 
uöt32_t
 
FPCA
:1;

297 
uöt32_t
 
_ª£rved0
:29;

298 } 
b
;

299 
uöt32_t
 
w
;

300 } 
	tCONTROL_Ty≥
;

315 
__IO
 
uöt32_t
 
ISER
[8];

316 
uöt32_t
 
RESERVED0
[24];

317 
__IO
 
uöt32_t
 
ICER
[8];

318 
uöt32_t
 
RSERVED1
[24];

319 
__IO
 
uöt32_t
 
ISPR
[8];

320 
uöt32_t
 
RESERVED2
[24];

321 
__IO
 
uöt32_t
 
ICPR
[8];

322 
uöt32_t
 
RESERVED3
[24];

323 
__IO
 
uöt32_t
 
IABR
[8];

324 
uöt32_t
 
RESERVED4
[56];

325 
__IO
 
uöt8_t
 
IP
[240];

326 
uöt32_t
 
RESERVED5
[644];

327 
__O
 
uöt32_t
 
STIR
;

328 } 
	tNVIC_Ty≥
;

331 
	#NVIC_STIR_INTID_Pos
 0

	)

332 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

347 
__I
 
uöt32_t
 
CPUID
;

348 
__IO
 
uöt32_t
 
ICSR
;

349 
__IO
 
uöt32_t
 
VTOR
;

350 
__IO
 
uöt32_t
 
AIRCR
;

351 
__IO
 
uöt32_t
 
SCR
;

352 
__IO
 
uöt32_t
 
CCR
;

353 
__IO
 
uöt8_t
 
SHP
[12];

354 
__IO
 
uöt32_t
 
SHCSR
;

355 
__IO
 
uöt32_t
 
CFSR
;

356 
__IO
 
uöt32_t
 
HFSR
;

357 
__IO
 
uöt32_t
 
DFSR
;

358 
__IO
 
uöt32_t
 
MMFAR
;

359 
__IO
 
uöt32_t
 
BFAR
;

360 
__IO
 
uöt32_t
 
AFSR
;

361 
__I
 
uöt32_t
 
PFR
[2];

362 
__I
 
uöt32_t
 
DFR
;

363 
__I
 
uöt32_t
 
ADR
;

364 
__I
 
uöt32_t
 
MMFR
[4];

365 
__I
 
uöt32_t
 
ISAR
[5];

366 
uöt32_t
 
RESERVED0
[5];

367 
__IO
 
uöt32_t
 
CPACR
;

368 } 
	tSCB_Ty≥
;

371 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

372 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

374 
	#SCB_CPUID_VARIANT_Pos
 20

	)

375 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

377 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

378 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

380 
	#SCB_CPUID_PARTNO_Pos
 4

	)

381 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

383 
	#SCB_CPUID_REVISION_Pos
 0

	)

384 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

387 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

388 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

390 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

391 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

393 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

394 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

396 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

397 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

399 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

400 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

402 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

403 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

405 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

406 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

408 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

409 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

411 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

412 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

414 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

415 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

418 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

419 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

422 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

423 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

425 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

426 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

428 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

429 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

431 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

432 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

434 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

435 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

437 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

438 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

440 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

441 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

444 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

445 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

447 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

448 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

450 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

451 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

454 
	#SCB_CCR_STKALIGN_Pos
 9

	)

455 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

457 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

458 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

460 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

461 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

463 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

464 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

466 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

467 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

469 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

470 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

473 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

474 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

476 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

477 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

479 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

480 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

482 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

483 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

485 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

486 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

488 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

489 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

491 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

492 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

494 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

495 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

497 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

498 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

500 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

501 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

503 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

504 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

506 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

507 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

509 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

510 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

512 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

513 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

516 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

517 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

519 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

520 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

522 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

523 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

526 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

527 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

529 
	#SCB_HFSR_FORCED_Pos
 30

	)

530 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

532 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

533 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

536 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

537 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

539 
	#SCB_DFSR_VCATCH_Pos
 3

	)

540 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

542 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

543 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

545 
	#SCB_DFSR_BKPT_Pos
 1

	)

546 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

548 
	#SCB_DFSR_HALTED_Pos
 0

	)

549 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

564 
uöt32_t
 
RESERVED0
[1];

565 
__I
 
uöt32_t
 
ICTR
;

566 
__IO
 
uöt32_t
 
ACTLR
;

567 } 
	tSCnSCB_Ty≥
;

570 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

571 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

574 
	#SCnSCB_ACTLR_DISOOFP_Pos
 9

	)

575 
	#SCnSCB_ACTLR_DISOOFP_Msk
 (1UL << 
SCnSCB_ACTLR_DISOOFP_Pos
Ë

	)

577 
	#SCnSCB_ACTLR_DISFPCA_Pos
 8

	)

578 
	#SCnSCB_ACTLR_DISFPCA_Msk
 (1UL << 
SCnSCB_ACTLR_DISFPCA_Pos
Ë

	)

580 
	#SCnSCB_ACTLR_DISFOLD_Pos
 2

	)

581 
	#SCnSCB_ACTLR_DISFOLD_Msk
 (1UL << 
SCnSCB_ACTLR_DISFOLD_Pos
Ë

	)

583 
	#SCnSCB_ACTLR_DISDEFWBUF_Pos
 1

	)

584 
	#SCnSCB_ACTLR_DISDEFWBUF_Msk
 (1UL << 
SCnSCB_ACTLR_DISDEFWBUF_Pos
Ë

	)

586 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

587 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

602 
__IO
 
uöt32_t
 
CTRL
;

603 
__IO
 
uöt32_t
 
LOAD
;

604 
__IO
 
uöt32_t
 
VAL
;

605 
__I
 
uöt32_t
 
CALIB
;

606 } 
	tSysTick_Ty≥
;

609 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

610 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

612 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

613 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

615 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

616 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

618 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

619 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

622 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

623 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

626 
	#SysTick_VAL_CURRENT_Pos
 0

	)

627 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

630 
	#SysTick_CALIB_NOREF_Pos
 31

	)

631 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

633 
	#SysTick_CALIB_SKEW_Pos
 30

	)

634 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

636 
	#SysTick_CALIB_TENMS_Pos
 0

	)

637 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

652 
__O
 union

654 
__O
 
uöt8_t
 
u8
;

655 
__O
 
uöt16_t
 
u16
;

656 
__O
 
uöt32_t
 
u32
;

657 } 
PORT
 [32];

658 
uöt32_t
 
RESERVED0
[864];

659 
__IO
 
uöt32_t
 
TER
;

660 
uöt32_t
 
RESERVED1
[15];

661 
__IO
 
uöt32_t
 
TPR
;

662 
uöt32_t
 
RESERVED2
[15];

663 
__IO
 
uöt32_t
 
TCR
;

664 } 
	tITM_Ty≥
;

667 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

668 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

671 
	#ITM_TCR_BUSY_Pos
 23

	)

672 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

674 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

675 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

677 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

678 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

680 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

681 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

683 
	#ITM_TCR_SWOENA_Pos
 4

	)

684 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

686 
	#ITM_TCR_TXENA_Pos
 3

	)

687 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

689 
	#ITM_TCR_SYNCENA_Pos
 2

	)

690 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

692 
	#ITM_TCR_TSENA_Pos
 1

	)

693 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

695 
	#ITM_TCR_ITMENA_Pos
 0

	)

696 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

711 
__IO
 
uöt32_t
 
CTRL
;

712 
__IO
 
uöt32_t
 
CYCCNT
;

713 
__IO
 
uöt32_t
 
CPICNT
;

714 
__IO
 
uöt32_t
 
EXCCNT
;

715 
__IO
 
uöt32_t
 
SLEEPCNT
;

716 
__IO
 
uöt32_t
 
LSUCNT
;

717 
__IO
 
uöt32_t
 
FOLDCNT
;

718 
__I
 
uöt32_t
 
PCSR
;

719 
__IO
 
uöt32_t
 
COMP0
;

720 
__IO
 
uöt32_t
 
MASK0
;

721 
__IO
 
uöt32_t
 
FUNCTION0
;

722 
uöt32_t
 
RESERVED0
[1];

723 
__IO
 
uöt32_t
 
COMP1
;

724 
__IO
 
uöt32_t
 
MASK1
;

725 
__IO
 
uöt32_t
 
FUNCTION1
;

726 
uöt32_t
 
RESERVED1
[1];

727 
__IO
 
uöt32_t
 
COMP2
;

728 
__IO
 
uöt32_t
 
MASK2
;

729 
__IO
 
uöt32_t
 
FUNCTION2
;

730 
uöt32_t
 
RESERVED2
[1];

731 
__IO
 
uöt32_t
 
COMP3
;

732 
__IO
 
uöt32_t
 
MASK3
;

733 
__IO
 
uöt32_t
 
FUNCTION3
;

734 } 
	tDWT_Ty≥
;

737 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

738 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

740 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

741 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

743 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

744 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

746 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

747 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

749 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

750 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

752 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

753 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

755 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

756 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

758 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

759 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

761 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

762 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

764 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

765 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

767 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

768 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

770 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

771 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

773 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

774 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

776 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

777 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

779 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

780 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

782 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

783 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

785 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

786 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

788 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

789 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

792 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

793 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

796 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

797 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

800 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

801 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

804 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

805 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

808 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

809 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

812 
	#DWT_MASK_MASK_Pos
 0

	)

813 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

816 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

817 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

819 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

820 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

822 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

823 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

825 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

826 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

828 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

829 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

831 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

832 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

834 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

835 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

837 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

838 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

840 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

841 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

856 
__IO
 
uöt32_t
 
SSPSR
;

857 
__IO
 
uöt32_t
 
CSPSR
;

858 
uöt32_t
 
RESERVED0
[2];

859 
__IO
 
uöt32_t
 
ACPR
;

860 
uöt32_t
 
RESERVED1
[55];

861 
__IO
 
uöt32_t
 
SPPR
;

862 
uöt32_t
 
RESERVED2
[131];

863 
__I
 
uöt32_t
 
FFSR
;

864 
__IO
 
uöt32_t
 
FFCR
;

865 
__I
 
uöt32_t
 
FSCR
;

866 
uöt32_t
 
RESERVED3
[759];

867 
__I
 
uöt32_t
 
TRIGGER
;

868 
__I
 
uöt32_t
 
FIFO0
;

869 
__I
 
uöt32_t
 
ITATBCTR2
;

870 
uöt32_t
 
RESERVED4
[1];

871 
__I
 
uöt32_t
 
ITATBCTR0
;

872 
__I
 
uöt32_t
 
FIFO1
;

873 
__IO
 
uöt32_t
 
ITCTRL
;

874 
uöt32_t
 
RESERVED5
[39];

875 
__IO
 
uöt32_t
 
CLAIMSET
;

876 
__IO
 
uöt32_t
 
CLAIMCLR
;

877 
uöt32_t
 
RESERVED7
[8];

878 
__I
 
uöt32_t
 
DEVID
;

879 
__I
 
uöt32_t
 
DEVTYPE
;

880 } 
	tTPI_Ty≥
;

883 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

884 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

887 
	#TPI_SPPR_TXMODE_Pos
 0

	)

888 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

891 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

892 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

894 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

895 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

897 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

898 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

900 
	#TPI_FFSR_FlInProg_Pos
 0

	)

901 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

904 
	#TPI_FFCR_TrigIn_Pos
 8

	)

905 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

907 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

908 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

911 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

912 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

915 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

916 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

918 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

919 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

921 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

922 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

924 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

925 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

927 
	#TPI_FIFO0_ETM2_Pos
 16

	)

928 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

930 
	#TPI_FIFO0_ETM1_Pos
 8

	)

931 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

933 
	#TPI_FIFO0_ETM0_Pos
 0

	)

934 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

937 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

938 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

941 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

942 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

944 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

945 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

947 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

948 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

950 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

951 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

953 
	#TPI_FIFO1_ITM2_Pos
 16

	)

954 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

956 
	#TPI_FIFO1_ITM1_Pos
 8

	)

957 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

959 
	#TPI_FIFO1_ITM0_Pos
 0

	)

960 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

963 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

964 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

967 
	#TPI_ITCTRL_Mode_Pos
 0

	)

968 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

971 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

972 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

974 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

975 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

977 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

978 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

980 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

981 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

983 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

984 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

986 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

987 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

990 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

991 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

993 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

994 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

999 #i‡(
__MPU_PRESENT
 == 1)

1010 
__I
 
uöt32_t
 
TYPE
;

1011 
__IO
 
uöt32_t
 
CTRL
;

1012 
__IO
 
uöt32_t
 
RNR
;

1013 
__IO
 
uöt32_t
 
RBAR
;

1014 
__IO
 
uöt32_t
 
RASR
;

1015 
__IO
 
uöt32_t
 
RBAR_A1
;

1016 
__IO
 
uöt32_t
 
RASR_A1
;

1017 
__IO
 
uöt32_t
 
RBAR_A2
;

1018 
__IO
 
uöt32_t
 
RASR_A2
;

1019 
__IO
 
uöt32_t
 
RBAR_A3
;

1020 
__IO
 
uöt32_t
 
RASR_A3
;

1021 } 
	tMPU_Ty≥
;

1024 
	#MPU_TYPE_IREGION_Pos
 16

	)

1025 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

1027 
	#MPU_TYPE_DREGION_Pos
 8

	)

1028 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

1030 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

1031 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

1034 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

1035 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

1037 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

1038 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

1040 
	#MPU_CTRL_ENABLE_Pos
 0

	)

1041 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

1044 
	#MPU_RNR_REGION_Pos
 0

	)

1045 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

1048 
	#MPU_RBAR_ADDR_Pos
 5

	)

1049 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

1051 
	#MPU_RBAR_VALID_Pos
 4

	)

1052 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

1054 
	#MPU_RBAR_REGION_Pos
 0

	)

1055 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1058 
	#MPU_RASR_ATTRS_Pos
 16

	)

1059 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1061 
	#MPU_RASR_SRD_Pos
 8

	)

1062 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1064 
	#MPU_RASR_SIZE_Pos
 1

	)

1065 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1067 
	#MPU_RASR_ENABLE_Pos
 0

	)

1068 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1074 #i‡(
__FPU_PRESENT
 == 1)

1085 
uöt32_t
 
RESERVED0
[1];

1086 
__IO
 
uöt32_t
 
FPCCR
;

1087 
__IO
 
uöt32_t
 
FPCAR
;

1088 
__IO
 
uöt32_t
 
FPDSCR
;

1089 
__I
 
uöt32_t
 
MVFR0
;

1090 
__I
 
uöt32_t
 
MVFR1
;

1091 } 
	tFPU_Ty≥
;

1094 
	#FPU_FPCCR_ASPEN_Pos
 31

	)

1095 
	#FPU_FPCCR_ASPEN_Msk
 (1UL << 
FPU_FPCCR_ASPEN_Pos
Ë

	)

1097 
	#FPU_FPCCR_LSPEN_Pos
 30

	)

1098 
	#FPU_FPCCR_LSPEN_Msk
 (1UL << 
FPU_FPCCR_LSPEN_Pos
Ë

	)

1100 
	#FPU_FPCCR_MONRDY_Pos
 8

	)

1101 
	#FPU_FPCCR_MONRDY_Msk
 (1UL << 
FPU_FPCCR_MONRDY_Pos
Ë

	)

1103 
	#FPU_FPCCR_BFRDY_Pos
 6

	)

1104 
	#FPU_FPCCR_BFRDY_Msk
 (1UL << 
FPU_FPCCR_BFRDY_Pos
Ë

	)

1106 
	#FPU_FPCCR_MMRDY_Pos
 5

	)

1107 
	#FPU_FPCCR_MMRDY_Msk
 (1UL << 
FPU_FPCCR_MMRDY_Pos
Ë

	)

1109 
	#FPU_FPCCR_HFRDY_Pos
 4

	)

1110 
	#FPU_FPCCR_HFRDY_Msk
 (1UL << 
FPU_FPCCR_HFRDY_Pos
Ë

	)

1112 
	#FPU_FPCCR_THREAD_Pos
 3

	)

1113 
	#FPU_FPCCR_THREAD_Msk
 (1UL << 
FPU_FPCCR_THREAD_Pos
Ë

	)

1115 
	#FPU_FPCCR_USER_Pos
 1

	)

1116 
	#FPU_FPCCR_USER_Msk
 (1UL << 
FPU_FPCCR_USER_Pos
Ë

	)

1118 
	#FPU_FPCCR_LSPACT_Pos
 0

	)

1119 
	#FPU_FPCCR_LSPACT_Msk
 (1UL << 
FPU_FPCCR_LSPACT_Pos
Ë

	)

1122 
	#FPU_FPCAR_ADDRESS_Pos
 3

	)

1123 
	#FPU_FPCAR_ADDRESS_Msk
 (0x1FFFFFFFUL << 
FPU_FPCAR_ADDRESS_Pos
Ë

	)

1126 
	#FPU_FPDSCR_AHP_Pos
 26

	)

1127 
	#FPU_FPDSCR_AHP_Msk
 (1UL << 
FPU_FPDSCR_AHP_Pos
Ë

	)

1129 
	#FPU_FPDSCR_DN_Pos
 25

	)

1130 
	#FPU_FPDSCR_DN_Msk
 (1UL << 
FPU_FPDSCR_DN_Pos
Ë

	)

1132 
	#FPU_FPDSCR_FZ_Pos
 24

	)

1133 
	#FPU_FPDSCR_FZ_Msk
 (1UL << 
FPU_FPDSCR_FZ_Pos
Ë

	)

1135 
	#FPU_FPDSCR_RMode_Pos
 22

	)

1136 
	#FPU_FPDSCR_RMode_Msk
 (3UL << 
FPU_FPDSCR_RMode_Pos
Ë

	)

1139 
	#FPU_MVFR0_FP_roundög_modes_Pos
 28

	)

1140 
	#FPU_MVFR0_FP_roundög_modes_Msk
 (0xFUL << 
FPU_MVFR0_FP_roundög_modes_Pos
Ë

	)

1142 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Pos
 24

	)

1143 
	#FPU_MVFR0_Sh‹t_ve˘‹s_Msk
 (0xFUL << 
FPU_MVFR0_Sh‹t_ve˘‹s_Pos
Ë

	)

1145 
	#FPU_MVFR0_Squ¨e_roŸ_Pos
 20

	)

1146 
	#FPU_MVFR0_Squ¨e_roŸ_Msk
 (0xFUL << 
FPU_MVFR0_Squ¨e_roŸ_Pos
Ë

	)

1148 
	#FPU_MVFR0_Divide_Pos
 16

	)

1149 
	#FPU_MVFR0_Divide_Msk
 (0xFUL << 
FPU_MVFR0_Divide_Pos
Ë

	)

1151 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Pos
 12

	)

1152 
	#FPU_MVFR0_FP_ex˚p_å≠pög_Msk
 (0xFUL << 
FPU_MVFR0_FP_ex˚p_å≠pög_Pos
Ë

	)

1154 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
 8

	)

1155 
	#FPU_MVFR0_DoubÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_DoubÀ_¥ecisi⁄_Pos
Ë

	)

1157 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
 4

	)

1158 
	#FPU_MVFR0_SögÀ_¥ecisi⁄_Msk
 (0xFUL << 
FPU_MVFR0_SögÀ_¥ecisi⁄_Pos
Ë

	)

1160 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Pos
 0

	)

1161 
	#FPU_MVFR0_A_SIMD_ªgi°îs_Msk
 (0xFUL << 
FPU_MVFR0_A_SIMD_ªgi°îs_Pos
Ë

	)

1164 
	#FPU_MVFR1_FP_fu£d_MAC_Pos
 28

	)

1165 
	#FPU_MVFR1_FP_fu£d_MAC_Msk
 (0xFUL << 
FPU_MVFR1_FP_fu£d_MAC_Pos
Ë

	)

1167 
	#FPU_MVFR1_FP_HPFP_Pos
 24

	)

1168 
	#FPU_MVFR1_FP_HPFP_Msk
 (0xFUL << 
FPU_MVFR1_FP_HPFP_Pos
Ë

	)

1170 
	#FPU_MVFR1_D_NaN_mode_Pos
 4

	)

1171 
	#FPU_MVFR1_D_NaN_mode_Msk
 (0xFUL << 
FPU_MVFR1_D_NaN_mode_Pos
Ë

	)

1173 
	#FPU_MVFR1_FtZ_mode_Pos
 0

	)

1174 
	#FPU_MVFR1_FtZ_mode_Msk
 (0xFUL << 
FPU_MVFR1_FtZ_mode_Pos
Ë

	)

1190 
__IO
 
uöt32_t
 
DHCSR
;

1191 
__O
 
uöt32_t
 
DCRSR
;

1192 
__IO
 
uöt32_t
 
DCRDR
;

1193 
__IO
 
uöt32_t
 
DEMCR
;

1194 } 
	tC‹eDebug_Ty≥
;

1197 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1198 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1200 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1201 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1203 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1204 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1206 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1207 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1209 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1210 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1212 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1213 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1215 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1216 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1218 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1219 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1221 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1222 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1224 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1225 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1227 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1228 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1230 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1231 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1234 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1235 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1237 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1238 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1241 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1242 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1244 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1245 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1247 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1248 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1250 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1251 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1253 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1254 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1256 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1257 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1259 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1260 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1262 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1263 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1265 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1266 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1268 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1269 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1271 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1272 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1274 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1275 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1277 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1278 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1290 
	#SCS_BASE
 (0xE000E000ULË

	)

1291 
	#ITM_BASE
 (0xE0000000ULË

	)

1292 
	#DWT_BASE
 (0xE0001000ULË

	)

1293 
	#TPI_BASE
 (0xE0040000ULË

	)

1294 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1295 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1296 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1297 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1299 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1300 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1301 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1302 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1303 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1304 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1305 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1306 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1308 #i‡(
__MPU_PRESENT
 == 1)

1309 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1310 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1313 #i‡(
__FPU_PRESENT
 == 1)

1314 
	#FPU_BASE
 (
SCS_BASE
 + 0x0F30ULË

	)

1315 
	#FPU
 ((
FPU_Ty≥
 *Ë
FPU_BASE
 )

	)

1352 
__STATIC_INLINE
 
NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1354 
uöt32_t
 
ªg_vÆue
;

1355 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1357 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1358 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1359 
ªg_vÆue
 = (reg_value |

1360 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1361 (
Pri‹ôyGroupTmp
 << 8));

1362 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1372 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôyGroupög
()

1374  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1384 
__STATIC_INLINE
 
NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1387 
NVIC
->
ISER
[(
uöt32_t
)((
öt32_t
)
IRQn
) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F));

1397 
__STATIC_INLINE
 
NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1399 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1413 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1415 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1425 
__STATIC_INLINE
 
NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1427 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1437 
__STATIC_INLINE
 
NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1439 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1452 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1454 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1467 
__STATIC_INLINE
 
NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1469 if(
IRQn
 < 0) {

1470 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1472 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1487 
__STATIC_INLINE
 
uöt32_t
 
NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1490 if(
IRQn
 < 0) {

1491 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1493 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1509 
__STATIC_INLINE
 
uöt32_t
 
NVIC_EncodePri‹ôy
 (uöt32_à
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1511 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1512 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1513 
uöt32_t
 
SubPri‹ôyBôs
;

1515 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1516 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1519 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1520 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1537 
__STATIC_INLINE
 
NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1539 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1540 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1541 
uöt32_t
 
SubPri‹ôyBôs
;

1543 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1544 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1546 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1547 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1555 
__STATIC_INLINE
 
NVIC_Sy°emRe£t
()

1557 
__DSB
();

1559 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1560 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1561 
SCB_AIRCR_SYSRESETREQ_Msk
);

1562 
__DSB
();

1577 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1594 
__STATIC_INLINE
 
uöt32_t
 
SysTick_C⁄fig
(uöt32_à
ticks
)

1596 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1598 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1599 
NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1600 
SysTick
->
VAL
 = 0;

1601 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1602 
SysTick_CTRL_TICKINT_Msk
 |

1603 
SysTick_CTRL_ENABLE_Msk
;

1620 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1621 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1634 
__STATIC_INLINE
 
uöt32_t
 
ITM_SídCh¨
 (uöt32_à
ch
)

1636 i‡((
	gITM
->
	gTCR
 & 
	gITM_TCR_ITMENA_Msk
) &&

1637 (
	gITM
->
	gTER
 & (1UL << 0) ) )

1639 
	gITM
->
	gPORT
[0].
	gu32
 == 0);

1640 
	gITM
->
	gPORT
[0].
	gu8
 = (
uöt8_t
Ë
ch
;

1642  (
	gch
);

1653 
__STATIC_INLINE
 
öt32_t
 
ITM_Re˚iveCh¨
 () {

1654 
öt32_t
 
	gch
 = -1;

1656 i‡(
	gITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1657 
ch
 = 
ITM_RxBuf„r
;

1658 
	gITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1661  (
	gch
);

1672 
__STATIC_INLINE
 
öt32_t
 
ITM_CheckCh¨
 () {

1674 i‡(
	gITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1687 #ifde‡
__˝lu•lus


	@resources/Include/core_cm4_simd.h

24 #ifde‡
__˝lu•lus


28 #i‚de‡
__CORE_CM4_SIMD_H


29 
	#__CORE_CM4_SIMD_H


	)

43 #i‡ 
deföed
 ( 
__CC_ARM
 )

47 
	#__SADD8
 
__ßdd8


	)

48 
	#__QADD8
 
__qadd8


	)

49 
	#__SHADD8
 
__shadd8


	)

50 
	#__UADD8
 
__uadd8


	)

51 
	#__UQADD8
 
__uqadd8


	)

52 
	#__UHADD8
 
__uhadd8


	)

53 
	#__SSUB8
 
__ssub8


	)

54 
	#__QSUB8
 
__qsub8


	)

55 
	#__SHSUB8
 
__shsub8


	)

56 
	#__USUB8
 
__usub8


	)

57 
	#__UQSUB8
 
__uqsub8


	)

58 
	#__UHSUB8
 
__uhsub8


	)

59 
	#__SADD16
 
__ßdd16


	)

60 
	#__QADD16
 
__qadd16


	)

61 
	#__SHADD16
 
__shadd16


	)

62 
	#__UADD16
 
__uadd16


	)

63 
	#__UQADD16
 
__uqadd16


	)

64 
	#__UHADD16
 
__uhadd16


	)

65 
	#__SSUB16
 
__ssub16


	)

66 
	#__QSUB16
 
__qsub16


	)

67 
	#__SHSUB16
 
__shsub16


	)

68 
	#__USUB16
 
__usub16


	)

69 
	#__UQSUB16
 
__uqsub16


	)

70 
	#__UHSUB16
 
__uhsub16


	)

71 
	#__SASX
 
__ßsx


	)

72 
	#__QASX
 
__qasx


	)

73 
	#__SHASX
 
__shasx


	)

74 
	#__UASX
 
__uasx


	)

75 
	#__UQASX
 
__uqasx


	)

76 
	#__UHASX
 
__uhasx


	)

77 
	#__SSAX
 
__sßx


	)

78 
	#__QSAX
 
__qßx


	)

79 
	#__SHSAX
 
__shßx


	)

80 
	#__USAX
 
__ußx


	)

81 
	#__UQSAX
 
__uqßx


	)

82 
	#__UHSAX
 
__uhßx


	)

83 
	#__USAD8
 
__ußd8


	)

84 
	#__USADA8
 
__ußda8


	)

85 
	#__SSAT16
 
__sßt16


	)

86 
	#__USAT16
 
__ußt16


	)

87 
	#__UXTB16
 
__uxtb16


	)

88 
	#__UXTAB16
 
__uxèb16


	)

89 
	#__SXTB16
 
__sxtb16


	)

90 
	#__SXTAB16
 
__sxèb16


	)

91 
	#__SMUAD
 
__smuad


	)

92 
	#__SMUADX
 
__smuadx


	)

93 
	#__SMLAD
 
__smœd


	)

94 
	#__SMLADX
 
__smœdx


	)

95 
	#__SMLALD
 
__smœld


	)

96 
	#__SMLALDX
 
__smœldx


	)

97 
	#__SMUSD
 
__smusd


	)

98 
	#__SMUSDX
 
__smusdx


	)

99 
	#__SMLSD
 
__smlsd


	)

100 
	#__SMLSDX
 
__smlsdx


	)

101 
	#__SMLSLD
 
__sml¶d


	)

102 
	#__SMLSLDX
 
__sml¶dx


	)

103 
	#__SEL
 
__£l


	)

104 
	#__QADD
 
__qadd


	)

105 
	#__QSUB
 
__qsub


	)

107 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)ËË& 0x0000FFFFULË| \

	)

108 ((((
uöt32_t
)(
ARG2
)Ë<< (
ARG3
)) & 0xFFFF0000UL) )

110 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë–((((
uöt32_t
)(ARG1)ËË& 0xFFFF0000ULË| \

	)

111 ((((
uöt32_t
)(
ARG2
)Ë>> (
ARG3
)) & 0x0000FFFFUL) )

118 #ñi‡
deföed
 ( 
__ICCARM__
 )

122 
	~<cmsis_ür.h
>

128 #ñi‡
deföed
 ( 
__TMS470__
 )

132 
	~<cmsis_ccs.h
>

138 #ñi‡
deföed
 ( 
__GNUC__
 )

142 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

144 
uöt32_t
 
ªsu…
;

146 
__ASM
 vﬁ©ûê("ßdd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

147 (
ªsu…
);

148 
	}
}

150 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

152 
uöt32_t
 
ªsu…
;

154 
__ASM
 vﬁ©ûê("qadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

155 (
ªsu…
);

156 
	}
}

158 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

160 
uöt32_t
 
ªsu…
;

162 
__ASM
 vﬁ©ûê("shadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

163 (
ªsu…
);

164 
	}
}

166 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

168 
uöt32_t
 
ªsu…
;

170 
__ASM
 vﬁ©ûê("uadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

171 (
ªsu…
);

172 
	}
}

174 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

176 
uöt32_t
 
ªsu…
;

178 
__ASM
 vﬁ©ûê("uqadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

179 (
ªsu…
);

180 
	}
}

182 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

184 
uöt32_t
 
ªsu…
;

186 
__ASM
 vﬁ©ûê("uhadd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

187 (
ªsu…
);

188 
	}
}

191 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

193 
uöt32_t
 
ªsu…
;

195 
__ASM
 vﬁ©ûê("ssub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

196 (
ªsu…
);

197 
	}
}

199 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

201 
uöt32_t
 
ªsu…
;

203 
__ASM
 vﬁ©ûê("qsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

204 (
ªsu…
);

205 
	}
}

207 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

209 
uöt32_t
 
ªsu…
;

211 
__ASM
 vﬁ©ûê("shsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

212 (
ªsu…
);

213 
	}
}

215 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

217 
uöt32_t
 
ªsu…
;

219 
__ASM
 vﬁ©ûê("usub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

220 (
ªsu…
);

221 
	}
}

223 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

225 
uöt32_t
 
ªsu…
;

227 
__ASM
 vﬁ©ûê("uqsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

228 (
ªsu…
);

229 
	}
}

231 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB8
(
uöt32_t
 
›1
, uöt32_à
›2
)

233 
uöt32_t
 
ªsu…
;

235 
__ASM
 vﬁ©ûê("uhsub8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

236 (
ªsu…
);

237 
	}
}

240 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

242 
uöt32_t
 
ªsu…
;

244 
__ASM
 vﬁ©ûê("ßdd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

245 (
ªsu…
);

246 
	}
}

248 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

250 
uöt32_t
 
ªsu…
;

252 
__ASM
 vﬁ©ûê("qadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

253 (
ªsu…
);

254 
	}
}

256 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

258 
uöt32_t
 
ªsu…
;

260 
__ASM
 vﬁ©ûê("shadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

261 (
ªsu…
);

262 
	}
}

264 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

266 
uöt32_t
 
ªsu…
;

268 
__ASM
 vﬁ©ûê("uadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

269 (
ªsu…
);

270 
	}
}

272 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

274 
uöt32_t
 
ªsu…
;

276 
__ASM
 vﬁ©ûê("uqadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

277 (
ªsu…
);

278 
	}
}

280 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHADD16
(
uöt32_t
 
›1
, uöt32_à
›2
)

282 
uöt32_t
 
ªsu…
;

284 
__ASM
 vﬁ©ûê("uhadd16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

285 (
ªsu…
);

286 
	}
}

288 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

290 
uöt32_t
 
ªsu…
;

292 
__ASM
 vﬁ©ûê("ssub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

293 (
ªsu…
);

294 
	}
}

296 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

298 
uöt32_t
 
ªsu…
;

300 
__ASM
 vﬁ©ûê("qsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

301 (
ªsu…
);

302 
	}
}

304 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

306 
uöt32_t
 
ªsu…
;

308 
__ASM
 vﬁ©ûê("shsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

309 (
ªsu…
);

310 
	}
}

312 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

314 
uöt32_t
 
ªsu…
;

316 
__ASM
 vﬁ©ûê("usub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

317 (
ªsu…
);

318 
	}
}

320 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

322 
uöt32_t
 
ªsu…
;

324 
__ASM
 vﬁ©ûê("uqsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

325 (
ªsu…
);

326 
	}
}

328 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSUB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

330 
uöt32_t
 
ªsu…
;

332 
__ASM
 vﬁ©ûê("uhsub16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

333 (
ªsu…
);

334 
	}
}

336 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

338 
uöt32_t
 
ªsu…
;

340 
__ASM
 vﬁ©ûê("ßsx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

341 (
ªsu…
);

342 
	}
}

344 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

346 
uöt32_t
 
ªsu…
;

348 
__ASM
 vﬁ©ûê("qasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

349 (
ªsu…
);

350 
	}
}

352 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

354 
uöt32_t
 
ªsu…
;

356 
__ASM
 vﬁ©ûê("shasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

357 (
ªsu…
);

358 
	}
}

360 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

362 
uöt32_t
 
ªsu…
;

364 
__ASM
 vﬁ©ûê("uasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

365 (
ªsu…
);

366 
	}
}

368 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

370 
uöt32_t
 
ªsu…
;

372 
__ASM
 vﬁ©ûê("uqasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

373 (
ªsu…
);

374 
	}
}

376 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHASX
(
uöt32_t
 
›1
, uöt32_à
›2
)

378 
uöt32_t
 
ªsu…
;

380 
__ASM
 vﬁ©ûê("uhasx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

381 (
ªsu…
);

382 
	}
}

384 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

386 
uöt32_t
 
ªsu…
;

388 
__ASM
 vﬁ©ûê("sßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

389 (
ªsu…
);

390 
	}
}

392 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

394 
uöt32_t
 
ªsu…
;

396 
__ASM
 vﬁ©ûê("qßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

397 (
ªsu…
);

398 
	}
}

400 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

402 
uöt32_t
 
ªsu…
;

404 
__ASM
 vﬁ©ûê("shßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

405 (
ªsu…
);

406 
	}
}

408 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

410 
uöt32_t
 
ªsu…
;

412 
__ASM
 vﬁ©ûê("ußx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

413 (
ªsu…
);

414 
	}
}

416 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UQSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

418 
uöt32_t
 
ªsu…
;

420 
__ASM
 vﬁ©ûê("uqßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

421 (
ªsu…
);

422 
	}
}

424 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UHSAX
(
uöt32_t
 
›1
, uöt32_à
›2
)

426 
uöt32_t
 
ªsu…
;

428 
__ASM
 vﬁ©ûê("uhßx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

429 (
ªsu…
);

430 
	}
}

432 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USAD8
(
uöt32_t
 
›1
, uöt32_à
›2
)

434 
uöt32_t
 
ªsu…
;

436 
__ASM
 vﬁ©ûê("ußd8 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

437 (
ªsu…
);

438 
	}
}

440 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__USADA8
(
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

442 
uöt32_t
 
ªsu…
;

444 
__ASM
 vﬁ©ûê("ußda8 %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

445 (
ªsu…
);

446 
	}
}

448 
	#__SSAT16
(
ARG1
,
ARG2
Ë\

	)

450 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

451 
__ASM
 ("sßt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

452 
__RES
; \

455 
	#__USAT16
(
ARG1
,
ARG2
Ë\

	)

457 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
); \

458 
__ASM
 ("ußt16 %0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

459 
__RES
; \

462 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTB16
(
uöt32_t
 
›1
)

464 
uöt32_t
 
ªsu…
;

466 
__ASM
 vﬁ©ûê("uxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

467 (
ªsu…
);

468 
	}
}

470 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__UXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

472 
uöt32_t
 
ªsu…
;

474 
__ASM
 vﬁ©ûê("uxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

475 (
ªsu…
);

476 
	}
}

478 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTB16
(
uöt32_t
 
›1
)

480 
uöt32_t
 
ªsu…
;

482 
__ASM
 vﬁ©ûê("sxtb16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
›1
));

483 (
ªsu…
);

484 
	}
}

486 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SXTAB16
(
uöt32_t
 
›1
, uöt32_à
›2
)

488 
uöt32_t
 
ªsu…
;

490 
__ASM
 vﬁ©ûê("sxèb16 %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

491 (
ªsu…
);

492 
	}
}

494 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUAD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

496 
uöt32_t
 
ªsu…
;

498 
__ASM
 vﬁ©ûê("smuad %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

499 (
ªsu…
);

500 
	}
}

502 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUADX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

504 
uöt32_t
 
ªsu…
;

506 
__ASM
 vﬁ©ûê("smuadx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

507 (
ªsu…
);

508 
	}
}

510 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLAD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

512 
uöt32_t
 
ªsu…
;

514 
__ASM
 vﬁ©ûê("smœd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

515 (
ªsu…
);

516 
	}
}

518 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLADX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

520 
uöt32_t
 
ªsu…
;

522 
__ASM
 vﬁ©ûê("smœdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

523 (
ªsu…
);

524 
	}
}

526 
	#__SMLALD
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

528 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

529 
__ASM
 vﬁ©ûê("smœld %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

530 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

533 
	#__SMLALDX
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

535 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
uöt64_t
)(
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((uint64_t)(ARG3) & 0xFFFFFFFFUL); \

536 
__ASM
 vﬁ©ûê("smœldx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

537 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

540 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSD
 (
uöt32_t
 
›1
, uöt32_à
›2
)

542 
uöt32_t
 
ªsu…
;

544 
__ASM
 vﬁ©ûê("smusd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

545 (
ªsu…
);

546 
	}
}

548 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMUSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
)

550 
uöt32_t
 
ªsu…
;

552 
__ASM
 vﬁ©ûê("smusdx %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

553 (
ªsu…
);

554 
	}
}

556 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSD
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

558 
uöt32_t
 
ªsu…
;

560 
__ASM
 vﬁ©ûê("smlsd %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

561 (
ªsu…
);

562 
	}
}

564 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SMLSDX
 (
uöt32_t
 
›1
, uöt32_à
›2
, uöt32_à
›3
)

566 
uöt32_t
 
ªsu…
;

568 
__ASM
 vﬁ©ûê("smlsdx %0, %1, %2, %3" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
), "r" (
›3
) );

569 (
ªsu…
);

570 
	}
}

572 
	#__SMLSLD
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

574 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

575 
__ASM
 vﬁ©ûê("sml¶d %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

576 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

579 
	#__SMLSLDX
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

581 
uöt32_t
 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
), 
__ARG3_H
 = (uöt32_t)((
ARG3
Ë>> 32), 
__ARG3_L
 = (uint32_t)((ARG3) & 0xFFFFFFFFUL); \

582 
__ASM
 vﬁ©ûê("sml¶dx %0, %1, %2, %3" : "Ù" (
__ARG3_L
), "Ù" (
__ARG3_H
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "0" (__ARG3_L), "1" (__ARG3_H) ); \

583 (
uöt64_t
)(((uöt64_t)
__ARG3_H
 << 32Ë| 
__ARG3_L
); \

586 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__SEL
 (
uöt32_t
 
›1
, uöt32_à
›2
)

588 
uöt32_t
 
ªsu…
;

590 
__ASM
 vﬁ©ûê("£»%0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

591 (
ªsu…
);

592 
	}
}

594 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QADD
(
uöt32_t
 
›1
, uöt32_à
›2
)

596 
uöt32_t
 
ªsu…
;

598 
__ASM
 vﬁ©ûê("qadd %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

599 (
ªsu…
);

600 
	}
}

602 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__QSUB
(
uöt32_t
 
›1
, uöt32_à
›2
)

604 
uöt32_t
 
ªsu…
;

606 
__ASM
 vﬁ©ûê("qsub %0, %1, %2" : "Ù" (
ªsu…
Ë: "r" (
›1
), "r" (
›2
) );

607 (
ªsu…
);

608 
	}
}

610 
	#__PKHBT
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

612 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

613 
__ASM
 ("pkhbà%0, %1, %2,Ü¶ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

614 
__RES
; \

617 
	#__PKHTB
(
ARG1
,
ARG2
,
ARG3
Ë\

	)

619 
uöt32_t
 
__RES
, 
__ARG1
 = (
ARG1
), 
__ARG2
 = (
ARG2
); \

620 i‡(
ARG3
 == 0) \

621 
__ASM
 ("pkhtb %0, %1, %2" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
) ); \

623 
__ASM
 ("pkhtb %0, %1, %2,á§ %3" : "Ù" (
__RES
Ë: "r" (
__ARG1
), "r" (
__ARG2
), "I" (
ARG3
) ); \

624 
__RES
; \

631 #ñi‡
deföed
 ( 
__TASKING__
 )

647 #ifde‡
__˝lu•lus


	@resources/Include/core_cmFunc.h

24 #i‚de‡
__CORE_CMFUNC_H


25 
	#__CORE_CMFUNC_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

50 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

52 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

53 (
__ªgC⁄åﬁ
);

54 
	}
}

63 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

65 
uöt32_t
 
__ªgC⁄åﬁ
 
	`__ASM
("control");

66 
__ªgC⁄åﬁ
 = 
c⁄åﬁ
;

67 
	}
}

76 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

78 
uöt32_t
 
__ªgIPSR
 
	`__ASM
("ipsr");

79 (
__ªgIPSR
);

80 
	}
}

89 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

91 
uöt32_t
 
__ªgAPSR
 
	`__ASM
("apsr");

92 (
__ªgAPSR
);

93 
	}
}

102 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

104 
uöt32_t
 
__ªgXPSR
 
	`__ASM
("xpsr");

105 (
__ªgXPSR
);

106 
	}
}

115 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

117 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

118 (
__ªgPro˚ssSèckPoöãr
);

119 
	}
}

128 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

130 
uöt32_t
 
__ªgPro˚ssSèckPoöãr
 
	`__ASM
("psp");

131 
__ªgPro˚ssSèckPoöãr
 = 
t›OfProcSèck
;

132 
	}
}

141 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

143 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

144 (
__ªgMaöSèckPoöãr
);

145 
	}
}

154 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

156 
uöt32_t
 
__ªgMaöSèckPoöãr
 
	`__ASM
("msp");

157 
__ªgMaöSèckPoöãr
 = 
t›OfMaöSèck
;

158 
	}
}

167 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

169 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

170 (
__ªgPriMask
);

171 
	}
}

180 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

182 
uöt32_t
 
__ªgPriMask
 
	`__ASM
("primask");

183 
__ªgPriMask
 = (
¥iMask
);

184 
	}
}

187 #i‡ (
__CORTEX_M
 >= 0x03)

194 
	#__íabÀ_Áu…_úq
 
__íabÀ_fiq


	)

202 
	#__dißbÀ_Áu…_úq
 
__dißbÀ_fiq


	)

211 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

213 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

214 (
__ªgBa£Pri
);

215 
	}
}

224 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
ba£Pri
)

226 
uöt32_t
 
__ªgBa£Pri
 
	`__ASM
("basepri");

227 
__ªgBa£Pri
 = (
ba£Pri
 & 0xff);

228 
	}
}

237 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

239 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

240 (
__ªgFau…Mask
);

241 
	}
}

250 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

252 
uöt32_t
 
__ªgFau…Mask
 
	`__ASM
("faultmask");

253 
__ªgFau…Mask
 = (
Áu…Mask
 & (
uöt32_t
)1);

254 
	}
}

259 #i‡ (
__CORTEX_M
 == 0x04)

267 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

269 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

270 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

271 (
__ªgÂs¸
);

275 
	}
}

284 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

286 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

287 
uöt32_t
 
__ªgÂs¸
 
	`__ASM
("fpscr");

288 
__ªgÂs¸
 = (
Âs¸
);

290 
	}
}

295 #ñi‡
deföed
 ( 
__ICCARM__
 )

298 
	~<cmsis_ür.h
>

301 #ñi‡
deföed
 ( 
__TMS470__
 )

304 
	~<cmsis_ccs.h
>

307 #ñi‡
deföed
 ( 
__GNUC__
 )

315 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_úq
()

317 
__ASM
 volatile ("cpsie i");

318 
	}
}

326 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_úq
()

328 
__ASM
 volatile ("cpsid i");

329 
	}
}

338 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_CONTROL
()

340 
uöt32_t
 
ªsu…
;

342 
__ASM
 vﬁ©ûê("MRS %0, c⁄åﬁ" : "Ù" (
ªsu…
) );

343 (
ªsu…
);

344 
	}
}

353 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_CONTROL
(
uöt32_t
 
c⁄åﬁ
)

355 
__ASM
 vﬁ©ûê("MSR c⁄åﬁ, %0" : : "r" (
c⁄åﬁ
) );

356 
	}
}

365 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_IPSR
()

367 
uöt32_t
 
ªsu…
;

369 
__ASM
 vﬁ©ûê("MRS %0, ip§" : "Ù" (
ªsu…
) );

370 (
ªsu…
);

371 
	}
}

380 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_APSR
()

382 
uöt32_t
 
ªsu…
;

384 
__ASM
 vﬁ©ûê("MRS %0,áp§" : "Ù" (
ªsu…
) );

385 (
ªsu…
);

386 
	}
}

395 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_xPSR
()

397 
uöt32_t
 
ªsu…
;

399 
__ASM
 vﬁ©ûê("MRS %0, xp§" : "Ù" (
ªsu…
) );

400 (
ªsu…
);

401 
	}
}

410 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PSP
()

412 
uöt32_t
 
ªsu…
;

414 
__ASM
 vﬁ©ûê("MRS %0,Ö•\n" : "Ù" (
ªsu…
) );

415 (
ªsu…
);

416 
	}
}

425 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PSP
(
uöt32_t
 
t›OfProcSèck
)

427 
__ASM
 vﬁ©ûê("MSRÖ•, %0\n" : : "r" (
t›OfProcSèck
) );

428 
	}
}

437 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_MSP
()

439 
uöt32_t
 
ªsu…
;

441 
__ASM
 vﬁ©ûê("MRS %0, m•\n" : "Ù" (
ªsu…
) );

442 (
ªsu…
);

443 
	}
}

452 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_MSP
(
uöt32_t
 
t›OfMaöSèck
)

454 
__ASM
 vﬁ©ûê("MSR m•, %0\n" : : "r" (
t›OfMaöSèck
) );

455 
	}
}

464 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_PRIMASK
()

466 
uöt32_t
 
ªsu…
;

468 
__ASM
 vﬁ©ûê("MRS %0,Örimask" : "Ù" (
ªsu…
) );

469 (
ªsu…
);

470 
	}
}

479 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_PRIMASK
(
uöt32_t
 
¥iMask
)

481 
__ASM
 vﬁ©ûê("MSRÖrimask, %0" : : "r" (
¥iMask
) );

482 
	}
}

485 #i‡ (
__CORTEX_M
 >= 0x03)

492 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__íabÀ_Áu…_úq
()

494 
__ASM
 volatile ("cpsie f");

495 
	}
}

503 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__dißbÀ_Áu…_úq
()

505 
__ASM
 volatile ("cpsid f");

506 
	}
}

515 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_BASEPRI
()

517 
uöt32_t
 
ªsu…
;

519 
__ASM
 vﬁ©ûê("MRS %0, ba£¥i_max" : "Ù" (
ªsu…
) );

520 (
ªsu…
);

521 
	}
}

530 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_BASEPRI
(
uöt32_t
 
vÆue
)

532 
__ASM
 vﬁ©ûê("MSR ba£¥i, %0" : : "r" (
vÆue
) );

533 
	}
}

542 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FAULTMASK
()

544 
uöt32_t
 
ªsu…
;

546 
__ASM
 vﬁ©ûê("MRS %0, fau…mask" : "Ù" (
ªsu…
) );

547 (
ªsu…
);

548 
	}
}

557 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FAULTMASK
(
uöt32_t
 
Áu…Mask
)

559 
__ASM
 vﬁ©ûê("MSR fau…mask, %0" : : "r" (
Áu…Mask
) );

560 
	}
}

565 #i‡ (
__CORTEX_M
 == 0x04)

573 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__gë_FPSCR
()

575 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

576 
uöt32_t
 
ªsu…
;

578 
__ASM
 vﬁ©ûê("VMRS %0, fps¸" : "Ù" (
ªsu…
) );

579 (
ªsu…
);

583 
	}
}

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__£t_FPSCR
(
uöt32_t
 
Âs¸
)

594 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

595 
__ASM
 vﬁ©ûê("VMSR fps¸, %0" : : "r" (
Âs¸
) );

597 
	}
}

602 #ñi‡
deföed
 ( 
__TASKING__
 )

	@resources/Include/core_cmInstr.h

24 #i‚de‡
__CORE_CMINSTR_H


25 
	#__CORE_CMINSTR_H


	)

34 #i‡ 
deföed
 ( 
__CC_ARM
 )

37 #i‡(
__ARMCC_VERSION
 < 400677)

46 
	#__NOP
 
__n›


	)

54 
	#__WFI
 
__wfi


	)

62 
	#__WFE
 
__w„


	)

69 
	#__SEV
 
__£v


	)

78 
	#__ISB
(Ë
	`__isb
(0xF)

	)

86 
	#__DSB
(Ë
	`__dsb
(0xF)

	)

94 
	#__DMB
(Ë
	`__dmb
(0xF)

	)

104 
	#__REV
 
__ªv


	)

114 
__©åibuã__
((
£˘i⁄
(".ªv16_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

116 
ªv16
 
r0
,Ñ0

117 
bx
 
Ã


118 
	}
}

128 
__©åibuã__
((
£˘i⁄
(".ªvsh_ãxt"))Ë
__STATIC_INLINE
 
__ASM
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

130 
ªvsh
 
r0
,Ñ0

131 
bx
 
Ã


132 
	}
}

143 
	#__ROR
 
__r‹


	)

146 #i‡ (
__CORTEX_M
 >= 0x03)

155 
	#__RBIT
 
__rbô


	)

165 
	#__LDREXB
(
±r
Ë((
uöt8_t
 ) 
	`__ldªx
’å))

	)

175 
	#__LDREXH
(
±r
Ë((
uöt16_t
Ë
	`__ldªx
’å))

	)

185 
	#__LDREXW
(
±r
Ë((
uöt32_t
 ) 
	`__ldªx
’å))

	)

197 
	#__STREXB
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

209 
	#__STREXH
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

221 
	#__STREXW
(
vÆue
, 
±r
Ë
	`__°ªx
(vÆue,Öå)

	)

229 
	#__CLREX
 
__˛ªx


	)

240 
	#__SSAT
 
__sßt


	)

251 
	#__USAT
 
__ußt


	)

261 
	#__CLZ
 
__˛z


	)

267 #ñi‡
deföed
 ( 
__ICCARM__
 )

270 
	~<cmsis_ür.h
>

273 #ñi‡
deföed
 ( 
__TMS470__
 )

276 
	~<cmsis_ccs.h
>

279 #ñi‡
deföed
 ( 
__GNUC__
 )

286 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__NOP
()

288 
__ASM
 volatile ("nop");

289 
	}
}

297 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFI
()

299 
__ASM
 volatile ("wfi");

300 
	}
}

308 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__WFE
()

310 
__ASM
 volatile ("wfe");

311 
	}
}

318 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__SEV
()

320 
__ASM
 volatile ("sev");

321 
	}
}

330 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__ISB
()

332 
__ASM
 volatile ("isb");

333 
	}
}

341 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DSB
()

343 
__ASM
 volatile ("dsb");

344 
	}
}

352 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__DMB
()

354 
__ASM
 volatile ("dmb");

355 
	}
}

365 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV
(
uöt32_t
 
vÆue
)

367 
uöt32_t
 
ªsu…
;

369 
__ASM
 vﬁ©ûê("ªv %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

370 (
ªsu…
);

371 
	}
}

381 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__REV16
(
uöt32_t
 
vÆue
)

383 
uöt32_t
 
ªsu…
;

385 
__ASM
 vﬁ©ûê("ªv16 %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

386 (
ªsu…
);

387 
	}
}

397 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
öt32_t
 
	$__REVSH
(
öt32_t
 
vÆue
)

399 
uöt32_t
 
ªsu…
;

401 
__ASM
 vﬁ©ûê("ªvsh %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

402 (
ªsu…
);

403 
	}
}

414 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__ROR
(
uöt32_t
 
›1
, uöt32_à
›2
)

417 
__ASM
 vﬁ©ûê("r‹ %0, %0, %1" : "+r" (
›1
Ë: "r" (
›2
) );

418 (
›1
);

419 
	}
}

422 #i‡ (
__CORTEX_M
 >= 0x03)

431 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__RBIT
(
uöt32_t
 
vÆue
)

433 
uöt32_t
 
ªsu…
;

435 
__ASM
 vﬁ©ûê("rbô %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

436 (
ªsu…
);

437 
	}
}

447 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__LDREXB
(vﬁ©ûê
uöt8_t
 *
addr
)

449 
uöt8_t
 
ªsu…
;

451 
__ASM
 vﬁ©ûê("ldªxb %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

452 (
ªsu…
);

453 
	}
}

463 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt16_t
 
	$__LDREXH
(vﬁ©ûê
uöt16_t
 *
addr
)

465 
uöt16_t
 
ªsu…
;

467 
__ASM
 vﬁ©ûê("ldªxh %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

468 (
ªsu…
);

469 
	}
}

479 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__LDREXW
(vﬁ©ûê
uöt32_t
 *
addr
)

481 
uöt32_t
 
ªsu…
;

483 
__ASM
 vﬁ©ûê("ldªx %0, [%1]" : "Ù" (
ªsu…
Ë: "r" (
addr
) );

484 (
ªsu…
);

485 
	}
}

497 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXB
(
uöt8_t
 
vÆue
, vﬁ©ûêuöt8_à*
addr
)

499 
uöt32_t
 
ªsu…
;

501 
__ASM
 vﬁ©ûê("°ªxb %0, %2, [%1]" : "=&r" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

502 (
ªsu…
);

503 
	}
}

515 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXH
(
uöt16_t
 
vÆue
, vﬁ©ûêuöt16_à*
addr
)

517 
uöt32_t
 
ªsu…
;

519 
__ASM
 vﬁ©ûê("°ªxh %0, %2, [%1]" : "=&r" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

520 (
ªsu…
);

521 
	}
}

533 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt32_t
 
	$__STREXW
(
uöt32_t
 
vÆue
, vﬁ©ûêuöt32_à*
addr
)

535 
uöt32_t
 
ªsu…
;

537 
__ASM
 vﬁ©ûê("°ªx %0, %2, [%1]" : "=&r" (
ªsu…
Ë: "r" (
addr
), "r" (
vÆue
) );

538 (
ªsu…
);

539 
	}
}

547 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
	$__CLREX
()

549 
__ASM
 volatile ("clrex");

550 
	}
}

561 
	#__SSAT
(
ARG1
,
ARG2
Ë\

	)

563 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

564 
__ASM
 ("sßà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

565 
	g__RES
; \

577 
	#__USAT
(
ARG1
,
ARG2
Ë\

	)

579 
uöt32_t
 
	g__RES
, 
	g__ARG1
 = (
ARG1
); \

580 
__ASM
 ("ußà%0, %1, %2" : "Ù" (
__RES
Ë: "I" (
ARG2
), "r" (
__ARG1
) ); \

581 
	g__RES
; \

592 
__©åibuã__
––
Æways_ölöe
 ) ) 
__STATIC_INLINE
 
uöt8_t
 
	$__CLZ
(
uöt32_t
 
vÆue
)

594 
uöt8_t
 
ªsu…
;

596 
__ASM
 vﬁ©ûê("˛z %0, %1" : "Ù" (
ªsu…
Ë: "r" (
vÆue
) );

597 (
ªsu…
);

598 
	}
}

605 #ñi‡
deföed
 ( 
__TASKING__
 )

	@resources/Include/core_sc000.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_SC000_H_GENERIC


32 
	#__CORE_SC000_H_GENERIC


	)

56 
	#__SC000_CMSIS_VERSION_MAIN
 (0x03Ë

	)

57 
	#__SC000_CMSIS_VERSION_SUB
 (0x00Ë

	)

58 
	#__SC000_CMSIS_VERSION
 ((
__SC000_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

59 
__SC000_CMSIS_VERSION_SUB
 )

61 
	#__CORTEX_SC
 (0Ë

	)

64 #i‡ 
deföed
 ( 
__CC_ARM
 )

65 
	#__ASM
 
__asm


	)

66 
	#__INLINE
 
__ölöe


	)

67 
	#__STATIC_INLINE
 
__ölöe


	)

69 #ñi‡
deföed
 ( 
__ICCARM__
 )

70 
	#__ASM
 
__asm


	)

71 
	#__INLINE
 
ölöe


	)

72 
	#__STATIC_INLINE
 
ölöe


	)

74 #ñi‡
deföed
 ( 
__GNUC__
 )

75 
	#__ASM
 
__asm


	)

76 
	#__INLINE
 
ölöe


	)

77 
	#__STATIC_INLINE
 
ölöe


	)

79 #ñi‡
deföed
 ( 
__TASKING__
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
ölöe


	)

82 
	#__STATIC_INLINE
 
ölöe


	)

88 
	#__FPU_USED
 0

	)

90 #i‡
deföed
 ( 
__CC_ARM
 )

91 #i‡
deföed
 
__TARGET_FPU_VFP


95 #ñi‡
deföed
 ( 
__ICCARM__
 )

96 #i‡
deföed
 
__ARMVFP__


100 #ñi‡
deföed
 ( 
__GNUC__
 )

101 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

105 #ñi‡
deföed
 ( 
__TASKING__
 )

109 
	~<°döt.h
>

110 
	~<c‹e_cmIn°r.h
>

111 
	~<c‹e_cmFunc.h
>

115 #i‚de‡
__CMSIS_GENERIC


117 #i‚de‡
__CORE_SC000_H_DEPENDANT


118 
	#__CORE_SC000_H_DEPENDANT


	)

121 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


122 #i‚de‡
__SC000_REV


123 
	#__SC000_REV
 0x0000

	)

127 #i‚de‡
__MPU_PRESENT


128 
	#__MPU_PRESENT
 0

	)

132 #i‚de‡
__NVIC_PRIO_BITS


133 
	#__NVIC_PRIO_BITS
 2

	)

137 #i‚de‡
__Víd‹_SysTickC⁄fig


138 
	#__Víd‹_SysTickC⁄fig
 0

	)

151 #ifde‡
__˝lu•lus


152 
	#__I
 vﬁ©ûê

	)

154 
	#__I
 vﬁ©ûêc⁄°

	)

156 
	#__O
 vﬁ©ûê

	)

157 
	#__IO
 vﬁ©ûê

	)

188 #i‡(
__CORTEX_M
 != 0x04)

189 
uöt32_t
 
_ª£rved0
:27;

191 
uöt32_t
 
_ª£rved0
:16;

192 
uöt32_t
 
GE
:4;

193 
uöt32_t
 
_ª£rved1
:7;

195 
uöt32_t
 
Q
:1;

196 
uöt32_t
 
V
:1;

197 
uöt32_t
 
C
:1;

198 
uöt32_t
 
Z
:1;

199 
uöt32_t
 
N
:1;

200 } 
b
;

201 
uöt32_t
 
w
;

202 } 
	tAPSR_Ty≥
;

211 
uöt32_t
 
	mISR
:9;

212 
uöt32_t
 
	m_ª£rved0
:23;

213 } 
	mb
;

214 
uöt32_t
 
	mw
;

215 } 
	tIPSR_Ty≥
;

224 
uöt32_t
 
	mISR
:9;

225 #i‡(
__CORTEX_M
 != 0x04)

226 
uöt32_t
 
	m_ª£rved0
:15;

228 
uöt32_t
 
	m_ª£rved0
:7;

229 
uöt32_t
 
	mGE
:4;

230 
uöt32_t
 
	m_ª£rved1
:4;

232 
uöt32_t
 
	mT
:1;

233 
uöt32_t
 
	mIT
:2;

234 
uöt32_t
 
	mQ
:1;

235 
uöt32_t
 
	mV
:1;

236 
uöt32_t
 
	mC
:1;

237 
uöt32_t
 
	mZ
:1;

238 
uöt32_t
 
	mN
:1;

239 } 
	mb
;

240 
uöt32_t
 
	mw
;

241 } 
	txPSR_Ty≥
;

250 
uöt32_t
 
	mnPRIV
:1;

251 
uöt32_t
 
	mSPSEL
:1;

252 
uöt32_t
 
	mFPCA
:1;

253 
uöt32_t
 
	m_ª£rved0
:29;

254 } 
	mb
;

255 
uöt32_t
 
	mw
;

256 } 
	tCONTROL_Ty≥
;

271 
__IO
 
uöt32_t
 
	mISER
[1];

272 
uöt32_t
 
	mRESERVED0
[31];

273 
__IO
 
uöt32_t
 
	mICER
[1];

274 
uöt32_t
 
	mRSERVED1
[31];

275 
__IO
 
uöt32_t
 
	mISPR
[1];

276 
uöt32_t
 
	mRESERVED2
[31];

277 
__IO
 
uöt32_t
 
	mICPR
[1];

278 
uöt32_t
 
	mRESERVED3
[31];

279 
uöt32_t
 
	mRESERVED4
[64];

280 
__IO
 
uöt32_t
 
	mIP
[8];

281 } 
	tNVIC_Ty≥
;

296 
__I
 
uöt32_t
 
	mCPUID
;

297 
__IO
 
uöt32_t
 
	mICSR
;

298 
__IO
 
uöt32_t
 
	mVTOR
;

299 
__IO
 
uöt32_t
 
	mAIRCR
;

300 
__IO
 
uöt32_t
 
	mSCR
;

301 
__IO
 
uöt32_t
 
	mCCR
;

302 
uöt32_t
 
	mRESERVED0
[1];

303 
__IO
 
uöt32_t
 
	mSHP
[2];

304 
__IO
 
uöt32_t
 
	mSHCSR
;

305 
uöt32_t
 
	mRESERVED1
[154];

306 
__IO
 
uöt32_t
 
	mSFCR
;

307 } 
	tSCB_Ty≥
;

310 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

311 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

313 
	#SCB_CPUID_VARIANT_Pos
 20

	)

314 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

316 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

317 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

319 
	#SCB_CPUID_PARTNO_Pos
 4

	)

320 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

322 
	#SCB_CPUID_REVISION_Pos
 0

	)

323 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

326 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

327 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

329 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

330 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

332 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

333 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

335 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

336 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

338 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

339 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

341 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

342 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

344 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

345 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

347 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

348 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

350 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

351 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

354 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

355 
	#SCB_VTOR_TBLOFF_Msk
 (0x1FFFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

358 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

359 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

361 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

362 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

364 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

365 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

367 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

368 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

370 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

371 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

374 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

375 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

377 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

378 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

380 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

381 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

384 
	#SCB_CCR_STKALIGN_Pos
 9

	)

385 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

387 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

388 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

391 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

392 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

395 
	#SCB_SFCR_UNIBRTIMING_Pos
 0

	)

396 
	#SCB_SFCR_UNIBRTIMING_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

398 
	#SCB_SFCR_SECKEY_Pos
 16

	)

399 
	#SCB_SFCR_SECKEY_Msk
 (0xFFFFUL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

414 
uöt32_t
 
	mRESERVED0
[2];

415 
__IO
 
uöt32_t
 
	mACTLR
;

416 } 
	tSCnSCB_Ty≥
;

419 
	#SCnSCB_ACTLR_DISMCYCINT_Pos
 0

	)

420 
	#SCnSCB_ACTLR_DISMCYCINT_Msk
 (1UL << 
SCnSCB_ACTLR_DISMCYCINT_Pos
Ë

	)

435 
__IO
 
uöt32_t
 
	mCTRL
;

436 
__IO
 
uöt32_t
 
	mLOAD
;

437 
__IO
 
uöt32_t
 
	mVAL
;

438 
__I
 
uöt32_t
 
	mCALIB
;

439 } 
	tSysTick_Ty≥
;

442 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

443 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

445 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

446 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

448 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

449 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

451 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

452 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

455 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

456 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

459 
	#SysTick_VAL_CURRENT_Pos
 0

	)

460 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

463 
	#SysTick_CALIB_NOREF_Pos
 31

	)

464 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

466 
	#SysTick_CALIB_SKEW_Pos
 30

	)

467 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

469 
	#SysTick_CALIB_TENMS_Pos
 0

	)

470 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

474 #i‡(
__MPU_PRESENT
 == 1)

485 
__I
 
uöt32_t
 
	mTYPE
;

486 
__IO
 
uöt32_t
 
	mCTRL
;

487 
__IO
 
uöt32_t
 
	mRNR
;

488 
__IO
 
uöt32_t
 
	mRBAR
;

489 
__IO
 
uöt32_t
 
	mRASR
;

490 } 
	tMPU_Ty≥
;

493 
	#MPU_TYPE_IREGION_Pos
 16

	)

494 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

496 
	#MPU_TYPE_DREGION_Pos
 8

	)

497 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

499 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

500 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

503 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

504 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

506 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

507 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

509 
	#MPU_CTRL_ENABLE_Pos
 0

	)

510 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

513 
	#MPU_RNR_REGION_Pos
 0

	)

514 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

517 
	#MPU_RBAR_ADDR_Pos
 8

	)

518 
	#MPU_RBAR_ADDR_Msk
 (0xFFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

520 
	#MPU_RBAR_VALID_Pos
 4

	)

521 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

523 
	#MPU_RBAR_REGION_Pos
 0

	)

524 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

527 
	#MPU_RASR_ATTRS_Pos
 16

	)

528 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

530 
	#MPU_RASR_SRD_Pos
 8

	)

531 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

533 
	#MPU_RASR_SIZE_Pos
 1

	)

534 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

536 
	#MPU_RASR_ENABLE_Pos
 0

	)

537 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

560 
	#SCS_BASE
 (0xE000E000ULË

	)

561 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

562 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

563 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

565 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

566 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

567 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

568 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

570 #i‡(
__MPU_PRESENT
 == 1)

571 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

572 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

600 
	#_BIT_SHIFT
(
IRQn
Ë–(((
uöt32_t
)(IRQnËË& 0x03Ë* 8 )

	)

601 
	#_SHP_IDX
(
IRQn
Ë–((((
uöt32_t
)(IRQnË& 0x0F)-8Ë>> 2Ë)

	)

602 
	#_IP_IDX
(
IRQn
Ë–((
uöt32_t
)(IRQnË>> 2Ë)

	)

611 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

613 
NVIC
->
ISER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

614 
	}
}

623 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

625 
NVIC
->
ICER
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

626 
	}
}

639 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

641 ((
uöt32_t
Ë((
NVIC
->
ISPR
[0] & (1 << ((uöt32_t)(
IRQn
) & 0x1F)))?1:0));

642 
	}
}

651 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

653 
NVIC
->
ISPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

654 
	}
}

663 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

665 
NVIC
->
ICPR
[0] = (1 << ((
uöt32_t
)(
IRQn
) & 0x1F));

666 
	}
}

678 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

680 if(
IRQn
 < 0) {

681 
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

682 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

684 
NVIC
->
IP
[
	`_IP_IDX
(
IRQn
)] = (NVIC->IP[_IP_IDX(IRQn)] & ~(0xFF << 
	`_BIT_SHIFT
(IRQn))) |

685 (((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)Ë& 0xFFË<< 
	`_BIT_SHIFT
(
IRQn
)); }

686 
	}
}

700 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

703 if(
IRQn
 < 0) {

704 ((
uöt32_t
)((
SCB
->
SHP
[
	`_SHP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË>> (8 - 
__NVIC_PRIO_BITS
))); }

706 ((
uöt32_t
)((
NVIC
->
IP
[ 
	`_IP_IDX
(
IRQn
)] >> 
	`_BIT_SHIFT
(IRQnËË>> (8 - 
__NVIC_PRIO_BITS
))); }

707 
	}
}

714 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

716 
	`__DSB
();

718 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

719 
SCB_AIRCR_SYSRESETREQ_Msk
);

720 
	`__DSB
();

722 
	}
}

735 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

752 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

754 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

756 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

757 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

758 
SysTick
->
VAL
 = 0;

759 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

760 
SysTick_CTRL_TICKINT_Msk
 |

761 
SysTick_CTRL_ENABLE_Msk
;

763 
	}
}

776 #ifde‡
__˝lu•lus


	@resources/Include/core_sc300.h

23 #i‡
deföed
 ( 
__ICCARM__
 )

24 #¥agm®
sy°em_ö˛ude


27 #ifde‡
__˝lu•lus


31 #i‚de‡
__CORE_SC300_H_GENERIC


32 
	#__CORE_SC300_H_GENERIC


	)

56 
	#__SC300_CMSIS_VERSION_MAIN
 (0x03Ë

	)

57 
	#__SC300_CMSIS_VERSION_SUB
 (0x00Ë

	)

58 
	#__SC300_CMSIS_VERSION
 ((
__SC300_CMSIS_VERSION_MAIN
 << 16Ë| \

	)

59 
__SC300_CMSIS_VERSION_SUB
 )

61 
	#__CORTEX_SC
 (300Ë

	)

64 #i‡ 
deföed
 ( 
__CC_ARM
 )

65 
	#__ASM
 
__asm


	)

66 
	#__INLINE
 
__ölöe


	)

67 
	#__STATIC_INLINE
 
__ölöe


	)

69 #ñi‡
deföed
 ( 
__ICCARM__
 )

70 
	#__ASM
 
__asm


	)

71 
	#__INLINE
 
ölöe


	)

72 
	#__STATIC_INLINE
 
ölöe


	)

74 #ñi‡
deföed
 ( 
__GNUC__
 )

75 
	#__ASM
 
__asm


	)

76 
	#__INLINE
 
ölöe


	)

77 
	#__STATIC_INLINE
 
ölöe


	)

79 #ñi‡
deföed
 ( 
__TASKING__
 )

80 
	#__ASM
 
__asm


	)

81 
	#__INLINE
 
ölöe


	)

82 
	#__STATIC_INLINE
 
ölöe


	)

88 
	#__FPU_USED
 0

	)

90 #i‡
deföed
 ( 
__CC_ARM
 )

91 #i‡
deföed
 
__TARGET_FPU_VFP


95 #ñi‡
deföed
 ( 
__ICCARM__
 )

96 #i‡
deföed
 
__ARMVFP__


100 #ñi‡
deföed
 ( 
__GNUC__
 )

101 #i‡
deföed
 (
__VFP_FP__
Ë&& !deföed(
__SOFTFP__
)

105 #ñi‡
deföed
 ( 
__TASKING__
 )

109 
	~<°döt.h
>

110 
	~<c‹e_cmIn°r.h
>

111 
	~<c‹e_cmFunc.h
>

115 #i‚de‡
__CMSIS_GENERIC


117 #i‚de‡
__CORE_SC300_H_DEPENDANT


118 
	#__CORE_SC300_H_DEPENDANT


	)

121 #i‡
deföed
 
__CHECK_DEVICE_DEFINES


122 #i‚de‡
__SC300_REV


123 
	#__SC300_REV
 0x0000

	)

127 #i‚de‡
__MPU_PRESENT


128 
	#__MPU_PRESENT
 0

	)

132 #i‚de‡
__NVIC_PRIO_BITS


133 
	#__NVIC_PRIO_BITS
 4

	)

137 #i‚de‡
__Víd‹_SysTickC⁄fig


138 
	#__Víd‹_SysTickC⁄fig
 0

	)

151 #ifde‡
__˝lu•lus


152 
	#__I
 vﬁ©ûê

	)

154 
	#__I
 vﬁ©ûêc⁄°

	)

156 
	#__O
 vﬁ©ûê

	)

157 
	#__IO
 vﬁ©ûê

	)

189 #i‡(
__CORTEX_M
 != 0x04)

190 
uöt32_t
 
_ª£rved0
:27;

192 
uöt32_t
 
_ª£rved0
:16;

193 
uöt32_t
 
GE
:4;

194 
uöt32_t
 
_ª£rved1
:7;

196 
uöt32_t
 
Q
:1;

197 
uöt32_t
 
V
:1;

198 
uöt32_t
 
C
:1;

199 
uöt32_t
 
Z
:1;

200 
uöt32_t
 
N
:1;

201 } 
b
;

202 
uöt32_t
 
w
;

203 } 
	tAPSR_Ty≥
;

212 
uöt32_t
 
	mISR
:9;

213 
uöt32_t
 
	m_ª£rved0
:23;

214 } 
	mb
;

215 
uöt32_t
 
	mw
;

216 } 
	tIPSR_Ty≥
;

225 
uöt32_t
 
	mISR
:9;

226 #i‡(
__CORTEX_M
 != 0x04)

227 
uöt32_t
 
	m_ª£rved0
:15;

229 
uöt32_t
 
	m_ª£rved0
:7;

230 
uöt32_t
 
	mGE
:4;

231 
uöt32_t
 
	m_ª£rved1
:4;

233 
uöt32_t
 
	mT
:1;

234 
uöt32_t
 
	mIT
:2;

235 
uöt32_t
 
	mQ
:1;

236 
uöt32_t
 
	mV
:1;

237 
uöt32_t
 
	mC
:1;

238 
uöt32_t
 
	mZ
:1;

239 
uöt32_t
 
	mN
:1;

240 } 
	mb
;

241 
uöt32_t
 
	mw
;

242 } 
	txPSR_Ty≥
;

251 
uöt32_t
 
	mnPRIV
:1;

252 
uöt32_t
 
	mSPSEL
:1;

253 
uöt32_t
 
	mFPCA
:1;

254 
uöt32_t
 
	m_ª£rved0
:29;

255 } 
	mb
;

256 
uöt32_t
 
	mw
;

257 } 
	tCONTROL_Ty≥
;

272 
__IO
 
uöt32_t
 
	mISER
[8];

273 
uöt32_t
 
	mRESERVED0
[24];

274 
__IO
 
uöt32_t
 
	mICER
[8];

275 
uöt32_t
 
	mRSERVED1
[24];

276 
__IO
 
uöt32_t
 
	mISPR
[8];

277 
uöt32_t
 
	mRESERVED2
[24];

278 
__IO
 
uöt32_t
 
	mICPR
[8];

279 
uöt32_t
 
	mRESERVED3
[24];

280 
__IO
 
uöt32_t
 
	mIABR
[8];

281 
uöt32_t
 
	mRESERVED4
[56];

282 
__IO
 
uöt8_t
 
	mIP
[240];

283 
uöt32_t
 
	mRESERVED5
[644];

284 
__O
 
uöt32_t
 
	mSTIR
;

285 } 
	tNVIC_Ty≥
;

288 
	#NVIC_STIR_INTID_Pos
 0

	)

289 
	#NVIC_STIR_INTID_Msk
 (0x1FFUL << 
NVIC_STIR_INTID_Pos
Ë

	)

304 
__I
 
uöt32_t
 
	mCPUID
;

305 
__IO
 
uöt32_t
 
	mICSR
;

306 
__IO
 
uöt32_t
 
	mVTOR
;

307 
__IO
 
uöt32_t
 
	mAIRCR
;

308 
__IO
 
uöt32_t
 
	mSCR
;

309 
__IO
 
uöt32_t
 
	mCCR
;

310 
__IO
 
uöt8_t
 
	mSHP
[12];

311 
__IO
 
uöt32_t
 
	mSHCSR
;

312 
__IO
 
uöt32_t
 
	mCFSR
;

313 
__IO
 
uöt32_t
 
	mHFSR
;

314 
__IO
 
uöt32_t
 
	mDFSR
;

315 
__IO
 
uöt32_t
 
	mMMFAR
;

316 
__IO
 
uöt32_t
 
	mBFAR
;

317 
__IO
 
uöt32_t
 
	mAFSR
;

318 
__I
 
uöt32_t
 
	mPFR
[2];

319 
__I
 
uöt32_t
 
	mDFR
;

320 
__I
 
uöt32_t
 
	mADR
;

321 
__I
 
uöt32_t
 
	mMMFR
[4];

322 
__I
 
uöt32_t
 
	mISAR
[5];

323 
uöt32_t
 
	mRESERVED0
[5];

324 
__IO
 
uöt32_t
 
	mCPACR
;

325 } 
	tSCB_Ty≥
;

328 
	#SCB_CPUID_IMPLEMENTER_Pos
 24

	)

329 
	#SCB_CPUID_IMPLEMENTER_Msk
 (0xFFUL << 
SCB_CPUID_IMPLEMENTER_Pos
Ë

	)

331 
	#SCB_CPUID_VARIANT_Pos
 20

	)

332 
	#SCB_CPUID_VARIANT_Msk
 (0xFUL << 
SCB_CPUID_VARIANT_Pos
Ë

	)

334 
	#SCB_CPUID_ARCHITECTURE_Pos
 16

	)

335 
	#SCB_CPUID_ARCHITECTURE_Msk
 (0xFUL << 
SCB_CPUID_ARCHITECTURE_Pos
Ë

	)

337 
	#SCB_CPUID_PARTNO_Pos
 4

	)

338 
	#SCB_CPUID_PARTNO_Msk
 (0xFFFUL << 
SCB_CPUID_PARTNO_Pos
Ë

	)

340 
	#SCB_CPUID_REVISION_Pos
 0

	)

341 
	#SCB_CPUID_REVISION_Msk
 (0xFUL << 
SCB_CPUID_REVISION_Pos
Ë

	)

344 
	#SCB_ICSR_NMIPENDSET_Pos
 31

	)

345 
	#SCB_ICSR_NMIPENDSET_Msk
 (1UL << 
SCB_ICSR_NMIPENDSET_Pos
Ë

	)

347 
	#SCB_ICSR_PENDSVSET_Pos
 28

	)

348 
	#SCB_ICSR_PENDSVSET_Msk
 (1UL << 
SCB_ICSR_PENDSVSET_Pos
Ë

	)

350 
	#SCB_ICSR_PENDSVCLR_Pos
 27

	)

351 
	#SCB_ICSR_PENDSVCLR_Msk
 (1UL << 
SCB_ICSR_PENDSVCLR_Pos
Ë

	)

353 
	#SCB_ICSR_PENDSTSET_Pos
 26

	)

354 
	#SCB_ICSR_PENDSTSET_Msk
 (1UL << 
SCB_ICSR_PENDSTSET_Pos
Ë

	)

356 
	#SCB_ICSR_PENDSTCLR_Pos
 25

	)

357 
	#SCB_ICSR_PENDSTCLR_Msk
 (1UL << 
SCB_ICSR_PENDSTCLR_Pos
Ë

	)

359 
	#SCB_ICSR_ISRPREEMPT_Pos
 23

	)

360 
	#SCB_ICSR_ISRPREEMPT_Msk
 (1UL << 
SCB_ICSR_ISRPREEMPT_Pos
Ë

	)

362 
	#SCB_ICSR_ISRPENDING_Pos
 22

	)

363 
	#SCB_ICSR_ISRPENDING_Msk
 (1UL << 
SCB_ICSR_ISRPENDING_Pos
Ë

	)

365 
	#SCB_ICSR_VECTPENDING_Pos
 12

	)

366 
	#SCB_ICSR_VECTPENDING_Msk
 (0x1FFUL << 
SCB_ICSR_VECTPENDING_Pos
Ë

	)

368 
	#SCB_ICSR_RETTOBASE_Pos
 11

	)

369 
	#SCB_ICSR_RETTOBASE_Msk
 (1UL << 
SCB_ICSR_RETTOBASE_Pos
Ë

	)

371 
	#SCB_ICSR_VECTACTIVE_Pos
 0

	)

372 
	#SCB_ICSR_VECTACTIVE_Msk
 (0x1FFUL << 
SCB_ICSR_VECTACTIVE_Pos
Ë

	)

375 
	#SCB_VTOR_TBLBASE_Pos
 29

	)

376 
	#SCB_VTOR_TBLBASE_Msk
 (1UL << 
SCB_VTOR_TBLBASE_Pos
Ë

	)

378 
	#SCB_VTOR_TBLOFF_Pos
 7

	)

379 
	#SCB_VTOR_TBLOFF_Msk
 (0x3FFFFFUL << 
SCB_VTOR_TBLOFF_Pos
Ë

	)

382 
	#SCB_AIRCR_VECTKEY_Pos
 16

	)

383 
	#SCB_AIRCR_VECTKEY_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEY_Pos
Ë

	)

385 
	#SCB_AIRCR_VECTKEYSTAT_Pos
 16

	)

386 
	#SCB_AIRCR_VECTKEYSTAT_Msk
 (0xFFFFUL << 
SCB_AIRCR_VECTKEYSTAT_Pos
Ë

	)

388 
	#SCB_AIRCR_ENDIANESS_Pos
 15

	)

389 
	#SCB_AIRCR_ENDIANESS_Msk
 (1UL << 
SCB_AIRCR_ENDIANESS_Pos
Ë

	)

391 
	#SCB_AIRCR_PRIGROUP_Pos
 8

	)

392 
	#SCB_AIRCR_PRIGROUP_Msk
 (7UL << 
SCB_AIRCR_PRIGROUP_Pos
Ë

	)

394 
	#SCB_AIRCR_SYSRESETREQ_Pos
 2

	)

395 
	#SCB_AIRCR_SYSRESETREQ_Msk
 (1UL << 
SCB_AIRCR_SYSRESETREQ_Pos
Ë

	)

397 
	#SCB_AIRCR_VECTCLRACTIVE_Pos
 1

	)

398 
	#SCB_AIRCR_VECTCLRACTIVE_Msk
 (1UL << 
SCB_AIRCR_VECTCLRACTIVE_Pos
Ë

	)

400 
	#SCB_AIRCR_VECTRESET_Pos
 0

	)

401 
	#SCB_AIRCR_VECTRESET_Msk
 (1UL << 
SCB_AIRCR_VECTRESET_Pos
Ë

	)

404 
	#SCB_SCR_SEVONPEND_Pos
 4

	)

405 
	#SCB_SCR_SEVONPEND_Msk
 (1UL << 
SCB_SCR_SEVONPEND_Pos
Ë

	)

407 
	#SCB_SCR_SLEEPDEEP_Pos
 2

	)

408 
	#SCB_SCR_SLEEPDEEP_Msk
 (1UL << 
SCB_SCR_SLEEPDEEP_Pos
Ë

	)

410 
	#SCB_SCR_SLEEPONEXIT_Pos
 1

	)

411 
	#SCB_SCR_SLEEPONEXIT_Msk
 (1UL << 
SCB_SCR_SLEEPONEXIT_Pos
Ë

	)

414 
	#SCB_CCR_STKALIGN_Pos
 9

	)

415 
	#SCB_CCR_STKALIGN_Msk
 (1UL << 
SCB_CCR_STKALIGN_Pos
Ë

	)

417 
	#SCB_CCR_BFHFNMIGN_Pos
 8

	)

418 
	#SCB_CCR_BFHFNMIGN_Msk
 (1UL << 
SCB_CCR_BFHFNMIGN_Pos
Ë

	)

420 
	#SCB_CCR_DIV_0_TRP_Pos
 4

	)

421 
	#SCB_CCR_DIV_0_TRP_Msk
 (1UL << 
SCB_CCR_DIV_0_TRP_Pos
Ë

	)

423 
	#SCB_CCR_UNALIGN_TRP_Pos
 3

	)

424 
	#SCB_CCR_UNALIGN_TRP_Msk
 (1UL << 
SCB_CCR_UNALIGN_TRP_Pos
Ë

	)

426 
	#SCB_CCR_USERSETMPEND_Pos
 1

	)

427 
	#SCB_CCR_USERSETMPEND_Msk
 (1UL << 
SCB_CCR_USERSETMPEND_Pos
Ë

	)

429 
	#SCB_CCR_NONBASETHRDENA_Pos
 0

	)

430 
	#SCB_CCR_NONBASETHRDENA_Msk
 (1UL << 
SCB_CCR_NONBASETHRDENA_Pos
Ë

	)

433 
	#SCB_SHCSR_USGFAULTENA_Pos
 18

	)

434 
	#SCB_SHCSR_USGFAULTENA_Msk
 (1UL << 
SCB_SHCSR_USGFAULTENA_Pos
Ë

	)

436 
	#SCB_SHCSR_BUSFAULTENA_Pos
 17

	)

437 
	#SCB_SHCSR_BUSFAULTENA_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTENA_Pos
Ë

	)

439 
	#SCB_SHCSR_MEMFAULTENA_Pos
 16

	)

440 
	#SCB_SHCSR_MEMFAULTENA_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTENA_Pos
Ë

	)

442 
	#SCB_SHCSR_SVCALLPENDED_Pos
 15

	)

443 
	#SCB_SHCSR_SVCALLPENDED_Msk
 (1UL << 
SCB_SHCSR_SVCALLPENDED_Pos
Ë

	)

445 
	#SCB_SHCSR_BUSFAULTPENDED_Pos
 14

	)

446 
	#SCB_SHCSR_BUSFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTPENDED_Pos
Ë

	)

448 
	#SCB_SHCSR_MEMFAULTPENDED_Pos
 13

	)

449 
	#SCB_SHCSR_MEMFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTPENDED_Pos
Ë

	)

451 
	#SCB_SHCSR_USGFAULTPENDED_Pos
 12

	)

452 
	#SCB_SHCSR_USGFAULTPENDED_Msk
 (1UL << 
SCB_SHCSR_USGFAULTPENDED_Pos
Ë

	)

454 
	#SCB_SHCSR_SYSTICKACT_Pos
 11

	)

455 
	#SCB_SHCSR_SYSTICKACT_Msk
 (1UL << 
SCB_SHCSR_SYSTICKACT_Pos
Ë

	)

457 
	#SCB_SHCSR_PENDSVACT_Pos
 10

	)

458 
	#SCB_SHCSR_PENDSVACT_Msk
 (1UL << 
SCB_SHCSR_PENDSVACT_Pos
Ë

	)

460 
	#SCB_SHCSR_MONITORACT_Pos
 8

	)

461 
	#SCB_SHCSR_MONITORACT_Msk
 (1UL << 
SCB_SHCSR_MONITORACT_Pos
Ë

	)

463 
	#SCB_SHCSR_SVCALLACT_Pos
 7

	)

464 
	#SCB_SHCSR_SVCALLACT_Msk
 (1UL << 
SCB_SHCSR_SVCALLACT_Pos
Ë

	)

466 
	#SCB_SHCSR_USGFAULTACT_Pos
 3

	)

467 
	#SCB_SHCSR_USGFAULTACT_Msk
 (1UL << 
SCB_SHCSR_USGFAULTACT_Pos
Ë

	)

469 
	#SCB_SHCSR_BUSFAULTACT_Pos
 1

	)

470 
	#SCB_SHCSR_BUSFAULTACT_Msk
 (1UL << 
SCB_SHCSR_BUSFAULTACT_Pos
Ë

	)

472 
	#SCB_SHCSR_MEMFAULTACT_Pos
 0

	)

473 
	#SCB_SHCSR_MEMFAULTACT_Msk
 (1UL << 
SCB_SHCSR_MEMFAULTACT_Pos
Ë

	)

476 
	#SCB_CFSR_USGFAULTSR_Pos
 16

	)

477 
	#SCB_CFSR_USGFAULTSR_Msk
 (0xFFFFUL << 
SCB_CFSR_USGFAULTSR_Pos
Ë

	)

479 
	#SCB_CFSR_BUSFAULTSR_Pos
 8

	)

480 
	#SCB_CFSR_BUSFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_BUSFAULTSR_Pos
Ë

	)

482 
	#SCB_CFSR_MEMFAULTSR_Pos
 0

	)

483 
	#SCB_CFSR_MEMFAULTSR_Msk
 (0xFFUL << 
SCB_CFSR_MEMFAULTSR_Pos
Ë

	)

486 
	#SCB_HFSR_DEBUGEVT_Pos
 31

	)

487 
	#SCB_HFSR_DEBUGEVT_Msk
 (1UL << 
SCB_HFSR_DEBUGEVT_Pos
Ë

	)

489 
	#SCB_HFSR_FORCED_Pos
 30

	)

490 
	#SCB_HFSR_FORCED_Msk
 (1UL << 
SCB_HFSR_FORCED_Pos
Ë

	)

492 
	#SCB_HFSR_VECTTBL_Pos
 1

	)

493 
	#SCB_HFSR_VECTTBL_Msk
 (1UL << 
SCB_HFSR_VECTTBL_Pos
Ë

	)

496 
	#SCB_DFSR_EXTERNAL_Pos
 4

	)

497 
	#SCB_DFSR_EXTERNAL_Msk
 (1UL << 
SCB_DFSR_EXTERNAL_Pos
Ë

	)

499 
	#SCB_DFSR_VCATCH_Pos
 3

	)

500 
	#SCB_DFSR_VCATCH_Msk
 (1UL << 
SCB_DFSR_VCATCH_Pos
Ë

	)

502 
	#SCB_DFSR_DWTTRAP_Pos
 2

	)

503 
	#SCB_DFSR_DWTTRAP_Msk
 (1UL << 
SCB_DFSR_DWTTRAP_Pos
Ë

	)

505 
	#SCB_DFSR_BKPT_Pos
 1

	)

506 
	#SCB_DFSR_BKPT_Msk
 (1UL << 
SCB_DFSR_BKPT_Pos
Ë

	)

508 
	#SCB_DFSR_HALTED_Pos
 0

	)

509 
	#SCB_DFSR_HALTED_Msk
 (1UL << 
SCB_DFSR_HALTED_Pos
Ë

	)

524 
uöt32_t
 
	mRESERVED0
[1];

525 
__I
 
uöt32_t
 
	mICTR
;

526 
uöt32_t
 
	mRESERVED1
[1];

527 } 
	tSCnSCB_Ty≥
;

530 
	#SCnSCB_ICTR_INTLINESNUM_Pos
 0

	)

531 
	#SCnSCB_ICTR_INTLINESNUM_Msk
 (0xFUL << 
SCnSCB_ICTR_INTLINESNUM_Pos
Ë

	)

546 
__IO
 
uöt32_t
 
	mCTRL
;

547 
__IO
 
uöt32_t
 
	mLOAD
;

548 
__IO
 
uöt32_t
 
	mVAL
;

549 
__I
 
uöt32_t
 
	mCALIB
;

550 } 
	tSysTick_Ty≥
;

553 
	#SysTick_CTRL_COUNTFLAG_Pos
 16

	)

554 
	#SysTick_CTRL_COUNTFLAG_Msk
 (1UL << 
SysTick_CTRL_COUNTFLAG_Pos
Ë

	)

556 
	#SysTick_CTRL_CLKSOURCE_Pos
 2

	)

557 
	#SysTick_CTRL_CLKSOURCE_Msk
 (1UL << 
SysTick_CTRL_CLKSOURCE_Pos
Ë

	)

559 
	#SysTick_CTRL_TICKINT_Pos
 1

	)

560 
	#SysTick_CTRL_TICKINT_Msk
 (1UL << 
SysTick_CTRL_TICKINT_Pos
Ë

	)

562 
	#SysTick_CTRL_ENABLE_Pos
 0

	)

563 
	#SysTick_CTRL_ENABLE_Msk
 (1UL << 
SysTick_CTRL_ENABLE_Pos
Ë

	)

566 
	#SysTick_LOAD_RELOAD_Pos
 0

	)

567 
	#SysTick_LOAD_RELOAD_Msk
 (0xFFFFFFUL << 
SysTick_LOAD_RELOAD_Pos
Ë

	)

570 
	#SysTick_VAL_CURRENT_Pos
 0

	)

571 
	#SysTick_VAL_CURRENT_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

574 
	#SysTick_CALIB_NOREF_Pos
 31

	)

575 
	#SysTick_CALIB_NOREF_Msk
 (1UL << 
SysTick_CALIB_NOREF_Pos
Ë

	)

577 
	#SysTick_CALIB_SKEW_Pos
 30

	)

578 
	#SysTick_CALIB_SKEW_Msk
 (1UL << 
SysTick_CALIB_SKEW_Pos
Ë

	)

580 
	#SysTick_CALIB_TENMS_Pos
 0

	)

581 
	#SysTick_CALIB_TENMS_Msk
 (0xFFFFFFUL << 
SysTick_VAL_CURRENT_Pos
Ë

	)

596 
__O
 union

598 
__O
 
uöt8_t
 
	mu8
;

599 
__O
 
uöt16_t
 
	mu16
;

600 
__O
 
uöt32_t
 
	mu32
;

601 } 
	mPORT
 [32];

602 
uöt32_t
 
	mRESERVED0
[864];

603 
__IO
 
uöt32_t
 
	mTER
;

604 
uöt32_t
 
	mRESERVED1
[15];

605 
__IO
 
uöt32_t
 
	mTPR
;

606 
uöt32_t
 
	mRESERVED2
[15];

607 
__IO
 
uöt32_t
 
	mTCR
;

608 } 
	tITM_Ty≥
;

611 
	#ITM_TPR_PRIVMASK_Pos
 0

	)

612 
	#ITM_TPR_PRIVMASK_Msk
 (0xFUL << 
ITM_TPR_PRIVMASK_Pos
Ë

	)

615 
	#ITM_TCR_BUSY_Pos
 23

	)

616 
	#ITM_TCR_BUSY_Msk
 (1UL << 
ITM_TCR_BUSY_Pos
Ë

	)

618 
	#ITM_TCR_Tø˚BusID_Pos
 16

	)

619 
	#ITM_TCR_Tø˚BusID_Msk
 (0x7FUL << 
ITM_TCR_Tø˚BusID_Pos
Ë

	)

621 
	#ITM_TCR_GTSFREQ_Pos
 10

	)

622 
	#ITM_TCR_GTSFREQ_Msk
 (3UL << 
ITM_TCR_GTSFREQ_Pos
Ë

	)

624 
	#ITM_TCR_TSPªsˇÀ_Pos
 8

	)

625 
	#ITM_TCR_TSPªsˇÀ_Msk
 (3UL << 
ITM_TCR_TSPªsˇÀ_Pos
Ë

	)

627 
	#ITM_TCR_SWOENA_Pos
 4

	)

628 
	#ITM_TCR_SWOENA_Msk
 (1UL << 
ITM_TCR_SWOENA_Pos
Ë

	)

630 
	#ITM_TCR_TXENA_Pos
 3

	)

631 
	#ITM_TCR_TXENA_Msk
 (1UL << 
ITM_TCR_TXENA_Pos
Ë

	)

633 
	#ITM_TCR_SYNCENA_Pos
 2

	)

634 
	#ITM_TCR_SYNCENA_Msk
 (1UL << 
ITM_TCR_SYNCENA_Pos
Ë

	)

636 
	#ITM_TCR_TSENA_Pos
 1

	)

637 
	#ITM_TCR_TSENA_Msk
 (1UL << 
ITM_TCR_TSENA_Pos
Ë

	)

639 
	#ITM_TCR_ITMENA_Pos
 0

	)

640 
	#ITM_TCR_ITMENA_Msk
 (1UL << 
ITM_TCR_ITMENA_Pos
Ë

	)

655 
__IO
 
uöt32_t
 
	mCTRL
;

656 
__IO
 
uöt32_t
 
	mCYCCNT
;

657 
__IO
 
uöt32_t
 
	mCPICNT
;

658 
__IO
 
uöt32_t
 
	mEXCCNT
;

659 
__IO
 
uöt32_t
 
	mSLEEPCNT
;

660 
__IO
 
uöt32_t
 
	mLSUCNT
;

661 
__IO
 
uöt32_t
 
	mFOLDCNT
;

662 
__I
 
uöt32_t
 
	mPCSR
;

663 
__IO
 
uöt32_t
 
	mCOMP0
;

664 
__IO
 
uöt32_t
 
	mMASK0
;

665 
__IO
 
uöt32_t
 
	mFUNCTION0
;

666 
uöt32_t
 
	mRESERVED0
[1];

667 
__IO
 
uöt32_t
 
	mCOMP1
;

668 
__IO
 
uöt32_t
 
	mMASK1
;

669 
__IO
 
uöt32_t
 
	mFUNCTION1
;

670 
uöt32_t
 
	mRESERVED1
[1];

671 
__IO
 
uöt32_t
 
	mCOMP2
;

672 
__IO
 
uöt32_t
 
	mMASK2
;

673 
__IO
 
uöt32_t
 
	mFUNCTION2
;

674 
uöt32_t
 
	mRESERVED2
[1];

675 
__IO
 
uöt32_t
 
	mCOMP3
;

676 
__IO
 
uöt32_t
 
	mMASK3
;

677 
__IO
 
uöt32_t
 
	mFUNCTION3
;

678 } 
	tDWT_Ty≥
;

681 
	#DWT_CTRL_NUMCOMP_Pos
 28

	)

682 
	#DWT_CTRL_NUMCOMP_Msk
 (0xFUL << 
DWT_CTRL_NUMCOMP_Pos
Ë

	)

684 
	#DWT_CTRL_NOTRCPKT_Pos
 27

	)

685 
	#DWT_CTRL_NOTRCPKT_Msk
 (0x1UL << 
DWT_CTRL_NOTRCPKT_Pos
Ë

	)

687 
	#DWT_CTRL_NOEXTTRIG_Pos
 26

	)

688 
	#DWT_CTRL_NOEXTTRIG_Msk
 (0x1UL << 
DWT_CTRL_NOEXTTRIG_Pos
Ë

	)

690 
	#DWT_CTRL_NOCYCCNT_Pos
 25

	)

691 
	#DWT_CTRL_NOCYCCNT_Msk
 (0x1UL << 
DWT_CTRL_NOCYCCNT_Pos
Ë

	)

693 
	#DWT_CTRL_NOPRFCNT_Pos
 24

	)

694 
	#DWT_CTRL_NOPRFCNT_Msk
 (0x1UL << 
DWT_CTRL_NOPRFCNT_Pos
Ë

	)

696 
	#DWT_CTRL_CYCEVTENA_Pos
 22

	)

697 
	#DWT_CTRL_CYCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCEVTENA_Pos
Ë

	)

699 
	#DWT_CTRL_FOLDEVTENA_Pos
 21

	)

700 
	#DWT_CTRL_FOLDEVTENA_Msk
 (0x1UL << 
DWT_CTRL_FOLDEVTENA_Pos
Ë

	)

702 
	#DWT_CTRL_LSUEVTENA_Pos
 20

	)

703 
	#DWT_CTRL_LSUEVTENA_Msk
 (0x1UL << 
DWT_CTRL_LSUEVTENA_Pos
Ë

	)

705 
	#DWT_CTRL_SLEEPEVTENA_Pos
 19

	)

706 
	#DWT_CTRL_SLEEPEVTENA_Msk
 (0x1UL << 
DWT_CTRL_SLEEPEVTENA_Pos
Ë

	)

708 
	#DWT_CTRL_EXCEVTENA_Pos
 18

	)

709 
	#DWT_CTRL_EXCEVTENA_Msk
 (0x1UL << 
DWT_CTRL_EXCEVTENA_Pos
Ë

	)

711 
	#DWT_CTRL_CPIEVTENA_Pos
 17

	)

712 
	#DWT_CTRL_CPIEVTENA_Msk
 (0x1UL << 
DWT_CTRL_CPIEVTENA_Pos
Ë

	)

714 
	#DWT_CTRL_EXCTRCENA_Pos
 16

	)

715 
	#DWT_CTRL_EXCTRCENA_Msk
 (0x1UL << 
DWT_CTRL_EXCTRCENA_Pos
Ë

	)

717 
	#DWT_CTRL_PCSAMPLENA_Pos
 12

	)

718 
	#DWT_CTRL_PCSAMPLENA_Msk
 (0x1UL << 
DWT_CTRL_PCSAMPLENA_Pos
Ë

	)

720 
	#DWT_CTRL_SYNCTAP_Pos
 10

	)

721 
	#DWT_CTRL_SYNCTAP_Msk
 (0x3UL << 
DWT_CTRL_SYNCTAP_Pos
Ë

	)

723 
	#DWT_CTRL_CYCTAP_Pos
 9

	)

724 
	#DWT_CTRL_CYCTAP_Msk
 (0x1UL << 
DWT_CTRL_CYCTAP_Pos
Ë

	)

726 
	#DWT_CTRL_POSTINIT_Pos
 5

	)

727 
	#DWT_CTRL_POSTINIT_Msk
 (0xFUL << 
DWT_CTRL_POSTINIT_Pos
Ë

	)

729 
	#DWT_CTRL_POSTPRESET_Pos
 1

	)

730 
	#DWT_CTRL_POSTPRESET_Msk
 (0xFUL << 
DWT_CTRL_POSTPRESET_Pos
Ë

	)

732 
	#DWT_CTRL_CYCCNTENA_Pos
 0

	)

733 
	#DWT_CTRL_CYCCNTENA_Msk
 (0x1UL << 
DWT_CTRL_CYCCNTENA_Pos
Ë

	)

736 
	#DWT_CPICNT_CPICNT_Pos
 0

	)

737 
	#DWT_CPICNT_CPICNT_Msk
 (0xFFUL << 
DWT_CPICNT_CPICNT_Pos
Ë

	)

740 
	#DWT_EXCCNT_EXCCNT_Pos
 0

	)

741 
	#DWT_EXCCNT_EXCCNT_Msk
 (0xFFUL << 
DWT_EXCCNT_EXCCNT_Pos
Ë

	)

744 
	#DWT_SLEEPCNT_SLEEPCNT_Pos
 0

	)

745 
	#DWT_SLEEPCNT_SLEEPCNT_Msk
 (0xFFUL << 
DWT_SLEEPCNT_SLEEPCNT_Pos
Ë

	)

748 
	#DWT_LSUCNT_LSUCNT_Pos
 0

	)

749 
	#DWT_LSUCNT_LSUCNT_Msk
 (0xFFUL << 
DWT_LSUCNT_LSUCNT_Pos
Ë

	)

752 
	#DWT_FOLDCNT_FOLDCNT_Pos
 0

	)

753 
	#DWT_FOLDCNT_FOLDCNT_Msk
 (0xFFUL << 
DWT_FOLDCNT_FOLDCNT_Pos
Ë

	)

756 
	#DWT_MASK_MASK_Pos
 0

	)

757 
	#DWT_MASK_MASK_Msk
 (0x1FUL << 
DWT_MASK_MASK_Pos
Ë

	)

760 
	#DWT_FUNCTION_MATCHED_Pos
 24

	)

761 
	#DWT_FUNCTION_MATCHED_Msk
 (0x1UL << 
DWT_FUNCTION_MATCHED_Pos
Ë

	)

763 
	#DWT_FUNCTION_DATAVADDR1_Pos
 16

	)

764 
	#DWT_FUNCTION_DATAVADDR1_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR1_Pos
Ë

	)

766 
	#DWT_FUNCTION_DATAVADDR0_Pos
 12

	)

767 
	#DWT_FUNCTION_DATAVADDR0_Msk
 (0xFUL << 
DWT_FUNCTION_DATAVADDR0_Pos
Ë

	)

769 
	#DWT_FUNCTION_DATAVSIZE_Pos
 10

	)

770 
	#DWT_FUNCTION_DATAVSIZE_Msk
 (0x3UL << 
DWT_FUNCTION_DATAVSIZE_Pos
Ë

	)

772 
	#DWT_FUNCTION_LNK1ENA_Pos
 9

	)

773 
	#DWT_FUNCTION_LNK1ENA_Msk
 (0x1UL << 
DWT_FUNCTION_LNK1ENA_Pos
Ë

	)

775 
	#DWT_FUNCTION_DATAVMATCH_Pos
 8

	)

776 
	#DWT_FUNCTION_DATAVMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_DATAVMATCH_Pos
Ë

	)

778 
	#DWT_FUNCTION_CYCMATCH_Pos
 7

	)

779 
	#DWT_FUNCTION_CYCMATCH_Msk
 (0x1UL << 
DWT_FUNCTION_CYCMATCH_Pos
Ë

	)

781 
	#DWT_FUNCTION_EMITRANGE_Pos
 5

	)

782 
	#DWT_FUNCTION_EMITRANGE_Msk
 (0x1UL << 
DWT_FUNCTION_EMITRANGE_Pos
Ë

	)

784 
	#DWT_FUNCTION_FUNCTION_Pos
 0

	)

785 
	#DWT_FUNCTION_FUNCTION_Msk
 (0xFUL << 
DWT_FUNCTION_FUNCTION_Pos
Ë

	)

800 
__IO
 
uöt32_t
 
	mSSPSR
;

801 
__IO
 
uöt32_t
 
	mCSPSR
;

802 
uöt32_t
 
	mRESERVED0
[2];

803 
__IO
 
uöt32_t
 
	mACPR
;

804 
uöt32_t
 
	mRESERVED1
[55];

805 
__IO
 
uöt32_t
 
	mSPPR
;

806 
uöt32_t
 
	mRESERVED2
[131];

807 
__I
 
uöt32_t
 
	mFFSR
;

808 
__IO
 
uöt32_t
 
	mFFCR
;

809 
__I
 
uöt32_t
 
	mFSCR
;

810 
uöt32_t
 
	mRESERVED3
[759];

811 
__I
 
uöt32_t
 
	mTRIGGER
;

812 
__I
 
uöt32_t
 
	mFIFO0
;

813 
__I
 
uöt32_t
 
	mITATBCTR2
;

814 
uöt32_t
 
	mRESERVED4
[1];

815 
__I
 
uöt32_t
 
	mITATBCTR0
;

816 
__I
 
uöt32_t
 
	mFIFO1
;

817 
__IO
 
uöt32_t
 
	mITCTRL
;

818 
uöt32_t
 
	mRESERVED5
[39];

819 
__IO
 
uöt32_t
 
	mCLAIMSET
;

820 
__IO
 
uöt32_t
 
	mCLAIMCLR
;

821 
uöt32_t
 
	mRESERVED7
[8];

822 
__I
 
uöt32_t
 
	mDEVID
;

823 
__I
 
uöt32_t
 
	mDEVTYPE
;

824 } 
	tTPI_Ty≥
;

827 
	#TPI_ACPR_PRESCALER_Pos
 0

	)

828 
	#TPI_ACPR_PRESCALER_Msk
 (0x1FFFUL << 
TPI_ACPR_PRESCALER_Pos
Ë

	)

831 
	#TPI_SPPR_TXMODE_Pos
 0

	)

832 
	#TPI_SPPR_TXMODE_Msk
 (0x3UL << 
TPI_SPPR_TXMODE_Pos
Ë

	)

835 
	#TPI_FFSR_FtN⁄St›_Pos
 3

	)

836 
	#TPI_FFSR_FtN⁄St›_Msk
 (0x1UL << 
TPI_FFSR_FtN⁄St›_Pos
Ë

	)

838 
	#TPI_FFSR_TCPª£¡_Pos
 2

	)

839 
	#TPI_FFSR_TCPª£¡_Msk
 (0x1UL << 
TPI_FFSR_TCPª£¡_Pos
Ë

	)

841 
	#TPI_FFSR_FtSt›≥d_Pos
 1

	)

842 
	#TPI_FFSR_FtSt›≥d_Msk
 (0x1UL << 
TPI_FFSR_FtSt›≥d_Pos
Ë

	)

844 
	#TPI_FFSR_FlInProg_Pos
 0

	)

845 
	#TPI_FFSR_FlInProg_Msk
 (0x1UL << 
TPI_FFSR_FlInProg_Pos
Ë

	)

848 
	#TPI_FFCR_TrigIn_Pos
 8

	)

849 
	#TPI_FFCR_TrigIn_Msk
 (0x1UL << 
TPI_FFCR_TrigIn_Pos
Ë

	)

851 
	#TPI_FFCR_EnFC⁄t_Pos
 1

	)

852 
	#TPI_FFCR_EnFC⁄t_Msk
 (0x1UL << 
TPI_FFCR_EnFC⁄t_Pos
Ë

	)

855 
	#TPI_TRIGGER_TRIGGER_Pos
 0

	)

856 
	#TPI_TRIGGER_TRIGGER_Msk
 (0x1UL << 
TPI_TRIGGER_TRIGGER_Pos
Ë

	)

859 
	#TPI_FIFO0_ITM_ATVALID_Pos
 29

	)

860 
	#TPI_FIFO0_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ITM_ATVALID_Pos
Ë

	)

862 
	#TPI_FIFO0_ITM_byãcou¡_Pos
 27

	)

863 
	#TPI_FIFO0_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ITM_byãcou¡_Pos
Ë

	)

865 
	#TPI_FIFO0_ETM_ATVALID_Pos
 26

	)

866 
	#TPI_FIFO0_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO0_ETM_ATVALID_Pos
Ë

	)

868 
	#TPI_FIFO0_ETM_byãcou¡_Pos
 24

	)

869 
	#TPI_FIFO0_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO0_ETM_byãcou¡_Pos
Ë

	)

871 
	#TPI_FIFO0_ETM2_Pos
 16

	)

872 
	#TPI_FIFO0_ETM2_Msk
 (0xFFUL << 
TPI_FIFO0_ETM2_Pos
Ë

	)

874 
	#TPI_FIFO0_ETM1_Pos
 8

	)

875 
	#TPI_FIFO0_ETM1_Msk
 (0xFFUL << 
TPI_FIFO0_ETM1_Pos
Ë

	)

877 
	#TPI_FIFO0_ETM0_Pos
 0

	)

878 
	#TPI_FIFO0_ETM0_Msk
 (0xFFUL << 
TPI_FIFO0_ETM0_Pos
Ë

	)

881 
	#TPI_ITATBCTR2_ATREADY_Pos
 0

	)

882 
	#TPI_ITATBCTR2_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR2_ATREADY_Pos
Ë

	)

885 
	#TPI_FIFO1_ITM_ATVALID_Pos
 29

	)

886 
	#TPI_FIFO1_ITM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ITM_ATVALID_Pos
Ë

	)

888 
	#TPI_FIFO1_ITM_byãcou¡_Pos
 27

	)

889 
	#TPI_FIFO1_ITM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ITM_byãcou¡_Pos
Ë

	)

891 
	#TPI_FIFO1_ETM_ATVALID_Pos
 26

	)

892 
	#TPI_FIFO1_ETM_ATVALID_Msk
 (0x3UL << 
TPI_FIFO1_ETM_ATVALID_Pos
Ë

	)

894 
	#TPI_FIFO1_ETM_byãcou¡_Pos
 24

	)

895 
	#TPI_FIFO1_ETM_byãcou¡_Msk
 (0x3UL << 
TPI_FIFO1_ETM_byãcou¡_Pos
Ë

	)

897 
	#TPI_FIFO1_ITM2_Pos
 16

	)

898 
	#TPI_FIFO1_ITM2_Msk
 (0xFFUL << 
TPI_FIFO1_ITM2_Pos
Ë

	)

900 
	#TPI_FIFO1_ITM1_Pos
 8

	)

901 
	#TPI_FIFO1_ITM1_Msk
 (0xFFUL << 
TPI_FIFO1_ITM1_Pos
Ë

	)

903 
	#TPI_FIFO1_ITM0_Pos
 0

	)

904 
	#TPI_FIFO1_ITM0_Msk
 (0xFFUL << 
TPI_FIFO1_ITM0_Pos
Ë

	)

907 
	#TPI_ITATBCTR0_ATREADY_Pos
 0

	)

908 
	#TPI_ITATBCTR0_ATREADY_Msk
 (0x1UL << 
TPI_ITATBCTR0_ATREADY_Pos
Ë

	)

911 
	#TPI_ITCTRL_Mode_Pos
 0

	)

912 
	#TPI_ITCTRL_Mode_Msk
 (0x1UL << 
TPI_ITCTRL_Mode_Pos
Ë

	)

915 
	#TPI_DEVID_NRZVALID_Pos
 11

	)

916 
	#TPI_DEVID_NRZVALID_Msk
 (0x1UL << 
TPI_DEVID_NRZVALID_Pos
Ë

	)

918 
	#TPI_DEVID_MANCVALID_Pos
 10

	)

919 
	#TPI_DEVID_MANCVALID_Msk
 (0x1UL << 
TPI_DEVID_MANCVALID_Pos
Ë

	)

921 
	#TPI_DEVID_PTINVALID_Pos
 9

	)

922 
	#TPI_DEVID_PTINVALID_Msk
 (0x1UL << 
TPI_DEVID_PTINVALID_Pos
Ë

	)

924 
	#TPI_DEVID_MöBufSz_Pos
 6

	)

925 
	#TPI_DEVID_MöBufSz_Msk
 (0x7UL << 
TPI_DEVID_MöBufSz_Pos
Ë

	)

927 
	#TPI_DEVID_AsynClkIn_Pos
 5

	)

928 
	#TPI_DEVID_AsynClkIn_Msk
 (0x1UL << 
TPI_DEVID_AsynClkIn_Pos
Ë

	)

930 
	#TPI_DEVID_NrTø˚I≈ut_Pos
 0

	)

931 
	#TPI_DEVID_NrTø˚I≈ut_Msk
 (0x1FUL << 
TPI_DEVID_NrTø˚I≈ut_Pos
Ë

	)

934 
	#TPI_DEVTYPE_SubTy≥_Pos
 0

	)

935 
	#TPI_DEVTYPE_SubTy≥_Msk
 (0xFUL << 
TPI_DEVTYPE_SubTy≥_Pos
Ë

	)

937 
	#TPI_DEVTYPE_Maj‹Ty≥_Pos
 4

	)

938 
	#TPI_DEVTYPE_Maj‹Ty≥_Msk
 (0xFUL << 
TPI_DEVTYPE_Maj‹Ty≥_Pos
Ë

	)

943 #i‡(
__MPU_PRESENT
 == 1)

954 
__I
 
uöt32_t
 
	mTYPE
;

955 
__IO
 
uöt32_t
 
	mCTRL
;

956 
__IO
 
uöt32_t
 
	mRNR
;

957 
__IO
 
uöt32_t
 
	mRBAR
;

958 
__IO
 
uöt32_t
 
	mRASR
;

959 
__IO
 
uöt32_t
 
	mRBAR_A1
;

960 
__IO
 
uöt32_t
 
	mRASR_A1
;

961 
__IO
 
uöt32_t
 
	mRBAR_A2
;

962 
__IO
 
uöt32_t
 
	mRASR_A2
;

963 
__IO
 
uöt32_t
 
	mRBAR_A3
;

964 
__IO
 
uöt32_t
 
	mRASR_A3
;

965 } 
	tMPU_Ty≥
;

968 
	#MPU_TYPE_IREGION_Pos
 16

	)

969 
	#MPU_TYPE_IREGION_Msk
 (0xFFUL << 
MPU_TYPE_IREGION_Pos
Ë

	)

971 
	#MPU_TYPE_DREGION_Pos
 8

	)

972 
	#MPU_TYPE_DREGION_Msk
 (0xFFUL << 
MPU_TYPE_DREGION_Pos
Ë

	)

974 
	#MPU_TYPE_SEPARATE_Pos
 0

	)

975 
	#MPU_TYPE_SEPARATE_Msk
 (1UL << 
MPU_TYPE_SEPARATE_Pos
Ë

	)

978 
	#MPU_CTRL_PRIVDEFENA_Pos
 2

	)

979 
	#MPU_CTRL_PRIVDEFENA_Msk
 (1UL << 
MPU_CTRL_PRIVDEFENA_Pos
Ë

	)

981 
	#MPU_CTRL_HFNMIENA_Pos
 1

	)

982 
	#MPU_CTRL_HFNMIENA_Msk
 (1UL << 
MPU_CTRL_HFNMIENA_Pos
Ë

	)

984 
	#MPU_CTRL_ENABLE_Pos
 0

	)

985 
	#MPU_CTRL_ENABLE_Msk
 (1UL << 
MPU_CTRL_ENABLE_Pos
Ë

	)

988 
	#MPU_RNR_REGION_Pos
 0

	)

989 
	#MPU_RNR_REGION_Msk
 (0xFFUL << 
MPU_RNR_REGION_Pos
Ë

	)

992 
	#MPU_RBAR_ADDR_Pos
 5

	)

993 
	#MPU_RBAR_ADDR_Msk
 (0x7FFFFFFUL << 
MPU_RBAR_ADDR_Pos
Ë

	)

995 
	#MPU_RBAR_VALID_Pos
 4

	)

996 
	#MPU_RBAR_VALID_Msk
 (1UL << 
MPU_RBAR_VALID_Pos
Ë

	)

998 
	#MPU_RBAR_REGION_Pos
 0

	)

999 
	#MPU_RBAR_REGION_Msk
 (0xFUL << 
MPU_RBAR_REGION_Pos
Ë

	)

1002 
	#MPU_RASR_ATTRS_Pos
 16

	)

1003 
	#MPU_RASR_ATTRS_Msk
 (0xFFFFUL << 
MPU_RASR_ATTRS_Pos
Ë

	)

1005 
	#MPU_RASR_SRD_Pos
 8

	)

1006 
	#MPU_RASR_SRD_Msk
 (0xFFUL << 
MPU_RASR_SRD_Pos
Ë

	)

1008 
	#MPU_RASR_SIZE_Pos
 1

	)

1009 
	#MPU_RASR_SIZE_Msk
 (0x1FUL << 
MPU_RASR_SIZE_Pos
Ë

	)

1011 
	#MPU_RASR_ENABLE_Pos
 0

	)

1012 
	#MPU_RASR_ENABLE_Msk
 (1UL << 
MPU_RASR_ENABLE_Pos
Ë

	)

1028 
__IO
 
uöt32_t
 
	mDHCSR
;

1029 
__O
 
uöt32_t
 
	mDCRSR
;

1030 
__IO
 
uöt32_t
 
	mDCRDR
;

1031 
__IO
 
uöt32_t
 
	mDEMCR
;

1032 } 
	tC‹eDebug_Ty≥
;

1035 
	#C‹eDebug_DHCSR_DBGKEY_Pos
 16

	)

1036 
	#C‹eDebug_DHCSR_DBGKEY_Msk
 (0xFFFFUL << 
C‹eDebug_DHCSR_DBGKEY_Pos
Ë

	)

1038 
	#C‹eDebug_DHCSR_S_RESET_ST_Pos
 25

	)

1039 
	#C‹eDebug_DHCSR_S_RESET_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RESET_ST_Pos
Ë

	)

1041 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Pos
 24

	)

1042 
	#C‹eDebug_DHCSR_S_RETIRE_ST_Msk
 (1UL << 
C‹eDebug_DHCSR_S_RETIRE_ST_Pos
Ë

	)

1044 
	#C‹eDebug_DHCSR_S_LOCKUP_Pos
 19

	)

1045 
	#C‹eDebug_DHCSR_S_LOCKUP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_LOCKUP_Pos
Ë

	)

1047 
	#C‹eDebug_DHCSR_S_SLEEP_Pos
 18

	)

1048 
	#C‹eDebug_DHCSR_S_SLEEP_Msk
 (1UL << 
C‹eDebug_DHCSR_S_SLEEP_Pos
Ë

	)

1050 
	#C‹eDebug_DHCSR_S_HALT_Pos
 17

	)

1051 
	#C‹eDebug_DHCSR_S_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_S_HALT_Pos
Ë

	)

1053 
	#C‹eDebug_DHCSR_S_REGRDY_Pos
 16

	)

1054 
	#C‹eDebug_DHCSR_S_REGRDY_Msk
 (1UL << 
C‹eDebug_DHCSR_S_REGRDY_Pos
Ë

	)

1056 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Pos
 5

	)

1057 
	#C‹eDebug_DHCSR_C_SNAPSTALL_Msk
 (1UL << 
C‹eDebug_DHCSR_C_SNAPSTALL_Pos
Ë

	)

1059 
	#C‹eDebug_DHCSR_C_MASKINTS_Pos
 3

	)

1060 
	#C‹eDebug_DHCSR_C_MASKINTS_Msk
 (1UL << 
C‹eDebug_DHCSR_C_MASKINTS_Pos
Ë

	)

1062 
	#C‹eDebug_DHCSR_C_STEP_Pos
 2

	)

1063 
	#C‹eDebug_DHCSR_C_STEP_Msk
 (1UL << 
C‹eDebug_DHCSR_C_STEP_Pos
Ë

	)

1065 
	#C‹eDebug_DHCSR_C_HALT_Pos
 1

	)

1066 
	#C‹eDebug_DHCSR_C_HALT_Msk
 (1UL << 
C‹eDebug_DHCSR_C_HALT_Pos
Ë

	)

1068 
	#C‹eDebug_DHCSR_C_DEBUGEN_Pos
 0

	)

1069 
	#C‹eDebug_DHCSR_C_DEBUGEN_Msk
 (1UL << 
C‹eDebug_DHCSR_C_DEBUGEN_Pos
Ë

	)

1072 
	#C‹eDebug_DCRSR_REGWnR_Pos
 16

	)

1073 
	#C‹eDebug_DCRSR_REGWnR_Msk
 (1UL << 
C‹eDebug_DCRSR_REGWnR_Pos
Ë

	)

1075 
	#C‹eDebug_DCRSR_REGSEL_Pos
 0

	)

1076 
	#C‹eDebug_DCRSR_REGSEL_Msk
 (0x1FUL << 
C‹eDebug_DCRSR_REGSEL_Pos
Ë

	)

1079 
	#C‹eDebug_DEMCR_TRCENA_Pos
 24

	)

1080 
	#C‹eDebug_DEMCR_TRCENA_Msk
 (1UL << 
C‹eDebug_DEMCR_TRCENA_Pos
Ë

	)

1082 
	#C‹eDebug_DEMCR_MON_REQ_Pos
 19

	)

1083 
	#C‹eDebug_DEMCR_MON_REQ_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_REQ_Pos
Ë

	)

1085 
	#C‹eDebug_DEMCR_MON_STEP_Pos
 18

	)

1086 
	#C‹eDebug_DEMCR_MON_STEP_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_STEP_Pos
Ë

	)

1088 
	#C‹eDebug_DEMCR_MON_PEND_Pos
 17

	)

1089 
	#C‹eDebug_DEMCR_MON_PEND_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_PEND_Pos
Ë

	)

1091 
	#C‹eDebug_DEMCR_MON_EN_Pos
 16

	)

1092 
	#C‹eDebug_DEMCR_MON_EN_Msk
 (1UL << 
C‹eDebug_DEMCR_MON_EN_Pos
Ë

	)

1094 
	#C‹eDebug_DEMCR_VC_HARDERR_Pos
 10

	)

1095 
	#C‹eDebug_DEMCR_VC_HARDERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_HARDERR_Pos
Ë

	)

1097 
	#C‹eDebug_DEMCR_VC_INTERR_Pos
 9

	)

1098 
	#C‹eDebug_DEMCR_VC_INTERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_INTERR_Pos
Ë

	)

1100 
	#C‹eDebug_DEMCR_VC_BUSERR_Pos
 8

	)

1101 
	#C‹eDebug_DEMCR_VC_BUSERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_BUSERR_Pos
Ë

	)

1103 
	#C‹eDebug_DEMCR_VC_STATERR_Pos
 7

	)

1104 
	#C‹eDebug_DEMCR_VC_STATERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_STATERR_Pos
Ë

	)

1106 
	#C‹eDebug_DEMCR_VC_CHKERR_Pos
 6

	)

1107 
	#C‹eDebug_DEMCR_VC_CHKERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CHKERR_Pos
Ë

	)

1109 
	#C‹eDebug_DEMCR_VC_NOCPERR_Pos
 5

	)

1110 
	#C‹eDebug_DEMCR_VC_NOCPERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_NOCPERR_Pos
Ë

	)

1112 
	#C‹eDebug_DEMCR_VC_MMERR_Pos
 4

	)

1113 
	#C‹eDebug_DEMCR_VC_MMERR_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_MMERR_Pos
Ë

	)

1115 
	#C‹eDebug_DEMCR_VC_CORERESET_Pos
 0

	)

1116 
	#C‹eDebug_DEMCR_VC_CORERESET_Msk
 (1UL << 
C‹eDebug_DEMCR_VC_CORERESET_Pos
Ë

	)

1128 
	#SCS_BASE
 (0xE000E000ULË

	)

1129 
	#ITM_BASE
 (0xE0000000ULË

	)

1130 
	#DWT_BASE
 (0xE0001000ULË

	)

1131 
	#TPI_BASE
 (0xE0040000ULË

	)

1132 
	#C‹eDebug_BASE
 (0xE000EDF0ULË

	)

1133 
	#SysTick_BASE
 (
SCS_BASE
 + 0x0010ULË

	)

1134 
	#NVIC_BASE
 (
SCS_BASE
 + 0x0100ULË

	)

1135 
	#SCB_BASE
 (
SCS_BASE
 + 0x0D00ULË

	)

1137 
	#SCnSCB
 ((
SCnSCB_Ty≥
 *Ë
SCS_BASE
 )

	)

1138 
	#SCB
 ((
SCB_Ty≥
 *Ë
SCB_BASE
 )

	)

1139 
	#SysTick
 ((
SysTick_Ty≥
 *Ë
SysTick_BASE
 )

	)

1140 
	#NVIC
 ((
NVIC_Ty≥
 *Ë
NVIC_BASE
 )

	)

1141 
	#ITM
 ((
ITM_Ty≥
 *Ë
ITM_BASE
 )

	)

1142 
	#DWT
 ((
DWT_Ty≥
 *Ë
DWT_BASE
 )

	)

1143 
	#TPI
 ((
TPI_Ty≥
 *Ë
TPI_BASE
 )

	)

1144 
	#C‹eDebug
 ((
C‹eDebug_Ty≥
 *Ë
C‹eDebug_BASE
Ë

	)

1146 #i‡(
__MPU_PRESENT
 == 1)

1147 
	#MPU_BASE
 (
SCS_BASE
 + 0x0D90ULË

	)

1148 
	#MPU
 ((
MPU_Ty≥
 *Ë
MPU_BASE
 )

	)

1185 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôyGroupög
(
uöt32_t
 
Pri‹ôyGroup
)

1187 
uöt32_t
 
ªg_vÆue
;

1188 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & (uint32_t)0x07);

1190 
ªg_vÆue
 = 
SCB
->
AIRCR
;

1191 
ªg_vÆue
 &~(
SCB_AIRCR_VECTKEY_Msk
 | 
SCB_AIRCR_PRIGROUP_Msk
);

1192 
ªg_vÆue
 = (reg_value |

1193 ((
uöt32_t
)0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1194 (
Pri‹ôyGroupTmp
 << 8));

1195 
SCB
->
AIRCR
 = 
ªg_vÆue
;

1196 
	}
}

1205 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôyGroupög
()

1207  ((
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
Ë>> 
SCB_AIRCR_PRIGROUP_Pos
);

1208 
	}
}

1217 
__STATIC_INLINE
 
	$NVIC_E«bÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1219 
NVIC
->
ISER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1220 
	}
}

1229 
__STATIC_INLINE
 
	$NVIC_DißbÀIRQ
(
IRQn_Ty≥
 
IRQn
)

1231 
NVIC
->
ICER
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1232 
	}
}

1245 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1247 ((
uöt32_t
Ë((
NVIC
->
ISPR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1248 
	}
}

1257 
__STATIC_INLINE
 
	$NVIC_SëPídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1259 
NVIC
->
ISPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1260 
	}
}

1269 
__STATIC_INLINE
 
	$NVIC_CÀ¨PídögIRQ
(
IRQn_Ty≥
 
IRQn
)

1271 
NVIC
->
ICPR
[((
uöt32_t
)(
IRQn
) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));

1272 
	}
}

1284 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëA˘ive
(
IRQn_Ty≥
 
IRQn
)

1286 ((
uöt32_t
)((
NVIC
->
IABR
[(uöt32_t)(
IRQn
) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0));

1287 
	}
}

1299 
__STATIC_INLINE
 
	$NVIC_SëPri‹ôy
(
IRQn_Ty≥
 
IRQn
, 
uöt32_t
 
¥i‹ôy
)

1301 if(
IRQn
 < 0) {

1302 
SCB
->
SHP
[((
uöt32_t
)(
IRQn
Ë& 0xF)-4] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1304 
NVIC
->
IP
[(
uöt32_t
)(
IRQn
)] = ((
¥i‹ôy
 << (8 - 
__NVIC_PRIO_BITS
)) & 0xff); }

1305 
	}
}

1319 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_GëPri‹ôy
(
IRQn_Ty≥
 
IRQn
)

1322 if(
IRQn
 < 0) {

1323 ((
uöt32_t
)(
SCB
->
SHP
[((uöt32_t)(
IRQn
Ë& 0xF)-4] >> (8 - 
__NVIC_PRIO_BITS
))); }

1325 ((
uöt32_t
)(
NVIC
->
IP
[(uöt32_t)(
IRQn
)] >> (8 - 
__NVIC_PRIO_BITS
))); }

1326 
	}
}

1341 
__STATIC_INLINE
 
uöt32_t
 
	$NVIC_EncodePri‹ôy
 (
uöt32_t
 
Pri‹ôyGroup
, uöt32_à
Pªem±Pri‹ôy
, uöt32_à
SubPri‹ôy
)

1343 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1344 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1345 
uöt32_t
 
SubPri‹ôyBôs
;

1347 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1348 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1351 ((
Pªem±Pri‹ôy
 & ((1 << (
Pªem±Pri‹ôyBôs
)Ë- 1)Ë<< 
SubPri‹ôyBôs
) |

1352 ((
SubPri‹ôy
 & ((1 << (
SubPri‹ôyBôs
 )) - 1)))

1354 
	}
}

1369 
__STATIC_INLINE
 
	$NVIC_DecodePri‹ôy
 (
uöt32_t
 
Pri‹ôy
, uöt32_à
Pri‹ôyGroup
, uöt32_t* 
pPªem±Pri‹ôy
, uöt32_t* 
pSubPri‹ôy
)

1371 
uöt32_t
 
Pri‹ôyGroupTmp
 = (
Pri‹ôyGroup
 & 0x07);

1372 
uöt32_t
 
Pªem±Pri‹ôyBôs
;

1373 
uöt32_t
 
SubPri‹ôyBôs
;

1375 
Pªem±Pri‹ôyBôs
 = ((7 - 
Pri‹ôyGroupTmp
Ë> 
__NVIC_PRIO_BITS
) ? __NVIC_PRIO_BITS : 7 - PriorityGroupTmp;

1376 
SubPri‹ôyBôs
 = ((
Pri‹ôyGroupTmp
 + 
__NVIC_PRIO_BITS
) < 7) ? 0 : PriorityGroupTmp - 7 + __NVIC_PRIO_BITS;

1378 *
pPªem±Pri‹ôy
 = (
Pri‹ôy
 >> 
SubPri‹ôyBôs
Ë& ((1 << (
Pªem±Pri‹ôyBôs
)) - 1);

1379 *
pSubPri‹ôy
 = (
Pri‹ôy
 ) & ((1 << (
SubPri‹ôyBôs
 )) - 1);

1380 
	}
}

1387 
__STATIC_INLINE
 
	$NVIC_Sy°emRe£t
()

1389 
	`__DSB
();

1391 
SCB
->
AIRCR
 = ((0x5FA << 
SCB_AIRCR_VECTKEY_Pos
) |

1392 (
SCB
->
AIRCR
 & 
SCB_AIRCR_PRIGROUP_Msk
) |

1393 
SCB_AIRCR_SYSRESETREQ_Msk
);

1394 
	`__DSB
();

1396 
	}
}

1409 #i‡(
__Víd‹_SysTickC⁄fig
 == 0)

1426 
__STATIC_INLINE
 
uöt32_t
 
	$SysTick_C⁄fig
(
uöt32_t
 
ticks
)

1428 i‡(
ticks
 > 
SysTick_LOAD_RELOAD_Msk
)  (1);

1430 
SysTick
->
LOAD
 = (
ticks
 & 
SysTick_LOAD_RELOAD_Msk
) - 1;

1431 
	`NVIC_SëPri‹ôy
 (
SysTick_IRQn
, (1<<
__NVIC_PRIO_BITS
) - 1);

1432 
SysTick
->
VAL
 = 0;

1433 
SysTick
->
CTRL
 = 
SysTick_CTRL_CLKSOURCE_Msk
 |

1434 
SysTick_CTRL_TICKINT_Msk
 |

1435 
SysTick_CTRL_ENABLE_Msk
;

1437 
	}
}

1452 vﬁ©ûê
öt32_t
 
ITM_RxBuf„r
;

1453 
	#ITM_RXBUFFER_EMPTY
 0x5AA55AA5

	)

1466 
__STATIC_INLINE
 
uöt32_t
 
	$ITM_SídCh¨
 (
uöt32_t
 
ch
)

1468 i‡((
ITM
->
TCR
 & 
ITM_TCR_ITMENA_Msk
) &&

1469 (
ITM
->
TER
 & (1UL << 0) ) )

1471 
ITM
->
PORT
[0].
u32
 == 0);

1472 
ITM
->
PORT
[0].
u8
 = (
uöt8_t
Ë
ch
;

1474  (
ch
);

1475 
	}
}

1485 
__STATIC_INLINE
 
öt32_t
 
	$ITM_Re˚iveCh¨
 () {

1486 
öt32_t
 
ch
 = -1;

1488 i‡(
ITM_RxBuf„r
 !
ITM_RXBUFFER_EMPTY
) {

1489 
ch
 = 
ITM_RxBuf„r
;

1490 
ITM_RxBuf„r
 = 
ITM_RXBUFFER_EMPTY
;

1493  (
ch
);

1494 
	}
}

1504 
__STATIC_INLINE
 
öt32_t
 
	$ITM_CheckCh¨
 () {

1506 i‡(
ITM_RxBuf„r
 =
ITM_RXBUFFER_EMPTY
) {

1511 
	}
}

1519 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h

30 #i‚de‡
__STM32F30x_ADC_H


31 
	#__STM32F30x_ADC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

56 
uöt32_t
 
ADC_C⁄töuousC⁄vMode
;

59 
uöt32_t
 
ADC_Resﬁuti⁄
;

61 
uöt32_t
 
ADC_Exã∫ÆTrigC⁄vEvít
;

64 
uöt32_t
 
ADC_Exã∫ÆTrigEvítEdge
;

67 
uöt32_t
 
ADC_D©aAlign
;

69 
uöt32_t
 
ADC_OvîrunMode
;

71 
uöt32_t
 
ADC_AutoInjMode
;

74 
uöt8_t
 
ADC_NbrOfRegCh™√l
;

77 }
	tADC_InôTy≥Def
;

88 
uöt32_t
 
ADC_Exã∫ÆTrigInjecC⁄vEvít
;

91 
uöt32_t
 
ADC_Exã∫ÆTrigInjecEvítEdge
;

94 
uöt8_t
 
ADC_NbrOfInjecCh™√l
;

97 
uöt32_t
 
ADC_InjecSequí˚1
;

98 
uöt32_t
 
ADC_InjecSequí˚2
;

99 
uöt32_t
 
ADC_InjecSequí˚3
;

100 
uöt32_t
 
ADC_InjecSequí˚4
;

101 }
	tADC_Inje˘edInôTy≥Def
;

108 
uöt32_t
 
ADC_Mode
;

111 
uöt32_t
 
ADC_Clock
;

114 
uöt32_t
 
ADC_DMAAc˚ssMode
;

117 
uöt32_t
 
ADC_DMAMode
;

119 
uöt8_t
 
ADC_TwoSam∂ögDñay
;

123 }
	tADC_Comm⁄InôTy≥Def
;

131 
	#IS_ADC_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

132 ((
PERIPH
Ë=
ADC2
) || \

133 ((
PERIPH
Ë=
ADC3
) || \

134 ((
PERIPH
Ë=
ADC4
))

136 
	#IS_ADC_DMA_PERIPH
(
PERIPH
Ë(((PERIPHË=
ADC1
Ë|| \

	)

137 ((
PERIPH
Ë=
ADC2
) || \

138 ((
PERIPH
Ë=
ADC3
) || \

139 ((
PERIPH
Ë=
ADC4
))

144 
	#ADC_C⁄töuousC⁄vMode_E«bÀ
 ((
uöt32_t
)0x00002000Ë

	)

145 
	#ADC_C⁄töuousC⁄vMode_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

146 
	#IS_ADC_CONVMODE
(
MODE
Ë(((MODEË=
ADC_C⁄töuousC⁄vMode_E«bÀ
Ë|| \

	)

147 ((
MODE
Ë=
ADC_C⁄töuousC⁄vMode_DißbÀ
))

154 
	#ADC_OvîrunMode_E«bÀ
 ((
uöt32_t
)0x00001000Ë

	)

155 
	#ADC_OvîrunMode_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

156 
	#IS_ADC_OVRUNMODE
(
MODE
Ë(((MODEË=
ADC_OvîrunMode_E«bÀ
Ë|| \

	)

157 ((
MODE
Ë=
ADC_OvîrunMode_DißbÀ
))

164 
	#ADC_AutoInjec_E«bÀ
 ((
uöt32_t
)0x02000000Ë

	)

165 
	#ADC_AutoInjec_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

166 
	#IS_ADC_AUTOINJECMODE
(
MODE
Ë(((MODEË=
ADC_AutoInjec_E«bÀ
Ë|| \

	)

167 ((
MODE
Ë=
ADC_AutoInjec_DißbÀ
))

174 
	#ADC_Resﬁuti⁄_12b
 ((
uöt32_t
)0x00000000Ë

	)

175 
	#ADC_Resﬁuti⁄_10b
 ((
uöt32_t
)0x00000008Ë

	)

176 
	#ADC_Resﬁuti⁄_8b
 ((
uöt32_t
)0x00000010Ë

	)

177 
	#ADC_Resﬁuti⁄_6b
 ((
uöt32_t
)0x00000018Ë

	)

178 
	#IS_ADC_RESOLUTION
(
RESOLUTION
Ë(((RESOLUTIONË=
ADC_Resﬁuti⁄_12b
Ë|| \

	)

179 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_10b
) || \

180 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_8b
) || \

181 ((
RESOLUTION
Ë=
ADC_Resﬁuti⁄_6b
))

191 
	#ADC_Exã∫ÆTrigEvítEdge_N⁄e
 ((
uöt16_t
)0x0000Ë

	)

192 
	#ADC_Exã∫ÆTrigEvítEdge_RisögEdge
 ((
uöt16_t
)0x0400Ë

	)

193 
	#ADC_Exã∫ÆTrigEvítEdge_FÆlögEdge
 ((
uöt16_t
)0x0800Ë

	)

194 
	#ADC_Exã∫ÆTrigEvítEdge_BŸhEdge
 ((
uöt16_t
)0x0C00Ë

	)

196 
	#IS_EXTERNALTRIG_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigEvítEdge_N⁄e
Ë|| \

	)

197 ((
EDGE
Ë=
ADC_Exã∫ÆTrigEvítEdge_RisögEdge
) || \

198 ((
EDGE
Ë=
ADC_Exã∫ÆTrigEvítEdge_FÆlögEdge
) || \

199 ((
EDGE
Ë=
ADC_Exã∫ÆTrigEvítEdge_BŸhEdge
))

208 
	#ADC_Exã∫ÆTrigInjecEvítEdge_N⁄e
 ((
uöt16_t
)0x0000Ë

	)

209 
	#ADC_Exã∫ÆTrigInjecEvítEdge_RisögEdge
 ((
uöt16_t
)0x0040Ë

	)

210 
	#ADC_Exã∫ÆTrigInjecEvítEdge_FÆlögEdge
 ((
uöt16_t
)0x0080Ë

	)

211 
	#ADC_Exã∫ÆTrigInjecEvítEdge_BŸhEdge
 ((
uöt16_t
)0x00C0Ë

	)

213 
	#IS_EXTERNALTRIGINJ_EDGE
(
EDGE
Ë(((EDGEË=
ADC_Exã∫ÆTrigInjecEvítEdge_N⁄e
Ë|| \

	)

214 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecEvítEdge_RisögEdge
) || \

215 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecEvítEdge_FÆlögEdge
) || \

216 ((
EDGE
Ë=
ADC_Exã∫ÆTrigInjecEvítEdge_BŸhEdge
))

221 
	#ADC_Exã∫ÆTrigC⁄vEvít_0
 ((
uöt16_t
)0x0000Ë

	)

222 
	#ADC_Exã∫ÆTrigC⁄vEvít_1
 ((
uöt16_t
)0x0040Ë

	)

223 
	#ADC_Exã∫ÆTrigC⁄vEvít_2
 ((
uöt16_t
)0x0080Ë

	)

224 
	#ADC_Exã∫ÆTrigC⁄vEvít_3
 ((
uöt16_t
)0x00C0Ë

	)

225 
	#ADC_Exã∫ÆTrigC⁄vEvít_4
 ((
uöt16_t
)0x0100Ë

	)

226 
	#ADC_Exã∫ÆTrigC⁄vEvít_5
 ((
uöt16_t
)0x0140Ë

	)

227 
	#ADC_Exã∫ÆTrigC⁄vEvít_6
 ((
uöt16_t
)0x0180Ë

	)

228 
	#ADC_Exã∫ÆTrigC⁄vEvít_7
 ((
uöt16_t
)0x01C0Ë

	)

229 
	#ADC_Exã∫ÆTrigC⁄vEvít_8
 ((
uöt16_t
)0x0200Ë

	)

230 
	#ADC_Exã∫ÆTrigC⁄vEvít_9
 ((
uöt16_t
)0x0240Ë

	)

231 
	#ADC_Exã∫ÆTrigC⁄vEvít_10
 ((
uöt16_t
)0x0280Ë

	)

232 
	#ADC_Exã∫ÆTrigC⁄vEvít_11
 ((
uöt16_t
)0x02C0Ë

	)

233 
	#ADC_Exã∫ÆTrigC⁄vEvít_12
 ((
uöt16_t
)0x0300Ë

	)

234 
	#ADC_Exã∫ÆTrigC⁄vEvít_13
 ((
uöt16_t
)0x0340Ë

	)

235 
	#ADC_Exã∫ÆTrigC⁄vEvít_14
 ((
uöt16_t
)0x0380Ë

	)

236 
	#ADC_Exã∫ÆTrigC⁄vEvít_15
 ((
uöt16_t
)0x03C0Ë

	)

238 
	#IS_ADC_EXT_TRIG
(
REGTRIG
Ë(((REGTRIGË=
ADC_Exã∫ÆTrigC⁄vEvít_0
Ë|| \

	)

239 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_1
) || \

240 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_2
) || \

241 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_3
) || \

242 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_4
) || \

243 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_5
) || \

244 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_6
) || \

245 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_7
) || \

246 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_8
) || \

247 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_9
) || \

248 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_10
) || \

249 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_11
) || \

250 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_12
) || \

251 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_13
) || \

252 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_14
) || \

253 ((
REGTRIG
Ë=
ADC_Exã∫ÆTrigC⁄vEvít_15
))

263 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_0
 ((
uöt16_t
)0x0000Ë

	)

264 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_1
 ((
uöt16_t
)0x0004Ë

	)

265 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_2
 ((
uöt16_t
)0x0008Ë

	)

266 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_3
 ((
uöt16_t
)0x000CË

	)

267 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_4
 ((
uöt16_t
)0x0010Ë

	)

268 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_5
 ((
uöt16_t
)0x0014Ë

	)

269 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_6
 ((
uöt16_t
)0x0018Ë

	)

270 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_7
 ((
uöt16_t
)0x001CË

	)

271 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_8
 ((
uöt16_t
)0x0020Ë

	)

272 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_9
 ((
uöt16_t
)0x0024Ë

	)

273 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_10
 ((
uöt16_t
)0x0028Ë

	)

274 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_11
 ((
uöt16_t
)0x002CË

	)

275 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_12
 ((
uöt16_t
)0x0030Ë

	)

276 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_13
 ((
uöt16_t
)0x0034Ë

	)

277 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_14
 ((
uöt16_t
)0x0038Ë

	)

278 
	#ADC_Exã∫ÆTrigInjecC⁄vEvít_15
 ((
uöt16_t
)0x003CË

	)

280 
	#IS_ADC_EXT_INJEC_TRIG
(
INJTRIG
Ë(((INJTRIGË=
ADC_Exã∫ÆTrigInjecC⁄vEvít_0
Ë|| \

	)

281 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_1
) || \

282 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_2
) || \

283 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_3
) || \

284 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_4
) || \

285 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_5
) || \

286 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_6
) || \

287 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_7
) || \

288 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_8
) || \

289 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_9
) || \

290 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_10
) || \

291 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_11
) || \

292 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_12
) || \

293 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_13
) || \

294 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_14
) || \

295 ((
INJTRIG
Ë=
ADC_Exã∫ÆTrigInjecC⁄vEvít_15
))

303 
	#ADC_D©aAlign_Right
 ((
uöt32_t
)0x00000000Ë

	)

304 
	#ADC_D©aAlign_Le·
 ((
uöt32_t
)0x00000020Ë

	)

305 
	#IS_ADC_DATA_ALIGN
(
ALIGN
Ë(((ALIGNË=
ADC_D©aAlign_Right
Ë|| \

	)

306 ((
ALIGN
Ë=
ADC_D©aAlign_Le·
))

315 
	#ADC_Ch™√l_1
 ((
uöt8_t
)0x01Ë

	)

316 
	#ADC_Ch™√l_2
 ((
uöt8_t
)0x02Ë

	)

317 
	#ADC_Ch™√l_3
 ((
uöt8_t
)0x03Ë

	)

318 
	#ADC_Ch™√l_4
 ((
uöt8_t
)0x04Ë

	)

319 
	#ADC_Ch™√l_5
 ((
uöt8_t
)0x05Ë

	)

320 
	#ADC_Ch™√l_6
 ((
uöt8_t
)0x06Ë

	)

321 
	#ADC_Ch™√l_7
 ((
uöt8_t
)0x07Ë

	)

322 
	#ADC_Ch™√l_8
 ((
uöt8_t
)0x08Ë

	)

323 
	#ADC_Ch™√l_9
 ((
uöt8_t
)0x09Ë

	)

324 
	#ADC_Ch™√l_10
 ((
uöt8_t
)0x0AË

	)

325 
	#ADC_Ch™√l_11
 ((
uöt8_t
)0x0BË

	)

326 
	#ADC_Ch™√l_12
 ((
uöt8_t
)0x0CË

	)

327 
	#ADC_Ch™√l_13
 ((
uöt8_t
)0x0DË

	)

328 
	#ADC_Ch™√l_14
 ((
uöt8_t
)0x0EË

	)

329 
	#ADC_Ch™√l_15
 ((
uöt8_t
)0x0FË

	)

330 
	#ADC_Ch™√l_16
 ((
uöt8_t
)0x10Ë

	)

331 
	#ADC_Ch™√l_17
 ((
uöt8_t
)0x11Ë

	)

332 
	#ADC_Ch™√l_18
 ((
uöt8_t
)0x12Ë

	)

334 
	#ADC_Ch™√l_TempSís‹
 ((
uöt8_t
)
ADC_Ch™√l_16
)

	)

335 
	#ADC_Ch™√l_Vªföt
 ((
uöt8_t
)
ADC_Ch™√l_18
)

	)

336 
	#ADC_Ch™√l_Vb©
 ((
uöt8_t
)
ADC_Ch™√l_17
)

	)

338 
	#IS_ADC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

339 ((
CHANNEL
Ë=
ADC_Ch™√l_2
) || \

340 ((
CHANNEL
Ë=
ADC_Ch™√l_3
) || \

341 ((
CHANNEL
Ë=
ADC_Ch™√l_4
) || \

342 ((
CHANNEL
Ë=
ADC_Ch™√l_5
) || \

343 ((
CHANNEL
Ë=
ADC_Ch™√l_6
) || \

344 ((
CHANNEL
Ë=
ADC_Ch™√l_7
) || \

345 ((
CHANNEL
Ë=
ADC_Ch™√l_8
) || \

346 ((
CHANNEL
Ë=
ADC_Ch™√l_9
) || \

347 ((
CHANNEL
Ë=
ADC_Ch™√l_10
) || \

348 ((
CHANNEL
Ë=
ADC_Ch™√l_11
) || \

349 ((
CHANNEL
Ë=
ADC_Ch™√l_12
) || \

350 ((
CHANNEL
Ë=
ADC_Ch™√l_13
) || \

351 ((
CHANNEL
Ë=
ADC_Ch™√l_14
) || \

352 ((
CHANNEL
Ë=
ADC_Ch™√l_15
) || \

353 ((
CHANNEL
Ë=
ADC_Ch™√l_16
) || \

354 ((
CHANNEL
Ë=
ADC_Ch™√l_17
) || \

355 ((
CHANNEL
Ë=
ADC_Ch™√l_18
))

356 
	#IS_ADC_DIFFCHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Ch™√l_1
Ë|| \

	)

357 ((
CHANNEL
Ë=
ADC_Ch™√l_2
) || \

358 ((
CHANNEL
Ë=
ADC_Ch™√l_3
) || \

359 ((
CHANNEL
Ë=
ADC_Ch™√l_4
) || \

360 ((
CHANNEL
Ë=
ADC_Ch™√l_5
) || \

361 ((
CHANNEL
Ë=
ADC_Ch™√l_6
) || \

362 ((
CHANNEL
Ë=
ADC_Ch™√l_7
) || \

363 ((
CHANNEL
Ë=
ADC_Ch™√l_8
) || \

364 ((
CHANNEL
Ë=
ADC_Ch™√l_9
) || \

365 ((
CHANNEL
Ë=
ADC_Ch™√l_10
) || \

366 ((
CHANNEL
Ë=
ADC_Ch™√l_11
) || \

367 ((
CHANNEL
Ë=
ADC_Ch™√l_12
) || \

368 ((
CHANNEL
Ë=
ADC_Ch™√l_13
) || \

369 ((
CHANNEL
Ë=
ADC_Ch™√l_14
))

377 
	#ADC_Mode_Indïídít
 ((
uöt32_t
)0x00000000Ë

	)

378 
	#ADC_Mode_CombRegSimulInjSimul
 ((
uöt32_t
)0x00000001Ë

	)

379 
	#ADC_Mode_CombRegSimulA…Trig
 ((
uöt32_t
)0x00000002Ë

	)

380 
	#ADC_Mode_InjSimul
 ((
uöt32_t
)0x00000005Ë

	)

381 
	#ADC_Mode_RegSimul
 ((
uöt32_t
)0x00000006Ë

	)

382 
	#ADC_Mode_I¡îÀave
 ((
uöt32_t
)0x00000007Ë

	)

383 
	#ADC_Mode_A…Trig
 ((
uöt32_t
)0x00000009Ë

	)

385 
	#IS_ADC_MODE
(
MODE
Ë(((MODEË=
ADC_Mode_Indïídít
Ë|| \

	)

386 ((
MODE
Ë=
ADC_Mode_CombRegSimulInjSimul
) || \

387 ((
MODE
Ë=
ADC_Mode_CombRegSimulA…Trig
) || \

388 ((
MODE
Ë=
ADC_Mode_InjSimul
) || \

389 ((
MODE
Ë=
ADC_Mode_RegSimul
) || \

390 ((
MODE
Ë=
ADC_Mode_I¡îÀave
) || \

391 ((
MODE
Ë=
ADC_Mode_A…Trig
))

400 
	#ADC_Clock_AsynClkMode
 ((
uöt32_t
)0x00000000Ë

	)

401 
	#ADC_Clock_SynClkModeDiv1
 ((
uöt32_t
)0x00010000Ë

	)

402 
	#ADC_Clock_SynClkModeDiv2
 ((
uöt32_t
)0x00020000Ë

	)

403 
	#ADC_Clock_SynClkModeDiv4
 ((
uöt32_t
)0x00030000Ë

	)

404 
	#IS_ADC_CLOCKMODE
(
CLOCK
Ë(((CLOCKË=
ADC_Clock_AsynClkMode
Ë||\

	)

405 ((
CLOCK
Ë=
ADC_Clock_SynClkModeDiv1
) ||\

406 ((
CLOCK
Ë=
ADC_Clock_SynClkModeDiv2
)||\

407 ((
CLOCK
Ë=
ADC_Clock_SynClkModeDiv4
))

414 
	#ADC_DMAAc˚ssMode_DißbÀd
 ((
uöt32_t
)0x00000000Ë

	)

415 
	#ADC_DMAAc˚ssMode_1
 ((
uöt32_t
)0x00008000Ë

	)

416 
	#ADC_DMAAc˚ssMode_2
 ((
uöt32_t
)0x0000C000Ë

	)

417 
	#IS_ADC_DMA_ACCESS_MODE
(
MODE
Ë(((MODEË=
ADC_DMAAc˚ssMode_DißbÀd
Ë|| \

	)

418 ((
MODE
Ë=
ADC_DMAAc˚ssMode_1
) || \

419 ((
MODE
Ë=
ADC_DMAAc˚ssMode_2
))

428 
	#ADC_Sam∂eTime_1Cy˛es5
 ((
uöt8_t
)0x00Ë

	)

429 
	#ADC_Sam∂eTime_2Cy˛es5
 ((
uöt8_t
)0x01Ë

	)

430 
	#ADC_Sam∂eTime_4Cy˛es5
 ((
uöt8_t
)0x02Ë

	)

431 
	#ADC_Sam∂eTime_7Cy˛es5
 ((
uöt8_t
)0x03Ë

	)

432 
	#ADC_Sam∂eTime_19Cy˛es5
 ((
uöt8_t
)0x04Ë

	)

433 
	#ADC_Sam∂eTime_61Cy˛es5
 ((
uöt8_t
)0x05Ë

	)

434 
	#ADC_Sam∂eTime_181Cy˛es5
 ((
uöt8_t
)0x06Ë

	)

435 
	#ADC_Sam∂eTime_601Cy˛es5
 ((
uöt8_t
)0x07Ë

	)

436 
	#IS_ADC_SAMPLE_TIME
(
TIME
Ë(((TIMEË=
ADC_Sam∂eTime_1Cy˛es5
Ë|| \

	)

437 ((
TIME
Ë=
ADC_Sam∂eTime_2Cy˛es5
) || \

438 ((
TIME
Ë=
ADC_Sam∂eTime_4Cy˛es5
) || \

439 ((
TIME
Ë=
ADC_Sam∂eTime_7Cy˛es5
) || \

440 ((
TIME
Ë=
ADC_Sam∂eTime_19Cy˛es5
) || \

441 ((
TIME
Ë=
ADC_Sam∂eTime_61Cy˛es5
) || \

442 ((
TIME
Ë=
ADC_Sam∂eTime_181Cy˛es5
) || \

443 ((
TIME
Ë=
ADC_Sam∂eTime_601Cy˛es5
))

452 
	#ADC_Inje˘edCh™√l_1
 
ADC_Ch™√l_1


	)

453 
	#ADC_Inje˘edCh™√l_2
 
ADC_Ch™√l_2


	)

454 
	#ADC_Inje˘edCh™√l_3
 
ADC_Ch™√l_3


	)

455 
	#ADC_Inje˘edCh™√l_4
 
ADC_Ch™√l_4


	)

456 
	#IS_ADC_INJECTED_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
ADC_Inje˘edCh™√l_1
Ë|| \

	)

457 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_2
) || \

458 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_3
) || \

459 ((
CHANNEL
Ë=
ADC_Inje˘edCh™√l_4
))

468 
	#ADC_A«logW©chdog_SögÀRegE«bÀ
 ((
uöt32_t
)0x00C00000Ë

	)

469 
	#ADC_A«logW©chdog_SögÀInjecE«bÀ
 ((
uöt32_t
)0x01400000Ë

	)

470 
	#ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
 ((
uöt32_t
)0x01C00000Ë

	)

471 
	#ADC_A«logW©chdog_AŒRegE«bÀ
 ((
uöt32_t
)0x00800000Ë

	)

472 
	#ADC_A«logW©chdog_AŒInjecE«bÀ
 ((
uöt32_t
)0x01000000Ë

	)

473 
	#ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
 ((
uöt32_t
)0x01800000Ë

	)

474 
	#ADC_A«logW©chdog_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

476 
	#IS_ADC_ANALOG_WATCHDOG
(
WATCHDOG
Ë(((WATCHDOGË=
ADC_A«logW©chdog_SögÀRegE«bÀ
Ë|| \

	)

477 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀInjecE«bÀ
) || \

478 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_SögÀRegOrInjecE«bÀ
) || \

479 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegE«bÀ
) || \

480 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒInjecE«bÀ
) || \

481 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_AŒRegAŒInjecE«bÀ
) || \

482 ((
WATCHDOG
Ë=
ADC_A«logW©chdog_N⁄e
))

490 
	#ADC_CÆibøti⁄Mode_SögÀ
 ((
uöt32_t
)0x00000000Ë

	)

491 
	#ADC_CÆibøti⁄Mode_Dif„ª¡ül
 ((
uöt32_t
)0x40000000Ë

	)

493 
	#IS_ADC_CALIBRATION_MODE
(
MODE
Ë(((MODEË=
ADC_CÆibøti⁄Mode_SögÀ
Ë||((MODEË=
ADC_CÆibøti⁄Mode_Dif„ª¡ül
))

	)

502 
	#ADC_DMAMode_O√ShŸ
 ((
uöt32_t
)0x00000000Ë

	)

503 
	#ADC_DMAMode_Cúcuœr
 ((
uöt32_t
)0x00000002Ë

	)

505 
	#IS_ADC_DMA_MODE
(
MODE
Ë(((MODEË=
ADC_DMAMode_O√ShŸ
Ë|| ((MODEË=
ADC_DMAMode_Cúcuœr
))

	)

514 
	#ADC_IT_RDY
 ((
uöt16_t
)0x0001Ë

	)

515 
	#ADC_IT_EOSMP
 ((
uöt16_t
)0x0002Ë

	)

516 
	#ADC_IT_EOC
 ((
uöt16_t
)0x0004Ë

	)

517 
	#ADC_IT_EOS
 ((
uöt16_t
)0x0008Ë

	)

518 
	#ADC_IT_OVR
 ((
uöt16_t
)0x0010Ë

	)

519 
	#ADC_IT_JEOC
 ((
uöt16_t
)0x0020Ë

	)

520 
	#ADC_IT_JEOS
 ((
uöt16_t
)0x0040Ë

	)

521 
	#ADC_IT_AWD1
 ((
uöt16_t
)0x0080Ë

	)

522 
	#ADC_IT_AWD2
 ((
uöt16_t
)0x0100Ë

	)

523 
	#ADC_IT_AWD3
 ((
uöt16_t
)0x0200Ë

	)

524 
	#ADC_IT_JQOVF
 ((
uöt16_t
)0x0400Ë

	)

527 
	#IS_ADC_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xF800Ë=0x0000Ë&& ((ITË!0x0000))

	)

529 
	#IS_ADC_GET_IT
(
IT
Ë(((ITË=
ADC_IT_RDY
Ë|| ((ITË=
ADC_IT_EOSMP
Ë|| \

	)

530 ((
IT
Ë=
ADC_IT_EOC
Ë|| ((ITË=
ADC_IT_EOS
) || \

531 ((
IT
Ë=
ADC_IT_OVR
Ë|| ((ITË=
ADC_IT_EOS
) || \

532 ((
IT
Ë=
ADC_IT_JEOS
Ë|| ((ITË=
ADC_IT_AWD1
) || \

533 ((
IT
Ë=
ADC_IT_AWD2
Ë|| ((ITË=
ADC_IT_AWD3
) || \

534 ((
IT
Ë=
ADC_IT_JQOVF
))

543 
	#ADC_FLAG_RDY
 ((
uöt16_t
)0x0001Ë

	)

544 
	#ADC_FLAG_EOSMP
 ((
uöt16_t
)0x0002Ë

	)

545 
	#ADC_FLAG_EOC
 ((
uöt16_t
)0x0004Ë

	)

546 
	#ADC_FLAG_EOS
 ((
uöt16_t
)0x0008Ë

	)

547 
	#ADC_FLAG_OVR
 ((
uöt16_t
)0x0010Ë

	)

548 
	#ADC_FLAG_JEOC
 ((
uöt16_t
)0x0020Ë

	)

549 
	#ADC_FLAG_JEOS
 ((
uöt16_t
)0x0040Ë

	)

550 
	#ADC_FLAG_AWD1
 ((
uöt16_t
)0x0080Ë

	)

551 
	#ADC_FLAG_AWD2
 ((
uöt16_t
)0x0100Ë

	)

552 
	#ADC_FLAG_AWD3
 ((
uöt16_t
)0x0200Ë

	)

553 
	#ADC_FLAG_JQOVF
 ((
uöt16_t
)0x0400Ë

	)

555 
	#IS_ADC_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt16_t
)0xF800Ë=0x0000Ë&& ((FLAGË!0x0000))

	)

556 
	#IS_ADC_GET_FLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_RDY
Ë|| ((FLAGË=
ADC_FLAG_EOSMP
Ë|| \

	)

557 ((
FLAG
Ë=
ADC_FLAG_EOC
Ë|| ((FLAGË=
ADC_FLAG_EOS
) || \

558 ((
FLAG
Ë=
ADC_FLAG_OVR
Ë|| ((FLAGË=
ADC_FLAG_JEOC
) || \

559 ((
FLAG
Ë=
ADC_FLAG_JEOS
Ë|| ((FLAGË=
ADC_FLAG_AWD1
) || \

560 ((
FLAG
Ë=
ADC_FLAG_AWD2
Ë|| ((FLAGË=
ADC_FLAG_AWD3
) || \

561 ((
FLAG
Ë=
ADC_FLAG_JQOVF
))

570 
	#ADC_FLAG_MSTRDY
 ((
uöt32_t
)0x00000001Ë

	)

571 
	#ADC_FLAG_MSTEOSMP
 ((
uöt32_t
)0x00000002Ë

	)

572 
	#ADC_FLAG_MSTEOC
 ((
uöt32_t
)0x00000004Ë

	)

573 
	#ADC_FLAG_MSTEOS
 ((
uöt32_t
)0x00000008Ë

	)

574 
	#ADC_FLAG_MSTOVR
 ((
uöt32_t
)0x00000010Ë

	)

575 
	#ADC_FLAG_MSTJEOC
 ((
uöt32_t
)0x00000020Ë

	)

576 
	#ADC_FLAG_MSTJEOS
 ((
uöt32_t
)0x00000040Ë

	)

577 
	#ADC_FLAG_MSTAWD1
 ((
uöt32_t
)0x00000080Ë

	)

578 
	#ADC_FLAG_MSTAWD2
 ((
uöt32_t
)0x00000100Ë

	)

579 
	#ADC_FLAG_MSTAWD3
 ((
uöt32_t
)0x00000200Ë

	)

580 
	#ADC_FLAG_MSTJQOVF
 ((
uöt32_t
)0x00000400Ë

	)

582 
	#ADC_FLAG_SLVRDY
 ((
uöt32_t
)0x00010000Ë

	)

583 
	#ADC_FLAG_SLVEOSMP
 ((
uöt32_t
)0x00020000Ë

	)

584 
	#ADC_FLAG_SLVEOC
 ((
uöt32_t
)0x00040000Ë

	)

585 
	#ADC_FLAG_SLVEOS
 ((
uöt32_t
)0x00080000Ë

	)

586 
	#ADC_FLAG_SLVOVR
 ((
uöt32_t
)0x00100000Ë

	)

587 
	#ADC_FLAG_SLVJEOC
 ((
uöt32_t
)0x00200000Ë

	)

588 
	#ADC_FLAG_SLVJEOS
 ((
uöt32_t
)0x00400000Ë

	)

589 
	#ADC_FLAG_SLVAWD1
 ((
uöt32_t
)0x00800000Ë

	)

590 
	#ADC_FLAG_SLVAWD2
 ((
uöt32_t
)0x01000000Ë

	)

591 
	#ADC_FLAG_SLVAWD3
 ((
uöt32_t
)0x02000000Ë

	)

592 
	#ADC_FLAG_SLVJQOVF
 ((
uöt32_t
)0x04000000Ë

	)

594 
	#IS_ADC_CLEAR_COMMONFLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xF800F800Ë=0x0000Ë&& ((FLAGË!0x00000000))

	)

595 
	#IS_ADC_GET_COMMONFLAG
(
FLAG
Ë(((FLAGË=
ADC_FLAG_MSTRDY
Ë|| ((FLAGË=
ADC_FLAG_MSTEOSMP
Ë|| \

	)

596 ((
FLAG
Ë=
ADC_FLAG_MSTEOC
Ë|| ((FLAGË=
ADC_FLAG_MSTEOS
) || \

597 ((
FLAG
Ë=
ADC_FLAG_MSTOVR
Ë|| ((FLAGË=
ADC_FLAG_MSTEOS
) || \

598 ((
FLAG
Ë=
ADC_FLAG_MSTJEOS
Ë|| ((FLAGË=
ADC_FLAG_MSTAWD1
) || \

599 ((
FLAG
Ë=
ADC_FLAG_MSTAWD2
Ë|| ((FLAGË=
ADC_FLAG_MSTAWD3
) || \

600 ((
FLAG
Ë=
ADC_FLAG_MSTJQOVF
) || \

601 ((
FLAG
Ë=
ADC_FLAG_SLVRDY
Ë|| ((FLAGË=
ADC_FLAG_SLVEOSMP
) || \

602 ((
FLAG
Ë=
ADC_FLAG_SLVEOC
Ë|| ((FLAGË=
ADC_FLAG_SLVEOS
) || \

603 ((
FLAG
Ë=
ADC_FLAG_SLVOVR
Ë|| ((FLAGË=
ADC_FLAG_SLVEOS
) || \

604 ((
FLAG
Ë=
ADC_FLAG_SLVJEOS
Ë|| ((FLAGË=
ADC_FLAG_SLVAWD1
) || \

605 ((
FLAG
Ë=
ADC_FLAG_SLVAWD2
Ë|| ((FLAGË=
ADC_FLAG_SLVAWD3
) || \

606 ((
FLAG
Ë=
ADC_FLAG_SLVJQOVF
))

615 
	#IS_ADC_THRESHOLD
(
THRESHOLD
Ë((THRESHOLDË<0xFFF)

	)

625 
	#IS_ADC_OFFSET
(
OFFSET
Ë((OFFSETË<0xFFF)

	)

635 
	#IS_ADC_INJECTED_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x4))

	)

646 
	#IS_ADC_REGULAR_LENGTH
(
LENGTH
Ë(((LENGTHË>0x1Ë&& ((LENGTHË<0x10))

	)

655 
	#IS_ADC_REGULAR_DISC_NUMBER
(
NUMBER
Ë(((NUMBERË>0x1Ë&& ((NUMBERË<0x8))

	)

664 
	#IS_ADC_TWOSAMPLING_DELAY
(
DELAY
Ë(((DELAYË<0xF))

	)

678 
ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
);

681 
ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

682 
ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
);

683 
ADC_Inje˘edInô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_Inje˘edInôTy≥Def
* 
ADC_Inje˘edInôSåu˘
);

684 
ADC_Inje˘edSåu˘Inô
(
ADC_Inje˘edInôTy≥Def
* 
ADC_Inje˘edInôSåu˘
);

685 
ADC_Comm⁄Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

686 
ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
);

688 
ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

689 
ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
);

690 
uöt32_t
 
ADC_GëCÆibøti⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

691 
ADC_SëCÆibøti⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_CÆibøti⁄
);

692 
ADC_Sñe˘CÆibøti⁄Mode
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_CÆibøti⁄Mode
);

693 
FœgSètus
 
ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

694 
ADC_DißbÀCmd
(
ADC_Ty≥Def
* 
ADCx
);

695 
FœgSètus
 
ADC_GëDißbÀCmdSètus
(
ADC_Ty≥Def
* 
ADCx
);

696 
ADC_VﬁègeReguœt‹Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

697 
ADC_Sñe˘Dif„ª¡ülMode
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

698 
ADC_Sñe˘QueueOfC⁄ãxtMode
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

699 
ADC_AutoDñayCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

702 
ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
);

703 
ADC_A«logW©chdog1ThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
, uöt16_à
LowThªshﬁd
);

704 
ADC_A«logW©chdog2ThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
HighThªshﬁd
, uöt8_à
LowThªshﬁd
);

705 
ADC_A«logW©chdog3ThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
HighThªshﬁd
, uöt8_à
LowThªshﬁd
);

706 
ADC_A«logW©chdog1SögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

707 
ADC_A«logW©chdog2SögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

708 
ADC_A«logW©chdog3SögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
);

711 
ADC_TempSís‹Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

712 
ADC_VªfötCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

713 
ADC_Vb©Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

716 
ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

717 
ADC_ReguœrCh™√lSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Sequí˚rLígth
);

718 
ADC_Exã∫ÆTriggîC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_Exã∫ÆTrigC⁄vEvít
, uöt16_à
ADC_Exã∫ÆTrigEvítEdge
);

720 
ADC_SèπC⁄vîsi⁄
(
ADC_Ty≥Def
* 
ADCx
);

721 
FœgSètus
 
ADC_GëSèπC⁄vîsi⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

722 
ADC_St›C⁄vîsi⁄
(
ADC_Ty≥Def
* 
ADCx
);

723 
ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
);

724 
ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

725 
uöt16_t
 
ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

726 
uöt32_t
 
ADC_GëDuÆModeC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
);

728 
ADC_SëCh™√lOff£t1
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
uöt16_t
 
Off£t
);

729 
ADC_SëCh™√lOff£t2
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
uöt16_t
 
Off£t
);

730 
ADC_SëCh™√lOff£t3
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
uöt16_t
 
Off£t
);

731 
ADC_SëCh™√lOff£t4
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
uöt16_t
 
Off£t
);

733 
ADC_Ch™√lOff£t1Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

734 
ADC_Ch™√lOff£t2Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

735 
ADC_Ch™√lOff£t3Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

736 
ADC_Ch™√lOff£t4Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

739 
ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

740 
ADC_DMAC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_DMAMode
);

743 
ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
);

744 
ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Sequí˚rLígth
);

746 
ADC_Exã∫ÆTriggîInje˘edC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_Exã∫ÆTrigInjecC⁄vEvít
, uöt16_à
ADC_Exã∫ÆTrigInjecEvítEdge
);

748 
ADC_SèπInje˘edC⁄vîsi⁄
(
ADC_Ty≥Def
* 
ADCx
);

749 
FœgSètus
 
ADC_GëSèπInje˘edC⁄vîsi⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
);

750 
ADC_St›Inje˘edC⁄vîsi⁄
(
ADC_Ty≥Def
* 
ADCx
);

751 
ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

752 
ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

753 
uöt16_t
 
ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
);

756 
FœgSètus
 
ADC_GëComm⁄FœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_FLAG
);

757 
ADC_CÀ¨Comm⁄Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_FLAG
);

760 
ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

761 
FœgSètus
 
ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_FLAG
);

762 
ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_FLAG
);

763 
ITSètus
 
ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_IT
);

764 
ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_IT
);

766 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_can.h

30 #i‚de‡
__STM32F30x_CAN_H


31 
	#__STM32F30x_CAN_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

50 
	#IS_CAN_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
CAN1
))

	)

57 
uöt16_t
 
CAN_PªsˇÀr
;

60 
uöt8_t
 
CAN_Mode
;

63 
uöt8_t
 
CAN_SJW
;

68 
uöt8_t
 
CAN_BS1
;

72 
uöt8_t
 
CAN_BS2
;

75 
Fun˘i⁄ÆSèã
 
CAN_TTCM
;

78 
Fun˘i⁄ÆSèã
 
CAN_ABOM
;

81 
Fun˘i⁄ÆSèã
 
CAN_AWUM
;

84 
Fun˘i⁄ÆSèã
 
CAN_NART
;

87 
Fun˘i⁄ÆSèã
 
CAN_RFLM
;

90 
Fun˘i⁄ÆSèã
 
CAN_TXFP
;

92 } 
	tCAN_InôTy≥Def
;

99 
uöt16_t
 
CAN_FûãrIdHigh
;

103 
uöt16_t
 
CAN_FûãrIdLow
;

107 
uöt16_t
 
CAN_FûãrMaskIdHigh
;

112 
uöt16_t
 
CAN_FûãrMaskIdLow
;

117 
uöt16_t
 
CAN_FûãrFIFOAssignmít
;

120 
uöt8_t
 
CAN_FûãrNumbî
;

122 
uöt8_t
 
CAN_FûãrMode
;

125 
uöt8_t
 
CAN_FûãrSˇÀ
;

128 
Fun˘i⁄ÆSèã
 
CAN_FûãrA˘iv©i⁄
;

130 } 
	tCAN_FûãrInôTy≥Def
;

137 
uöt32_t
 
StdId
;

140 
uöt32_t
 
ExtId
;

143 
uöt8_t
 
IDE
;

147 
uöt8_t
 
RTR
;

151 
uöt8_t
 
DLC
;

155 
uöt8_t
 
D©a
[8];

157 } 
	tC™TxMsg
;

164 
uöt32_t
 
StdId
;

167 
uöt32_t
 
ExtId
;

170 
uöt8_t
 
IDE
;

174 
uöt8_t
 
RTR
;

178 
uöt8_t
 
DLC
;

181 
uöt8_t
 
D©a
[8];

184 
uöt8_t
 
FMI
;

187 } 
	tC™RxMsg
;

199 
	#CAN_InôSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

200 
	#CAN_InôSètus_Suc˚ss
 ((
uöt8_t
)0x01Ë

	)

204 
	#CANINITFAILED
 
CAN_InôSètus_Faûed


	)

205 
	#CANINITOK
 
CAN_InôSètus_Suc˚ss


	)

214 
	#CAN_Mode_N‹mÆ
 ((
uöt8_t
)0x00Ë

	)

215 
	#CAN_Mode_Lo›Back
 ((
uöt8_t
)0x01Ë

	)

216 
	#CAN_Mode_Sûít
 ((
uöt8_t
)0x02Ë

	)

217 
	#CAN_Mode_Sûít_Lo›Back
 ((
uöt8_t
)0x03Ë

	)

219 
	#IS_CAN_MODE
(
MODE
Ë(((MODEË=
CAN_Mode_N‹mÆ
Ë|| \

	)

220 ((
MODE
Ë=
CAN_Mode_Lo›Back
)|| \

221 ((
MODE
Ë=
CAN_Mode_Sûít
) || \

222 ((
MODE
Ë=
CAN_Mode_Sûít_Lo›Back
))

232 
	#CAN_O≥øtögMode_Inôüliz©i⁄
 ((
uöt8_t
)0x00Ë

	)

233 
	#CAN_O≥øtögMode_N‹mÆ
 ((
uöt8_t
)0x01Ë

	)

234 
	#CAN_O≥øtögMode_SÀï
 ((
uöt8_t
)0x02Ë

	)

237 
	#IS_CAN_OPERATING_MODE
(
MODE
Ë(((MODEË=
CAN_O≥øtögMode_Inôüliz©i⁄
Ë||\

	)

238 ((
MODE
Ë=
CAN_O≥øtögMode_N‹mÆ
)|| \

239 ((
MODE
Ë=
CAN_O≥øtögMode_SÀï
))

249 
	#CAN_ModeSètus_Faûed
 ((
uöt8_t
)0x00Ë

	)

250 
	#CAN_ModeSètus_Suc˚ss
 ((
uöt8_t
)!
CAN_ModeSètus_Faûed
Ë

	)

258 
	#CAN_SJW_1tq
 ((
uöt8_t
)0x00Ë

	)

259 
	#CAN_SJW_2tq
 ((
uöt8_t
)0x01Ë

	)

260 
	#CAN_SJW_3tq
 ((
uöt8_t
)0x02Ë

	)

261 
	#CAN_SJW_4tq
 ((
uöt8_t
)0x03Ë

	)

263 
	#IS_CAN_SJW
(
SJW
Ë(((SJWË=
CAN_SJW_1tq
Ë|| ((SJWË=
CAN_SJW_2tq
)|| \

	)

264 ((
SJW
Ë=
CAN_SJW_3tq
Ë|| ((SJWË=
CAN_SJW_4tq
))

272 
	#CAN_BS1_1tq
 ((
uöt8_t
)0x00Ë

	)

273 
	#CAN_BS1_2tq
 ((
uöt8_t
)0x01Ë

	)

274 
	#CAN_BS1_3tq
 ((
uöt8_t
)0x02Ë

	)

275 
	#CAN_BS1_4tq
 ((
uöt8_t
)0x03Ë

	)

276 
	#CAN_BS1_5tq
 ((
uöt8_t
)0x04Ë

	)

277 
	#CAN_BS1_6tq
 ((
uöt8_t
)0x05Ë

	)

278 
	#CAN_BS1_7tq
 ((
uöt8_t
)0x06Ë

	)

279 
	#CAN_BS1_8tq
 ((
uöt8_t
)0x07Ë

	)

280 
	#CAN_BS1_9tq
 ((
uöt8_t
)0x08Ë

	)

281 
	#CAN_BS1_10tq
 ((
uöt8_t
)0x09Ë

	)

282 
	#CAN_BS1_11tq
 ((
uöt8_t
)0x0AË

	)

283 
	#CAN_BS1_12tq
 ((
uöt8_t
)0x0BË

	)

284 
	#CAN_BS1_13tq
 ((
uöt8_t
)0x0CË

	)

285 
	#CAN_BS1_14tq
 ((
uöt8_t
)0x0DË

	)

286 
	#CAN_BS1_15tq
 ((
uöt8_t
)0x0EË

	)

287 
	#CAN_BS1_16tq
 ((
uöt8_t
)0x0FË

	)

289 
	#IS_CAN_BS1
(
BS1
Ë((BS1Ë<
CAN_BS1_16tq
)

	)

297 
	#CAN_BS2_1tq
 ((
uöt8_t
)0x00Ë

	)

298 
	#CAN_BS2_2tq
 ((
uöt8_t
)0x01Ë

	)

299 
	#CAN_BS2_3tq
 ((
uöt8_t
)0x02Ë

	)

300 
	#CAN_BS2_4tq
 ((
uöt8_t
)0x03Ë

	)

301 
	#CAN_BS2_5tq
 ((
uöt8_t
)0x04Ë

	)

302 
	#CAN_BS2_6tq
 ((
uöt8_t
)0x05Ë

	)

303 
	#CAN_BS2_7tq
 ((
uöt8_t
)0x06Ë

	)

304 
	#CAN_BS2_8tq
 ((
uöt8_t
)0x07Ë

	)

306 
	#IS_CAN_BS2
(
BS2
Ë((BS2Ë<
CAN_BS2_8tq
)

	)

314 
	#IS_CAN_PRESCALER
(
PRESCALER
Ë(((PRESCALERË>1Ë&& ((PRESCALERË<1024))

	)

322 
	#IS_CAN_FILTER_NUMBER
(
NUMBER
Ë((NUMBERË<27)

	)

330 
	#CAN_FûãrMode_IdMask
 ((
uöt8_t
)0x00Ë

	)

331 
	#CAN_FûãrMode_IdLi°
 ((
uöt8_t
)0x01Ë

	)

333 
	#IS_CAN_FILTER_MODE
(
MODE
Ë(((MODEË=
CAN_FûãrMode_IdMask
Ë|| \

	)

334 ((
MODE
Ë=
CAN_FûãrMode_IdLi°
))

342 
	#CAN_FûãrSˇÀ_16bô
 ((
uöt8_t
)0x00Ë

	)

343 
	#CAN_FûãrSˇÀ_32bô
 ((
uöt8_t
)0x01Ë

	)

345 
	#IS_CAN_FILTER_SCALE
(
SCALE
Ë(((SCALEË=
CAN_FûãrSˇÀ_16bô
Ë|| \

	)

346 ((
SCALE
Ë=
CAN_FûãrSˇÀ_32bô
))

354 
	#CAN_Fûãr_FIFO0
 ((
uöt8_t
)0x00Ë

	)

355 
	#CAN_Fûãr_FIFO1
 ((
uöt8_t
)0x01Ë

	)

356 
	#IS_CAN_FILTER_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FûãrFIFO0
Ë|| \

	)

357 ((
FIFO
Ë=
CAN_FûãrFIFO1
))

360 
	#CAN_FûãrFIFO0
 
CAN_Fûãr_FIFO0


	)

361 
	#CAN_FûãrFIFO1
 
CAN_Fûãr_FIFO1


	)

369 
	#IS_CAN_BANKNUMBER
(
BANKNUMBER
Ë(((BANKNUMBERË>1Ë&& ((BANKNUMBERË<27))

	)

377 
	#IS_CAN_TRANSMITMAILBOX
(
TRANSMITMAILBOX
Ë((TRANSMITMAILBOXË<((
uöt8_t
)0x02))

	)

378 
	#IS_CAN_STDID
(
STDID
Ë((STDIDË<((
uöt32_t
)0x7FF))

	)

379 
	#IS_CAN_EXTID
(
EXTID
Ë((EXTIDË<((
uöt32_t
)0x1FFFFFFF))

	)

380 
	#IS_CAN_DLC
(
DLC
Ë((DLCË<((
uöt8_t
)0x08))

	)

388 
	#CAN_Id_Sènd¨d
 ((
uöt32_t
)0x00000000Ë

	)

389 
	#CAN_Id_Exãnded
 ((
uöt32_t
)0x00000004Ë

	)

390 
	#IS_CAN_IDTYPE
(
IDTYPE
Ë(((IDTYPEË=
CAN_Id_Sènd¨d
Ë|| \

	)

391 ((
IDTYPE
Ë=
CAN_Id_Exãnded
))

394 
	#CAN_ID_STD
 
CAN_Id_Sènd¨d


	)

395 
	#CAN_ID_EXT
 
CAN_Id_Exãnded


	)

403 
	#CAN_RTR_D©a
 ((
uöt32_t
)0x00000000Ë

	)

404 
	#CAN_RTR_RemŸe
 ((
uöt32_t
)0x00000002Ë

	)

405 
	#IS_CAN_RTR
(
RTR
Ë(((RTRË=
CAN_RTR_D©a
Ë|| ((RTRË=
CAN_RTR_RemŸe
))

	)

408 
	#CAN_RTR_DATA
 
CAN_RTR_D©a


	)

409 
	#CAN_RTR_REMOTE
 
CAN_RTR_RemŸe


	)

417 
	#CAN_TxSètus_Faûed
 ((
uöt8_t
)0x00)

	)

418 
	#CAN_TxSètus_Ok
 ((
uöt8_t
)0x01Ë

	)

419 
	#CAN_TxSètus_Pídög
 ((
uöt8_t
)0x02Ë

	)

420 
	#CAN_TxSètus_NoMaûBox
 ((
uöt8_t
)0x04Ë

	)

423 
	#CANTXFAILED
 
CAN_TxSètus_Faûed


	)

424 
	#CANTXOK
 
CAN_TxSètus_Ok


	)

425 
	#CANTXPENDING
 
CAN_TxSètus_Pídög


	)

426 
	#CAN_NO_MB
 
CAN_TxSètus_NoMaûBox


	)

434 
	#CAN_FIFO0
 ((
uöt8_t
)0x00Ë

	)

435 
	#CAN_FIFO1
 ((
uöt8_t
)0x01Ë

	)

437 
	#IS_CAN_FIFO
(
FIFO
Ë(((FIFOË=
CAN_FIFO0
Ë|| ((FIFOË=
CAN_FIFO1
))

	)

445 
	#CAN_SÀï_Faûed
 ((
uöt8_t
)0x00Ë

	)

446 
	#CAN_SÀï_Ok
 ((
uöt8_t
)0x01Ë

	)

449 
	#CANSLEEPFAILED
 
CAN_SÀï_Faûed


	)

450 
	#CANSLEEPOK
 
CAN_SÀï_Ok


	)

458 
	#CAN_WakeUp_Faûed
 ((
uöt8_t
)0x00Ë

	)

459 
	#CAN_WakeUp_Ok
 ((
uöt8_t
)0x01Ë

	)

462 
	#CANWAKEUPFAILED
 
CAN_WakeUp_Faûed


	)

463 
	#CANWAKEUPOK
 
CAN_WakeUp_Ok


	)

472 
	#CAN_Eº‹Code_NoEº
 ((
uöt8_t
)0x00Ë

	)

473 
	#CAN_Eº‹Code_StuffEº
 ((
uöt8_t
)0x10Ë

	)

474 
	#CAN_Eº‹Code_F‹mEº
 ((
uöt8_t
)0x20Ë

	)

475 
	#CAN_Eº‹Code_ACKEº
 ((
uöt8_t
)0x30Ë

	)

476 
	#CAN_Eº‹Code_BôRe˚ssiveEº
 ((
uöt8_t
)0x40Ë

	)

477 
	#CAN_Eº‹Code_BôDomö™tEº
 ((
uöt8_t
)0x50Ë

	)

478 
	#CAN_Eº‹Code_CRCEº
 ((
uöt8_t
)0x60Ë

	)

479 
	#CAN_Eº‹Code_So·w¨eSëEº
 ((
uöt8_t
)0x70Ë

	)

493 
	#CAN_FLAG_RQCP0
 ((
uöt32_t
)0x38000001Ë

	)

494 
	#CAN_FLAG_RQCP1
 ((
uöt32_t
)0x38000100Ë

	)

495 
	#CAN_FLAG_RQCP2
 ((
uöt32_t
)0x38010000Ë

	)

498 
	#CAN_FLAG_FMP0
 ((
uöt32_t
)0x12000003Ë

	)

499 
	#CAN_FLAG_FF0
 ((
uöt32_t
)0x32000008Ë

	)

500 
	#CAN_FLAG_FOV0
 ((
uöt32_t
)0x32000010Ë

	)

501 
	#CAN_FLAG_FMP1
 ((
uöt32_t
)0x14000003Ë

	)

502 
	#CAN_FLAG_FF1
 ((
uöt32_t
)0x34000008Ë

	)

503 
	#CAN_FLAG_FOV1
 ((
uöt32_t
)0x34000010Ë

	)

506 
	#CAN_FLAG_WKU
 ((
uöt32_t
)0x31000008Ë

	)

507 
	#CAN_FLAG_SLAK
 ((
uöt32_t
)0x31000012Ë

	)

512 
	#CAN_FLAG_EWG
 ((
uöt32_t
)0x10F00001Ë

	)

513 
	#CAN_FLAG_EPV
 ((
uöt32_t
)0x10F00002Ë

	)

514 
	#CAN_FLAG_BOF
 ((
uöt32_t
)0x10F00004Ë

	)

515 
	#CAN_FLAG_LEC
 ((
uöt32_t
)0x30F00070Ë

	)

517 
	#IS_CAN_GET_FLAG
(
FLAG
Ë(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_BOF
Ë|| \

	)

518 ((
FLAG
Ë=
CAN_FLAG_EPV
Ë|| ((FLAGË=
CAN_FLAG_EWG
) || \

519 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) || \

520 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FMP0
) || \

521 ((
FLAG
Ë=
CAN_FLAG_FOV1
Ë|| ((FLAGË=
CAN_FLAG_FF1
) || \

522 ((
FLAG
Ë=
CAN_FLAG_FMP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
) || \

523 ((
FLAG
Ë=
CAN_FLAG_RQCP1
)|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

524 ((
FLAG
Ë=
CAN_FLAG_SLAK
 ))

526 
	#IS_CAN_CLEAR_FLAG
(
FLAG
)(((FLAGË=
CAN_FLAG_LEC
Ë|| ((FLAGË=
CAN_FLAG_RQCP2
Ë|| \

	)

527 ((
FLAG
Ë=
CAN_FLAG_RQCP1
Ë|| ((FLAGË=
CAN_FLAG_RQCP0
) || \

528 ((
FLAG
Ë=
CAN_FLAG_FF0
Ë|| ((FLAGË=
CAN_FLAG_FOV0
) ||\

529 ((
FLAG
Ë=
CAN_FLAG_FF1
Ë|| ((FLAGË=
CAN_FLAG_FOV1
) || \

530 ((
FLAG
Ë=
CAN_FLAG_WKU
Ë|| ((FLAGË=
CAN_FLAG_SLAK
))

539 
	#CAN_IT_TME
 ((
uöt32_t
)0x00000001Ë

	)

542 
	#CAN_IT_FMP0
 ((
uöt32_t
)0x00000002Ë

	)

543 
	#CAN_IT_FF0
 ((
uöt32_t
)0x00000004Ë

	)

544 
	#CAN_IT_FOV0
 ((
uöt32_t
)0x00000008Ë

	)

545 
	#CAN_IT_FMP1
 ((
uöt32_t
)0x00000010Ë

	)

546 
	#CAN_IT_FF1
 ((
uöt32_t
)0x00000020Ë

	)

547 
	#CAN_IT_FOV1
 ((
uöt32_t
)0x00000040Ë

	)

550 
	#CAN_IT_WKU
 ((
uöt32_t
)0x00010000Ë

	)

551 
	#CAN_IT_SLK
 ((
uöt32_t
)0x00020000Ë

	)

554 
	#CAN_IT_EWG
 ((
uöt32_t
)0x00000100Ë

	)

555 
	#CAN_IT_EPV
 ((
uöt32_t
)0x00000200Ë

	)

556 
	#CAN_IT_BOF
 ((
uöt32_t
)0x00000400Ë

	)

557 
	#CAN_IT_LEC
 ((
uöt32_t
)0x00000800Ë

	)

558 
	#CAN_IT_ERR
 ((
uöt32_t
)0x00008000Ë

	)

561 
	#CAN_IT_RQCP0
 
CAN_IT_TME


	)

562 
	#CAN_IT_RQCP1
 
CAN_IT_TME


	)

563 
	#CAN_IT_RQCP2
 
CAN_IT_TME


	)

566 
	#IS_CAN_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FMP0
Ë||\

	)

567 ((
IT
Ë=
CAN_IT_FF0
Ë|| ((ITË=
CAN_IT_FOV0
) ||\

568 ((
IT
Ë=
CAN_IT_FMP1
Ë|| ((ITË=
CAN_IT_FF1
) ||\

569 ((
IT
Ë=
CAN_IT_FOV1
Ë|| ((ITË=
CAN_IT_EWG
) ||\

570 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

571 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

572 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

574 
	#IS_CAN_CLEAR_IT
(
IT
Ë(((ITË=
CAN_IT_TME
Ë|| ((ITË=
CAN_IT_FF0
Ë||\

	)

575 ((
IT
Ë=
CAN_IT_FOV0
)|| ((ITË=
CAN_IT_FF1
) ||\

576 ((
IT
Ë=
CAN_IT_FOV1
)|| ((ITË=
CAN_IT_EWG
) ||\

577 ((
IT
Ë=
CAN_IT_EPV
Ë|| ((ITË=
CAN_IT_BOF
) ||\

578 ((
IT
Ë=
CAN_IT_LEC
Ë|| ((ITË=
CAN_IT_ERR
) ||\

579 ((
IT
Ë=
CAN_IT_WKU
Ë|| ((ITË=
CAN_IT_SLK
))

592 
CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
);

595 
uöt8_t
 
CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

596 
CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
);

597 
CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
);

598 
CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
);

599 
CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

600 
CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

603 
uöt8_t
 
CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
);

604 
uöt8_t
 
CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
TønsmôMaûbox
);

605 
CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
);

608 
CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
);

609 
CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
);

610 
uöt8_t
 
CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
FIFONumbî
);

613 
uöt8_t
 
CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, uöt8_à
CAN_O≥øtögMode
);

614 
uöt8_t
 
CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
);

615 
uöt8_t
 
CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
);

618 
uöt8_t
 
CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
);

619 
uöt8_t
 
CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

620 
uöt8_t
 
CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
);

623 
CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

624 
FœgSètus
 
CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

625 
CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
);

626 
ITSètus
 
CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

627 
CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
);

629 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h

30 #i‚de‡
__STM32F30x_COMP_H


31 
	#__STM32F30x_COMP_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

57 
uöt32_t
 
COMP_InvîtögI≈ut
;

60 
uöt32_t
 
COMP_N⁄InvîtögI≈ut
;

63 
uöt32_t
 
COMP_Ouçut
;

66 
uöt32_t
 
COMP_BœnkögSr˚
;

69 
uöt32_t
 
COMP_OuçutPﬁ
;

72 
uöt32_t
 
COMP_Hy°îesis
;

75 
uöt32_t
 
COMP_Mode
;

79 }
	tCOMP_InôTy≥Def
;

91 
	#COMP_Sñe˘i⁄_COMP1
 ((
uöt32_t
)0x00000000Ë

	)

92 
	#COMP_Sñe˘i⁄_COMP2
 ((
uöt32_t
)0x00000004Ë

	)

93 
	#COMP_Sñe˘i⁄_COMP3
 ((
uöt32_t
)0x00000008Ë

	)

94 
	#COMP_Sñe˘i⁄_COMP4
 ((
uöt32_t
)0x0000000CË

	)

95 
	#COMP_Sñe˘i⁄_COMP5
 ((
uöt32_t
)0x00000010Ë

	)

96 
	#COMP_Sñe˘i⁄_COMP6
 ((
uöt32_t
)0x00000014Ë

	)

97 
	#COMP_Sñe˘i⁄_COMP7
 ((
uöt32_t
)0x00000018Ë

	)

99 
	#IS_COMP_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
COMP_Sñe˘i⁄_COMP1
Ë|| \

	)

100 ((
PERIPH
Ë=
COMP_Sñe˘i⁄_COMP2
) || \

101 ((
PERIPH
Ë=
COMP_Sñe˘i⁄_COMP3
) || \

102 ((
PERIPH
Ë=
COMP_Sñe˘i⁄_COMP4
) || \

103 ((
PERIPH
Ë=
COMP_Sñe˘i⁄_COMP5
) || \

104 ((
PERIPH
Ë=
COMP_Sñe˘i⁄_COMP6
) || \

105 ((
PERIPH
Ë=
COMP_Sñe˘i⁄_COMP7
))

115 
	#COMP_InvîtögI≈ut_1_4VREFINT
 ((
uöt32_t
)0x00000000Ë

	)

116 
	#COMP_InvîtögI≈ut_1_2VREFINT
 
COMP_CSR_COMPxINSEL_0


	)

117 
	#COMP_InvîtögI≈ut_3_4VREFINT
 
COMP_CSR_COMPxINSEL_1


	)

118 
	#COMP_InvîtögI≈ut_VREFINT
 ((
uöt32_t
)0x00000030Ë

	)

119 
	#COMP_InvîtögI≈ut_DAC1
 
COMP_CSR_COMPxINSEL_2


	)

120 
	#COMP_InvîtögI≈ut_DAC2
 ((
uöt32_t
)0x00000050Ë

	)

121 
	#COMP_InvîtögI≈ut_IO1
 ((
uöt32_t
)0x00000060Ë

	)

125 
	#COMP_InvîtögI≈ut_IO2
 
COMP_CSR_COMPxINSEL


	)

128 
	#IS_COMP_INVERTING_INPUT
(
INPUT
Ë(((INPUTË=
COMP_InvîtögI≈ut_1_4VREFINT
Ë|| \

	)

129 ((
INPUT
Ë=
COMP_InvîtögI≈ut_1_2VREFINT
) || \

130 ((
INPUT
Ë=
COMP_InvîtögI≈ut_3_4VREFINT
) || \

131 ((
INPUT
Ë=
COMP_InvîtögI≈ut_VREFINT
) || \

132 ((
INPUT
Ë=
COMP_InvîtögI≈ut_DAC1
) || \

133 ((
INPUT
Ë=
COMP_InvîtögI≈ut_DAC2
) || \

134 ((
INPUT
Ë=
COMP_InvîtögI≈ut_IO1
) || \

135 ((
INPUT
Ë=
COMP_InvîtögI≈ut_IO2
))

144 
	#COMP_N⁄InvîtögI≈ut_IO1
 ((
uöt32_t
)0x00000000Ë

	)

148 
	#COMP_N⁄InvîtögI≈ut_IO2
 
COMP_CSR_COMPxNONINSEL


	)

151 
	#IS_COMP_NONINVERTING_INPUT
(
INPUT
Ë(((INPUTË=
COMP_N⁄InvîtögI≈ut_IO1
Ë|| \

	)

152 ((
INPUT
Ë=
COMP_N⁄InvîtögI≈ut_IO2
))

161 
	#COMP_Ouçut_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

164 
	#COMP_Ouçut_TIM1BKIN
 
COMP_CSR_COMPxOUTSEL_0


	)

165 
	#COMP_Ouçut_TIM1BKIN2
 ((
uöt32_t
)0x00000800Ë

	)

166 
	#COMP_Ouçut_TIM8BKIN
 ((
uöt32_t
)0x00000C00Ë

	)

167 
	#COMP_Ouçut_TIM8BKIN2
 ((
uöt32_t
)0x00001000Ë

	)

168 
	#COMP_Ouçut_TIM1BKIN2_TIM8BKIN2
 ((
uöt32_t
)0x00001400Ë

	)

171 
	#COMP_Ouçut_TIM1OCREFCLR
 ((
uöt32_t
)0x00001800Ë

	)

172 
	#COMP_Ouçut_TIM1IC1
 ((
uöt32_t
)0x00001C00Ë

	)

173 
	#COMP_Ouçut_TIM2IC4
 ((
uöt32_t
)0x00002000Ë

	)

174 
	#COMP_Ouçut_TIM2OCREFCLR
 ((
uöt32_t
)0x00002400Ë

	)

175 
	#COMP_Ouçut_TIM3IC1
 ((
uöt32_t
)0x00002800Ë

	)

176 
	#COMP_Ouçut_TIM3OCREFCLR
 ((
uöt32_t
)0x00002C00Ë

	)

179 
	#COMP_Ouçut_TIM4IC1
 ((
uöt32_t
)0x00001C00Ë

	)

180 
	#COMP_Ouçut_TIM3IC2
 ((
uöt32_t
)0x00002000Ë

	)

181 
	#COMP_Ouçut_TIM15IC1
 ((
uöt32_t
)0x00002800Ë

	)

182 
	#COMP_Ouçut_TIM15BKIN
 ((
uöt32_t
)0x00002C00Ë

	)

185 
	#COMP_Ouçut_TIM3IC3
 ((
uöt32_t
)0x00001800Ë

	)

186 
	#COMP_Ouçut_TIM8OCREFCLR
 ((
uöt32_t
)0x00001C00Ë

	)

187 
	#COMP_Ouçut_TIM15IC2
 ((
uöt32_t
)0x00002000Ë

	)

188 
	#COMP_Ouçut_TIM4IC2
 ((
uöt32_t
)0x00002400Ë

	)

189 
	#COMP_Ouçut_TIM15OCREFCLR
 ((
uöt32_t
)0x00002800Ë

	)

192 
	#COMP_Ouçut_TIM2IC1
 ((
uöt32_t
)0x00001800Ë

	)

193 
	#COMP_Ouçut_TIM17IC1
 ((
uöt32_t
)0x00002000Ë

	)

194 
	#COMP_Ouçut_TIM4IC3
 ((
uöt32_t
)0x00002400Ë

	)

195 
	#COMP_Ouçut_TIM16BKIN
 ((
uöt32_t
)0x00002800Ë

	)

198 
	#COMP_Ouçut_TIM2IC2
 ((
uöt32_t
)0x00001800Ë

	)

199 
	#COMP_Ouçut_COMP6TIM2OCREFCLR
 ((
uöt32_t
)0x00002000Ë

	)

200 
	#COMP_Ouçut_TIM16OCREFCLR
 ((
uöt32_t
)0x00002400Ë

	)

201 
	#COMP_Ouçut_TIM16IC1
 ((
uöt32_t
)0x00002800Ë

	)

202 
	#COMP_Ouçut_TIM4IC4
 ((
uöt32_t
)0x00002C00Ë

	)

205 
	#COMP_Ouçut_TIM2IC3
 ((
uöt32_t
)0x00002000Ë

	)

206 
	#COMP_Ouçut_TIM1IC2
 ((
uöt32_t
)0x00002400Ë

	)

207 
	#COMP_Ouçut_TIM17OCREFCLR
 ((
uöt32_t
)0x00002800Ë

	)

208 
	#COMP_Ouçut_TIM17BKIN
 ((
uöt32_t
)0x00002C00Ë

	)

210 
	#IS_COMP_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
COMP_Ouçut_N⁄e
Ë|| \

	)

211 ((
OUTPUT
Ë=
COMP_Ouçut_TIM1BKIN
) || \

212 ((
OUTPUT
Ë=
COMP_Ouçut_TIM1IC1
) || \

213 ((
OUTPUT
Ë=
COMP_Ouçut_TIM1OCREFCLR
) || \

214 ((
OUTPUT
Ë=
COMP_Ouçut_TIM2IC4
) || \

215 ((
OUTPUT
Ë=
COMP_Ouçut_TIM2OCREFCLR
) || \

216 ((
OUTPUT
Ë=
COMP_Ouçut_COMP6TIM2OCREFCLR
) || \

217 ((
OUTPUT
Ë=
COMP_Ouçut_TIM3IC1
) || \

218 ((
OUTPUT
Ë=
COMP_Ouçut_TIM3OCREFCLR
) || \

219 ((
OUTPUT
Ë=
COMP_Ouçut_TIM8BKIN
) || \

220 ((
OUTPUT
Ë=
COMP_Ouçut_TIM1BKIN2
) || \

221 ((
OUTPUT
Ë=
COMP_Ouçut_TIM8BKIN2
) || \

222 ((
OUTPUT
Ë=
COMP_Ouçut_TIM2OCREFCLR
) || \

223 ((
OUTPUT
Ë=
COMP_Ouçut_TIM1BKIN2_TIM8BKIN2
) || \

224 ((
OUTPUT
Ë=
COMP_Ouçut_TIM3IC2
) || \

225 ((
OUTPUT
Ë=
COMP_Ouçut_TIM4IC1
) || \

226 ((
OUTPUT
Ë=
COMP_Ouçut_TIM15IC1
) || \

227 ((
OUTPUT
Ë=
COMP_Ouçut_TIM15BKIN
) || \

228 ((
OUTPUT
Ë=
COMP_Ouçut_TIM8OCREFCLR
) || \

229 ((
OUTPUT
Ë=
COMP_Ouçut_TIM3IC3
) || \

230 ((
OUTPUT
Ë=
COMP_Ouçut_TIM4IC1
) || \

231 ((
OUTPUT
Ë=
COMP_Ouçut_TIM15IC1
) || \

232 ((
OUTPUT
Ë=
COMP_Ouçut_TIM2IC1
) || \

233 ((
OUTPUT
Ë=
COMP_Ouçut_TIM4IC3
) || \

234 ((
OUTPUT
Ë=
COMP_Ouçut_TIM16BKIN
) || \

235 ((
OUTPUT
Ë=
COMP_Ouçut_TIM17IC1
) || \

236 ((
OUTPUT
Ë=
COMP_Ouçut_TIM2IC2
) || \

237 ((
OUTPUT
Ë=
COMP_Ouçut_TIM16IC1
) || \

238 ((
OUTPUT
Ë=
COMP_Ouçut_TIM4IC4
) || \

239 ((
OUTPUT
Ë=
COMP_Ouçut_TIM16OCREFCLR
) || \

240 ((
OUTPUT
Ë=
COMP_Ouçut_TIM2IC3
) || \

241 ((
OUTPUT
Ë=
COMP_Ouçut_TIM1IC2
) || \

242 ((
OUTPUT
Ë=
COMP_Ouçut_TIM17BKIN
) || \

243 ((
OUTPUT
Ë=
COMP_Ouçut_TIM17OCREFCLR
))

253 
	#COMP_BœnkögSr˚_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

256 
	#COMP_BœnkögSr˚_TIM1OC5
 
COMP_CSR_COMPxBLANKING_0


	)

259 
	#COMP_BœnkögSr˚_TIM2OC3
 
COMP_CSR_COMPxBLANKING_1


	)

262 
	#COMP_BœnkögSr˚_TIM3OC3
 ((
uöt32_t
)0x000C0000Ë

	)

265 
	#COMP_BœnkögSr˚_TIM2OC4
 ((
uöt32_t
)0x000C0000Ë

	)

268 
	#COMP_BœnkögSr˚_TIM8OC5
 
COMP_CSR_COMPxBLANKING_1


	)

271 
	#COMP_BœnkögSr˚_TIM3OC4
 
COMP_CSR_COMPxBLANKING_0


	)

272 
	#COMP_BœnkögSr˚_TIM15OC1
 ((
uöt32_t
)0x000C0000Ë

	)

275 
	#COMP_BœnkögSr˚_TIM15OC2
 
COMP_CSR_COMPxBLANKING_2


	)

277 
	#IS_COMP_BLANKING_SOURCE
(
SOURCE
Ë(((SOURCEË=
COMP_BœnkögSr˚_N⁄e
Ë|| \

	)

278 ((
SOURCE
Ë=
COMP_BœnkögSr˚_TIM1OC5
) || \

279 ((
SOURCE
Ë=
COMP_BœnkögSr˚_TIM2OC3
) || \

280 ((
SOURCE
Ë=
COMP_BœnkögSr˚_TIM3OC3
) || \

281 ((
SOURCE
Ë=
COMP_BœnkögSr˚_TIM2OC4
) || \

282 ((
SOURCE
Ë=
COMP_BœnkögSr˚_TIM8OC5
) || \

283 ((
SOURCE
Ë=
COMP_BœnkögSr˚_TIM3OC4
) || \

284 ((
SOURCE
Ë=
COMP_BœnkögSr˚_TIM15OC1
) || \

285 ((
SOURCE
Ë=
COMP_BœnkögSr˚_TIM15OC2
))

293 
	#COMP_OuçutPﬁ_N⁄Invîãd
 ((
uöt32_t
)0x00000000Ë

	)

294 
	#COMP_OuçutPﬁ_Invîãd
 
COMP_CSR_COMPxPOL


	)

296 
	#IS_COMP_OUTPUT_POL
(
POL
Ë(((POLË=
COMP_OuçutPﬁ_N⁄Invîãd
Ë|| \

	)

297 ((
POL
Ë=
COMP_OuçutPﬁ_Invîãd
))

308 
	#COMP_Hy°îesis_No
 0x00000000

	)

309 
	#COMP_Hy°îesis_Low
 
COMP_CSR_COMPxHYST_0


	)

310 
	#COMP_Hy°îesis_Medium
 
COMP_CSR_COMPxHYST_1


	)

311 
	#COMP_Hy°îesis_High
 
COMP_CSR_COMPxHYST


	)

313 
	#IS_COMP_HYSTERESIS
(
HYSTERESIS
Ë(((HYSTERESISË=
COMP_Hy°îesis_No
Ë|| \

	)

314 ((
HYSTERESIS
Ë=
COMP_Hy°îesis_Low
) || \

315 ((
HYSTERESIS
Ë=
COMP_Hy°îesis_Medium
) || \

316 ((
HYSTERESIS
Ë=
COMP_Hy°îesis_High
))

326 
	#COMP_Mode_HighS≥ed
 0x00000000

	)

327 
	#COMP_Mode_MediumS≥ed
 
COMP_CSR_COMPxMODE_0


	)

328 
	#COMP_Mode_LowPowî
 
COMP_CSR_COMPxMODE_1


	)

329 
	#COMP_Mode_U…øLowPowî
 
COMP_CSR_COMPxMODE


	)

331 
	#IS_COMP_MODE
(
MODE
Ë(((MODEË=
COMP_Mode_U…øLowPowî
Ë|| \

	)

332 ((
MODE
Ë=
COMP_Mode_LowPowî
) || \

333 ((
MODE
Ë=
COMP_Mode_MediumS≥ed
) || \

334 ((
MODE
Ë=
COMP_Mode_HighS≥ed
))

344 
	#COMP_OuçutLevñ_High
 
COMP_CSR_COMPxOUT


	)

347 
	#COMP_OuçutLevñ_Low
 ((
uöt32_t
)0x00000000)

	)

356 
	#IS_COMP_WINDOW
(
WINDOW
Ë(((WINDOWË=
COMP_Sñe˘i⁄_COMP2
Ë|| \

	)

357 ((
WINDOW
Ë=
COMP_Sñe˘i⁄_COMP4
) || \

358 ((
WINDOW
Ë=
COMP_Sñe˘i⁄_COMP6
))

371 
COMP_DeInô
(
uöt32_t
 
COMP_Sñe˘i⁄
);

374 
COMP_Inô
(
uöt32_t
 
COMP_Sñe˘i⁄
, 
COMP_InôTy≥Def
* 
COMP_InôSåu˘
);

375 
COMP_Såu˘Inô
(
COMP_InôTy≥Def
* 
COMP_InôSåu˘
);

376 
COMP_Cmd
(
uöt32_t
 
COMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

377 
COMP_SwôchCmd
(
uöt32_t
 
COMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

378 
uöt32_t
 
COMP_GëOuçutLevñ
(uöt32_à
COMP_Sñe˘i⁄
);

381 
COMP_WödowCmd
(
uöt32_t
 
COMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

384 
COMP_LockC⁄fig
(
uöt32_t
 
COMP_Sñe˘i⁄
);

386 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_crc.h

30 #i‚de‡
__STM32F30x_CRC_H


31 
	#__STM32F30x_CRC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

54 
	#CRC_Revî£I≈utD©a_No
 ((
uöt32_t
)0x00000000Ë

	)

55 
	#CRC_Revî£I≈utD©a_8bôs
 
CRC_CR_REV_IN_0


	)

56 
	#CRC_Revî£I≈utD©a_16bôs
 
CRC_CR_REV_IN_1


	)

57 
	#CRC_Revî£I≈utD©a_32bôs
 
CRC_CR_REV_IN


	)

59 
	#IS_CRC_REVERSE_INPUT_DATA
(
DATA
Ë(((DATAË=
CRC_Revî£I≈utD©a_No
Ë|| \

	)

60 ((
DATA
Ë=
CRC_Revî£I≈utD©a_8bôs
) || \

61 ((
DATA
Ë=
CRC_Revî£I≈utD©a_16bôs
) || \

62 ((
DATA
Ë=
CRC_Revî£I≈utD©a_32bôs
))

71 
	#CRC_PﬁSize_7
 
CRC_CR_POLSIZE


	)

72 
	#CRC_PﬁSize_8
 
CRC_CR_POLSIZE_1


	)

73 
	#CRC_PﬁSize_16
 
CRC_CR_POLSIZE_0


	)

74 
	#CRC_PﬁSize_32
 ((
uöt32_t
)0x00000000)

	)

76 
	#IS_CRC_POL_SIZE
(
SIZE
Ë(((SIZEË=
CRC_PﬁSize_7
Ë|| \

	)

77 ((
SIZE
Ë=
CRC_PﬁSize_8
) || \

78 ((
SIZE
Ë=
CRC_PﬁSize_16
) || \

79 ((
SIZE
Ë=
CRC_PﬁSize_32
))

88 
CRC_DeInô
();

89 
CRC_Re£tDR
();

90 
CRC_PﬁynomülSizeSñe˘
(
uöt32_t
 
CRC_PﬁSize
);

91 
CRC_Revî£I≈utD©aSñe˘
(
uöt32_t
 
CRC_Revî£I≈utD©a
);

92 
CRC_Revî£OuçutD©aCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

93 
CRC_SëInôRegi°î
(
uöt32_t
 
CRC_InôVÆue
);

94 
CRC_SëPﬁynomül
(
uöt32_t
 
CRC_Pﬁ
);

97 
uöt32_t
 
CRC_CÆcCRC
(uöt32_à
CRC_D©a
);

98 
uöt32_t
 
CRC_CÆcCRC16bôs
(
uöt16_t
 
CRC_D©a
);

99 
uöt32_t
 
CRC_CÆcCRC8bôs
(
uöt8_t
 
CRC_D©a
);

100 
uöt32_t
 
CRC_CÆcBlockCRC
(uöt32_à
pBuf„r
[], uöt32_à
Buf„rLígth
);

101 
uöt32_t
 
CRC_GëCRC
();

104 
CRC_SëIDRegi°î
(
uöt8_t
 
CRC_IDVÆue
);

105 
uöt8_t
 
CRC_GëIDRegi°î
();

107 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h

30 #i‚de‡
__STM32F30x_DAC_H


31 
	#__STM32F30x_DAC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

49 
	#DAC_CR_DMAUDRIE
 ((
uöt32_t
)0x00002000Ë

	)

57 
uöt32_t
 
DAC_Triggî
;

60 
uöt32_t
 
DAC_WaveGíî©i⁄
;

64 
uöt32_t
 
DAC_LFSRUnmask_TrüngÀAm∂ôude
;

68 
uöt32_t
 
DAC_OuçutBuf„r
;

70 }
	tDAC_InôTy≥Def
;

82 
	#DAC_Triggî_N⁄e
 ((
uöt32_t
)0x00000000Ë

	)

84 
	#DAC_Triggî_T2_TRGO
 ((
uöt32_t
)0x00000024Ë

	)

85 
	#DAC_Triggî_T3_TRGO
 ((
uöt32_t
)0x0000000CË

	)

86 
	#DAC_Triggî_T4_TRGO
 ((
uöt32_t
)0x0000002CË

	)

87 
	#DAC_Triggî_T6_TRGO
 ((
uöt32_t
)0x00000004Ë

	)

88 
	#DAC_Triggî_T7_TRGO
 ((
uöt32_t
)0x00000014Ë

	)

89 
	#DAC_Triggî_T8_TRGO
 ((
uöt32_t
)0x0000000CË

	)

90 
	#DAC_Triggî_T15_TRGO
 ((
uöt32_t
)0x0000001CË

	)

91 
	#DAC_Triggî_Ext_IT9
 ((
uöt32_t
)0x00000034Ë

	)

92 
	#DAC_Triggî_So·w¨e
 ((
uöt32_t
)0x0000003CË

	)

94 
	#IS_DAC_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
DAC_Triggî_N⁄e
Ë|| \

	)

95 ((
TRIGGER
Ë=
DAC_Triggî_T2_TRGO
) || \

96 ((
TRIGGER
Ë=
DAC_Triggî_T3_TRGO
) || \

97 ((
TRIGGER
Ë=
DAC_Triggî_T4_TRGO
) || \

98 ((
TRIGGER
Ë=
DAC_Triggî_T6_TRGO
) || \

99 ((
TRIGGER
Ë=
DAC_Triggî_T7_TRGO
) || \

100 ((
TRIGGER
Ë=
DAC_Triggî_T8_TRGO
) || \

101 ((
TRIGGER
Ë=
DAC_Triggî_T15_TRGO
) || \

102 ((
TRIGGER
Ë=
DAC_Triggî_Ext_IT9
) || \

103 ((
TRIGGER
Ë=
DAC_Triggî_So·w¨e
))

113 
	#DAC_WaveGíî©i⁄_N⁄e
 ((
uöt32_t
)0x00000000)

	)

114 
	#DAC_WaveGíî©i⁄_Noi£
 ((
uöt32_t
)0x00000040)

	)

115 
	#DAC_WaveGíî©i⁄_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

116 
	#IS_DAC_GENERATE_WAVE
(
WAVE
Ë(((WAVEË=
DAC_WaveGíî©i⁄_N⁄e
Ë|| \

	)

117 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_Noi£
) || \

118 ((
WAVE
Ë=
DAC_WaveGíî©i⁄_TrüngÀ
))

127 
	#DAC_LFSRUnmask_Bô0
 ((
uöt32_t
)0x00000000Ë

	)

128 
	#DAC_LFSRUnmask_Bôs1_0
 ((
uöt32_t
)0x00000100Ë

	)

129 
	#DAC_LFSRUnmask_Bôs2_0
 ((
uöt32_t
)0x00000200Ë

	)

130 
	#DAC_LFSRUnmask_Bôs3_0
 ((
uöt32_t
)0x00000300Ë

	)

131 
	#DAC_LFSRUnmask_Bôs4_0
 ((
uöt32_t
)0x00000400Ë

	)

132 
	#DAC_LFSRUnmask_Bôs5_0
 ((
uöt32_t
)0x00000500Ë

	)

133 
	#DAC_LFSRUnmask_Bôs6_0
 ((
uöt32_t
)0x00000600Ë

	)

134 
	#DAC_LFSRUnmask_Bôs7_0
 ((
uöt32_t
)0x00000700Ë

	)

135 
	#DAC_LFSRUnmask_Bôs8_0
 ((
uöt32_t
)0x00000800Ë

	)

136 
	#DAC_LFSRUnmask_Bôs9_0
 ((
uöt32_t
)0x00000900Ë

	)

137 
	#DAC_LFSRUnmask_Bôs10_0
 ((
uöt32_t
)0x00000A00Ë

	)

138 
	#DAC_LFSRUnmask_Bôs11_0
 ((
uöt32_t
)0x00000B00Ë

	)

139 
	#DAC_TrüngÀAm∂ôude_1
 ((
uöt32_t
)0x00000000Ë

	)

140 
	#DAC_TrüngÀAm∂ôude_3
 ((
uöt32_t
)0x00000100Ë

	)

141 
	#DAC_TrüngÀAm∂ôude_7
 ((
uöt32_t
)0x00000200Ë

	)

142 
	#DAC_TrüngÀAm∂ôude_15
 ((
uöt32_t
)0x00000300Ë

	)

143 
	#DAC_TrüngÀAm∂ôude_31
 ((
uöt32_t
)0x00000400Ë

	)

144 
	#DAC_TrüngÀAm∂ôude_63
 ((
uöt32_t
)0x00000500Ë

	)

145 
	#DAC_TrüngÀAm∂ôude_127
 ((
uöt32_t
)0x00000600Ë

	)

146 
	#DAC_TrüngÀAm∂ôude_255
 ((
uöt32_t
)0x00000700Ë

	)

147 
	#DAC_TrüngÀAm∂ôude_511
 ((
uöt32_t
)0x00000800Ë

	)

148 
	#DAC_TrüngÀAm∂ôude_1023
 ((
uöt32_t
)0x00000900Ë

	)

149 
	#DAC_TrüngÀAm∂ôude_2047
 ((
uöt32_t
)0x00000A00Ë

	)

150 
	#DAC_TrüngÀAm∂ôude_4095
 ((
uöt32_t
)0x00000B00Ë

	)

152 
	#IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
VALUE
Ë(((VALUEË=
DAC_LFSRUnmask_Bô0
Ë|| \

	)

153 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs1_0
) || \

154 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs2_0
) || \

155 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs3_0
) || \

156 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs4_0
) || \

157 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs5_0
) || \

158 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs6_0
) || \

159 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs7_0
) || \

160 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs8_0
) || \

161 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs9_0
) || \

162 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs10_0
) || \

163 ((
VALUE
Ë=
DAC_LFSRUnmask_Bôs11_0
) || \

164 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1
) || \

165 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_3
) || \

166 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_7
) || \

167 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_15
) || \

168 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_31
) || \

169 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_63
) || \

170 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_127
) || \

171 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_255
) || \

172 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_511
) || \

173 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_1023
) || \

174 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_2047
) || \

175 ((
VALUE
Ë=
DAC_TrüngÀAm∂ôude_4095
))

184 
	#DAC_OuçutBuf„r_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

185 
	#DAC_OuçutBuf„r_DißbÀ
 ((
uöt32_t
)0x00000002)

	)

186 
	#IS_DAC_OUTPUT_BUFFER_STATE
(
STATE
Ë(((STATEË=
DAC_OuçutBuf„r_E«bÀ
Ë|| \

	)

187 ((
STATE
Ë=
DAC_OuçutBuf„r_DißbÀ
))

196 
	#DAC_Ch™√l_1
 ((
uöt32_t
)0x00000000)

	)

197 
	#DAC_Ch™√l_2
 ((
uöt32_t
)0x00000010)

	)

198 
	#IS_DAC_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
DAC_Ch™√l_1
Ë|| \

	)

199 ((
CHANNEL
Ë=
DAC_Ch™√l_2
))

208 
	#DAC_Align_12b_R
 ((
uöt32_t
)0x00000000)

	)

209 
	#DAC_Align_12b_L
 ((
uöt32_t
)0x00000004)

	)

210 
	#DAC_Align_8b_R
 ((
uöt32_t
)0x00000008)

	)

211 
	#IS_DAC_ALIGN
(
ALIGN
Ë(((ALIGNË=
DAC_Align_12b_R
Ë|| \

	)

212 ((
ALIGN
Ë=
DAC_Align_12b_L
) || \

213 ((
ALIGN
Ë=
DAC_Align_8b_R
))

222 
	#DAC_Wave_Noi£
 ((
uöt32_t
)0x00000040)

	)

223 
	#DAC_Wave_TrüngÀ
 ((
uöt32_t
)0x00000080)

	)

224 
	#IS_DAC_WAVE
(
WAVE
Ë(((WAVEË=
DAC_Wave_Noi£
Ë|| \

	)

225 ((
WAVE
Ë=
DAC_Wave_TrüngÀ
))

234 
	#IS_DAC_DATA
(
DATA
Ë((DATAË<0xFFF0)

	)

242 
	#DAC_IT_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

243 
	#IS_DAC_IT
(
IT
Ë(((ITË=
DAC_IT_DMAUDR
))

	)

253 
	#DAC_FLAG_DMAUDR
 ((
uöt32_t
)0x00002000)

	)

254 
	#IS_DAC_FLAG
(
FLAG
Ë(((FLAGË=
DAC_FLAG_DMAUDR
))

	)

268 
DAC_DeInô
();

271 
DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

272 
DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
);

273 
DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

274 
DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

275 
DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

276 
DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

277 
DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

278 
DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
);

279 
DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
);

280 
uöt16_t
 
DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
);

283 
DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

286 
DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

287 
FœgSètus
 
DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

288 
DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
);

289 
ITSètus
 
DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

290 
DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
);

292 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dbgmcu.h

29 #i‚de‡
__STM32F30x_DBGMCU_H


30 
	#__STM32F30x_DBGMCU_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f30x.h
"

53 
	#DBGMCU_SLEEP
 ((
uöt32_t
)0x00000001)

	)

54 
	#DBGMCU_STOP
 ((
uöt32_t
)0x00000002)

	)

55 
	#DBGMCU_STANDBY
 ((
uöt32_t
)0x00000004)

	)

56 
	#IS_DBGMCU_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFF8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

58 
	#DBGMCU_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

59 
	#DBGMCU_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

60 
	#DBGMCU_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

61 
	#DBGMCU_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

62 
	#DBGMCU_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

63 
	#DBGMCU_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

64 
	#DBGMCU_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

65 
	#DBGMCU_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

66 
	#DBGMCU_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

67 
	#DBGMCU_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

68 
	#DBGMCU_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

70 
	#IS_DBGMCU_APB1PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFD9FE3C8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

72 
	#DBGMCU_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

73 
	#DBGMCU_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

74 
	#DBGMCU_TIM15_STOP
 ((
uöt32_t
)0x00000004)

	)

75 
	#DBGMCU_TIM16_STOP
 ((
uöt32_t
)0x00000008)

	)

76 
	#DBGMCU_TIM17_STOP
 ((
uöt32_t
)0x00000010)

	)

77 
	#IS_DBGMCU_APB2PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFFFFFE0Ë=0x00Ë&& ((PERIPHË!0x00))

	)

86 
uöt32_t
 
DBGMCU_GëREVID
();

87 
uöt32_t
 
DBGMCU_GëDEVID
();

90 
DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

91 
DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

92 
DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

94 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h

30 #i‚de‡
__STM32F30X_DMA_H


31 
	#__STM32F30X_DMA_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

55 
uöt32_t
 
DMA_PîùhîÆBa£Addr
;

57 
uöt32_t
 
DMA_Mem‹yBa£Addr
;

59 
uöt32_t
 
DMA_DIR
;

62 
uöt16_t
 
DMA_Buf„rSize
;

66 
uöt32_t
 
DMA_PîùhîÆInc
;

69 
uöt32_t
 
DMA_Mem‹yInc
;

72 
uöt32_t
 
DMA_PîùhîÆD©aSize
;

75 
uöt32_t
 
DMA_Mem‹yD©aSize
;

78 
uöt32_t
 
DMA_Mode
;

83 
uöt32_t
 
DMA_Pri‹ôy
;

86 
uöt32_t
 
DMA_M2M
;

88 }
	tDMA_InôTy≥Def
;

96 
	#IS_DMA_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
DMA1_Ch™√l1
Ë|| \

	)

97 ((
PERIPH
Ë=
DMA1_Ch™√l2
) || \

98 ((
PERIPH
Ë=
DMA1_Ch™√l3
) || \

99 ((
PERIPH
Ë=
DMA1_Ch™√l4
) || \

100 ((
PERIPH
Ë=
DMA1_Ch™√l5
) || \

101 ((
PERIPH
Ë=
DMA1_Ch™√l6
) || \

102 ((
PERIPH
Ë=
DMA1_Ch™√l7
) || \

103 ((
PERIPH
Ë=
DMA2_Ch™√l1
) || \

104 ((
PERIPH
Ë=
DMA2_Ch™√l2
) || \

105 ((
PERIPH
Ë=
DMA2_Ch™√l3
) || \

106 ((
PERIPH
Ë=
DMA2_Ch™√l4
) || \

107 ((
PERIPH
Ë=
DMA2_Ch™√l5
))

113 
	#DMA_DIR_PîùhîÆSRC
 ((
uöt32_t
)0x00000000)

	)

114 
	#DMA_DIR_PîùhîÆDST
 
DMA_CCR_DIR


	)

116 
	#IS_DMA_DIR
(
DIR
Ë(((DIRË=
DMA_DIR_PîùhîÆSRC
Ë|| \

	)

117 ((
DIR
Ë=
DMA_DIR_PîùhîÆDST
))

127 
	#DMA_PîùhîÆInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

128 
	#DMA_PîùhîÆInc_E«bÀ
 
DMA_CCR_PINC


	)

130 
	#IS_DMA_PERIPHERAL_INC_STATE
(
STATE
Ë(((STATEË=
DMA_PîùhîÆInc_DißbÀ
Ë|| \

	)

131 ((
STATE
Ë=
DMA_PîùhîÆInc_E«bÀ
))

140 
	#DMA_Mem‹yInc_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

141 
	#DMA_Mem‹yInc_E«bÀ
 
DMA_CCR_MINC


	)

143 
	#IS_DMA_MEMORY_INC_STATE
(
STATE
Ë(((STATEË=
DMA_Mem‹yInc_DißbÀ
Ë|| \

	)

144 ((
STATE
Ë=
DMA_Mem‹yInc_E«bÀ
))

153 
	#DMA_PîùhîÆD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

154 
	#DMA_PîùhîÆD©aSize_HÆfW‹d
 
DMA_CCR_PSIZE_0


	)

155 
	#DMA_PîùhîÆD©aSize_W‹d
 
DMA_CCR_PSIZE_1


	)

157 
	#IS_DMA_PERIPHERAL_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_PîùhîÆD©aSize_Byã
Ë|| \

	)

158 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_HÆfW‹d
) || \

159 ((
SIZE
Ë=
DMA_PîùhîÆD©aSize_W‹d
))

168 
	#DMA_Mem‹yD©aSize_Byã
 ((
uöt32_t
)0x00000000)

	)

169 
	#DMA_Mem‹yD©aSize_HÆfW‹d
 
DMA_CCR_MSIZE_0


	)

170 
	#DMA_Mem‹yD©aSize_W‹d
 
DMA_CCR_MSIZE_1


	)

172 
	#IS_DMA_MEMORY_DATA_SIZE
(
SIZE
Ë(((SIZEË=
DMA_Mem‹yD©aSize_Byã
Ë|| \

	)

173 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_HÆfW‹d
) || \

174 ((
SIZE
Ë=
DMA_Mem‹yD©aSize_W‹d
))

183 
	#DMA_Mode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

184 
	#DMA_Mode_Cúcuœr
 
DMA_CCR_CIRC


	)

186 
	#IS_DMA_MODE
(
MODE
Ë(((MODEË=
DMA_Mode_N‹mÆ
Ë|| ((MODEË=
DMA_Mode_Cúcuœr
))

	)

195 
	#DMA_Pri‹ôy_VîyHigh
 
DMA_CCR_PL


	)

196 
	#DMA_Pri‹ôy_High
 
DMA_CCR_PL_1


	)

197 
	#DMA_Pri‹ôy_Medium
 
DMA_CCR_PL_0


	)

198 
	#DMA_Pri‹ôy_Low
 ((
uöt32_t
)0x00000000)

	)

200 
	#IS_DMA_PRIORITY
(
PRIORITY
Ë(((PRIORITYË=
DMA_Pri‹ôy_VîyHigh
Ë|| \

	)

201 ((
PRIORITY
Ë=
DMA_Pri‹ôy_High
) || \

202 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Medium
) || \

203 ((
PRIORITY
Ë=
DMA_Pri‹ôy_Low
))

212 
	#DMA_M2M_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

213 
	#DMA_M2M_E«bÀ
 
DMA_CCR_MEM2MEM


	)

215 
	#IS_DMA_M2M_STATE
(
STATE
Ë(((STATEË=
DMA_M2M_DißbÀ
Ë|| ((STATEË=
DMA_M2M_E«bÀ
))

	)

225 
	#DMA_IT_TC
 ((
uöt32_t
)0x00000002)

	)

226 
	#DMA_IT_HT
 ((
uöt32_t
)0x00000004)

	)

227 
	#DMA_IT_TE
 ((
uöt32_t
)0x00000008)

	)

228 
	#IS_DMA_CONFIG_IT
(
IT
Ë((((ITË& 0xFFFFFFF1Ë=0x00Ë&& ((ITË!0x00))

	)

230 
	#DMA1_IT_GL1
 ((
uöt32_t
)0x00000001)

	)

231 
	#DMA1_IT_TC1
 ((
uöt32_t
)0x00000002)

	)

232 
	#DMA1_IT_HT1
 ((
uöt32_t
)0x00000004)

	)

233 
	#DMA1_IT_TE1
 ((
uöt32_t
)0x00000008)

	)

234 
	#DMA1_IT_GL2
 ((
uöt32_t
)0x00000010)

	)

235 
	#DMA1_IT_TC2
 ((
uöt32_t
)0x00000020)

	)

236 
	#DMA1_IT_HT2
 ((
uöt32_t
)0x00000040)

	)

237 
	#DMA1_IT_TE2
 ((
uöt32_t
)0x00000080)

	)

238 
	#DMA1_IT_GL3
 ((
uöt32_t
)0x00000100)

	)

239 
	#DMA1_IT_TC3
 ((
uöt32_t
)0x00000200)

	)

240 
	#DMA1_IT_HT3
 ((
uöt32_t
)0x00000400)

	)

241 
	#DMA1_IT_TE3
 ((
uöt32_t
)0x00000800)

	)

242 
	#DMA1_IT_GL4
 ((
uöt32_t
)0x00001000)

	)

243 
	#DMA1_IT_TC4
 ((
uöt32_t
)0x00002000)

	)

244 
	#DMA1_IT_HT4
 ((
uöt32_t
)0x00004000)

	)

245 
	#DMA1_IT_TE4
 ((
uöt32_t
)0x00008000)

	)

246 
	#DMA1_IT_GL5
 ((
uöt32_t
)0x00010000)

	)

247 
	#DMA1_IT_TC5
 ((
uöt32_t
)0x00020000)

	)

248 
	#DMA1_IT_HT5
 ((
uöt32_t
)0x00040000)

	)

249 
	#DMA1_IT_TE5
 ((
uöt32_t
)0x00080000)

	)

250 
	#DMA1_IT_GL6
 ((
uöt32_t
)0x00100000)

	)

251 
	#DMA1_IT_TC6
 ((
uöt32_t
)0x00200000)

	)

252 
	#DMA1_IT_HT6
 ((
uöt32_t
)0x00400000)

	)

253 
	#DMA1_IT_TE6
 ((
uöt32_t
)0x00800000)

	)

254 
	#DMA1_IT_GL7
 ((
uöt32_t
)0x01000000)

	)

255 
	#DMA1_IT_TC7
 ((
uöt32_t
)0x02000000)

	)

256 
	#DMA1_IT_HT7
 ((
uöt32_t
)0x04000000)

	)

257 
	#DMA1_IT_TE7
 ((
uöt32_t
)0x08000000)

	)

259 
	#DMA2_IT_GL1
 ((
uöt32_t
)0x10000001)

	)

260 
	#DMA2_IT_TC1
 ((
uöt32_t
)0x10000002)

	)

261 
	#DMA2_IT_HT1
 ((
uöt32_t
)0x10000004)

	)

262 
	#DMA2_IT_TE1
 ((
uöt32_t
)0x10000008)

	)

263 
	#DMA2_IT_GL2
 ((
uöt32_t
)0x10000010)

	)

264 
	#DMA2_IT_TC2
 ((
uöt32_t
)0x10000020)

	)

265 
	#DMA2_IT_HT2
 ((
uöt32_t
)0x10000040)

	)

266 
	#DMA2_IT_TE2
 ((
uöt32_t
)0x10000080)

	)

267 
	#DMA2_IT_GL3
 ((
uöt32_t
)0x10000100)

	)

268 
	#DMA2_IT_TC3
 ((
uöt32_t
)0x10000200)

	)

269 
	#DMA2_IT_HT3
 ((
uöt32_t
)0x10000400)

	)

270 
	#DMA2_IT_TE3
 ((
uöt32_t
)0x10000800)

	)

271 
	#DMA2_IT_GL4
 ((
uöt32_t
)0x10001000)

	)

272 
	#DMA2_IT_TC4
 ((
uöt32_t
)0x10002000)

	)

273 
	#DMA2_IT_HT4
 ((
uöt32_t
)0x10004000)

	)

274 
	#DMA2_IT_TE4
 ((
uöt32_t
)0x10008000)

	)

275 
	#DMA2_IT_GL5
 ((
uöt32_t
)0x10010000)

	)

276 
	#DMA2_IT_TC5
 ((
uöt32_t
)0x10020000)

	)

277 
	#DMA2_IT_HT5
 ((
uöt32_t
)0x10040000)

	)

278 
	#DMA2_IT_TE5
 ((
uöt32_t
)0x10080000)

	)

280 
	#IS_DMA_CLEAR_IT
(
IT
Ë(((((ITË& 0xF0000000Ë=0x00Ë|| (((ITË& 0xEFF00000Ë=0x00)Ë&& ((ITË!0x00))

	)

282 
	#IS_DMA_GET_IT
(
IT
Ë(((ITË=
DMA1_IT_GL1
Ë|| ((ITË=
DMA1_IT_TC1
Ë|| \

	)

283 ((
IT
Ë=
DMA1_IT_HT1
Ë|| ((ITË=
DMA1_IT_TE1
) || \

284 ((
IT
Ë=
DMA1_IT_GL2
Ë|| ((ITË=
DMA1_IT_TC2
) || \

285 ((
IT
Ë=
DMA1_IT_HT2
Ë|| ((ITË=
DMA1_IT_TE2
) || \

286 ((
IT
Ë=
DMA1_IT_GL3
Ë|| ((ITË=
DMA1_IT_TC3
) || \

287 ((
IT
Ë=
DMA1_IT_HT3
Ë|| ((ITË=
DMA1_IT_TE3
) || \

288 ((
IT
Ë=
DMA1_IT_GL4
Ë|| ((ITË=
DMA1_IT_TC4
) || \

289 ((
IT
Ë=
DMA1_IT_HT4
Ë|| ((ITË=
DMA1_IT_TE4
) || \

290 ((
IT
Ë=
DMA1_IT_GL5
Ë|| ((ITË=
DMA1_IT_TC5
) || \

291 ((
IT
Ë=
DMA1_IT_HT5
Ë|| ((ITË=
DMA1_IT_TE5
) || \

292 ((
IT
Ë=
DMA1_IT_GL6
Ë|| ((ITË=
DMA1_IT_TC6
) || \

293 ((
IT
Ë=
DMA1_IT_HT6
Ë|| ((ITË=
DMA1_IT_TE6
) || \

294 ((
IT
Ë=
DMA1_IT_GL7
Ë|| ((ITË=
DMA1_IT_TC7
) || \

295 ((
IT
Ë=
DMA1_IT_HT7
Ë|| ((ITË=
DMA1_IT_TE7
) || \

296 ((
IT
Ë=
DMA2_IT_GL1
Ë|| ((ITË=
DMA2_IT_TC1
) || \

297 ((
IT
Ë=
DMA2_IT_HT1
Ë|| ((ITË=
DMA2_IT_TE1
) || \

298 ((
IT
Ë=
DMA2_IT_GL2
Ë|| ((ITË=
DMA2_IT_TC2
) || \

299 ((
IT
Ë=
DMA2_IT_HT2
Ë|| ((ITË=
DMA2_IT_TE2
) || \

300 ((
IT
Ë=
DMA2_IT_GL3
Ë|| ((ITË=
DMA2_IT_TC3
) || \

301 ((
IT
Ë=
DMA2_IT_HT3
Ë|| ((ITË=
DMA2_IT_TE3
) || \

302 ((
IT
Ë=
DMA2_IT_GL4
Ë|| ((ITË=
DMA2_IT_TC4
) || \

303 ((
IT
Ë=
DMA2_IT_HT4
Ë|| ((ITË=
DMA2_IT_TE4
) || \

304 ((
IT
Ë=
DMA2_IT_GL5
Ë|| ((ITË=
DMA2_IT_TC5
) || \

305 ((
IT
Ë=
DMA2_IT_HT5
Ë|| ((ITË=
DMA2_IT_TE5
))

315 
	#DMA1_FLAG_GL1
 ((
uöt32_t
)0x00000001)

	)

316 
	#DMA1_FLAG_TC1
 ((
uöt32_t
)0x00000002)

	)

317 
	#DMA1_FLAG_HT1
 ((
uöt32_t
)0x00000004)

	)

318 
	#DMA1_FLAG_TE1
 ((
uöt32_t
)0x00000008)

	)

319 
	#DMA1_FLAG_GL2
 ((
uöt32_t
)0x00000010)

	)

320 
	#DMA1_FLAG_TC2
 ((
uöt32_t
)0x00000020)

	)

321 
	#DMA1_FLAG_HT2
 ((
uöt32_t
)0x00000040)

	)

322 
	#DMA1_FLAG_TE2
 ((
uöt32_t
)0x00000080)

	)

323 
	#DMA1_FLAG_GL3
 ((
uöt32_t
)0x00000100)

	)

324 
	#DMA1_FLAG_TC3
 ((
uöt32_t
)0x00000200)

	)

325 
	#DMA1_FLAG_HT3
 ((
uöt32_t
)0x00000400)

	)

326 
	#DMA1_FLAG_TE3
 ((
uöt32_t
)0x00000800)

	)

327 
	#DMA1_FLAG_GL4
 ((
uöt32_t
)0x00001000)

	)

328 
	#DMA1_FLAG_TC4
 ((
uöt32_t
)0x00002000)

	)

329 
	#DMA1_FLAG_HT4
 ((
uöt32_t
)0x00004000)

	)

330 
	#DMA1_FLAG_TE4
 ((
uöt32_t
)0x00008000)

	)

331 
	#DMA1_FLAG_GL5
 ((
uöt32_t
)0x00010000)

	)

332 
	#DMA1_FLAG_TC5
 ((
uöt32_t
)0x00020000)

	)

333 
	#DMA1_FLAG_HT5
 ((
uöt32_t
)0x00040000)

	)

334 
	#DMA1_FLAG_TE5
 ((
uöt32_t
)0x00080000)

	)

335 
	#DMA1_FLAG_GL6
 ((
uöt32_t
)0x00100000)

	)

336 
	#DMA1_FLAG_TC6
 ((
uöt32_t
)0x00200000)

	)

337 
	#DMA1_FLAG_HT6
 ((
uöt32_t
)0x00400000)

	)

338 
	#DMA1_FLAG_TE6
 ((
uöt32_t
)0x00800000)

	)

339 
	#DMA1_FLAG_GL7
 ((
uöt32_t
)0x01000000)

	)

340 
	#DMA1_FLAG_TC7
 ((
uöt32_t
)0x02000000)

	)

341 
	#DMA1_FLAG_HT7
 ((
uöt32_t
)0x04000000)

	)

342 
	#DMA1_FLAG_TE7
 ((
uöt32_t
)0x08000000)

	)

344 
	#DMA2_FLAG_GL1
 ((
uöt32_t
)0x10000001)

	)

345 
	#DMA2_FLAG_TC1
 ((
uöt32_t
)0x10000002)

	)

346 
	#DMA2_FLAG_HT1
 ((
uöt32_t
)0x10000004)

	)

347 
	#DMA2_FLAG_TE1
 ((
uöt32_t
)0x10000008)

	)

348 
	#DMA2_FLAG_GL2
 ((
uöt32_t
)0x10000010)

	)

349 
	#DMA2_FLAG_TC2
 ((
uöt32_t
)0x10000020)

	)

350 
	#DMA2_FLAG_HT2
 ((
uöt32_t
)0x10000040)

	)

351 
	#DMA2_FLAG_TE2
 ((
uöt32_t
)0x10000080)

	)

352 
	#DMA2_FLAG_GL3
 ((
uöt32_t
)0x10000100)

	)

353 
	#DMA2_FLAG_TC3
 ((
uöt32_t
)0x10000200)

	)

354 
	#DMA2_FLAG_HT3
 ((
uöt32_t
)0x10000400)

	)

355 
	#DMA2_FLAG_TE3
 ((
uöt32_t
)0x10000800)

	)

356 
	#DMA2_FLAG_GL4
 ((
uöt32_t
)0x10001000)

	)

357 
	#DMA2_FLAG_TC4
 ((
uöt32_t
)0x10002000)

	)

358 
	#DMA2_FLAG_HT4
 ((
uöt32_t
)0x10004000)

	)

359 
	#DMA2_FLAG_TE4
 ((
uöt32_t
)0x10008000)

	)

360 
	#DMA2_FLAG_GL5
 ((
uöt32_t
)0x10010000)

	)

361 
	#DMA2_FLAG_TC5
 ((
uöt32_t
)0x10020000)

	)

362 
	#DMA2_FLAG_HT5
 ((
uöt32_t
)0x10040000)

	)

363 
	#DMA2_FLAG_TE5
 ((
uöt32_t
)0x10080000)

	)

365 
	#IS_DMA_CLEAR_FLAG
(
FLAG
Ë(((((FLAGË& 0xF0000000Ë=0x00Ë|| (((FLAGË& 0xEFF00000Ë=0x00)Ë&& ((FLAGË!0x00))

	)

367 
	#IS_DMA_GET_FLAG
(
FLAG
Ë(((FLAGË=
DMA1_FLAG_GL1
Ë|| ((FLAGË=
DMA1_FLAG_TC1
Ë|| \

	)

368 ((
FLAG
Ë=
DMA1_FLAG_HT1
Ë|| ((FLAGË=
DMA1_FLAG_TE1
) || \

369 ((
FLAG
Ë=
DMA1_FLAG_GL2
Ë|| ((FLAGË=
DMA1_FLAG_TC2
) || \

370 ((
FLAG
Ë=
DMA1_FLAG_HT2
Ë|| ((FLAGË=
DMA1_FLAG_TE2
) || \

371 ((
FLAG
Ë=
DMA1_FLAG_GL3
Ë|| ((FLAGË=
DMA1_FLAG_TC3
) || \

372 ((
FLAG
Ë=
DMA1_FLAG_HT3
Ë|| ((FLAGË=
DMA1_FLAG_TE3
) || \

373 ((
FLAG
Ë=
DMA1_FLAG_GL4
Ë|| ((FLAGË=
DMA1_FLAG_TC4
) || \

374 ((
FLAG
Ë=
DMA1_FLAG_HT4
Ë|| ((FLAGË=
DMA1_FLAG_TE4
) || \

375 ((
FLAG
Ë=
DMA1_FLAG_GL5
Ë|| ((FLAGË=
DMA1_FLAG_TC5
) || \

376 ((
FLAG
Ë=
DMA1_FLAG_HT5
Ë|| ((FLAGË=
DMA1_FLAG_TE5
) || \

377 ((
FLAG
Ë=
DMA1_FLAG_GL6
Ë|| ((FLAGË=
DMA1_FLAG_TC6
) || \

378 ((
FLAG
Ë=
DMA1_FLAG_HT6
Ë|| ((FLAGË=
DMA1_FLAG_TE6
) || \

379 ((
FLAG
Ë=
DMA1_FLAG_GL7
Ë|| ((FLAGË=
DMA1_FLAG_TC7
) || \

380 ((
FLAG
Ë=
DMA1_FLAG_HT7
Ë|| ((FLAGË=
DMA1_FLAG_TE7
) || \

381 ((
FLAG
Ë=
DMA2_FLAG_GL1
Ë|| ((FLAGË=
DMA2_FLAG_TC1
) || \

382 ((
FLAG
Ë=
DMA2_FLAG_HT1
Ë|| ((FLAGË=
DMA2_FLAG_TE1
) || \

383 ((
FLAG
Ë=
DMA2_FLAG_GL2
Ë|| ((FLAGË=
DMA2_FLAG_TC2
) || \

384 ((
FLAG
Ë=
DMA2_FLAG_HT2
Ë|| ((FLAGË=
DMA2_FLAG_TE2
) || \

385 ((
FLAG
Ë=
DMA2_FLAG_GL3
Ë|| ((FLAGË=
DMA2_FLAG_TC3
) || \

386 ((
FLAG
Ë=
DMA2_FLAG_HT3
Ë|| ((FLAGË=
DMA2_FLAG_TE3
) || \

387 ((
FLAG
Ë=
DMA2_FLAG_GL4
Ë|| ((FLAGË=
DMA2_FLAG_TC4
) || \

388 ((
FLAG
Ë=
DMA2_FLAG_HT4
Ë|| ((FLAGË=
DMA2_FLAG_TE4
) || \

389 ((
FLAG
Ë=
DMA2_FLAG_GL5
Ë|| ((FLAGË=
DMA2_FLAG_TC5
) || \

390 ((
FLAG
Ë=
DMA2_FLAG_HT5
Ë|| ((FLAGË=
DMA2_FLAG_TE5
))

404 
DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

407 
DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

408 
DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
);

409 
DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

412 
DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
);

413 
uöt16_t
 
DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
);

416 
DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

417 
FœgSètus
 
DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
);

418 
DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
);

419 
ITSètus
 
DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
);

420 
DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
);

422 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_exti.h

30 #i‚de‡
__STM32F30x_EXTI_H


31 
	#__STM32F30x_EXTI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

56 
EXTI_Mode_I¡îru±
 = 0x00,

57 
EXTI_Mode_Evít
 = 0x04

58 }
	tEXTIMode_Ty≥Def
;

60 
	#IS_EXTI_MODE
(
MODE
Ë(((MODEË=
EXTI_Mode_I¡îru±
Ë|| ((MODEË=
EXTI_Mode_Evít
))

	)

68 
EXTI_Triggî_Risög
 = 0x08,

69 
EXTI_Triggî_FÆlög
 = 0x0C,

70 
EXTI_Triggî_Risög_FÆlög
 = 0x10

71 }
	tEXTITriggî_Ty≥Def
;

73 
	#IS_EXTI_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
EXTI_Triggî_Risög
Ë|| \

	)

74 ((
TRIGGER
Ë=
EXTI_Triggî_FÆlög
) || \

75 ((
TRIGGER
Ë=
EXTI_Triggî_Risög_FÆlög
))

82 
uöt32_t
 
EXTI_Löe
;

85 
EXTIMode_Ty≥Def
 
EXTI_Mode
;

88 
EXTITriggî_Ty≥Def
 
EXTI_Triggî
;

91 
Fun˘i⁄ÆSèã
 
EXTI_LöeCmd
;

93 }
	tEXTI_InôTy≥Def
;

104 
	#EXTI_Löe0
 ((
uöt32_t
)0x00Ë

	)

105 
	#EXTI_Löe1
 ((
uöt32_t
)0x01Ë

	)

106 
	#EXTI_Löe2
 ((
uöt32_t
)0x02Ë

	)

107 
	#EXTI_Löe3
 ((
uöt32_t
)0x03Ë

	)

108 
	#EXTI_Löe4
 ((
uöt32_t
)0x04Ë

	)

109 
	#EXTI_Löe5
 ((
uöt32_t
)0x05Ë

	)

110 
	#EXTI_Löe6
 ((
uöt32_t
)0x06Ë

	)

111 
	#EXTI_Löe7
 ((
uöt32_t
)0x07Ë

	)

112 
	#EXTI_Löe8
 ((
uöt32_t
)0x08Ë

	)

113 
	#EXTI_Löe9
 ((
uöt32_t
)0x09Ë

	)

114 
	#EXTI_Löe10
 ((
uöt32_t
)0x0AË

	)

115 
	#EXTI_Löe11
 ((
uöt32_t
)0x0BË

	)

116 
	#EXTI_Löe12
 ((
uöt32_t
)0x0CË

	)

117 
	#EXTI_Löe13
 ((
uöt32_t
)0x0DË

	)

118 
	#EXTI_Löe14
 ((
uöt32_t
)0x0EË

	)

119 
	#EXTI_Löe15
 ((
uöt32_t
)0x0FË

	)

120 
	#EXTI_Löe16
 ((
uöt32_t
)0x10Ë

	)

122 
	#EXTI_Löe17
 ((
uöt32_t
)0x11Ë

	)

125 
	#EXTI_Löe18
 ((
uöt32_t
)0x12Ë

	)

128 
	#EXTI_Löe19
 ((
uöt32_t
)0x13Ë

	)

131 
	#EXTI_Löe20
 ((
uöt32_t
)0x14Ë

	)

134 
	#EXTI_Löe21
 ((
uöt32_t
)0x15Ë

	)

137 
	#EXTI_Löe22
 ((
uöt32_t
)0x16Ë

	)

140 
	#EXTI_Löe23
 ((
uöt32_t
)0x17Ë

	)

143 
	#EXTI_Löe24
 ((
uöt32_t
)0x18Ë

	)

146 
	#EXTI_Löe25
 ((
uöt32_t
)0x19Ë

	)

149 
	#EXTI_Löe26
 ((
uöt32_t
)0x1AË

	)

152 
	#EXTI_Löe27
 ((
uöt32_t
)0x1BË

	)

154 
	#EXTI_Löe28
 ((
uöt32_t
)0x1CË

	)

157 
	#EXTI_Löe29
 ((
uöt32_t
)0x1DË

	)

160 
	#EXTI_Löe30
 ((
uöt32_t
)0x1EË

	)

163 
	#EXTI_Löe31
 ((
uöt32_t
)0x1FË

	)

166 
	#EXTI_Löe32
 ((
uöt32_t
)0x20Ë

	)

169 
	#EXTI_Löe33
 ((
uöt32_t
)0x21Ë

	)

172 
	#EXTI_Löe34
 ((
uöt32_t
)0x22Ë

	)

175 
	#EXTI_Löe35
 ((
uöt32_t
)0x23Ë

	)

179 
	#IS_EXTI_LINE_ALL
(
LINE
Ë((LINEË<0x23)

	)

180 
	#IS_EXTI_LINE_EXT
(
LINE
Ë(((LINEË<0x16Ë|| (((LINEË=
EXTI_Löe29
Ë|| ((LINEË=
EXTI_Löe30
Ë|| \

	)

181 ((
LINE
Ë=
EXTI_Löe31
Ë|| ((LINEË=
EXTI_Löe32
Ë|| ((LINEË=
EXTI_Löe33
)))

183 
	#IS_GET_EXTI_LINE
(
LINE
Ë(((LINEË=
EXTI_Löe0
Ë|| ((LINEË=
EXTI_Löe1
Ë|| \

	)

184 ((
LINE
Ë=
EXTI_Löe2
Ë|| ((LINEË=
EXTI_Löe3
) || \

185 ((
LINE
Ë=
EXTI_Löe4
Ë|| ((LINEË=
EXTI_Löe5
) || \

186 ((
LINE
Ë=
EXTI_Löe6
Ë|| ((LINEË=
EXTI_Löe7
) || \

187 ((
LINE
Ë=
EXTI_Löe8
Ë|| ((LINEË=
EXTI_Löe9
) || \

188 ((
LINE
Ë=
EXTI_Löe10
Ë|| ((LINEË=
EXTI_Löe11
) || \

189 ((
LINE
Ë=
EXTI_Löe12
Ë|| ((LINEË=
EXTI_Löe13
) || \

190 ((
LINE
Ë=
EXTI_Löe14
Ë|| ((LINEË=
EXTI_Löe15
) || \

191 ((
LINE
Ë=
EXTI_Löe16
Ë|| ((LINEË=
EXTI_Löe17
) || \

192 ((
LINE
Ë=
EXTI_Löe18
Ë|| ((LINEË=
EXTI_Löe19
) || \

193 ((
LINE
Ë=
EXTI_Löe20
Ë|| ((LINEË=
EXTI_Löe21
) || \

194 ((
LINE
Ë=
EXTI_Löe22
Ë|| ((LINEË=
EXTI_Löe29
) || \

195 ((
LINE
Ë=
EXTI_Löe30
Ë|| ((LINEË=
EXTI_Löe31
) || \

196 ((
LINE
Ë=
EXTI_Löe32
Ë|| ((LINEË=
EXTI_Löe33
))

208 
EXTI_DeInô
();

211 
EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

212 
EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
);

213 
EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
);

216 
FœgSètus
 
EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
);

217 
EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
);

218 
ITSètus
 
EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
);

219 
EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
);

221 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h

30 #i‚de‡
__STM32F30x_FLASH_H


31 
	#__STM32F30x_FLASH_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

54 
FLASH_BUSY
 = 1,

55 
FLASH_ERROR_WRP
,

56 
FLASH_ERROR_PROGRAM
,

57 
FLASH_COMPLETE
,

58 
FLASH_TIMEOUT


59 }
	tFLASH_Sètus
;

70 
	#FLASH_L©ícy_0
 ((
uöt8_t
)0x0000Ë

	)

71 
	#FLASH_L©ícy_1
 
FLASH_ACR_LATENCY_0


	)

72 
	#FLASH_L©ícy_2
 
FLASH_ACR_LATENCY_1


	)

74 
	#IS_FLASH_LATENCY
(
LATENCY
Ë(((LATENCYË=
FLASH_L©ícy_0
Ë|| \

	)

75 ((
LATENCY
Ë=
FLASH_L©ícy_1
) || \

76 ((
LATENCY
Ë=
FLASH_L©ícy_2
))

85 
	#FLASH_IT_EOP
 
FLASH_CR_EOPIE


	)

86 
	#FLASH_IT_ERR
 
FLASH_CR_ERRIE


	)

87 
	#IS_FLASH_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFEBFFË=0x00000000Ë&& (((ITË!0x00000000)))

	)

95 
	#IS_FLASH_PROGRAM_ADDRESS
(
ADDRESS
Ë(((ADDRESSË>0x08000000Ë&& ((ADDRESSË<0x0803FFFF))

	)

104 
	#IS_OB_DATA_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=0x1FFFF804Ë|| ((ADDRESSË=0x1FFFF806))

	)

114 
	#OB_WRP_Pages0to1
 ((
uöt32_t
)0x00000001Ë

	)

115 
	#OB_WRP_Pages2to3
 ((
uöt32_t
)0x00000002Ë

	)

116 
	#OB_WRP_Pages4to5
 ((
uöt32_t
)0x00000004Ë

	)

117 
	#OB_WRP_Pages6to7
 ((
uöt32_t
)0x00000008Ë

	)

118 
	#OB_WRP_Pages8to9
 ((
uöt32_t
)0x00000010Ë

	)

119 
	#OB_WRP_Pages10to11
 ((
uöt32_t
)0x00000020Ë

	)

120 
	#OB_WRP_Pages12to13
 ((
uöt32_t
)0x00000040Ë

	)

121 
	#OB_WRP_Pages14to15
 ((
uöt32_t
)0x00000080Ë

	)

122 
	#OB_WRP_Pages16to17
 ((
uöt32_t
)0x00000100Ë

	)

123 
	#OB_WRP_Pages18to19
 ((
uöt32_t
)0x00000200Ë

	)

124 
	#OB_WRP_Pages20to21
 ((
uöt32_t
)0x00000400Ë

	)

125 
	#OB_WRP_Pages22to23
 ((
uöt32_t
)0x00000800Ë

	)

126 
	#OB_WRP_Pages24to25
 ((
uöt32_t
)0x00001000Ë

	)

127 
	#OB_WRP_Pages26to27
 ((
uöt32_t
)0x00002000Ë

	)

128 
	#OB_WRP_Pages28to29
 ((
uöt32_t
)0x00004000Ë

	)

129 
	#OB_WRP_Pages30to31
 ((
uöt32_t
)0x00008000Ë

	)

130 
	#OB_WRP_Pages32to33
 ((
uöt32_t
)0x00010000Ë

	)

131 
	#OB_WRP_Pages34to35
 ((
uöt32_t
)0x00020000Ë

	)

132 
	#OB_WRP_Pages36to37
 ((
uöt32_t
)0x00040000Ë

	)

133 
	#OB_WRP_Pages38to39
 ((
uöt32_t
)0x00080000Ë

	)

134 
	#OB_WRP_Pages40to41
 ((
uöt32_t
)0x00100000Ë

	)

135 
	#OB_WRP_Pages42to43
 ((
uöt32_t
)0x00200000Ë

	)

136 
	#OB_WRP_Pages44to45
 ((
uöt32_t
)0x00400000Ë

	)

137 
	#OB_WRP_Pages46to47
 ((
uöt32_t
)0x00800000Ë

	)

138 
	#OB_WRP_Pages48to49
 ((
uöt32_t
)0x01000000Ë

	)

139 
	#OB_WRP_Pages50to51
 ((
uöt32_t
)0x02000000Ë

	)

140 
	#OB_WRP_Pages52to53
 ((
uöt32_t
)0x04000000Ë

	)

141 
	#OB_WRP_Pages54to55
 ((
uöt32_t
)0x08000000Ë

	)

142 
	#OB_WRP_Pages56to57
 ((
uöt32_t
)0x10000000Ë

	)

143 
	#OB_WRP_Pages58to59
 ((
uöt32_t
)0x20000000Ë

	)

144 
	#OB_WRP_Pages60to61
 ((
uöt32_t
)0x40000000Ë

	)

145 
	#OB_WRP_Pages62to127
 ((
uöt32_t
)0x80000000Ë

	)

147 
	#OB_WRP_AŒPages
 ((
uöt32_t
)0xFFFFFFFFË

	)

149 
	#IS_OB_WRP
(
PAGE
Ë(((PAGEË!0x0000000))

	)

162 
	#OB_RDP_Levñ_0
 ((
uöt8_t
)0xAA)

	)

163 
	#OB_RDP_Levñ_1
 ((
uöt8_t
)0xBB)

	)

167 
	#IS_OB_RDP
(
LEVEL
Ë(((LEVELË=
OB_RDP_Levñ_0
)||\

	)

168 ((
LEVEL
Ë=
OB_RDP_Levñ_1
))

178 
	#OB_IWDG_SW
 ((
uöt8_t
)0x01Ë

	)

179 
	#OB_IWDG_HW
 ((
uöt8_t
)0x00Ë

	)

180 
	#IS_OB_IWDG_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_IWDG_SW
Ë|| ((SOURCEË=
OB_IWDG_HW
))

	)

190 
	#OB_STOP_NoRST
 ((
uöt8_t
)0x02Ë

	)

191 
	#OB_STOP_RST
 ((
uöt8_t
)0x00Ë

	)

192 
	#IS_OB_STOP_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STOP_NoRST
Ë|| ((SOURCEË=
OB_STOP_RST
))

	)

202 
	#OB_STDBY_NoRST
 ((
uöt8_t
)0x04Ë

	)

203 
	#OB_STDBY_RST
 ((
uöt8_t
)0x00Ë

	)

204 
	#IS_OB_STDBY_SOURCE
(
SOURCE
Ë(((SOURCEË=
OB_STDBY_NoRST
Ë|| ((SOURCEË=
OB_STDBY_RST
))

	)

213 
	#OB_BOOT1_RESET
 ((
uöt8_t
)0x00Ë

	)

214 
	#OB_BOOT1_SET
 ((
uöt8_t
)0x10Ë

	)

215 
	#IS_OB_BOOT1
(
BOOT1
Ë(((BOOT1Ë=
OB_BOOT1_RESET
Ë|| ((BOOT1Ë=
OB_BOOT1_SET
))

	)

224 
	#OB_VDDA_ANALOG_ON
 ((
uöt8_t
)0x20Ë

	)

225 
	#OB_VDDA_ANALOG_OFF
 ((
uöt8_t
)0x00Ë

	)

227 
	#IS_OB_VDDA_ANALOG
(
ANALOG
Ë(((ANALOGË=
OB_VDDA_ANALOG_ON
Ë|| ((ANALOGË=
OB_VDDA_ANALOG_OFF
))

	)

237 
	#OB_SRAM_PARITY_SET
 ((
uöt8_t
)0x00Ë

	)

238 
	#OB_SRAM_PARITY_RESET
 ((
uöt8_t
)0x40Ë

	)

240 
	#IS_OB_SRAM_PARITY
(
PARITY
Ë(((PARITYË=
OB_SRAM_PARITY_SET
Ë|| ((PARITYË=
OB_SRAM_PARITY_RESET
))

	)

250 
	#FLASH_FLAG_BSY
 
FLASH_SR_BSY


	)

251 
	#FLASH_FLAG_PGERR
 
FLASH_SR_PGERR


	)

252 
	#FLASH_FLAG_WRPERR
 
FLASH_SR_WRPERR


	)

253 
	#FLASH_FLAG_EOP
 
FLASH_SR_EOP


	)

255 
	#IS_FLASH_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFFFFC3Ë=0x00000000Ë&& ((FLAGË!0x00000000))

	)

257 
	#IS_FLASH_GET_FLAG
(
FLAG
Ë(((FLAGË=
FLASH_FLAG_BSY
Ë|| ((FLAGË=
FLASH_FLAG_PGERR
Ë|| \

	)

258 ((
FLAG
Ë=
FLASH_FLAG_WRPERR
Ë|| ((FLAGË=
FLASH_FLAG_EOP
))

265 
	#FLASH_ER_PRG_TIMEOUT
 ((
uöt32_t
)0x000B0000)

	)

279 
FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
);

280 
FLASH_HÆfCy˛eAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

281 
FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

284 
FLASH_U∆ock
();

285 
FLASH_Lock
();

286 
FLASH_Sètus
 
FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
);

287 
FLASH_Sètus
 
FLASH_Eø£AŒPages
();

288 
FLASH_Sètus
 
FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
);

289 
FLASH_Sètus
 
FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
);

292 
FLASH_OB_U∆ock
();

293 
FLASH_OB_Lock
();

294 
FLASH_OB_Launch
();

295 
FLASH_Sètus
 
FLASH_OB_Eø£
();

296 
FLASH_Sètus
 
FLASH_OB_E«bÀWRP
(
uöt32_t
 
OB_WRP
);

297 
FLASH_Sètus
 
FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
);

298 
FLASH_Sètus
 
FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
);

299 
FLASH_Sètus
 
FLASH_OB_BOOTC⁄fig
(
uöt8_t
 
OB_BOOT1
);

300 
FLASH_Sètus
 
FLASH_OB_VDDAC⁄fig
(
uöt8_t
 
OB_VDDA_ANALOG
);

301 
FLASH_Sètus
 
FLASH_OB_SRAMP¨ôyC⁄fig
(
uöt8_t
 
OB_SRAM_P¨ôy
);

302 
FLASH_Sètus
 
FLASH_OB_WrôeU£r
(
uöt8_t
 
OB_USER
);

303 
FLASH_Sètus
 
FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
);

304 
uöt8_t
 
FLASH_OB_GëU£r
();

305 
uöt32_t
 
FLASH_OB_GëWRP
();

306 
FœgSètus
 
FLASH_OB_GëRDP
();

309 
FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

310 
FœgSètus
 
FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
);

311 
FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
);

312 
FLASH_Sètus
 
FLASH_GëSètus
();

313 
FLASH_Sètus
 
FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
);

315 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_gpio.h

30 #i‚de‡
__STM32F30x_GPIO_H


31 
	#__STM32F30x_GPIO_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

50 
	#IS_GPIO_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
Ë|| \

	)

51 ((
PERIPH
Ë=
GPIOB
) || \

52 ((
PERIPH
Ë=
GPIOC
) || \

53 ((
PERIPH
Ë=
GPIOD
) || \

54 ((
PERIPH
Ë=
GPIOE
) || \

55 ((
PERIPH
Ë=
GPIOF
))

57 
	#IS_GPIO_LIST_PERIPH
(
PERIPH
Ë(((PERIPHË=
GPIOA
Ë|| \

	)

58 ((
PERIPH
Ë=
GPIOB
) || \

59 ((
PERIPH
Ë=
GPIOD
))

65 
GPIO_Mode_IN
 = 0x00,

66 
GPIO_Mode_OUT
 = 0x01,

67 
GPIO_Mode_AF
 = 0x02,

68 
GPIO_Mode_AN
 = 0x03

69 }
	tGPIOMode_Ty≥Def
;

71 
	#IS_GPIO_MODE
(
MODE
Ë(((MODEË=
GPIO_Mode_IN
)|| ((MODEË=
GPIO_Mode_OUT
Ë|| \

	)

72 ((
MODE
Ë=
GPIO_Mode_AF
)|| ((MODEË=
GPIO_Mode_AN
))

82 
GPIO_OTy≥_PP
 = 0x00,

83 
GPIO_OTy≥_OD
 = 0x01

84 }
	tGPIOOTy≥_Ty≥Def
;

86 
	#IS_GPIO_OTYPE
(
OTYPE
Ë(((OTYPEË=
GPIO_OTy≥_PP
Ë|| ((OTYPEË=
GPIO_OTy≥_OD
))

	)

97 
GPIO_S≥ed_2MHz
 = 0x01,

98 
GPIO_S≥ed_10MHz
 = 0x02,

99 
GPIO_S≥ed_50MHz
 = 0x03

100 }
	tGPIOS≥ed_Ty≥Def
;

102 
	#IS_GPIO_SPEED
(
SPEED
Ë(((SPEEDË=
GPIO_S≥ed_2MHz
Ë|| \

	)

103 ((
SPEED
Ë=
GPIO_S≥ed_10MHz
)|| ((SPEEDË=
GPIO_S≥ed_50MHz
))

113 
GPIO_PuPd_NOPULL
 = 0x00,

114 
GPIO_PuPd_UP
 = 0x01,

115 
GPIO_PuPd_DOWN
 = 0x02

116 }
	tGPIOPuPd_Ty≥Def
;

118 
	#IS_GPIO_PUPD
(
PUPD
Ë(((PUPDË=
GPIO_PuPd_NOPULL
Ë|| ((PUPDË=
GPIO_PuPd_UP
Ë|| \

	)

119 ((
PUPD
Ë=
GPIO_PuPd_DOWN
))

129 
Bô_RESET
 = 0,

130 
Bô_SET


131 }
	tBôA˘i⁄
;

133 
	#IS_GPIO_BIT_ACTION
(
ACTION
Ë(((ACTIONË=
Bô_RESET
Ë|| ((ACTIONË=
Bô_SET
))

	)

143 
uöt32_t
 
GPIO_Pö
;

146 
GPIOMode_Ty≥Def
 
GPIO_Mode
;

149 
GPIOS≥ed_Ty≥Def
 
GPIO_S≥ed
;

152 
GPIOOTy≥_Ty≥Def
 
GPIO_OTy≥
;

155 
GPIOPuPd_Ty≥Def
 
GPIO_PuPd
;

157 }
	tGPIO_InôTy≥Def
;

168 
	#GPIO_Pö_0
 ((
uöt16_t
)0x0001Ë

	)

169 
	#GPIO_Pö_1
 ((
uöt16_t
)0x0002Ë

	)

170 
	#GPIO_Pö_2
 ((
uöt16_t
)0x0004Ë

	)

171 
	#GPIO_Pö_3
 ((
uöt16_t
)0x0008Ë

	)

172 
	#GPIO_Pö_4
 ((
uöt16_t
)0x0010Ë

	)

173 
	#GPIO_Pö_5
 ((
uöt16_t
)0x0020Ë

	)

174 
	#GPIO_Pö_6
 ((
uöt16_t
)0x0040Ë

	)

175 
	#GPIO_Pö_7
 ((
uöt16_t
)0x0080Ë

	)

176 
	#GPIO_Pö_8
 ((
uöt16_t
)0x0100Ë

	)

177 
	#GPIO_Pö_9
 ((
uöt16_t
)0x0200Ë

	)

178 
	#GPIO_Pö_10
 ((
uöt16_t
)0x0400Ë

	)

179 
	#GPIO_Pö_11
 ((
uöt16_t
)0x0800Ë

	)

180 
	#GPIO_Pö_12
 ((
uöt16_t
)0x1000Ë

	)

181 
	#GPIO_Pö_13
 ((
uöt16_t
)0x2000Ë

	)

182 
	#GPIO_Pö_14
 ((
uöt16_t
)0x4000Ë

	)

183 
	#GPIO_Pö_15
 ((
uöt16_t
)0x8000Ë

	)

184 
	#GPIO_Pö_AŒ
 ((
uöt16_t
)0xFFFFË

	)

186 
	#IS_GPIO_PIN
(
PIN
Ë((PINË!(
uöt16_t
)0x00)

	)

188 
	#IS_GET_GPIO_PIN
(
PIN
Ë(((PINË=
GPIO_Pö_0
Ë|| \

	)

189 ((
PIN
Ë=
GPIO_Pö_1
) || \

190 ((
PIN
Ë=
GPIO_Pö_2
) || \

191 ((
PIN
Ë=
GPIO_Pö_3
) || \

192 ((
PIN
Ë=
GPIO_Pö_4
) || \

193 ((
PIN
Ë=
GPIO_Pö_5
) || \

194 ((
PIN
Ë=
GPIO_Pö_6
) || \

195 ((
PIN
Ë=
GPIO_Pö_7
) || \

196 ((
PIN
Ë=
GPIO_Pö_8
) || \

197 ((
PIN
Ë=
GPIO_Pö_9
) || \

198 ((
PIN
Ë=
GPIO_Pö_10
) || \

199 ((
PIN
Ë=
GPIO_Pö_11
) || \

200 ((
PIN
Ë=
GPIO_Pö_12
) || \

201 ((
PIN
Ë=
GPIO_Pö_13
) || \

202 ((
PIN
Ë=
GPIO_Pö_14
) || \

203 ((
PIN
Ë=
GPIO_Pö_15
))

212 
	#GPIO_PöSour˚0
 ((
uöt8_t
)0x00)

	)

213 
	#GPIO_PöSour˚1
 ((
uöt8_t
)0x01)

	)

214 
	#GPIO_PöSour˚2
 ((
uöt8_t
)0x02)

	)

215 
	#GPIO_PöSour˚3
 ((
uöt8_t
)0x03)

	)

216 
	#GPIO_PöSour˚4
 ((
uöt8_t
)0x04)

	)

217 
	#GPIO_PöSour˚5
 ((
uöt8_t
)0x05)

	)

218 
	#GPIO_PöSour˚6
 ((
uöt8_t
)0x06)

	)

219 
	#GPIO_PöSour˚7
 ((
uöt8_t
)0x07)

	)

220 
	#GPIO_PöSour˚8
 ((
uöt8_t
)0x08)

	)

221 
	#GPIO_PöSour˚9
 ((
uöt8_t
)0x09)

	)

222 
	#GPIO_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

223 
	#GPIO_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

224 
	#GPIO_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

225 
	#GPIO_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

226 
	#GPIO_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

227 
	#GPIO_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

229 
	#IS_GPIO_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
GPIO_PöSour˚0
Ë|| \

	)

230 ((
PINSOURCE
Ë=
GPIO_PöSour˚1
) || \

231 ((
PINSOURCE
Ë=
GPIO_PöSour˚2
) || \

232 ((
PINSOURCE
Ë=
GPIO_PöSour˚3
) || \

233 ((
PINSOURCE
Ë=
GPIO_PöSour˚4
) || \

234 ((
PINSOURCE
Ë=
GPIO_PöSour˚5
) || \

235 ((
PINSOURCE
Ë=
GPIO_PöSour˚6
) || \

236 ((
PINSOURCE
Ë=
GPIO_PöSour˚7
) || \

237 ((
PINSOURCE
Ë=
GPIO_PöSour˚8
) || \

238 ((
PINSOURCE
Ë=
GPIO_PöSour˚9
) || \

239 ((
PINSOURCE
Ë=
GPIO_PöSour˚10
) || \

240 ((
PINSOURCE
Ë=
GPIO_PöSour˚11
) || \

241 ((
PINSOURCE
Ë=
GPIO_PöSour˚12
) || \

242 ((
PINSOURCE
Ë=
GPIO_PöSour˚13
) || \

243 ((
PINSOURCE
Ë=
GPIO_PöSour˚14
) || \

244 ((
PINSOURCE
Ë=
GPIO_PöSour˚15
))

256 
	#GPIO_AF_0
 ((
uöt8_t
)0x00Ë

	)

261 
	#GPIO_AF_1
 ((
uöt8_t
)0x01Ë

	)

266 
	#GPIO_AF_2
 ((
uöt8_t
)0x02Ë

	)

271 
	#GPIO_AF_3
 ((
uöt8_t
)0x03Ë

	)

276 
	#GPIO_AF_4
 ((
uöt8_t
)0x04Ë

	)

281 
	#GPIO_AF_5
 ((
uöt8_t
)0x05Ë

	)

286 
	#GPIO_AF_6
 ((
uöt8_t
)0x06Ë

	)

291 
	#GPIO_AF_7
 ((
uöt8_t
)0x07Ë

	)

297 
	#GPIO_AF_8
 ((
uöt8_t
)0x08Ë

	)

303 
	#GPIO_AF_9
 ((
uöt8_t
)0x09Ë

	)

308 
	#GPIO_AF_10
 ((
uöt8_t
)0x0AË

	)

313 
	#GPIO_AF_11
 ((
uöt8_t
)0x0BË

	)

318 
	#GPIO_AF_12
 ((
uöt8_t
)0x0EË

	)

323 
	#GPIO_AF_14
 ((
uöt8_t
)0x0EË

	)

328 
	#GPIO_AF_15
 ((
uöt8_t
)0x0FË

	)

330 
	#IS_GPIO_AF
(
AF
Ë(((AFË=
GPIO_AF_0
)||((AFË=
GPIO_AF_1
)||\

	)

331 ((
AF
Ë=
GPIO_AF_2
)||((AFË=
GPIO_AF_3
)||\

332 ((
AF
Ë=
GPIO_AF_4
)||((AFË=
GPIO_AF_5
)||\

333 ((
AF
Ë=
GPIO_AF_6
)||((AFË=
GPIO_AF_7
)||\

334 ((
AF
Ë=
GPIO_AF_8
)||((AFË=
GPIO_AF_9
)||\

335 ((
AF
Ë=
GPIO_AF_10
)||((AFË=
GPIO_AF_11
)||\

336 ((
AF
Ë=
GPIO_AF_14
)||((AFË=
GPIO_AF_15
))

349 
GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
);

352 
GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

353 
GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
);

354 
GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

357 
uöt8_t
 
GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

358 
uöt16_t
 
GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

359 
uöt8_t
 
GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

360 
uöt16_t
 
GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
);

361 
GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

362 
GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
);

363 
GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
);

364 
GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
);

367 
GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
);

369 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h

30 #i‚de‡
__STM32F30x_I2C_H


31 
	#__STM32F30x_I2C_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

56 
uöt32_t
 
I2C_Timög
;

60 
uöt32_t
 
I2C_A«logFûãr
;

63 
uöt32_t
 
I2C_DigôÆFûãr
;

66 
uöt32_t
 
I2C_Mode
;

69 
uöt32_t
 
I2C_OwnAddªss1
;

72 
uöt32_t
 
I2C_Ack
;

75 
uöt32_t
 
I2C_AcknowÀdgedAddªss
;

77 }
	tI2C_InôTy≥Def
;

86 
	#IS_I2C_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2C1
Ë|| \

	)

87 ((
PERIPH
Ë=
I2C2
))

93 
	#I2C_A«logFûãr_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

94 
	#I2C_A«logFûãr_DißbÀ
 
I2C_CR1_ANFOFF


	)

96 
	#IS_I2C_ANALOG_FILTER
(
FILTER
Ë(((FILTERË=
I2C_A«logFûãr_E«bÀ
Ë|| \

	)

97 ((
FILTER
Ë=
I2C_A«logFûãr_DißbÀ
))

106 
	#IS_I2C_DIGITAL_FILTER
(
FILTER
Ë((FILTERË<0x0000000F)

	)

115 
	#I2C_Mode_I2C
 ((
uöt32_t
)0x00000000)

	)

116 
	#I2C_Mode_SMBusDevi˚
 
I2C_CR1_SMBDEN


	)

117 
	#I2C_Mode_SMBusHo°
 
I2C_CR1_SMBHEN


	)

119 
	#IS_I2C_MODE
(
MODE
Ë(((MODEË=
I2C_Mode_I2C
Ë|| \

	)

120 ((
MODE
Ë=
I2C_Mode_SMBusDevi˚
) || \

121 ((
MODE
Ë=
I2C_Mode_SMBusHo°
))

130 
	#I2C_Ack_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

131 
	#I2C_Ack_DißbÀ
 
I2C_CR2_NACK


	)

133 
	#IS_I2C_ACK
(
ACK
Ë(((ACKË=
I2C_Ack_E«bÀ
Ë|| \

	)

134 ((
ACK
Ë=
I2C_Ack_DißbÀ
))

143 
	#I2C_AcknowÀdgedAddªss_7bô
 ((
uöt32_t
)0x00000000)

	)

144 
	#I2C_AcknowÀdgedAddªss_10bô
 
I2C_OAR1_OA1MODE


	)

146 
	#IS_I2C_ACKNOWLEDGE_ADDRESS
(
ADDRESS
Ë(((ADDRESSË=
I2C_AcknowÀdgedAddªss_7bô
Ë|| \

	)

147 ((
ADDRESS
Ë=
I2C_AcknowÀdgedAddªss_10bô
))

156 
	#IS_I2C_OWN_ADDRESS1
(
ADDRESS1
Ë((ADDRESS1Ë<(
uöt32_t
)0x000003FF)

	)

165 
	#I2C_Dúe˘i⁄_Tønsmôãr
 ((
uöt16_t
)0x0000)

	)

166 
	#I2C_Dúe˘i⁄_Re˚ivî
 ((
uöt16_t
)0x0400)

	)

168 
	#IS_I2C_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
I2C_Dúe˘i⁄_Tønsmôãr
Ë|| \

	)

169 ((
DIRECTION
Ë=
I2C_Dúe˘i⁄_Re˚ivî
))

178 
	#I2C_DMAReq_Tx
 
I2C_CR1_TXDMAEN


	)

179 
	#I2C_DMAReq_Rx
 
I2C_CR1_RXDMAEN


	)

181 
	#IS_I2C_DMA_REQ
(
REQ
Ë((((REQË& (
uöt32_t
)0xFFFF3FFFË=0x00Ë&& ((REQË!0x00))

	)

190 
	#IS_I2C_SLAVE_ADDRESS
(
ADDRESS
Ë((ADDRESSË<(
uöt16_t
)0x03FF)

	)

200 
	#IS_I2C_OWN_ADDRESS2
(
ADDRESS2
Ë((ADDRESS2Ë<(
uöt16_t
)0x00FF)

	)

210 
	#I2C_OA2_NoMask
 ((
uöt8_t
)0x00)

	)

211 
	#I2C_OA2_Mask01
 ((
uöt8_t
)0x01)

	)

212 
	#I2C_OA2_Mask02
 ((
uöt8_t
)0x02)

	)

213 
	#I2C_OA2_Mask03
 ((
uöt8_t
)0x03)

	)

214 
	#I2C_OA2_Mask04
 ((
uöt8_t
)0x04)

	)

215 
	#I2C_OA2_Mask05
 ((
uöt8_t
)0x05)

	)

216 
	#I2C_OA2_Mask06
 ((
uöt8_t
)0x06)

	)

217 
	#I2C_OA2_Mask07
 ((
uöt8_t
)0x07)

	)

219 
	#IS_I2C_OWN_ADDRESS2_MASK
(
MASK
Ë(((MASKË=
I2C_OA2_NoMask
Ë|| \

	)

220 ((
MASK
Ë=
I2C_OA2_Mask01
) || \

221 ((
MASK
Ë=
I2C_OA2_Mask02
) || \

222 ((
MASK
Ë=
I2C_OA2_Mask03
) || \

223 ((
MASK
Ë=
I2C_OA2_Mask04
) || \

224 ((
MASK
Ë=
I2C_OA2_Mask05
) || \

225 ((
MASK
Ë=
I2C_OA2_Mask06
) || \

226 ((
MASK
Ë=
I2C_OA2_Mask07
))

236 
	#IS_I2C_TIMEOUT
(
TIMEOUT
Ë((TIMEOUTË<(
uöt16_t
)0x0FFF)

	)

246 
	#I2C_Regi°î_CR1
 ((
uöt8_t
)0x00)

	)

247 
	#I2C_Regi°î_CR2
 ((
uöt8_t
)0x04)

	)

248 
	#I2C_Regi°î_OAR1
 ((
uöt8_t
)0x08)

	)

249 
	#I2C_Regi°î_OAR2
 ((
uöt8_t
)0x0C)

	)

250 
	#I2C_Regi°î_TIMINGR
 ((
uöt8_t
)0x10)

	)

251 
	#I2C_Regi°î_TIMEOUTR
 ((
uöt8_t
)0x14)

	)

252 
	#I2C_Regi°î_ISR
 ((
uöt8_t
)0x18)

	)

253 
	#I2C_Regi°î_ICR
 ((
uöt8_t
)0x1C)

	)

254 
	#I2C_Regi°î_PECR
 ((
uöt8_t
)0x20)

	)

255 
	#I2C_Regi°î_RXDR
 ((
uöt8_t
)0x24)

	)

256 
	#I2C_Regi°î_TXDR
 ((
uöt8_t
)0x28)

	)

258 
	#IS_I2C_REGISTER
(
REGISTER
Ë(((REGISTERË=
I2C_Regi°î_CR1
Ë|| \

	)

259 ((
REGISTER
Ë=
I2C_Regi°î_CR2
) || \

260 ((
REGISTER
Ë=
I2C_Regi°î_OAR1
) || \

261 ((
REGISTER
Ë=
I2C_Regi°î_OAR2
) || \

262 ((
REGISTER
Ë=
I2C_Regi°î_TIMINGR
) || \

263 ((
REGISTER
Ë=
I2C_Regi°î_TIMEOUTR
) || \

264 ((
REGISTER
Ë=
I2C_Regi°î_ISR
) || \

265 ((
REGISTER
Ë=
I2C_Regi°î_ICR
) || \

266 ((
REGISTER
Ë=
I2C_Regi°î_PECR
) || \

267 ((
REGISTER
Ë=
I2C_Regi°î_RXDR
) || \

268 ((
REGISTER
Ë=
I2C_Regi°î_TXDR
))

277 
	#I2C_IT_ERRI
 
I2C_CR1_ERRIE


	)

278 
	#I2C_IT_TCI
 
I2C_CR1_TCIE


	)

279 
	#I2C_IT_STOPI
 
I2C_CR1_STOPIE


	)

280 
	#I2C_IT_NACKI
 
I2C_CR1_NACKIE


	)

281 
	#I2C_IT_ADDRI
 
I2C_CR1_ADDRIE


	)

282 
	#I2C_IT_RXI
 
I2C_CR1_RXIE


	)

283 
	#I2C_IT_TXI
 
I2C_CR1_TXIE


	)

285 
	#IS_I2C_CONFIG_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFFF01Ë=0x00Ë&& ((ITË!0x00))

	)

295 
	#I2C_FLAG_TXE
 
I2C_ISR_TXE


	)

296 
	#I2C_FLAG_TXIS
 
I2C_ISR_TXIS


	)

297 
	#I2C_FLAG_RXNE
 
I2C_ISR_RXNE


	)

298 
	#I2C_FLAG_ADDR
 
I2C_ISR_ADDR


	)

299 
	#I2C_FLAG_NACKF
 
I2C_ISR_NACKF


	)

300 
	#I2C_FLAG_STOPF
 
I2C_ISR_STOPF


	)

301 
	#I2C_FLAG_TC
 
I2C_ISR_TC


	)

302 
	#I2C_FLAG_TCR
 
I2C_ISR_TCR


	)

303 
	#I2C_FLAG_BERR
 
I2C_ISR_BERR


	)

304 
	#I2C_FLAG_ARLO
 
I2C_ISR_ARLO


	)

305 
	#I2C_FLAG_OVR
 
I2C_ISR_OVR


	)

306 
	#I2C_FLAG_PECERR
 
I2C_ISR_PECERR


	)

307 
	#I2C_FLAG_TIMEOUT
 
I2C_ISR_TIMEOUT


	)

308 
	#I2C_FLAG_ALERT
 
I2C_ISR_ALERT


	)

309 
	#I2C_FLAG_BUSY
 
I2C_ISR_BUSY


	)

311 
	#IS_I2C_CLEAR_FLAG
(
FLAG
Ë((((FLAGË& (
uöt32_t
)0xFFFF4000Ë=0x00Ë&& ((FLAGË!0x00))

	)

313 
	#IS_I2C_GET_FLAG
(
FLAG
Ë(((FLAGË=
I2C_FLAG_TXE
Ë|| ((FLAGË=
I2C_FLAG_TXIS
Ë|| \

	)

314 ((
FLAG
Ë=
I2C_FLAG_RXNE
Ë|| ((FLAGË=
I2C_FLAG_ADDR
) || \

315 ((
FLAG
Ë=
I2C_FLAG_NACKF
Ë|| ((FLAGË=
I2C_FLAG_STOPF
) || \

316 ((
FLAG
Ë=
I2C_FLAG_TC
Ë|| ((FLAGË=
I2C_FLAG_TCR
) || \

317 ((
FLAG
Ë=
I2C_FLAG_BERR
Ë|| ((FLAGË=
I2C_FLAG_ARLO
) || \

318 ((
FLAG
Ë=
I2C_FLAG_OVR
Ë|| ((FLAGË=
I2C_FLAG_PECERR
) || \

319 ((
FLAG
Ë=
I2C_FLAG_TIMEOUT
Ë|| ((FLAGË=
I2C_FLAG_ALERT
) || \

320 ((
FLAG
Ë=
I2C_FLAG_BUSY
))

331 
	#I2C_IT_TXIS
 
I2C_ISR_TXIS


	)

332 
	#I2C_IT_RXNE
 
I2C_ISR_RXNE


	)

333 
	#I2C_IT_ADDR
 
I2C_ISR_ADDR


	)

334 
	#I2C_IT_NACKF
 
I2C_ISR_NACKF


	)

335 
	#I2C_IT_STOPF
 
I2C_ISR_STOPF


	)

336 
	#I2C_IT_TC
 
I2C_ISR_TC


	)

337 
	#I2C_IT_TCR
 
I2C_ISR_TCR


	)

338 
	#I2C_IT_BERR
 
I2C_ISR_BERR


	)

339 
	#I2C_IT_ARLO
 
I2C_ISR_ARLO


	)

340 
	#I2C_IT_OVR
 
I2C_ISR_OVR


	)

341 
	#I2C_IT_PECERR
 
I2C_ISR_PECERR


	)

342 
	#I2C_IT_TIMEOUT
 
I2C_ISR_TIMEOUT


	)

343 
	#I2C_IT_ALERT
 
I2C_ISR_ALERT


	)

345 
	#IS_I2C_CLEAR_IT
(
IT
Ë((((ITË& (
uöt32_t
)0xFFFFC001Ë=0x00Ë&& ((ITË!0x00))

	)

347 
	#IS_I2C_GET_IT
(
IT
Ë(((ITË=
I2C_IT_TXIS
Ë|| ((ITË=
I2C_IT_RXNE
Ë|| \

	)

348 ((
IT
Ë=
I2C_IT_ADDR
Ë|| ((ITË=
I2C_IT_NACKF
) || \

349 ((
IT
Ë=
I2C_IT_STOPF
Ë|| ((ITË=
I2C_IT_TC
) || \

350 ((
IT
Ë=
I2C_IT_TCR
Ë|| ((ITË=
I2C_IT_BERR
) || \

351 ((
IT
Ë=
I2C_IT_ARLO
Ë|| ((ITË=
I2C_IT_OVR
) || \

352 ((
IT
Ë=
I2C_IT_PECERR
Ë|| ((ITË=
I2C_IT_TIMEOUT
) || \

353 ((
IT
Ë=
I2C_IT_ALERT
))

364 
	#I2C_Rñﬂd_Mode
 
I2C_CR2_RELOAD


	)

365 
	#I2C_AutoEnd_Mode
 
I2C_CR2_AUTOEND


	)

366 
	#I2C_So·End_Mode
 ((
uöt32_t
)0x00000000)

	)

369 
	#IS_RELOAD_END_MODE
(
MODE
Ë(((MODEË=
I2C_Rñﬂd_Mode
Ë|| \

	)

370 ((
MODE
Ë=
I2C_AutoEnd_Mode
) || \

371 ((
MODE
Ë=
I2C_So·End_Mode
))

382 
	#I2C_No_SèπSt›
 ((
uöt32_t
)0x00000000)

	)

383 
	#I2C_Gíî©e_St›
 
I2C_CR2_STOP


	)

384 
	#I2C_Gíî©e_Sèπ_Ród
 (
uöt32_t
)(
I2C_CR2_START
 | 
I2C_CR2_RD_WRN
)

	)

385 
	#I2C_Gíî©e_Sèπ_Wrôe
 
I2C_CR2_START


	)

388 
	#IS_START_STOP_MODE
(
MODE
Ë(((MODEË=
I2C_Gíî©e_St›
Ë|| \

	)

389 ((
MODE
Ë=
I2C_Gíî©e_Sèπ_Ród
) || \

390 ((
MODE
Ë=
I2C_Gíî©e_Sèπ_Wrôe
) || \

391 ((
MODE
Ë=
I2C_No_SèπSt›
))

407 
I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
);

408 
I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

409 
I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
);

410 
I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

411 
I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
);

412 
I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

413 
I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

414 
I2C_St›ModeCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

415 
I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

416 
I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Addªss
, 
uöt8_t
 
Mask
);

417 
I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

418 
I2C_SœveByãC⁄åﬁCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

419 
I2C_SœveAddªssC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Addªss
);

420 
I2C_10BôAddªssögModeCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

423 
I2C_AutoEndCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

424 
I2C_RñﬂdCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

425 
I2C_NumbîOfByãsC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Numbî_Byãs
);

426 
I2C_Ma°îReque°C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_Dúe˘i⁄
);

427 
I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

428 
I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

429 
I2C_10BôAddªssHódîCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

430 
I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

431 
uöt8_t
 
I2C_GëAddªssM©ched
(
I2C_Ty≥Def
* 
I2Cx
);

432 
uöt16_t
 
I2C_GëTøns„rDúe˘i⁄
(
I2C_Ty≥Def
* 
I2Cx
);

433 
I2C_Tøns„rH™dlög
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Addªss
, 
uöt8_t
 
Numbî_Byãs
, 
uöt32_t
 
RñﬂdEndMode
, uöt32_à
SèπSt›Mode
);

436 
I2C_SMBusAÀπCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

437 
I2C_ClockTimeoutCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

438 
I2C_ExãndedClockTimeoutCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

439 
I2C_IdÀClockTimeoutCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

440 
I2C_TimeoutAC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Timeout
);

441 
I2C_TimeoutBC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Timeout
);

442 
I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

443 
I2C_PECReque°Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

444 
uöt8_t
 
I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
);

447 
uöt32_t
 
I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
);

450 
I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
);

451 
uöt8_t
 
I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
);

454 
I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

457 
FœgSètus
 
I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

458 
I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
);

459 
ITSètus
 
I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

460 
I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
);

463 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h

30 #i‚de‡
__STM32F30X_IWDG_H


31 
	#__STM32F30X_IWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

59 
	#IWDG_WrôeAc˚ss_E«bÀ
 ((
uöt16_t
)0x5555)

	)

60 
	#IWDG_WrôeAc˚ss_DißbÀ
 ((
uöt16_t
)0x0000)

	)

61 
	#IS_IWDG_WRITE_ACCESS
(
ACCESS
Ë(((ACCESSË=
IWDG_WrôeAc˚ss_E«bÀ
Ë|| \

	)

62 ((
ACCESS
Ë=
IWDG_WrôeAc˚ss_DißbÀ
))

71 
	#IWDG_PªsˇÀr_4
 ((
uöt8_t
)0x00)

	)

72 
	#IWDG_PªsˇÀr_8
 ((
uöt8_t
)0x01)

	)

73 
	#IWDG_PªsˇÀr_16
 ((
uöt8_t
)0x02)

	)

74 
	#IWDG_PªsˇÀr_32
 ((
uöt8_t
)0x03)

	)

75 
	#IWDG_PªsˇÀr_64
 ((
uöt8_t
)0x04)

	)

76 
	#IWDG_PªsˇÀr_128
 ((
uöt8_t
)0x05)

	)

77 
	#IWDG_PªsˇÀr_256
 ((
uöt8_t
)0x06)

	)

78 
	#IS_IWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
IWDG_PªsˇÀr_4
Ë|| \

	)

79 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_8
) || \

80 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_16
) || \

81 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_32
) || \

82 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_64
) || \

83 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_128
)|| \

84 ((
PRESCALER
Ë=
IWDG_PªsˇÀr_256
))

93 
	#IWDG_FLAG_PVU
 ((
uöt16_t
)0x0001)

	)

94 
	#IWDG_FLAG_RVU
 ((
uöt16_t
)0x0002)

	)

95 
	#IWDG_FLAG_WVU
 ((
uöt16_t
)0x0002)

	)

96 
	#IS_IWDG_FLAG
(
FLAG
Ë(((FLAGË=
IWDG_FLAG_PVU
Ë|| ((FLAGË=
IWDG_FLAG_RVU
Ë|| \

	)

97 ((
FLAG
Ë=
IWDG_FLAG_WVU
))

105 
	#IS_IWDG_RELOAD
(
RELOAD
Ë((RELOADË<0xFFF)

	)

114 
	#IS_IWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0xFFF)

	)

127 
IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
);

128 
IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
);

129 
IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
);

130 
IWDG_RñﬂdCou¡î
();

131 
IWDG_SëWödowVÆue
(
uöt16_t
 
WödowVÆue
);

134 
IWDG_E«bÀ
();

137 
FœgSètus
 
IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
);

139 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h

30 #i‚de‡
__STM32F30x_MISC_H


31 
	#__STM32F30x_MISC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

56 
uöt8_t
 
NVIC_IRQCh™√l
;

61 
uöt8_t
 
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
;

67 
uöt8_t
 
NVIC_IRQCh™√lSubPri‹ôy
;

72 
Fun˘i⁄ÆSèã
 
NVIC_IRQCh™√lCmd
;

75 } 
	tNVIC_InôTy≥Def
;

113 
	#NVIC_Ve˘Tab_RAM
 ((
uöt32_t
)0x20000000)

	)

114 
	#NVIC_Ve˘Tab_FLASH
 ((
uöt32_t
)0x08000000)

	)

115 
	#IS_NVIC_VECTTAB
(
VECTTAB
Ë(((VECTTABË=
NVIC_Ve˘Tab_RAM
Ë|| \

	)

116 ((
VECTTAB
Ë=
NVIC_Ve˘Tab_FLASH
))

125 
	#NVIC_LP_SEVONPEND
 ((
uöt8_t
)0x10)

	)

126 
	#NVIC_LP_SLEEPDEEP
 ((
uöt8_t
)0x04)

	)

127 
	#NVIC_LP_SLEEPONEXIT
 ((
uöt8_t
)0x02)

	)

128 
	#IS_NVIC_LP
(
LP
Ë(((LPË=
NVIC_LP_SEVONPEND
Ë|| \

	)

129 ((
LP
Ë=
NVIC_LP_SLEEPDEEP
) || \

130 ((
LP
Ë=
NVIC_LP_SLEEPONEXIT
))

139 
	#NVIC_Pri‹ôyGroup_0
 ((
uöt32_t
)0x700Ë

	)

141 
	#NVIC_Pri‹ôyGroup_1
 ((
uöt32_t
)0x600Ë

	)

143 
	#NVIC_Pri‹ôyGroup_2
 ((
uöt32_t
)0x500Ë

	)

145 
	#NVIC_Pri‹ôyGroup_3
 ((
uöt32_t
)0x400Ë

	)

147 
	#NVIC_Pri‹ôyGroup_4
 ((
uöt32_t
)0x300Ë

	)

150 
	#IS_NVIC_PRIORITY_GROUP
(
GROUP
Ë(((GROUPË=
NVIC_Pri‹ôyGroup_0
Ë|| \

	)

151 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_1
) || \

152 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_2
) || \

153 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_3
) || \

154 ((
GROUP
Ë=
NVIC_Pri‹ôyGroup_4
))

156 
	#IS_NVIC_PREEMPTION_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

158 
	#IS_NVIC_SUB_PRIORITY
(
PRIORITY
Ë((PRIORITYË< 0x10)

	)

160 
	#IS_NVIC_OFFSET
(
OFFSET
Ë((OFFSETË< 0x000FFFFF)

	)

169 
	#SysTick_CLKSour˚_HCLK_Div8
 ((
uöt32_t
)0xFFFFFFFB)

	)

170 
	#SysTick_CLKSour˚_HCLK
 ((
uöt32_t
)0x00000004)

	)

171 
	#IS_SYSTICK_CLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
SysTick_CLKSour˚_HCLK
Ë|| \

	)

172 ((
SOURCE
Ë=
SysTick_CLKSour˚_HCLK_Div8
))

184 
NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
);

185 
NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
);

186 
NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
);

187 
NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

188 
SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
);

190 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h

30 #i‚de‡
__STM32F30x_OPAMP_H


31 
	#__STM32F30x_OPAMP_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

57 
uöt32_t
 
OPAMP_InvîtögI≈ut
;

60 
uöt32_t
 
OPAMP_N⁄InvîtögI≈ut
;

63 }
	tOPAMP_InôTy≥Def
;

75 
	#OPAMP_Sñe˘i⁄_OPAMP1
 ((
uöt32_t
)0x00000000Ë

	)

76 
	#OPAMP_Sñe˘i⁄_OPAMP2
 ((
uöt32_t
)0x00000004Ë

	)

77 
	#OPAMP_Sñe˘i⁄_OPAMP3
 ((
uöt32_t
)0x00000008Ë

	)

78 
	#OPAMP_Sñe˘i⁄_OPAMP4
 ((
uöt32_t
)0x0000000CË

	)

80 
	#IS_OPAMP_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
OPAMP_Sñe˘i⁄_OPAMP1
Ë|| \

	)

81 ((
PERIPH
Ë=
OPAMP_Sñe˘i⁄_OPAMP2
) || \

82 ((
PERIPH
Ë=
OPAMP_Sñe˘i⁄_OPAMP3
) || \

83 ((
PERIPH
Ë=
OPAMP_Sñe˘i⁄_OPAMP4
))

93 
	#OPAMP_InvîtögI≈ut_IO1
 ((
uöt32_t
)0x00000000Ë

	)

95 
	#OPAMP_InvîtögI≈ut_IO2
 
OPAMP_CSR_VMSEL_0


	)

97 
	#OPAMP_InvîtögI≈ut_PGA
 
OPAMP_CSR_VMSEL_1


	)

98 
	#OPAMP_InvîtögI≈ut_Vout
 
OPAMP_CSR_VMSEL


	)

100 
	#IS_OPAMP_INVERTING_INPUT
(
INPUT
Ë(((INPUTË=
OPAMP_InvîtögI≈ut_IO1
Ë|| \

	)

101 ((
INPUT
Ë=
OPAMP_InvîtögI≈ut_IO2
) || \

102 ((
INPUT
Ë=
OPAMP_InvîtögI≈ut_PGA
) || \

103 ((
INPUT
Ë=
OPAMP_InvîtögI≈ut_Vout
))

112 
	#OPAMP_N⁄InvîtögI≈ut_IO1
 ((
uöt32_t
)0x00000000Ë

	)

114 
	#OPAMP_N⁄InvîtögI≈ut_IO2
 
OPAMP_CSR_VPSEL_0


	)

116 
	#OPAMP_N⁄InvîtögI≈ut_IO3
 
OPAMP_CSR_VPSEL_1


	)

118 
	#OPAMP_N⁄InvîtögI≈ut_IO4
 
OPAMP_CSR_VPSEL


	)

121 
	#IS_OPAMP_NONINVERTING_INPUT
(
INPUT
Ë(((INPUTË=
OPAMP_N⁄InvîtögI≈ut_IO1
Ë|| \

	)

122 ((
INPUT
Ë=
OPAMP_N⁄InvîtögI≈ut_IO2
) || \

123 ((
INPUT
Ë=
OPAMP_N⁄InvîtögI≈ut_IO3
) || \

124 ((
INPUT
Ë=
OPAMP_N⁄InvîtögI≈ut_IO4
))

133 
	#OPAMP_OPAMP_PGAGaö_2
 ((
uöt32_t
)0x00000000)

	)

134 
	#OPAMP_OPAMP_PGAGaö_4
 
OPAMP_CSR_PGGAIN_0


	)

135 
	#OPAMP_OPAMP_PGAGaö_8
 
OPAMP_CSR_PGGAIN_1


	)

136 
	#OPAMP_OPAMP_PGAGaö_16
 ((
uöt32_t
)0x0000C000)

	)

138 
	#IS_OPAMP_PGAGAIN
(
GAIN
Ë(((GAINË=
OPAMP_OPAMP_PGAGaö_2
Ë|| \

	)

139 ((
GAIN
Ë=
OPAMP_OPAMP_PGAGaö_4
) || \

140 ((
GAIN
Ë=
OPAMP_OPAMP_PGAGaö_8
) || \

141 ((
GAIN
Ë=
OPAMP_OPAMP_PGAGaö_16
))

150 
	#OPAMP_PGAC⁄√˘_No
 ((
uöt32_t
)0x00000000)

	)

151 
	#OPAMP_PGAC⁄√˘_IO1
 
OPAMP_CSR_PGGAIN_3


	)

152 
	#OPAMP_PGAC⁄√˘_IO2
 ((
uöt32_t
)0x00030000)

	)

154 
	#IS_OPAMP_PGACONNECT
(
CONNECT
Ë(((CONNECTË=
OPAMP_PGAC⁄√˘_No
Ë|| \

	)

155 ((
CONNECT
Ë=
OPAMP_PGAC⁄√˘_IO1
) || \

156 ((
CONNECT
Ë=
OPAMP_PGAC⁄√˘_IO2
))

165 
	#IS_OPAMP_SECONDARY_INVINPUT
(
INVINPUT
Ë(((INVINPUTË=
OPAMP_InvîtögI≈ut_IO1
Ë|| \

	)

166 ((
INVINPUT
Ë=
OPAMP_InvîtögI≈ut_IO2
))

175 
	#OPAMP_I≈ut_Invîtög
 ((
uöt32_t
)0x00000018Ë

	)

176 
	#OPAMP_I≈ut_N⁄Invîtög
 ((
uöt32_t
)0x00000013Ë

	)

178 
	#IS_OPAMP_INPUT
(
INPUT
Ë(((INPUTË=
OPAMP_I≈ut_Invîtög
Ë|| \

	)

179 ((
INPUT
Ë=
OPAMP_I≈ut_N⁄Invîtög
))

189 
	#OPAMP_Vªf_3VDDA
 ((
uöt32_t
)0x00000000Ë

	)

190 
	#OPAMP_Vªf_10VDDA
 
OPAMP_CSR_CALSEL_0


	)

191 
	#OPAMP_Vªf_50VDDA
 
OPAMP_CSR_CALSEL_1


	)

192 
	#OPAMP_Vªf_90VDDA
 
OPAMP_CSR_CALSEL


	)

194 
	#IS_OPAMP_VREF
(
VREF
Ë(((VREFË=
OPAMP_Vªf_3VDDA
Ë|| \

	)

195 ((
VREF
Ë=
OPAMP_Vªf_10VDDA
) || \

196 ((
VREF
Ë=
OPAMP_Vªf_50VDDA
) || \

197 ((
VREF
Ë=
OPAMP_Vªf_90VDDA
))

206 
	#OPAMP_Trimmög_Fa˘‹y
 ((
uöt32_t
)0x00000000Ë

	)

207 
	#OPAMP_Trimmög_U£r
 
OPAMP_CSR_USERTRIM


	)

209 
	#IS_OPAMP_TRIMMING
(
TRIMMING
Ë(((TRIMMINGË=
OPAMP_Trimmög_Fa˘‹y
Ë|| \

	)

210 ((
TRIMMING
Ë=
OPAMP_Trimmög_U£r
))

220 
	#IS_OPAMP_TRIMMINGVALUE
(
VALUE
Ë((VALUEË<0x0000001FË

	)

230 
	#OPAMP_OuçutLevñ_High
 
OPAMP_CSR_OUTCAL


	)

231 
	#OPAMP_OuçutLevñ_Low
 ((
uöt32_t
)0x00000000)

	)

241 
OPAMP_DeInô
(
uöt32_t
 
OPAMP_Sñe˘i⁄
);

244 
OPAMP_Inô
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
OPAMP_InôTy≥Def
* 
OPAMP_InôSåu˘
);

245 
OPAMP_Såu˘Inô
(
OPAMP_InôTy≥Def
* 
OPAMP_InôSåu˘
);

246 
OPAMP_PGAC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_PGAGaö
, uöt32_à
OPAMP_PGAC⁄√˘
);

247 
OPAMP_VªfC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_Vªf
);

248 
OPAMP_VªfC⁄√˘ADCCmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

249 
OPAMP_TimîC⁄åﬁÀdMuxC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
OPAMP_InôTy≥Def
* 
OPAMP_InôSåu˘
);

250 
OPAMP_TimîC⁄åﬁÀdMuxCmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

251 
OPAMP_Cmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

252 
uöt32_t
 
OPAMP_GëOuçutLevñ
(uöt32_à
OPAMP_Sñe˘i⁄
);

255 
OPAMP_VªfC⁄√˘N⁄InvîtögI≈ut
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

256 
OPAMP_Off£tTrimModeSñe˘
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_Trimmög
);

257 
OPAMP_Off£tTrimC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_I≈ut
, uöt32_à
OPAMP_TrimVÆue
);

258 
OPAMP_SèπCÆibøti⁄
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

261 
OPAMP_LockC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
);

263 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h

30 #i‚de‡
__STM32F30x_PWR_H


31 
	#__STM32F30x_PWR_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

59 
	#PWR_PVDLevñ_0
 
PWR_CR_PLS_LEV0


	)

60 
	#PWR_PVDLevñ_1
 
PWR_CR_PLS_LEV1


	)

61 
	#PWR_PVDLevñ_2
 
PWR_CR_PLS_LEV2


	)

62 
	#PWR_PVDLevñ_3
 
PWR_CR_PLS_LEV3


	)

63 
	#PWR_PVDLevñ_4
 
PWR_CR_PLS_LEV4


	)

64 
	#PWR_PVDLevñ_5
 
PWR_CR_PLS_LEV5


	)

65 
	#PWR_PVDLevñ_6
 
PWR_CR_PLS_LEV6


	)

66 
	#PWR_PVDLevñ_7
 
PWR_CR_PLS_LEV7


	)

68 
	#IS_PWR_PVD_LEVEL
(
LEVEL
Ë(((LEVELË=
PWR_PVDLevñ_0
Ë|| ((LEVELË=
PWR_PVDLevñ_1
)|| \

	)

69 ((
LEVEL
Ë=
PWR_PVDLevñ_2
Ë|| ((LEVELË=
PWR_PVDLevñ_3
)|| \

70 ((
LEVEL
Ë=
PWR_PVDLevñ_4
Ë|| ((LEVELË=
PWR_PVDLevñ_5
)|| \

71 ((
LEVEL
Ë=
PWR_PVDLevñ_6
Ë|| ((LEVELË=
PWR_PVDLevñ_7
))

80 
	#PWR_WakeUpPö_1
 
PWR_CSR_EWUP1


	)

81 
	#PWR_WakeUpPö_2
 
PWR_CSR_EWUP2


	)

82 
	#PWR_WakeUpPö_3
 
PWR_CSR_EWUP3


	)

83 
	#IS_PWR_WAKEUP_PIN
(
PIN
Ë(((PINË=
PWR_WakeUpPö_1
Ë|| \

	)

84 ((
PIN
Ë=
PWR_WakeUpPö_2
) || \

85 ((
PIN
Ë=
PWR_WakeUpPö_3
))

95 
	#PWR_Reguœt‹_ON
 ((
uöt32_t
)0x00000000)

	)

96 
	#PWR_Reguœt‹_LowPowî
 
PWR_CR_LPSDSR


	)

97 
	#IS_PWR_REGULATOR
(
REGULATOR
Ë(((REGULATORË=
PWR_Reguœt‹_ON
Ë|| \

	)

98 ((
REGULATOR
Ë=
PWR_Reguœt‹_LowPowî
))

107 
	#PWR_SLEEPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

108 
	#PWR_SLEEPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

109 
	#IS_PWR_SLEEP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_SLEEPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_SLEEPE¡ry_WFE
))

	)

119 
	#PWR_STOPE¡ry_WFI
 ((
uöt8_t
)0x01)

	)

120 
	#PWR_STOPE¡ry_WFE
 ((
uöt8_t
)0x02)

	)

121 
	#IS_PWR_STOP_ENTRY
(
ENTRY
Ë(((ENTRYË=
PWR_STOPE¡ry_WFI
Ë|| ((ENTRYË=
PWR_STOPE¡ry_WFE
))

	)

131 
	#PWR_FLAG_WU
 
PWR_CSR_WUF


	)

132 
	#PWR_FLAG_SB
 
PWR_CSR_SBF


	)

133 
	#PWR_FLAG_PVDO
 
PWR_CSR_PVDO


	)

134 
	#PWR_FLAG_VREFINTRDY
 
PWR_CSR_VREFINTRDYF


	)

136 
	#IS_PWR_GET_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
Ë|| \

	)

137 ((
FLAG
Ë=
PWR_FLAG_PVDO
Ë|| ((FLAGË=
PWR_FLAG_VREFINTRDY
))

139 
	#IS_PWR_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
PWR_FLAG_WU
Ë|| ((FLAGË=
PWR_FLAG_SB
))

	)

152 
PWR_DeInô
();

155 
PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

158 
PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
);

159 
PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

162 
PWR_WakeUpPöCmd
(
uöt32_t
 
PWR_WakeUpPö
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

165 
PWR_E¡îSÀïMode
(
uöt8_t
 
PWR_SLEEPE¡ry
);

166 
PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
);

167 
PWR_E¡îSTANDBYMode
();

170 
FœgSètus
 
PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
);

171 
PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
);

173 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rcc.h

30 #i‚de‡
__STM32F30x_RCC_H


31 
	#__STM32F30x_RCC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

52 
uöt32_t
 
SYSCLK_Fªquícy
;

53 
uöt32_t
 
HCLK_Fªquícy
;

54 
uöt32_t
 
PCLK1_Fªquícy
;

55 
uöt32_t
 
PCLK2_Fªquícy
;

56 
uöt32_t
 
ADC12CLK_Fªquícy
;

57 
uöt32_t
 
ADC34CLK_Fªquícy
;

58 
uöt32_t
 
I2C1CLK_Fªquícy
;

59 
uöt32_t
 
I2C2CLK_Fªquícy
;

60 
uöt32_t
 
TIM1CLK_Fªquícy
;

61 
uöt32_t
 
TIM8CLK_Fªquícy
;

62 
uöt32_t
 
USART1CLK_Fªquícy
;

63 
uöt32_t
 
USART2CLK_Fªquícy
;

64 
uöt32_t
 
USART3CLK_Fªquícy
;

65 
uöt32_t
 
UART4CLK_Fªquícy
;

66 
uöt32_t
 
UART5CLK_Fªquícy
;

67 }
	tRCC_ClocksTy≥Def
;

79 
	#RCC_HSE_OFF
 ((
uöt8_t
)0x00)

	)

80 
	#RCC_HSE_ON
 ((
uöt8_t
)0x01)

	)

81 
	#RCC_HSE_By∑ss
 ((
uöt8_t
)0x05)

	)

82 
	#IS_RCC_HSE
(
HSE
Ë(((HSEË=
RCC_HSE_OFF
Ë|| ((HSEË=
RCC_HSE_ON
Ë|| \

	)

83 ((
HSE
Ë=
RCC_HSE_By∑ss
))

93 
	#RCC_PLLSour˚_HSI_Div2
 
RCC_CFGR_PLLSRC_HSI_Div2


	)

94 
	#RCC_PLLSour˚_PREDIV1
 
RCC_CFGR_PLLSRC_PREDIV1


	)

96 
	#IS_RCC_PLL_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_PLLSour˚_HSI_Div2
Ë|| \

	)

97 ((
SOURCE
Ë=
RCC_PLLSour˚_PREDIV1
))

106 
	#RCC_PLLMul_2
 
RCC_CFGR_PLLMULL2


	)

107 
	#RCC_PLLMul_3
 
RCC_CFGR_PLLMULL3


	)

108 
	#RCC_PLLMul_4
 
RCC_CFGR_PLLMULL4


	)

109 
	#RCC_PLLMul_5
 
RCC_CFGR_PLLMULL5


	)

110 
	#RCC_PLLMul_6
 
RCC_CFGR_PLLMULL6


	)

111 
	#RCC_PLLMul_7
 
RCC_CFGR_PLLMULL7


	)

112 
	#RCC_PLLMul_8
 
RCC_CFGR_PLLMULL8


	)

113 
	#RCC_PLLMul_9
 
RCC_CFGR_PLLMULL9


	)

114 
	#RCC_PLLMul_10
 
RCC_CFGR_PLLMULL10


	)

115 
	#RCC_PLLMul_11
 
RCC_CFGR_PLLMULL11


	)

116 
	#RCC_PLLMul_12
 
RCC_CFGR_PLLMULL12


	)

117 
	#RCC_PLLMul_13
 
RCC_CFGR_PLLMULL13


	)

118 
	#RCC_PLLMul_14
 
RCC_CFGR_PLLMULL14


	)

119 
	#RCC_PLLMul_15
 
RCC_CFGR_PLLMULL15


	)

120 
	#RCC_PLLMul_16
 
RCC_CFGR_PLLMULL16


	)

121 
	#IS_RCC_PLL_MUL
(
MUL
Ë(((MULË=
RCC_PLLMul_2
Ë|| ((MULË=
RCC_PLLMul_3
Ë|| \

	)

122 ((
MUL
Ë=
RCC_PLLMul_4
Ë|| ((MULË=
RCC_PLLMul_5
) || \

123 ((
MUL
Ë=
RCC_PLLMul_6
Ë|| ((MULË=
RCC_PLLMul_7
) || \

124 ((
MUL
Ë=
RCC_PLLMul_8
Ë|| ((MULË=
RCC_PLLMul_9
) || \

125 ((
MUL
Ë=
RCC_PLLMul_10
Ë|| ((MULË=
RCC_PLLMul_11
) || \

126 ((
MUL
Ë=
RCC_PLLMul_12
Ë|| ((MULË=
RCC_PLLMul_13
) || \

127 ((
MUL
Ë=
RCC_PLLMul_14
Ë|| ((MULË=
RCC_PLLMul_15
) || \

128 ((
MUL
Ë=
RCC_PLLMul_16
))

136 
	#RCC_PREDIV1_Div1
 
RCC_CFGR2_PREDIV1_DIV1


	)

137 
	#RCC_PREDIV1_Div2
 
RCC_CFGR2_PREDIV1_DIV2


	)

138 
	#RCC_PREDIV1_Div3
 
RCC_CFGR2_PREDIV1_DIV3


	)

139 
	#RCC_PREDIV1_Div4
 
RCC_CFGR2_PREDIV1_DIV4


	)

140 
	#RCC_PREDIV1_Div5
 
RCC_CFGR2_PREDIV1_DIV5


	)

141 
	#RCC_PREDIV1_Div6
 
RCC_CFGR2_PREDIV1_DIV6


	)

142 
	#RCC_PREDIV1_Div7
 
RCC_CFGR2_PREDIV1_DIV7


	)

143 
	#RCC_PREDIV1_Div8
 
RCC_CFGR2_PREDIV1_DIV8


	)

144 
	#RCC_PREDIV1_Div9
 
RCC_CFGR2_PREDIV1_DIV9


	)

145 
	#RCC_PREDIV1_Div10
 
RCC_CFGR2_PREDIV1_DIV10


	)

146 
	#RCC_PREDIV1_Div11
 
RCC_CFGR2_PREDIV1_DIV11


	)

147 
	#RCC_PREDIV1_Div12
 
RCC_CFGR2_PREDIV1_DIV12


	)

148 
	#RCC_PREDIV1_Div13
 
RCC_CFGR2_PREDIV1_DIV13


	)

149 
	#RCC_PREDIV1_Div14
 
RCC_CFGR2_PREDIV1_DIV14


	)

150 
	#RCC_PREDIV1_Div15
 
RCC_CFGR2_PREDIV1_DIV15


	)

151 
	#RCC_PREDIV1_Div16
 
RCC_CFGR2_PREDIV1_DIV16


	)

153 
	#IS_RCC_PREDIV1
(
PREDIV1
Ë(((PREDIV1Ë=
RCC_PREDIV1_Div1
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div2
Ë|| \

	)

154 ((
PREDIV1
Ë=
RCC_PREDIV1_Div3
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div4
) || \

155 ((
PREDIV1
Ë=
RCC_PREDIV1_Div5
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div6
) || \

156 ((
PREDIV1
Ë=
RCC_PREDIV1_Div7
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div8
) || \

157 ((
PREDIV1
Ë=
RCC_PREDIV1_Div9
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div10
) || \

158 ((
PREDIV1
Ë=
RCC_PREDIV1_Div11
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div12
) || \

159 ((
PREDIV1
Ë=
RCC_PREDIV1_Div13
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div14
) || \

160 ((
PREDIV1
Ë=
RCC_PREDIV1_Div15
Ë|| ((PREDIV1Ë=
RCC_PREDIV1_Div16
))

169 
	#RCC_SYSCLKSour˚_HSI
 
RCC_CFGR_SW_HSI


	)

170 
	#RCC_SYSCLKSour˚_HSE
 
RCC_CFGR_SW_HSE


	)

171 
	#RCC_SYSCLKSour˚_PLLCLK
 
RCC_CFGR_SW_PLL


	)

172 
	#IS_RCC_SYSCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_SYSCLKSour˚_HSI
Ë|| \

	)

173 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_HSE
) || \

174 ((
SOURCE
Ë=
RCC_SYSCLKSour˚_PLLCLK
))

183 
	#RCC_SYSCLK_Div1
 
RCC_CFGR_HPRE_DIV1


	)

184 
	#RCC_SYSCLK_Div2
 
RCC_CFGR_HPRE_DIV2


	)

185 
	#RCC_SYSCLK_Div4
 
RCC_CFGR_HPRE_DIV4


	)

186 
	#RCC_SYSCLK_Div8
 
RCC_CFGR_HPRE_DIV8


	)

187 
	#RCC_SYSCLK_Div16
 
RCC_CFGR_HPRE_DIV16


	)

188 
	#RCC_SYSCLK_Div64
 
RCC_CFGR_HPRE_DIV64


	)

189 
	#RCC_SYSCLK_Div128
 
RCC_CFGR_HPRE_DIV128


	)

190 
	#RCC_SYSCLK_Div256
 
RCC_CFGR_HPRE_DIV256


	)

191 
	#RCC_SYSCLK_Div512
 
RCC_CFGR_HPRE_DIV512


	)

192 
	#IS_RCC_HCLK
(
HCLK
Ë(((HCLKË=
RCC_SYSCLK_Div1
Ë|| ((HCLKË=
RCC_SYSCLK_Div2
Ë|| \

	)

193 ((
HCLK
Ë=
RCC_SYSCLK_Div4
Ë|| ((HCLKË=
RCC_SYSCLK_Div8
) || \

194 ((
HCLK
Ë=
RCC_SYSCLK_Div16
Ë|| ((HCLKË=
RCC_SYSCLK_Div64
) || \

195 ((
HCLK
Ë=
RCC_SYSCLK_Div128
Ë|| ((HCLKË=
RCC_SYSCLK_Div256
) || \

196 ((
HCLK
Ë=
RCC_SYSCLK_Div512
))

205 
	#RCC_HCLK_Div1
 ((
uöt32_t
)0x00000000)

	)

206 
	#RCC_HCLK_Div2
 ((
uöt32_t
)0x00000400)

	)

207 
	#RCC_HCLK_Div4
 ((
uöt32_t
)0x00000500)

	)

208 
	#RCC_HCLK_Div8
 ((
uöt32_t
)0x00000600)

	)

209 
	#RCC_HCLK_Div16
 ((
uöt32_t
)0x00000700)

	)

210 
	#IS_RCC_PCLK
(
PCLK
Ë(((PCLKË=
RCC_HCLK_Div1
Ë|| ((PCLKË=
RCC_HCLK_Div2
Ë|| \

	)

211 ((
PCLK
Ë=
RCC_HCLK_Div4
Ë|| ((PCLKË=
RCC_HCLK_Div8
) || \

212 ((
PCLK
Ë=
RCC_HCLK_Div16
))

222 
	#RCC_ADC12PLLCLK_OFF
 ((
uöt32_t
)0x00000000)

	)

223 
	#RCC_ADC12PLLCLK_Div1
 ((
uöt32_t
)0x00000100)

	)

224 
	#RCC_ADC12PLLCLK_Div2
 ((
uöt32_t
)0x00000110)

	)

225 
	#RCC_ADC12PLLCLK_Div4
 ((
uöt32_t
)0x00000120)

	)

226 
	#RCC_ADC12PLLCLK_Div6
 ((
uöt32_t
)0x00000130)

	)

227 
	#RCC_ADC12PLLCLK_Div8
 ((
uöt32_t
)0x00000140)

	)

228 
	#RCC_ADC12PLLCLK_Div10
 ((
uöt32_t
)0x00000150)

	)

229 
	#RCC_ADC12PLLCLK_Div12
 ((
uöt32_t
)0x00000160)

	)

230 
	#RCC_ADC12PLLCLK_Div16
 ((
uöt32_t
)0x00000170)

	)

231 
	#RCC_ADC12PLLCLK_Div32
 ((
uöt32_t
)0x00000180)

	)

232 
	#RCC_ADC12PLLCLK_Div64
 ((
uöt32_t
)0x00000190)

	)

233 
	#RCC_ADC12PLLCLK_Div128
 ((
uöt32_t
)0x000001A0)

	)

234 
	#RCC_ADC12PLLCLK_Div256
 ((
uöt32_t
)0x000001B0)

	)

237 
	#RCC_ADC34PLLCLK_OFF
 ((
uöt32_t
)0x10000000)

	)

238 
	#RCC_ADC34PLLCLK_Div1
 ((
uöt32_t
)0x10002000)

	)

239 
	#RCC_ADC34PLLCLK_Div2
 ((
uöt32_t
)0x10002200)

	)

240 
	#RCC_ADC34PLLCLK_Div4
 ((
uöt32_t
)0x10002400)

	)

241 
	#RCC_ADC34PLLCLK_Div6
 ((
uöt32_t
)0x10002600)

	)

242 
	#RCC_ADC34PLLCLK_Div8
 ((
uöt32_t
)0x10002800)

	)

243 
	#RCC_ADC34PLLCLK_Div10
 ((
uöt32_t
)0x10002A00)

	)

244 
	#RCC_ADC34PLLCLK_Div12
 ((
uöt32_t
)0x10002C00)

	)

245 
	#RCC_ADC34PLLCLK_Div16
 ((
uöt32_t
)0x10002E00)

	)

246 
	#RCC_ADC34PLLCLK_Div32
 ((
uöt32_t
)0x10003000)

	)

247 
	#RCC_ADC34PLLCLK_Div64
 ((
uöt32_t
)0x10003200)

	)

248 
	#RCC_ADC34PLLCLK_Div128
 ((
uöt32_t
)0x10003400)

	)

249 
	#RCC_ADC34PLLCLK_Div256
 ((
uöt32_t
)0x10003600)

	)

251 
	#IS_RCC_ADCCLK
(
ADCCLK
Ë(((ADCCLKË=
RCC_ADC12PLLCLK_OFF
Ë|| ((ADCCLKË=
RCC_ADC12PLLCLK_Div1
Ë|| \

	)

252 ((
ADCCLK
Ë=
RCC_ADC12PLLCLK_Div2
Ë|| ((ADCCLKË=
RCC_ADC12PLLCLK_Div4
) || \

253 ((
ADCCLK
Ë=
RCC_ADC12PLLCLK_Div6
Ë|| ((ADCCLKË=
RCC_ADC12PLLCLK_Div8
) || \

254 ((
ADCCLK
Ë=
RCC_ADC12PLLCLK_Div10
Ë|| ((ADCCLKË=
RCC_ADC12PLLCLK_Div12
) || \

255 ((
ADCCLK
Ë=
RCC_ADC12PLLCLK_Div16
Ë|| ((ADCCLKË=
RCC_ADC12PLLCLK_Div32
) || \

256 ((
ADCCLK
Ë=
RCC_ADC12PLLCLK_Div64
Ë|| ((ADCCLKË=
RCC_ADC12PLLCLK_Div128
) || \

257 ((
ADCCLK
Ë=
RCC_ADC12PLLCLK_Div256
Ë|| ((ADCCLKË=
RCC_ADC34PLLCLK_OFF
) || \

258 ((
ADCCLK
Ë=
RCC_ADC34PLLCLK_Div1
Ë|| ((ADCCLKË=
RCC_ADC34PLLCLK_Div2
) || \

259 ((
ADCCLK
Ë=
RCC_ADC34PLLCLK_Div4
Ë|| ((ADCCLKË=
RCC_ADC34PLLCLK_Div6
) || \

260 ((
ADCCLK
Ë=
RCC_ADC34PLLCLK_Div8
Ë|| ((ADCCLKË=
RCC_ADC34PLLCLK_Div10
) || \

261 ((
ADCCLK
Ë=
RCC_ADC34PLLCLK_Div12
Ë|| ((ADCCLKË=
RCC_ADC34PLLCLK_Div16
) || \

262 ((
ADCCLK
Ë=
RCC_ADC34PLLCLK_Div32
Ë|| ((ADCCLKË=
RCC_ADC34PLLCLK_Div64
) || \

263 ((
ADCCLK
Ë=
RCC_ADC34PLLCLK_Div128
Ë|| ((ADCCLKË=
RCC_ADC34PLLCLK_Div256
))

273 
	#RCC_TIM1CLK_HCLK
 ((
uöt32_t
)0x00000000)

	)

274 
	#RCC_TIM1CLK_PLLCLK
 
RCC_CFGR3_TIM1SW


	)

276 
	#RCC_TIM8CLK_HCLK
 ((
uöt32_t
)0x10000000)

	)

277 
	#RCC_TIM8CLK_PLLCLK
 ((
uöt32_t
)0x10000200)

	)

279 
	#IS_RCC_TIMCLK
(
TIMCLK
Ë(((TIMCLKË=
RCC_TIM1CLK_HCLK
Ë|| ((TIMCLKË=
RCC_TIM1CLK_PLLCLK
Ë|| \

	)

280 ((
TIMCLK
Ë=
RCC_TIM8CLK_HCLK
Ë|| ((TIMCLKË=
RCC_TIM8CLK_PLLCLK
))

290 
	#RCC_I2C1CLK_HSI
 ((
uöt32_t
)0x00000000)

	)

291 
	#RCC_I2C1CLK_SYSCLK
 
RCC_CFGR3_I2C1SW


	)

293 
	#RCC_I2C2CLK_HSI
 ((
uöt32_t
)0x10000000)

	)

294 
	#RCC_I2C2CLK_SYSCLK
 ((
uöt32_t
)0x10000020)

	)

296 
	#IS_RCC_I2CCLK
(
I2CCLK
Ë(((I2CCLKË=
RCC_I2C1CLK_HSI
Ë|| ((I2CCLKË=
RCC_I2C1CLK_SYSCLK
Ë|| \

	)

297 ((
I2CCLK
Ë=
RCC_I2C2CLK_HSI
Ë|| ((I2CCLKË=
RCC_I2C2CLK_SYSCLK
))

307 
	#RCC_USART1CLK_PCLK
 ((
uöt32_t
)0x10000000)

	)

308 
	#RCC_USART1CLK_SYSCLK
 ((
uöt32_t
)0x10000001)

	)

309 
	#RCC_USART1CLK_LSE
 ((
uöt32_t
)0x10000002)

	)

310 
	#RCC_USART1CLK_HSI
 ((
uöt32_t
)0x10000003)

	)

312 
	#RCC_USART2CLK_PCLK
 ((
uöt32_t
)0x20000000)

	)

313 
	#RCC_USART2CLK_SYSCLK
 ((
uöt32_t
)0x20010000)

	)

314 
	#RCC_USART2CLK_LSE
 ((
uöt32_t
)0x20020000)

	)

315 
	#RCC_USART2CLK_HSI
 ((
uöt32_t
)0x20030000)

	)

317 
	#RCC_USART3CLK_PCLK
 ((
uöt32_t
)0x30000000)

	)

318 
	#RCC_USART3CLK_SYSCLK
 ((
uöt32_t
)0x30040000)

	)

319 
	#RCC_USART3CLK_LSE
 ((
uöt32_t
)0x30080000)

	)

320 
	#RCC_USART3CLK_HSI
 ((
uöt32_t
)0x300C0000)

	)

322 
	#RCC_UART4CLK_PCLK
 ((
uöt32_t
)0x40000000)

	)

323 
	#RCC_UART4CLK_SYSCLK
 ((
uöt32_t
)0x40100000)

	)

324 
	#RCC_UART4CLK_LSE
 ((
uöt32_t
)0x40200000)

	)

325 
	#RCC_UART4CLK_HSI
 ((
uöt32_t
)0x40300000)

	)

327 
	#RCC_UART5CLK_PCLK
 ((
uöt32_t
)0x50000000)

	)

328 
	#RCC_UART5CLK_SYSCLK
 ((
uöt32_t
)0x50400000)

	)

329 
	#RCC_UART5CLK_LSE
 ((
uöt32_t
)0x50800000)

	)

330 
	#RCC_UART5CLK_HSI
 ((
uöt32_t
)0x50C00000)

	)

332 
	#IS_RCC_USARTCLK
(
USARTCLK
Ë(((USARTCLKË=
RCC_USART1CLK_PCLK
Ë|| ((USARTCLKË=
RCC_USART1CLK_SYSCLK
Ë|| \

	)

333 ((
USARTCLK
Ë=
RCC_USART1CLK_LSE
Ë|| ((USARTCLKË=
RCC_USART1CLK_HSI
) ||\

334 ((
USARTCLK
Ë=
RCC_USART2CLK_PCLK
Ë|| ((USARTCLKË=
RCC_USART2CLK_SYSCLK
) || \

335 ((
USARTCLK
Ë=
RCC_USART2CLK_LSE
Ë|| ((USARTCLKË=
RCC_USART2CLK_HSI
) || \

336 ((
USARTCLK
Ë=
RCC_USART3CLK_PCLK
Ë|| ((USARTCLKË=
RCC_USART3CLK_SYSCLK
) || \

337 ((
USARTCLK
Ë=
RCC_USART3CLK_LSE
Ë|| ((USARTCLKË=
RCC_USART3CLK_HSI
) || \

338 ((
USARTCLK
Ë=
RCC_UART4CLK_PCLK
Ë|| ((USARTCLKË=
RCC_UART4CLK_SYSCLK
) || \

339 ((
USARTCLK
Ë=
RCC_UART4CLK_LSE
Ë|| ((USARTCLKË=
RCC_UART4CLK_HSI
) || \

340 ((
USARTCLK
Ë=
RCC_UART5CLK_PCLK
Ë|| ((USARTCLKË=
RCC_UART5CLK_SYSCLK
) || \

341 ((
USARTCLK
Ë=
RCC_UART5CLK_LSE
Ë|| ((USARTCLKË=
RCC_UART5CLK_HSI
))

351 
	#RCC_IT_LSIRDY
 ((
uöt8_t
)0x01)

	)

352 
	#RCC_IT_LSERDY
 ((
uöt8_t
)0x02)

	)

353 
	#RCC_IT_HSIRDY
 ((
uöt8_t
)0x04)

	)

354 
	#RCC_IT_HSERDY
 ((
uöt8_t
)0x08)

	)

355 
	#RCC_IT_PLLRDY
 ((
uöt8_t
)0x10)

	)

356 
	#RCC_IT_CSS
 ((
uöt8_t
)0x80)

	)

358 
	#IS_RCC_IT
(
IT
Ë((((ITË& (
uöt8_t
)0xC0Ë=0x00Ë&& ((ITË!0x00))

	)

360 
	#IS_RCC_GET_IT
(
IT
Ë(((ITË=
RCC_IT_LSIRDY
Ë|| ((ITË=
RCC_IT_LSERDY
Ë|| \

	)

361 ((
IT
Ë=
RCC_IT_HSIRDY
Ë|| ((ITË=
RCC_IT_HSERDY
) || \

362 ((
IT
Ë=
RCC_IT_PLLRDY
Ë|| ((ITË=
RCC_IT_CSS
))

365 
	#IS_RCC_CLEAR_IT
(
IT
Ë((((ITË& (
uöt8_t
)0x40Ë=0x00Ë&& ((ITË!0x00))

	)

375 
	#RCC_LSE_OFF
 ((
uöt32_t
)0x00000000)

	)

376 
	#RCC_LSE_ON
 
RCC_BDCR_LSEON


	)

377 
	#RCC_LSE_By∑ss
 ((
uöt32_t
)(
RCC_BDCR_LSEON
 | 
RCC_BDCR_LSEBYP
))

	)

378 
	#IS_RCC_LSE
(
LSE
Ë(((LSEË=
RCC_LSE_OFF
Ë|| ((LSEË=
RCC_LSE_ON
Ë|| \

	)

379 ((
LSE
Ë=
RCC_LSE_By∑ss
))

388 
	#RCC_RTCCLKSour˚_LSE
 
RCC_BDCR_RTCSEL_LSE


	)

389 
	#RCC_RTCCLKSour˚_LSI
 
RCC_BDCR_RTCSEL_LSI


	)

390 
	#RCC_RTCCLKSour˚_HSE_Div32
 
RCC_BDCR_RTCSEL_HSE


	)

392 
	#IS_RCC_RTCCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_RTCCLKSour˚_LSE
Ë|| \

	)

393 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_LSI
) || \

394 ((
SOURCE
Ë=
RCC_RTCCLKSour˚_HSE_Div32
))

402 
	#RCC_I2S2CLKSour˚_SYSCLK
 ((
uöt8_t
)0x00)

	)

403 
	#RCC_I2S2CLKSour˚_Ext
 ((
uöt8_t
)0x01)

	)

405 
	#IS_RCC_I2SCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_I2S2CLKSour˚_SYSCLK
Ë|| ((SOURCEË=
RCC_I2S2CLKSour˚_Ext
))

	)

411 
	#RCC_LSEDrive_Low
 ((
uöt32_t
)0x00000000)

	)

412 
	#RCC_LSEDrive_MediumLow
 
RCC_BDCR_LSEDRV_0


	)

413 
	#RCC_LSEDrive_MediumHigh
 
RCC_BDCR_LSEDRV_1


	)

414 
	#RCC_LSEDrive_High
 
RCC_BDCR_LSEDRV


	)

415 
	#IS_RCC_LSE_DRIVE
(
DRIVE
Ë(((DRIVEË=
RCC_LSEDrive_Low
Ë|| ((DRIVEË=
RCC_LSEDrive_MediumLow
Ë|| \

	)

416 ((
DRIVE
Ë=
RCC_LSEDrive_MediumHigh
Ë|| ((DRIVEË=
RCC_LSEDrive_High
))

425 
	#RCC_AHBPîùh_ADC34
 
RCC_AHBENR_ADC34EN


	)

426 
	#RCC_AHBPîùh_ADC12
 
RCC_AHBENR_ADC12EN


	)

427 
	#RCC_AHBPîùh_GPIOA
 
RCC_AHBENR_GPIOAEN


	)

428 
	#RCC_AHBPîùh_GPIOB
 
RCC_AHBENR_GPIOBEN


	)

429 
	#RCC_AHBPîùh_GPIOC
 
RCC_AHBENR_GPIOCEN


	)

430 
	#RCC_AHBPîùh_GPIOD
 
RCC_AHBENR_GPIODEN


	)

431 
	#RCC_AHBPîùh_GPIOE
 
RCC_AHBENR_GPIOEEN


	)

432 
	#RCC_AHBPîùh_GPIOF
 
RCC_AHBENR_GPIOFEN


	)

433 
	#RCC_AHBPîùh_TS
 
RCC_AHBENR_TSEN


	)

434 
	#RCC_AHBPîùh_CRC
 
RCC_AHBENR_CRCEN


	)

435 
	#RCC_AHBPîùh_FLITF
 
RCC_AHBENR_FLITFEN


	)

436 
	#RCC_AHBPîùh_SRAM
 
RCC_AHBENR_SRAMEN


	)

437 
	#RCC_AHBPîùh_DMA2
 
RCC_AHBENR_DMA2EN


	)

438 
	#RCC_AHBPîùh_DMA1
 
RCC_AHBENR_DMA1EN


	)

440 
	#IS_RCC_AHB_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xCE81FFA8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

441 
	#IS_RCC_AHB_RST_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xCE81FFFFË=0x00Ë&& ((PERIPHË!0x00))

	)

451 
	#RCC_APB2Pîùh_SYSCFG
 ((
uöt32_t
)0x00000001)

	)

452 
	#RCC_APB2Pîùh_TIM1
 ((
uöt32_t
)0x00000800)

	)

453 
	#RCC_APB2Pîùh_SPI1
 ((
uöt32_t
)0x00001000)

	)

454 
	#RCC_APB2Pîùh_TIM8
 ((
uöt32_t
)0x00002000)

	)

455 
	#RCC_APB2Pîùh_USART1
 ((
uöt32_t
)0x00004000)

	)

456 
	#RCC_APB2Pîùh_TIM15
 ((
uöt32_t
)0x00010000)

	)

457 
	#RCC_APB2Pîùh_TIM16
 ((
uöt32_t
)0x00020000)

	)

458 
	#RCC_APB2Pîùh_TIM17
 ((
uöt32_t
)0x00040000)

	)

460 
	#IS_RCC_APB2_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xFFF887FEË=0x00Ë&& ((PERIPHË!0x00))

	)

469 
	#RCC_APB1Pîùh_TIM2
 ((
uöt32_t
)0x00000001)

	)

470 
	#RCC_APB1Pîùh_TIM3
 ((
uöt32_t
)0x00000002)

	)

471 
	#RCC_APB1Pîùh_TIM4
 ((
uöt32_t
)0x00000004)

	)

472 
	#RCC_APB1Pîùh_TIM6
 ((
uöt32_t
)0x00000010)

	)

473 
	#RCC_APB1Pîùh_TIM7
 ((
uöt32_t
)0x00000020)

	)

474 
	#RCC_APB1Pîùh_WWDG
 ((
uöt32_t
)0x00000800)

	)

475 
	#RCC_APB1Pîùh_SPI2
 ((
uöt32_t
)0x00004000)

	)

476 
	#RCC_APB1Pîùh_SPI3
 ((
uöt32_t
)0x00008000)

	)

477 
	#RCC_APB1Pîùh_USART2
 ((
uöt32_t
)0x00020000)

	)

478 
	#RCC_APB1Pîùh_USART3
 ((
uöt32_t
)0x00040000)

	)

479 
	#RCC_APB1Pîùh_UART4
 ((
uöt32_t
)0x00080000)

	)

480 
	#RCC_APB1Pîùh_UART5
 ((
uöt32_t
)0x00100000)

	)

481 
	#RCC_APB1Pîùh_I2C1
 ((
uöt32_t
)0x00200000)

	)

482 
	#RCC_APB1Pîùh_I2C2
 ((
uöt32_t
)0x00400000)

	)

483 
	#RCC_APB1Pîùh_USB
 ((
uöt32_t
)0x00800000)

	)

484 
	#RCC_APB1Pîùh_CAN1
 ((
uöt32_t
)0x02000000)

	)

485 
	#RCC_APB1Pîùh_PWR
 ((
uöt32_t
)0x10000000)

	)

486 
	#RCC_APB1Pîùh_DAC
 ((
uöt32_t
)0x20000000)

	)

488 
	#IS_RCC_APB1_PERIPH
(
PERIPH
Ë((((PERIPHË& 0xCD0137C8Ë=0x00Ë&& ((PERIPHË!0x00))

	)

497 
	#RCC_MCOSour˚_NoClock
 ((
uöt8_t
)0x00)

	)

498 
	#RCC_MCOSour˚_LSI
 ((
uöt8_t
)0x02)

	)

499 
	#RCC_MCOSour˚_LSE
 ((
uöt8_t
)0x03)

	)

500 
	#RCC_MCOSour˚_SYSCLK
 ((
uöt8_t
)0x04)

	)

501 
	#RCC_MCOSour˚_HSI
 ((
uöt8_t
)0x05)

	)

502 
	#RCC_MCOSour˚_HSE
 ((
uöt8_t
)0x06)

	)

503 
	#RCC_MCOSour˚_PLLCLK_Div2
 ((
uöt8_t
)0x07)

	)

505 
	#IS_RCC_MCO_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_MCOSour˚_NoClock
Ë||((SOURCEË=
RCC_MCOSour˚_SYSCLK
Ë||\

	)

506 ((
SOURCE
Ë=
RCC_MCOSour˚_HSI
Ë|| ((SOURCEË=
RCC_MCOSour˚_HSE
) || \

507 ((
SOURCE
Ë=
RCC_MCOSour˚_LSI
Ë|| ((SOURCEË=
RCC_MCOSour˚_LSE
) || \

508 ((
SOURCE
Ë=
RCC_MCOSour˚_PLLCLK_Div2
))

517 
	#RCC_USBCLKSour˚_PLLCLK_1Div5
 ((
uöt8_t
)0x00)

	)

518 
	#RCC_USBCLKSour˚_PLLCLK_Div1
 ((
uöt8_t
)0x01)

	)

520 
	#IS_RCC_USBCLK_SOURCE
(
SOURCE
Ë(((SOURCEË=
RCC_USBCLKSour˚_PLLCLK_1Div5
Ë|| \

	)

521 ((
SOURCE
Ë=
RCC_USBCLKSour˚_PLLCLK_Div1
))

529 
	#RCC_FLAG_HSIRDY
 ((
uöt8_t
)0x01)

	)

530 
	#RCC_FLAG_HSERDY
 ((
uöt8_t
)0x11)

	)

531 
	#RCC_FLAG_PLLRDY
 ((
uöt8_t
)0x19)

	)

532 
	#RCC_FLAG_MCOF
 ((
uöt8_t
)0x9C)

	)

533 
	#RCC_FLAG_LSERDY
 ((
uöt8_t
)0x21)

	)

534 
	#RCC_FLAG_LSIRDY
 ((
uöt8_t
)0x41)

	)

535 
	#RCC_FLAG_OBLRST
 ((
uöt8_t
)0x59)

	)

536 
	#RCC_FLAG_PINRST
 ((
uöt8_t
)0x5A)

	)

537 
	#RCC_FLAG_PORRST
 ((
uöt8_t
)0x5B)

	)

538 
	#RCC_FLAG_SFTRST
 ((
uöt8_t
)0x5C)

	)

539 
	#RCC_FLAG_IWDGRST
 ((
uöt8_t
)0x5D)

	)

540 
	#RCC_FLAG_WWDGRST
 ((
uöt8_t
)0x5E)

	)

541 
	#RCC_FLAG_LPWRRST
 ((
uöt8_t
)0x5F)

	)

543 
	#IS_RCC_FLAG
(
FLAG
Ë(((FLAGË=
RCC_FLAG_HSIRDY
Ë|| ((FLAGË=
RCC_FLAG_HSERDY
Ë|| \

	)

544 ((
FLAG
Ë=
RCC_FLAG_PLLRDY
Ë|| ((FLAGË=
RCC_FLAG_LSERDY
) || \

545 ((
FLAG
Ë=
RCC_FLAG_LSIRDY
Ë|| ((FLAGË=
RCC_FLAG_OBLRST
) || \

546 ((
FLAG
Ë=
RCC_FLAG_PINRST
Ë|| ((FLAGË=
RCC_FLAG_PORRST
) || \

547 ((
FLAG
Ë=
RCC_FLAG_SFTRST
Ë|| ((FLAGË=
RCC_FLAG_IWDGRST
)|| \

548 ((
FLAG
Ë=
RCC_FLAG_WWDGRST
)|| ((FLAGË=
RCC_FLAG_LPWRRST
)|| \

549 ((
FLAG
Ë=
RCC_FLAG_MCOF
))

551 
	#IS_RCC_HSI_CALIBRATION_VALUE
(
VALUE
Ë((VALUEË<0x1F)

	)

565 
RCC_DeInô
();

568 
RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
);

569 
Eº‹Sètus
 
RCC_WaôF‹HSESèπUp
();

570 
RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
);

571 
RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

572 
RCC_LSEC⁄fig
(
uöt32_t
 
RCC_LSE
);

573 
RCC_LSEDriveC⁄fig
(
uöt32_t
 
RCC_LSEDrive
);

574 
RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

575 
RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
);

576 
RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

577 
RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Div
);

578 
RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

579 
RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCOSour˚
);

582 
RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
);

583 
uöt8_t
 
RCC_GëSYSCLKSour˚
();

584 
RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
);

585 
RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
);

586 
RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
);

587 
RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
);

590 
RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PLLCLK
);

591 
RCC_I2CCLKC⁄fig
(
uöt32_t
 
RCC_I2CCLK
);

592 
RCC_TIMCLKC⁄fig
(
uöt32_t
 
RCC_TIMCLK
);

593 
RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
);

594 
RCC_USARTCLKC⁄fig
(
uöt32_t
 
RCC_USARTCLK
);

595 
RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
);

597 
RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
);

598 
RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

599 
RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

601 
RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

602 
RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

603 
RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

605 
RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

606 
RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

607 
RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

610 
RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

611 
FœgSètus
 
RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
);

612 
RCC_CÀ¨Fœg
();

613 
ITSètus
 
RCC_GëITSètus
(
uöt8_t
 
RCC_IT
);

614 
RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
);

616 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h

30 #i‚de‡
__STM32F30x_RTC_H


31 
	#__STM32F30x_RTC_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

55 
uöt32_t
 
RTC_HourF‹m©
;

58 
uöt32_t
 
RTC_AsynchPªdiv
;

61 
uöt32_t
 
RTC_SynchPªdiv
;

63 }
	tRTC_InôTy≥Def
;

70 
uöt8_t
 
RTC_Hours
;

75 
uöt8_t
 
RTC_Möuãs
;

78 
uöt8_t
 
RTC_Sec⁄ds
;

81 
uöt8_t
 
RTC_H12
;

83 }
	tRTC_TimeTy≥Def
;

90 
uöt8_t
 
RTC_WìkDay
;

93 
uöt8_t
 
RTC_M⁄th
;

96 
uöt8_t
 
RTC_D©e
;

99 
uöt8_t
 
RTC_Yór
;

101 }
	tRTC_D©eTy≥Def
;

108 
RTC_TimeTy≥Def
 
RTC_AœrmTime
;

110 
uöt32_t
 
RTC_AœrmMask
;

113 
uöt32_t
 
RTC_AœrmD©eWìkDaySñ
;

116 
uöt8_t
 
RTC_AœrmD©eWìkDay
;

121 }
	tRTC_AœrmTy≥Def
;

133 
	#RTC_HourF‹m©_24
 ((
uöt32_t
)0x00000000)

	)

134 
	#RTC_HourF‹m©_12
 ((
uöt32_t
)0x00000040)

	)

135 
	#IS_RTC_HOUR_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_HourF‹m©_12
Ë|| \

	)

136 ((
FORMAT
Ë=
RTC_HourF‹m©_24
))

144 
	#IS_RTC_ASYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7F)

	)

154 
	#IS_RTC_SYNCH_PREDIV
(
PREDIV
Ë((PREDIVË<0x7FFF)

	)

163 
	#IS_RTC_HOUR12
(
HOUR
Ë(((HOURË> 0Ë&& ((HOURË<12))

	)

164 
	#IS_RTC_HOUR24
(
HOUR
Ë((HOURË<23)

	)

165 
	#IS_RTC_MINUTES
(
MINUTES
Ë((MINUTESË<59)

	)

166 
	#IS_RTC_SECONDS
(
SECONDS
Ë((SECONDSË<59)

	)

175 
	#RTC_H12_AM
 ((
uöt8_t
)0x00)

	)

176 
	#RTC_H12_PM
 ((
uöt8_t
)0x40)

	)

177 
	#IS_RTC_H12
(
PM
Ë(((PMË=
RTC_H12_AM
Ë|| ((PMË=
RTC_H12_PM
))

	)

186 
	#IS_RTC_YEAR
(
YEAR
Ë((YEARË<99)

	)

197 
	#RTC_M⁄th_J™u¨y
 ((
uöt8_t
)0x01)

	)

198 
	#RTC_M⁄th_Febru¨y
 ((
uöt8_t
)0x02)

	)

199 
	#RTC_M⁄th_M¨ch
 ((
uöt8_t
)0x03)

	)

200 
	#RTC_M⁄th_A¥û
 ((
uöt8_t
)0x04)

	)

201 
	#RTC_M⁄th_May
 ((
uöt8_t
)0x05)

	)

202 
	#RTC_M⁄th_Ju√
 ((
uöt8_t
)0x06)

	)

203 
	#RTC_M⁄th_July
 ((
uöt8_t
)0x07)

	)

204 
	#RTC_M⁄th_Augu°
 ((
uöt8_t
)0x08)

	)

205 
	#RTC_M⁄th_Sïãmbî
 ((
uöt8_t
)0x09)

	)

206 
	#RTC_M⁄th_O˘obî
 ((
uöt8_t
)0x10)

	)

207 
	#RTC_M⁄th_Novembî
 ((
uöt8_t
)0x11)

	)

208 
	#RTC_M⁄th_De˚mbî
 ((
uöt8_t
)0x12)

	)

209 
	#IS_RTC_MONTH
(
MONTH
Ë(((MONTHË>1Ë&& ((MONTHË<12))

	)

210 
	#IS_RTC_DATE
(
DATE
Ë(((DATEË>1Ë&& ((DATEË<31))

	)

220 
	#RTC_Wìkday_M⁄day
 ((
uöt8_t
)0x01)

	)

221 
	#RTC_Wìkday_Tuesday
 ((
uöt8_t
)0x02)

	)

222 
	#RTC_Wìkday_Wed√sday
 ((
uöt8_t
)0x03)

	)

223 
	#RTC_Wìkday_Thursday
 ((
uöt8_t
)0x04)

	)

224 
	#RTC_Wìkday_Friday
 ((
uöt8_t
)0x05)

	)

225 
	#RTC_Wìkday_S©urday
 ((
uöt8_t
)0x06)

	)

226 
	#RTC_Wìkday_Sunday
 ((
uöt8_t
)0x07)

	)

227 
	#IS_RTC_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
Ë|| \

	)

228 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

229 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

230 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

231 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

232 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

233 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

242 
	#IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
DATE
Ë(((DATEË> 0Ë&& ((DATEË<31))

	)

243 
	#IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
WEEKDAY
Ë(((WEEKDAYË=
RTC_Wìkday_M⁄day
Ë|| \

	)

244 ((
WEEKDAY
Ë=
RTC_Wìkday_Tuesday
) || \

245 ((
WEEKDAY
Ë=
RTC_Wìkday_Wed√sday
) || \

246 ((
WEEKDAY
Ë=
RTC_Wìkday_Thursday
) || \

247 ((
WEEKDAY
Ë=
RTC_Wìkday_Friday
) || \

248 ((
WEEKDAY
Ë=
RTC_Wìkday_S©urday
) || \

249 ((
WEEKDAY
Ë=
RTC_Wìkday_Sunday
))

259 
	#RTC_AœrmD©eWìkDaySñ_D©e
 ((
uöt32_t
)0x00000000)

	)

260 
	#RTC_AœrmD©eWìkDaySñ_WìkDay
 ((
uöt32_t
)0x40000000)

	)

262 
	#IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
SEL
Ë(((SELË=
RTC_AœrmD©eWìkDaySñ_D©e
Ë|| \

	)

263 ((
SEL
Ë=
RTC_AœrmD©eWìkDaySñ_WìkDay
))

273 
	#RTC_AœrmMask_N⁄e
 ((
uöt32_t
)0x00000000)

	)

274 
	#RTC_AœrmMask_D©eWìkDay
 ((
uöt32_t
)0x80000000)

	)

275 
	#RTC_AœrmMask_Hours
 ((
uöt32_t
)0x00800000)

	)

276 
	#RTC_AœrmMask_Möuãs
 ((
uöt32_t
)0x00008000)

	)

277 
	#RTC_AœrmMask_Sec⁄ds
 ((
uöt32_t
)0x00000080)

	)

278 
	#RTC_AœrmMask_AŒ
 ((
uöt32_t
)0x80808080)

	)

279 
	#IS_ALARM_MASK
(
MASK
Ë(((MASKË& 0x7F7F7F7FË=(
uöt32_t
)
RESET
)

	)

288 
	#RTC_Aœrm_A
 ((
uöt32_t
)0x00000100)

	)

289 
	#RTC_Aœrm_B
 ((
uöt32_t
)0x00000200)

	)

290 
	#IS_RTC_ALARM
(
ALARM
Ë(((ALARMË=
RTC_Aœrm_A
Ë|| ((ALARMË=
RTC_Aœrm_B
))

	)

291 
	#IS_RTC_CMD_ALARM
(
ALARM
Ë(((ALARMË& (
RTC_Aœrm_A
 | 
RTC_Aœrm_B
)Ë!(
uöt32_t
)
RESET
)

	)

300 
	#RTC_AœrmSubSec⁄dMask_AŒ
 ((
uöt32_t
)0x00000000Ë

	)

303 
	#RTC_AœrmSubSec⁄dMask_SS14_1
 ((
uöt32_t
)0x01000000Ë

	)

305 
	#RTC_AœrmSubSec⁄dMask_SS14_2
 ((
uöt32_t
)0x02000000Ë

	)

307 
	#RTC_AœrmSubSec⁄dMask_SS14_3
 ((
uöt32_t
)0x03000000Ë

	)

309 
	#RTC_AœrmSubSec⁄dMask_SS14_4
 ((
uöt32_t
)0x04000000Ë

	)

311 
	#RTC_AœrmSubSec⁄dMask_SS14_5
 ((
uöt32_t
)0x05000000Ë

	)

313 
	#RTC_AœrmSubSec⁄dMask_SS14_6
 ((
uöt32_t
)0x06000000Ë

	)

315 
	#RTC_AœrmSubSec⁄dMask_SS14_7
 ((
uöt32_t
)0x07000000Ë

	)

317 
	#RTC_AœrmSubSec⁄dMask_SS14_8
 ((
uöt32_t
)0x08000000Ë

	)

319 
	#RTC_AœrmSubSec⁄dMask_SS14_9
 ((
uöt32_t
)0x09000000Ë

	)

321 
	#RTC_AœrmSubSec⁄dMask_SS14_10
 ((
uöt32_t
)0x0A000000Ë

	)

323 
	#RTC_AœrmSubSec⁄dMask_SS14_11
 ((
uöt32_t
)0x0B000000Ë

	)

325 
	#RTC_AœrmSubSec⁄dMask_SS14_12
 ((
uöt32_t
)0x0C000000Ë

	)

327 
	#RTC_AœrmSubSec⁄dMask_SS14_13
 ((
uöt32_t
)0x0D000000Ë

	)

329 
	#RTC_AœrmSubSec⁄dMask_SS14
 ((
uöt32_t
)0x0E000000Ë

	)

331 
	#RTC_AœrmSubSec⁄dMask_N⁄e
 ((
uöt32_t
)0x0F000000Ë

	)

333 
	#IS_RTC_ALARM_SUB_SECOND_MASK
(
MASK
Ë(((MASKË=
RTC_AœrmSubSec⁄dMask_AŒ
Ë|| \

	)

334 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_1
) || \

335 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_2
) || \

336 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_3
) || \

337 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_4
) || \

338 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_5
) || \

339 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_6
) || \

340 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_7
) || \

341 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_8
) || \

342 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_9
) || \

343 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_10
) || \

344 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_11
) || \

345 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_12
) || \

346 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14_13
) || \

347 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_SS14
) || \

348 ((
MASK
Ë=
RTC_AœrmSubSec⁄dMask_N⁄e
))

357 
	#IS_RTC_ALARM_SUB_SECOND_VALUE
(
VALUE
Ë((VALUEË<0x00007FFF)

	)

366 
	#RTC_WakeUpClock_RTCCLK_Div16
 ((
uöt32_t
)0x00000000)

	)

367 
	#RTC_WakeUpClock_RTCCLK_Div8
 ((
uöt32_t
)0x00000001)

	)

368 
	#RTC_WakeUpClock_RTCCLK_Div4
 ((
uöt32_t
)0x00000002)

	)

369 
	#RTC_WakeUpClock_RTCCLK_Div2
 ((
uöt32_t
)0x00000003)

	)

370 
	#RTC_WakeUpClock_CK_SPRE_16bôs
 ((
uöt32_t
)0x00000004)

	)

371 
	#RTC_WakeUpClock_CK_SPRE_17bôs
 ((
uöt32_t
)0x00000006)

	)

372 
	#IS_RTC_WAKEUP_CLOCK
(
CLOCK
Ë(((CLOCKË=
RTC_WakeUpClock_RTCCLK_Div16
Ë|| \

	)

373 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div8
) || \

374 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div4
) || \

375 ((
CLOCK
Ë=
RTC_WakeUpClock_RTCCLK_Div2
) || \

376 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_16bôs
) || \

377 ((
CLOCK
Ë=
RTC_WakeUpClock_CK_SPRE_17bôs
))

378 
	#IS_RTC_WAKEUP_COUNTER
(
COUNTER
Ë((COUNTERË<0xFFFF)

	)

386 
	#RTC_TimeSèmpEdge_Risög
 ((
uöt32_t
)0x00000000)

	)

387 
	#RTC_TimeSèmpEdge_FÆlög
 ((
uöt32_t
)0x00000008)

	)

388 
	#IS_RTC_TIMESTAMP_EDGE
(
EDGE
Ë(((EDGEË=
RTC_TimeSèmpEdge_Risög
Ë|| \

	)

389 ((
EDGE
Ë=
RTC_TimeSèmpEdge_FÆlög
))

397 
	#RTC_Ouçut_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

398 
	#RTC_Ouçut_AœrmA
 ((
uöt32_t
)0x00200000)

	)

399 
	#RTC_Ouçut_AœrmB
 ((
uöt32_t
)0x00400000)

	)

400 
	#RTC_Ouçut_WakeUp
 ((
uöt32_t
)0x00600000)

	)

402 
	#IS_RTC_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_Ouçut_DißbÀ
Ë|| \

	)

403 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmA
) || \

404 ((
OUTPUT
Ë=
RTC_Ouçut_AœrmB
) || \

405 ((
OUTPUT
Ë=
RTC_Ouçut_WakeUp
))

414 
	#RTC_OuçutPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

415 
	#RTC_OuçutPﬁ¨ôy_Low
 ((
uöt32_t
)0x00100000)

	)

416 
	#IS_RTC_OUTPUT_POL
(
POL
Ë(((POLË=
RTC_OuçutPﬁ¨ôy_High
Ë|| \

	)

417 ((
POL
Ë=
RTC_OuçutPﬁ¨ôy_Low
))

425 
	#RTC_CÆibSign_Posôive
 ((
uöt32_t
)0x00000000)

	)

426 
	#RTC_CÆibSign_Neg©ive
 ((
uöt32_t
)0x00000080)

	)

427 
	#IS_RTC_CALIB_SIGN
(
SIGN
Ë(((SIGNË=
RTC_CÆibSign_Posôive
Ë|| \

	)

428 ((
SIGN
Ë=
RTC_CÆibSign_Neg©ive
))

429 
	#IS_RTC_CALIB_VALUE
(
VALUE
Ë((VALUEË< 0x20)

	)

438 
	#RTC_CÆibOuçut_512Hz
 ((
uöt32_t
)0x00000000)

	)

439 
	#RTC_CÆibOuçut_1Hz
 ((
uöt32_t
)0x00080000)

	)

440 
	#IS_RTC_CALIB_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
RTC_CÆibOuçut_512Hz
Ë|| \

	)

441 ((
OUTPUT
Ë=
RTC_CÆibOuçut_1Hz
))

449 
	#RTC_SmoŸhCÆibPîiod_32£c
 ((
uöt32_t
)0x00000000Ë

	)

451 
	#RTC_SmoŸhCÆibPîiod_16£c
 ((
uöt32_t
)0x00002000Ë

	)

453 
	#RTC_SmoŸhCÆibPîiod_8£c
 ((
uöt32_t
)0x00004000Ë

	)

455 
	#IS_RTC_SMOOTH_CALIB_PERIOD
(
PERIOD
Ë(((PERIODË=
RTC_SmoŸhCÆibPîiod_32£c
Ë|| \

	)

456 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_16£c
) || \

457 ((
PERIOD
Ë=
RTC_SmoŸhCÆibPîiod_8£c
))

466 
	#RTC_SmoŸhCÆibPlusPul£s_Së
 ((
uöt32_t
)0x00008000Ë

	)

469 
	#RTC_SmoŸhCÆibPlusPul£s_Re£t
 ((
uöt32_t
)0x00000000Ë

	)

471 
	#IS_RTC_SMOOTH_CALIB_PLUS
(
PLUS
Ë(((PLUSË=
RTC_SmoŸhCÆibPlusPul£s_Së
Ë|| \

	)

472 ((
PLUS
Ë=
RTC_SmoŸhCÆibPlusPul£s_Re£t
))

481 
	#IS_RTC_SMOOTH_CALIB_MINUS
(
VALUE
Ë((VALUEË<0x000001FF)

	)

490 
	#RTC_DayLightSavög_SUB1H
 ((
uöt32_t
)0x00020000)

	)

491 
	#RTC_DayLightSavög_ADD1H
 ((
uöt32_t
)0x00010000)

	)

492 
	#IS_RTC_DAYLIGHT_SAVING
(
SAVE
Ë(((SAVEË=
RTC_DayLightSavög_SUB1H
Ë|| \

	)

493 ((
SAVE
Ë=
RTC_DayLightSavög_ADD1H
))

495 
	#RTC_St‹eO≥øti⁄_Re£t
 ((
uöt32_t
)0x00000000)

	)

496 
	#RTC_St‹eO≥øti⁄_Së
 ((
uöt32_t
)0x00040000)

	)

497 
	#IS_RTC_STORE_OPERATION
(
OPERATION
Ë(((OPERATIONË=
RTC_St‹eO≥øti⁄_Re£t
Ë|| \

	)

498 ((
OPERATION
Ë=
RTC_St‹eO≥øti⁄_Së
))

506 
	#RTC_Tam≥rTriggî_RisögEdge
 ((
uöt32_t
)0x00000000)

	)

507 
	#RTC_Tam≥rTriggî_FÆlögEdge
 ((
uöt32_t
)0x00000001)

	)

508 
	#RTC_Tam≥rTriggî_LowLevñ
 ((
uöt32_t
)0x00000000)

	)

509 
	#RTC_Tam≥rTriggî_HighLevñ
 ((
uöt32_t
)0x00000001)

	)

510 
	#IS_RTC_TAMPER_TRIGGER
(
TRIGGER
Ë(((TRIGGERË=
RTC_Tam≥rTriggî_RisögEdge
Ë|| \

	)

511 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_FÆlögEdge
) || \

512 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_LowLevñ
) || \

513 ((
TRIGGER
Ë=
RTC_Tam≥rTriggî_HighLevñ
))

522 
	#RTC_Tam≥rFûãr_DißbÀ
 ((
uöt32_t
)0x00000000Ë

	)

524 
	#RTC_Tam≥rFûãr_2Sam∂e
 ((
uöt32_t
)0x00000800Ë

	)

526 
	#RTC_Tam≥rFûãr_4Sam∂e
 ((
uöt32_t
)0x00001000Ë

	)

528 
	#RTC_Tam≥rFûãr_8Sam∂e
 ((
uöt32_t
)0x00001800Ë

	)

530 
	#IS_RTC_TAMPER_FILTER
(
FILTER
Ë(((FILTERË=
RTC_Tam≥rFûãr_DißbÀ
Ë|| \

	)

531 ((
FILTER
Ë=
RTC_Tam≥rFûãr_2Sam∂e
) || \

532 ((
FILTER
Ë=
RTC_Tam≥rFûãr_4Sam∂e
) || \

533 ((
FILTER
Ë=
RTC_Tam≥rFûãr_8Sam∂e
))

541 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
 ((
uöt32_t
)0x00000000Ë

	)

543 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
 ((
uöt32_t
)0x000000100Ë

	)

545 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
 ((
uöt32_t
)0x00000200Ë

	)

547 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
 ((
uöt32_t
)0x00000300Ë

	)

549 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
 ((
uöt32_t
)0x00000400Ë

	)

551 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
 ((
uöt32_t
)0x00000500Ë

	)

553 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
 ((
uöt32_t
)0x00000600Ë

	)

555 
	#RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
 ((
uöt32_t
)0x00000700Ë

	)

557 
	#IS_RTC_TAMPER_SAMPLING_FREQ
(
FREQ
Ë(((FREQË==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div32768
Ë|| \

	)

558 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div16384
) || \

559 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div8192
) || \

560 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div4096
) || \

561 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div2048
) || \

562 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div1024
) || \

563 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div512
) || \

564 ((
FREQ
Ë==
RTC_Tam≥rSam∂ögFªq_RTCCLK_Div256
))

573 
	#RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
 ((
uöt32_t
)0x00000000Ë

	)

575 
	#RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
 ((
uöt32_t
)0x00002000Ë

	)

577 
	#RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
 ((
uöt32_t
)0x00004000Ë

	)

579 
	#RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
 ((
uöt32_t
)0x00006000Ë

	)

582 
	#IS_RTC_TAMPER_PRECHARGE_DURATION
(
DURATION
Ë(((DURATIONË=
RTC_Tam≥rPªch¨geDuøti⁄_1RTCCLK
Ë|| \

	)

583 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_2RTCCLK
) || \

584 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_4RTCCLK
) || \

585 ((
DURATION
Ë=
RTC_Tam≥rPªch¨geDuøti⁄_8RTCCLK
))

593 
	#RTC_Tam≥r_1
 
RTC_TAFCR_TAMP1E


	)

595 
	#RTC_Tam≥r_2
 
RTC_TAFCR_TAMP2E


	)

597 
	#RTC_Tam≥r_3
 
RTC_TAFCR_TAMP3E


	)

600 
	#IS_RTC_TAMPER
(
TAMPER
Ë((((TAMPERË& (
uöt32_t
)0xFFFFFFD6Ë=0x00Ë&& ((TAMPERË!(uöt32_t)
RESET
))

	)

610 
	#RTC_OuçutTy≥_O≥nDøö
 ((
uöt32_t
)0x00000000)

	)

611 
	#RTC_OuçutTy≥_PushPuŒ
 ((
uöt32_t
)0x00040000)

	)

612 
	#IS_RTC_OUTPUT_TYPE
(
TYPE
Ë(((TYPEË=
RTC_OuçutTy≥_O≥nDøö
Ë|| \

	)

613 ((
TYPE
Ë=
RTC_OuçutTy≥_PushPuŒ
))

622 
	#RTC_Shi·Add1S_Re£t
 ((
uöt32_t
)0x00000000)

	)

623 
	#RTC_Shi·Add1S_Së
 ((
uöt32_t
)0x80000000)

	)

624 
	#IS_RTC_SHIFT_ADD1S
(
SEL
Ë(((SELË=
RTC_Shi·Add1S_Re£t
Ë|| \

	)

625 ((
SEL
Ë=
RTC_Shi·Add1S_Së
))

633 
	#IS_RTC_SHIFT_SUBFS
(
FS
Ë((FSË<0x00007FFF)

	)

643 
	#RTC_BKP_DR0
 ((
uöt32_t
)0x00000000)

	)

644 
	#RTC_BKP_DR1
 ((
uöt32_t
)0x00000001)

	)

645 
	#RTC_BKP_DR2
 ((
uöt32_t
)0x00000002)

	)

646 
	#RTC_BKP_DR3
 ((
uöt32_t
)0x00000003)

	)

647 
	#RTC_BKP_DR4
 ((
uöt32_t
)0x00000004)

	)

648 
	#RTC_BKP_DR5
 ((
uöt32_t
)0x00000005)

	)

649 
	#RTC_BKP_DR6
 ((
uöt32_t
)0x00000006)

	)

650 
	#RTC_BKP_DR7
 ((
uöt32_t
)0x00000007)

	)

651 
	#RTC_BKP_DR8
 ((
uöt32_t
)0x00000008)

	)

652 
	#RTC_BKP_DR9
 ((
uöt32_t
)0x00000009)

	)

653 
	#RTC_BKP_DR10
 ((
uöt32_t
)0x0000000A)

	)

654 
	#RTC_BKP_DR11
 ((
uöt32_t
)0x0000000B)

	)

655 
	#RTC_BKP_DR12
 ((
uöt32_t
)0x0000000C)

	)

656 
	#RTC_BKP_DR13
 ((
uöt32_t
)0x0000000D)

	)

657 
	#RTC_BKP_DR14
 ((
uöt32_t
)0x0000000E)

	)

658 
	#RTC_BKP_DR15
 ((
uöt32_t
)0x0000000F)

	)

659 
	#IS_RTC_BKP
(
BKP
Ë(((BKPË=
RTC_BKP_DR0
Ë|| \

	)

660 ((
BKP
Ë=
RTC_BKP_DR1
) || \

661 ((
BKP
Ë=
RTC_BKP_DR2
) || \

662 ((
BKP
Ë=
RTC_BKP_DR3
) || \

663 ((
BKP
Ë=
RTC_BKP_DR4
) || \

664 ((
BKP
Ë=
RTC_BKP_DR5
) || \

665 ((
BKP
Ë=
RTC_BKP_DR6
) || \

666 ((
BKP
Ë=
RTC_BKP_DR7
) || \

667 ((
BKP
Ë=
RTC_BKP_DR8
) || \

668 ((
BKP
Ë=
RTC_BKP_DR9
) || \

669 ((
BKP
Ë=
RTC_BKP_DR10
) || \

670 ((
BKP
Ë=
RTC_BKP_DR11
) || \

671 ((
BKP
Ë=
RTC_BKP_DR12
) || \

672 ((
BKP
Ë=
RTC_BKP_DR13
) || \

673 ((
BKP
Ë=
RTC_BKP_DR14
) || \

674 ((
BKP
Ë=
RTC_BKP_DR15
))

682 
	#RTC_F‹m©_BIN
 ((
uöt32_t
)0x000000000)

	)

683 
	#RTC_F‹m©_BCD
 ((
uöt32_t
)0x000000001)

	)

684 
	#IS_RTC_FORMAT
(
FORMAT
Ë(((FORMATË=
RTC_F‹m©_BIN
Ë|| ((FORMATË=
RTC_F‹m©_BCD
))

	)

693 
	#RTC_FLAG_RECALPF
 ((
uöt32_t
)0x00010000)

	)

694 
	#RTC_FLAG_TAMP3F
 ((
uöt32_t
)0x00008000)

	)

695 
	#RTC_FLAG_TAMP2F
 ((
uöt32_t
)0x00004000)

	)

696 
	#RTC_FLAG_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

697 
	#RTC_FLAG_TSOVF
 ((
uöt32_t
)0x00001000)

	)

698 
	#RTC_FLAG_TSF
 ((
uöt32_t
)0x00000800)

	)

699 
	#RTC_FLAG_WUTF
 ((
uöt32_t
)0x00000400)

	)

700 
	#RTC_FLAG_ALRBF
 ((
uöt32_t
)0x00000200)

	)

701 
	#RTC_FLAG_ALRAF
 ((
uöt32_t
)0x00000100)

	)

702 
	#RTC_FLAG_INITF
 ((
uöt32_t
)0x00000040)

	)

703 
	#RTC_FLAG_RSF
 ((
uöt32_t
)0x00000020)

	)

704 
	#RTC_FLAG_INITS
 ((
uöt32_t
)0x00000010)

	)

705 
	#RTC_FLAG_SHPF
 ((
uöt32_t
)0x00000008)

	)

706 
	#RTC_FLAG_WUTWF
 ((
uöt32_t
)0x00000004)

	)

707 
	#RTC_FLAG_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

708 
	#RTC_FLAG_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

709 
	#IS_RTC_GET_FLAG
(
FLAG
Ë(((FLAGË=
RTC_FLAG_TSOVF
Ë|| ((FLAGË=
RTC_FLAG_TSF
Ë|| \

	)

710 ((
FLAG
Ë=
RTC_FLAG_WUTF
Ë|| ((FLAGË=
RTC_FLAG_ALRBF
) || \

711 ((
FLAG
Ë=
RTC_FLAG_ALRAF
Ë|| ((FLAGË=
RTC_FLAG_INITF
) || \

712 ((
FLAG
Ë=
RTC_FLAG_RSF
Ë|| ((FLAGË=
RTC_FLAG_WUTWF
) || \

713 ((
FLAG
Ë=
RTC_FLAG_ALRBWF
Ë|| ((FLAGË=
RTC_FLAG_ALRAWF
) || \

714 ((
FLAG
Ë=
RTC_FLAG_TAMP1F
Ë|| ((FLAGË=
RTC_FLAG_TAMP2F
) || \

715 ((
FLAG
Ë=
RTC_FLAG_TAMP3F
Ë|| ((FLAGË=
RTC_FLAG_RECALPF
) || \

716 ((
FLAG
Ë=
RTC_FLAG_SHPF
))

717 
	#IS_RTC_CLEAR_FLAG
(
FLAG
Ë(((FLAGË!(
uöt32_t
)
RESET
Ë&& (((FLAGË& 0xFFFF00DFË=(uöt32_t)RESET))

	)

726 
	#RTC_IT_TS
 ((
uöt32_t
)0x00008000)

	)

727 
	#RTC_IT_WUT
 ((
uöt32_t
)0x00004000)

	)

728 
	#RTC_IT_ALRB
 ((
uöt32_t
)0x00002000)

	)

729 
	#RTC_IT_ALRA
 ((
uöt32_t
)0x00001000)

	)

730 
	#RTC_IT_TAMP
 ((
uöt32_t
)0x00000004Ë

	)

731 
	#RTC_IT_TAMP1
 ((
uöt32_t
)0x00020000)

	)

732 
	#RTC_IT_TAMP2
 ((
uöt32_t
)0x00040000)

	)

733 
	#RTC_IT_TAMP3
 ((
uöt32_t
)0x00080000)

	)

736 
	#IS_RTC_CONFIG_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFFF0FFBË=(uöt32_t)RESET))

	)

737 
	#IS_RTC_GET_IT
(
IT
Ë(((ITË=
RTC_IT_TS
Ë|| ((ITË=
RTC_IT_WUT
Ë|| \

	)

738 ((
IT
Ë=
RTC_IT_ALRB
Ë|| ((ITË=
RTC_IT_ALRA
) || \

739 ((
IT
Ë=
RTC_IT_TAMP1
Ë|| ((ITË=
RTC_IT_TAMP2
) || \

740 ((
IT
Ë=
RTC_IT_TAMP3
))

741 
	#IS_RTC_CLEAR_IT
(
IT
Ë(((ITË!(
uöt32_t
)
RESET
Ë&& (((ITË& 0xFFF10FFFË=(uöt32_t)RESET))

	)

756 
Eº‹Sètus
 
RTC_DeInô
();

760 
Eº‹Sètus
 
RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

761 
RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
);

762 
RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

763 
Eº‹Sètus
 
RTC_E¡îInôMode
();

764 
RTC_ExôInôMode
();

765 
Eº‹Sètus
 
RTC_WaôF‹Synchro
();

766 
Eº‹Sètus
 
RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

767 
RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

770 
Eº‹Sètus
 
RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

771 
RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

772 
RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
);

773 
uöt32_t
 
RTC_GëSubSec⁄d
();

774 
Eº‹Sètus
 
RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

775 
RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

776 
RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
);

779 
RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

780 
RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

781 
RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
);

782 
Eº‹Sètus
 
RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

783 
RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
);

784 
uöt32_t
 
RTC_GëAœrmSubSec⁄d
(uöt32_à
RTC_Aœrm
);

787 
RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
);

788 
RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
);

789 
uöt32_t
 
RTC_GëWakeUpCou¡î
();

790 
Eº‹Sètus
 
RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

793 
RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
);

794 
uöt32_t
 
RTC_GëSt‹eO≥øti⁄
();

797 
RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
);

800 
RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

801 
RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
);

802 
Eº‹Sètus
 
RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

803 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

804 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
);

807 
RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

808 
RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

809 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
);

810 
uöt32_t
 
RTC_GëTimeSèmpSubSec⁄d
();

813 
RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
);

814 
RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

815 
RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
);

816 
RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
);

817 
RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
);

818 
RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

819 
RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

822 
RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
);

823 
uöt32_t
 
RTC_RódBackupRegi°î
(uöt32_à
RTC_BKP_DR
);

826 
RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
);

829 
Eº‹Sètus
 
RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
);

832 
RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

833 
FœgSètus
 
RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
);

834 
RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
);

835 
ITSètus
 
RTC_GëITSètus
(
uöt32_t
 
RTC_IT
);

836 
RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
);

838 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h

30 #i‚de‡
__STM32F30x_SPI_H


31 
	#__STM32F30x_SPI_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

56 
uöt16_t
 
SPI_Dúe˘i⁄
;

59 
uöt16_t
 
SPI_Mode
;

62 
uöt16_t
 
SPI_D©aSize
;

65 
uöt16_t
 
SPI_CPOL
;

68 
uöt16_t
 
SPI_CPHA
;

71 
uöt16_t
 
SPI_NSS
;

75 
uöt16_t
 
SPI_BaudR©ePªsˇÀr
;

81 
uöt16_t
 
SPI_Fú°Bô
;

84 
uöt16_t
 
SPI_CRCPﬁynomül
;

85 }
	tSPI_InôTy≥Def
;

94 
uöt16_t
 
I2S_Mode
;

97 
uöt16_t
 
I2S_Sènd¨d
;

100 
uöt16_t
 
I2S_D©aF‹m©
;

103 
uöt16_t
 
I2S_MCLKOuçut
;

106 
uöt32_t
 
I2S_AudioFªq
;

109 
uöt16_t
 
I2S_CPOL
;

111 }
	tI2S_InôTy≥Def
;

119 
	#IS_SPI_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

120 ((
PERIPH
Ë=
SPI2
) || \

121 ((
PERIPH
Ë=
SPI3
))

123 
	#IS_SPI_ALL_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI1
Ë|| \

	)

124 ((
PERIPH
Ë=
SPI2
) || \

125 ((
PERIPH
Ë=
SPI3
) || \

126 ((
PERIPH
Ë=
I2S2ext
) || \

127 ((
PERIPH
Ë=
I2S3ext
))

129 
	#IS_SPI_23_PERIPH
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

130 ((
PERIPH
Ë=
SPI3
))

132 
	#IS_SPI_23_PERIPH_EXT
(
PERIPH
Ë(((PERIPHË=
SPI2
Ë|| \

	)

133 ((
PERIPH
Ë=
SPI3
) || \

134 ((
PERIPH
Ë=
I2S2ext
) || \

135 ((
PERIPH
Ë=
I2S3ext
))

137 
	#IS_I2S_EXT_PERIPH
(
PERIPH
Ë(((PERIPHË=
I2S2ext
Ë|| \

	)

138 ((
PERIPH
Ë=
I2S3ext
))

144 
	#SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
 ((
uöt16_t
)0x0000)

	)

145 
	#SPI_Dúe˘i⁄_2Löes_RxO∆y
 ((
uöt16_t
)0x0400)

	)

146 
	#SPI_Dúe˘i⁄_1Löe_Rx
 ((
uöt16_t
)0x8000)

	)

147 
	#SPI_Dúe˘i⁄_1Löe_Tx
 ((
uöt16_t
)0xC000)

	)

148 
	#IS_SPI_DIRECTION_MODE
(
MODE
Ë(((MODEË=
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
Ë|| \

	)

149 ((
MODE
Ë=
SPI_Dúe˘i⁄_2Löes_RxO∆y
) || \

150 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Rx
) || \

151 ((
MODE
Ë=
SPI_Dúe˘i⁄_1Löe_Tx
))

160 
	#SPI_Mode_Ma°î
 ((
uöt16_t
)0x0104)

	)

161 
	#SPI_Mode_Sœve
 ((
uöt16_t
)0x0000)

	)

162 
	#IS_SPI_MODE
(
MODE
Ë(((MODEË=
SPI_Mode_Ma°î
Ë|| \

	)

163 ((
MODE
Ë=
SPI_Mode_Sœve
))

172 
	#SPI_D©aSize_4b
 ((
uöt16_t
)0x0300)

	)

173 
	#SPI_D©aSize_5b
 ((
uöt16_t
)0x0400)

	)

174 
	#SPI_D©aSize_6b
 ((
uöt16_t
)0x0500)

	)

175 
	#SPI_D©aSize_7b
 ((
uöt16_t
)0x0600)

	)

176 
	#SPI_D©aSize_8b
 ((
uöt16_t
)0x0700)

	)

177 
	#SPI_D©aSize_9b
 ((
uöt16_t
)0x0800)

	)

178 
	#SPI_D©aSize_10b
 ((
uöt16_t
)0x0900)

	)

179 
	#SPI_D©aSize_11b
 ((
uöt16_t
)0x0A00)

	)

180 
	#SPI_D©aSize_12b
 ((
uöt16_t
)0x0B00)

	)

181 
	#SPI_D©aSize_13b
 ((
uöt16_t
)0x0C00)

	)

182 
	#SPI_D©aSize_14b
 ((
uöt16_t
)0x0D00)

	)

183 
	#SPI_D©aSize_15b
 ((
uöt16_t
)0x0E00)

	)

184 
	#SPI_D©aSize_16b
 ((
uöt16_t
)0x0F00)

	)

185 
	#IS_SPI_DATA_SIZE
(
SIZE
Ë(((SIZEË=
SPI_D©aSize_4b
Ë|| \

	)

186 ((
SIZE
Ë=
SPI_D©aSize_5b
) || \

187 ((
SIZE
Ë=
SPI_D©aSize_6b
) || \

188 ((
SIZE
Ë=
SPI_D©aSize_7b
) || \

189 ((
SIZE
Ë=
SPI_D©aSize_8b
) || \

190 ((
SIZE
Ë=
SPI_D©aSize_9b
) || \

191 ((
SIZE
Ë=
SPI_D©aSize_10b
) || \

192 ((
SIZE
Ë=
SPI_D©aSize_11b
) || \

193 ((
SIZE
Ë=
SPI_D©aSize_12b
) || \

194 ((
SIZE
Ë=
SPI_D©aSize_13b
) || \

195 ((
SIZE
Ë=
SPI_D©aSize_14b
) || \

196 ((
SIZE
Ë=
SPI_D©aSize_15b
) || \

197 ((
SIZE
Ë=
SPI_D©aSize_16b
))

206 
	#SPI_CRCLígth_8b
 ((
uöt16_t
)0x0000)

	)

207 
	#SPI_CRCLígth_16b
 ((
uöt16_t
)0x0800)

	)

208 
	#IS_SPI_CRC_LENGTH
(
LENGTH
Ë(((LENGTHË=
SPI_CRCLígth_8b
Ë|| \

	)

209 ((
LENGTH
Ë=
SPI_CRCLígth_16b
))

218 
	#SPI_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

219 
	#SPI_CPOL_High
 ((
uöt16_t
)0x0002)

	)

220 
	#IS_SPI_CPOL
(
CPOL
Ë(((CPOLË=
SPI_CPOL_Low
Ë|| \

	)

221 ((
CPOL
Ë=
SPI_CPOL_High
))

230 
	#SPI_CPHA_1Edge
 ((
uöt16_t
)0x0000)

	)

231 
	#SPI_CPHA_2Edge
 ((
uöt16_t
)0x0001)

	)

232 
	#IS_SPI_CPHA
(
CPHA
Ë(((CPHAË=
SPI_CPHA_1Edge
Ë|| \

	)

233 ((
CPHA
Ë=
SPI_CPHA_2Edge
))

242 
	#SPI_NSS_So·
 ((
uöt16_t
)0x0200)

	)

243 
	#SPI_NSS_H¨d
 ((
uöt16_t
)0x0000)

	)

244 
	#IS_SPI_NSS
(
NSS
Ë(((NSSË=
SPI_NSS_So·
Ë|| \

	)

245 ((
NSS
Ë=
SPI_NSS_H¨d
))

254 
	#SPI_BaudR©ePªsˇÀr_2
 ((
uöt16_t
)0x0000)

	)

255 
	#SPI_BaudR©ePªsˇÀr_4
 ((
uöt16_t
)0x0008)

	)

256 
	#SPI_BaudR©ePªsˇÀr_8
 ((
uöt16_t
)0x0010)

	)

257 
	#SPI_BaudR©ePªsˇÀr_16
 ((
uöt16_t
)0x0018)

	)

258 
	#SPI_BaudR©ePªsˇÀr_32
 ((
uöt16_t
)0x0020)

	)

259 
	#SPI_BaudR©ePªsˇÀr_64
 ((
uöt16_t
)0x0028)

	)

260 
	#SPI_BaudR©ePªsˇÀr_128
 ((
uöt16_t
)0x0030)

	)

261 
	#SPI_BaudR©ePªsˇÀr_256
 ((
uöt16_t
)0x0038)

	)

262 
	#IS_SPI_BAUDRATE_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
SPI_BaudR©ePªsˇÀr_2
Ë|| \

	)

263 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_4
) || \

264 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_8
) || \

265 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_16
) || \

266 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_32
) || \

267 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_64
) || \

268 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_128
) || \

269 ((
PRESCALER
Ë=
SPI_BaudR©ePªsˇÀr_256
))

278 
	#SPI_Fú°Bô_MSB
 ((
uöt16_t
)0x0000)

	)

279 
	#SPI_Fú°Bô_LSB
 ((
uöt16_t
)0x0080)

	)

280 
	#IS_SPI_FIRST_BIT
(
BIT
Ë(((BITË=
SPI_Fú°Bô_MSB
Ë|| \

	)

281 ((
BIT
Ë=
SPI_Fú°Bô_LSB
))

290 
	#I2S_Mode_SœveTx
 ((
uöt16_t
)0x0000)

	)

291 
	#I2S_Mode_SœveRx
 ((
uöt16_t
)0x0100)

	)

292 
	#I2S_Mode_Ma°îTx
 ((
uöt16_t
)0x0200)

	)

293 
	#I2S_Mode_Ma°îRx
 ((
uöt16_t
)0x0300)

	)

294 
	#IS_I2S_MODE
(
MODE
Ë(((MODEË=
I2S_Mode_SœveTx
Ë|| \

	)

295 ((
MODE
Ë=
I2S_Mode_SœveRx
) || \

296 ((
MODE
Ë=
I2S_Mode_Ma°îTx
)|| \

297 ((
MODE
Ë=
I2S_Mode_Ma°îRx
))

306 
	#I2S_Sènd¨d_Phûlùs
 ((
uöt16_t
)0x0000)

	)

307 
	#I2S_Sènd¨d_MSB
 ((
uöt16_t
)0x0010)

	)

308 
	#I2S_Sènd¨d_LSB
 ((
uöt16_t
)0x0020)

	)

309 
	#I2S_Sènd¨d_PCMSh‹t
 ((
uöt16_t
)0x0030)

	)

310 
	#I2S_Sènd¨d_PCML⁄g
 ((
uöt16_t
)0x00B0)

	)

311 
	#IS_I2S_STANDARD
(
STANDARD
Ë(((STANDARDË=
I2S_Sènd¨d_Phûlùs
Ë|| \

	)

312 ((
STANDARD
Ë=
I2S_Sènd¨d_MSB
) || \

313 ((
STANDARD
Ë=
I2S_Sènd¨d_LSB
) || \

314 ((
STANDARD
Ë=
I2S_Sènd¨d_PCMSh‹t
) || \

315 ((
STANDARD
Ë=
I2S_Sènd¨d_PCML⁄g
))

324 
	#I2S_D©aF‹m©_16b
 ((
uöt16_t
)0x0000)

	)

325 
	#I2S_D©aF‹m©_16bexãnded
 ((
uöt16_t
)0x0001)

	)

326 
	#I2S_D©aF‹m©_24b
 ((
uöt16_t
)0x0003)

	)

327 
	#I2S_D©aF‹m©_32b
 ((
uöt16_t
)0x0005)

	)

328 
	#IS_I2S_DATA_FORMAT
(
FORMAT
Ë(((FORMATË=
I2S_D©aF‹m©_16b
Ë|| \

	)

329 ((
FORMAT
Ë=
I2S_D©aF‹m©_16bexãnded
) || \

330 ((
FORMAT
Ë=
I2S_D©aF‹m©_24b
) || \

331 ((
FORMAT
Ë=
I2S_D©aF‹m©_32b
))

340 
	#I2S_MCLKOuçut_E«bÀ
 ((
uöt16_t
)0x0200)

	)

341 
	#I2S_MCLKOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

342 
	#IS_I2S_MCLK_OUTPUT
(
OUTPUT
Ë(((OUTPUTË=
I2S_MCLKOuçut_E«bÀ
Ë|| \

	)

343 ((
OUTPUT
Ë=
I2S_MCLKOuçut_DißbÀ
))

352 
	#I2S_AudioFªq_192k
 ((
uöt32_t
)192000)

	)

353 
	#I2S_AudioFªq_96k
 ((
uöt32_t
)96000)

	)

354 
	#I2S_AudioFªq_48k
 ((
uöt32_t
)48000)

	)

355 
	#I2S_AudioFªq_44k
 ((
uöt32_t
)44100)

	)

356 
	#I2S_AudioFªq_32k
 ((
uöt32_t
)32000)

	)

357 
	#I2S_AudioFªq_22k
 ((
uöt32_t
)22050)

	)

358 
	#I2S_AudioFªq_16k
 ((
uöt32_t
)16000)

	)

359 
	#I2S_AudioFªq_11k
 ((
uöt32_t
)11025)

	)

360 
	#I2S_AudioFªq_8k
 ((
uöt32_t
)8000)

	)

361 
	#I2S_AudioFªq_DeÁu…
 ((
uöt32_t
)2)

	)

363 
	#IS_I2S_AUDIO_FREQ
(
FREQ
Ë((((FREQË>
I2S_AudioFªq_8k
Ë&& \

	)

364 ((
FREQ
Ë<
I2S_AudioFªq_192k
)) || \

365 ((
FREQ
Ë=
I2S_AudioFªq_DeÁu…
))

374 
	#I2S_CPOL_Low
 ((
uöt16_t
)0x0000)

	)

375 
	#I2S_CPOL_High
 ((
uöt16_t
)0x0008)

	)

376 
	#IS_I2S_CPOL
(
CPOL
Ë(((CPOLË=
I2S_CPOL_Low
Ë|| \

	)

377 ((
CPOL
Ë=
I2S_CPOL_High
))

386 
	#SPI_RxFIFOThªshﬁd_HF
 ((
uöt16_t
)0x0000)

	)

387 
	#SPI_RxFIFOThªshﬁd_QF
 ((
uöt16_t
)0x1000)

	)

388 
	#IS_SPI_RX_FIFO_THRESHOLD
(
THRESHOLD
Ë(((THRESHOLDË=
SPI_RxFIFOThªshﬁd_HF
Ë|| \

	)

389 ((
THRESHOLD
Ë=
SPI_RxFIFOThªshﬁd_QF
))

398 
	#SPI_I2S_DMAReq_Tx
 ((
uöt16_t
)0x0002)

	)

399 
	#SPI_I2S_DMAReq_Rx
 ((
uöt16_t
)0x0001)

	)

400 
	#IS_SPI_I2S_DMA_REQ
(
REQ
Ë((((REQË& (
uöt16_t
)0xFFFCË=0x00Ë&& ((REQË!0x00))

	)

409 
	#SPI_La°DMATøns„r_TxEvíRxEví
 ((
uöt16_t
)0x0000)

	)

410 
	#SPI_La°DMATøns„r_TxOddRxEví
 ((
uöt16_t
)0x4000)

	)

411 
	#SPI_La°DMATøns„r_TxEvíRxOdd
 ((
uöt16_t
)0x2000)

	)

412 
	#SPI_La°DMATøns„r_TxOddRxOdd
 ((
uöt16_t
)0x6000)

	)

413 
	#IS_SPI_LAST_DMA_TRANSFER
(
TRANSFER
Ë(((TRANSFERË=
SPI_La°DMATøns„r_TxEvíRxEví
Ë|| \

	)

414 ((
TRANSFER
Ë=
SPI_La°DMATøns„r_TxOddRxEví
) || \

415 ((
TRANSFER
Ë=
SPI_La°DMATøns„r_TxEvíRxOdd
) || \

416 ((
TRANSFER
Ë=
SPI_La°DMATøns„r_TxOddRxOdd
))

424 
	#SPI_NSSI¡î«lSo·_Së
 ((
uöt16_t
)0x0100)

	)

425 
	#SPI_NSSI¡î«lSo·_Re£t
 ((
uöt16_t
)0xFEFF)

	)

426 
	#IS_SPI_NSS_INTERNAL
(
INTERNAL
Ë(((INTERNALË=
SPI_NSSI¡î«lSo·_Së
Ë|| \

	)

427 ((
INTERNAL
Ë=
SPI_NSSI¡î«lSo·_Re£t
))

436 
	#SPI_CRC_Tx
 ((
uöt8_t
)0x00)

	)

437 
	#SPI_CRC_Rx
 ((
uöt8_t
)0x01)

	)

438 
	#IS_SPI_CRC
(
CRC
Ë(((CRCË=
SPI_CRC_Tx
Ë|| ((CRCË=
SPI_CRC_Rx
))

	)

447 
	#SPI_Dúe˘i⁄_Rx
 ((
uöt16_t
)0xBFFF)

	)

448 
	#SPI_Dúe˘i⁄_Tx
 ((
uöt16_t
)0x4000)

	)

449 
	#IS_SPI_DIRECTION
(
DIRECTION
Ë(((DIRECTIONË=
SPI_Dúe˘i⁄_Rx
Ë|| \

	)

450 ((
DIRECTION
Ë=
SPI_Dúe˘i⁄_Tx
))

459 
	#SPI_I2S_IT_TXE
 ((
uöt8_t
)0x71)

	)

460 
	#SPI_I2S_IT_RXNE
 ((
uöt8_t
)0x60)

	)

461 
	#SPI_I2S_IT_ERR
 ((
uöt8_t
)0x50)

	)

463 
	#IS_SPI_I2S_CONFIG_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

464 ((
IT
Ë=
SPI_I2S_IT_RXNE
) || \

465 ((
IT
Ë=
SPI_I2S_IT_ERR
))

467 
	#I2S_IT_UDR
 ((
uöt8_t
)0x53)

	)

468 
	#SPI_IT_MODF
 ((
uöt8_t
)0x55)

	)

469 
	#SPI_I2S_IT_OVR
 ((
uöt8_t
)0x56)

	)

470 
	#SPI_I2S_IT_FRE
 ((
uöt8_t
)0x58)

	)

472 
	#IS_SPI_I2S_GET_IT
(
IT
Ë(((ITË=
SPI_I2S_IT_RXNE
Ë|| ((ITË=
SPI_I2S_IT_TXE
Ë|| \

	)

473 ((
IT
Ë=
SPI_I2S_IT_OVR
Ë|| ((ITË=
SPI_IT_MODF
) || \

474 ((
IT
Ë=
SPI_I2S_IT_FRE
)|| ((ITË=
I2S_IT_UDR
))

484 
	#SPI_Tønsmissi⁄FIFOSètus_Em±y
 ((
uöt16_t
)0x0000)

	)

485 
	#SPI_Tønsmissi⁄FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt16_t
)0x0800)

	)

486 
	#SPI_Tønsmissi⁄FIFOSètus_HÆfFuŒ
 ((
uöt16_t
)0x1000)

	)

487 
	#SPI_Tønsmissi⁄FIFOSètus_FuŒ
 ((
uöt16_t
)0x1800)

	)

496 
	#SPI_Re˚±i⁄FIFOSètus_Em±y
 ((
uöt16_t
)0x0000)

	)

497 
	#SPI_Re˚±i⁄FIFOSètus_1Qu¨ãrFuŒ
 ((
uöt16_t
)0x0200)

	)

498 
	#SPI_Re˚±i⁄FIFOSètus_HÆfFuŒ
 ((
uöt16_t
)0x0400)

	)

499 
	#SPI_Re˚±i⁄FIFOSètus_FuŒ
 ((
uöt16_t
)0x0600)

	)

510 
	#SPI_I2S_FLAG_RXNE
 ((
uöt16_t
)0x0001)

	)

511 
	#SPI_I2S_FLAG_TXE
 ((
uöt16_t
)0x0002)

	)

512 
	#I2S_FLAG_CHSIDE
 ((
uöt16_t
)0x0004)

	)

513 
	#I2S_FLAG_UDR
 ((
uöt16_t
)0x0008)

	)

514 
	#SPI_FLAG_CRCERR
 ((
uöt16_t
)0x0010)

	)

515 
	#SPI_FLAG_MODF
 ((
uöt16_t
)0x0020)

	)

516 
	#SPI_I2S_FLAG_OVR
 ((
uöt16_t
)0x0040)

	)

517 
	#SPI_I2S_FLAG_BSY
 ((
uöt16_t
)0x0080)

	)

518 
	#SPI_I2S_FLAG_FRE
 ((
uöt16_t
)0x0100)

	)

522 
	#IS_SPI_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
SPI_FLAG_CRCERR
))

	)

523 
	#IS_SPI_I2S_GET_FLAG
(
FLAG
Ë(((FLAGË=
SPI_I2S_FLAG_BSY
Ë|| ((FLAGË=
SPI_I2S_FLAG_OVR
Ë|| \

	)

524 ((
FLAG
Ë=
SPI_FLAG_MODF
Ë|| ((FLAGË=
SPI_FLAG_CRCERR
) || \

525 ((
FLAG
Ë=
SPI_I2S_FLAG_TXE
Ë|| ((FLAGË=
SPI_I2S_FLAG_RXNE
)|| \

526 ((
FLAG
Ë=
SPI_I2S_FLAG_FRE
)|| ((FLAGË=
I2S_FLAG_CHSIDE
)|| \

527 ((
FLAG
Ë=
I2S_FLAG_UDR
))

536 
	#IS_SPI_CRC_POLYNOMIAL
(
POLYNOMIAL
Ë((POLYNOMIALË>0x1)

	)

549 
SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
);

552 
SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

553 
I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

554 
SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
);

555 
I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

556 
SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

557 
SPI_NSSPul£ModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

558 
SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

559 
I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

560 
SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
);

561 
SPI_RxFIFOThªshﬁdC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_RxFIFOThªshﬁd
);

562 
SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
);

563 
SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
);

564 
SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

565 
I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
);

568 
SPI_SídD©a8
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
D©a
);

569 
SPI_I2S_SídD©a16
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
);

570 
uöt8_t
 
SPI_Re˚iveD©a8
(
SPI_Ty≥Def
* 
SPIx
);

571 
uöt16_t
 
SPI_I2S_Re˚iveD©a16
(
SPI_Ty≥Def
* 
SPIx
);

574 
SPI_CRCLígthC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_CRCLígth
);

575 
SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

576 
SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
);

577 
uöt16_t
 
SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
);

578 
uöt16_t
 
SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
);

581 
SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

582 
SPI_La°DMATøns„rCmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_La°DMATøns„r
);

585 
SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

586 
uöt16_t
 
SPI_GëTønsmissi⁄FIFOSètus
(
SPI_Ty≥Def
* 
SPIx
);

587 
uöt16_t
 
SPI_GëRe˚±i⁄FIFOSètus
(
SPI_Ty≥Def
* 
SPIx
);

588 
FœgSètus
 
SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

589 
SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
);

590 
ITSètus
 
SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
);

592 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h

30 #i‚de‡
__STM32F30x_SYSCFG_H


31 
	#__STM32F30x_SYSCFG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

58 
	#EXTI_P‹tSour˚GPIOA
 ((
uöt8_t
)0x00)

	)

59 
	#EXTI_P‹tSour˚GPIOB
 ((
uöt8_t
)0x01)

	)

60 
	#EXTI_P‹tSour˚GPIOC
 ((
uöt8_t
)0x02)

	)

61 
	#EXTI_P‹tSour˚GPIOD
 ((
uöt8_t
)0x03)

	)

62 
	#EXTI_P‹tSour˚GPIOE
 ((
uöt8_t
)0x04)

	)

63 
	#EXTI_P‹tSour˚GPIOF
 ((
uöt8_t
)0x05)

	)

65 
	#IS_EXTI_PORT_SOURCE
(
PORTSOURCE
Ë(((PORTSOURCEË=
EXTI_P‹tSour˚GPIOA
Ë|| \

	)

66 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOB
) || \

67 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOC
) || \

68 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOD
) || \

69 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOE
) || \

70 ((
PORTSOURCE
Ë=
EXTI_P‹tSour˚GPIOF
))

78 
	#EXTI_PöSour˚0
 ((
uöt8_t
)0x00)

	)

79 
	#EXTI_PöSour˚1
 ((
uöt8_t
)0x01)

	)

80 
	#EXTI_PöSour˚2
 ((
uöt8_t
)0x02)

	)

81 
	#EXTI_PöSour˚3
 ((
uöt8_t
)0x03)

	)

82 
	#EXTI_PöSour˚4
 ((
uöt8_t
)0x04)

	)

83 
	#EXTI_PöSour˚5
 ((
uöt8_t
)0x05)

	)

84 
	#EXTI_PöSour˚6
 ((
uöt8_t
)0x06)

	)

85 
	#EXTI_PöSour˚7
 ((
uöt8_t
)0x07)

	)

86 
	#EXTI_PöSour˚8
 ((
uöt8_t
)0x08)

	)

87 
	#EXTI_PöSour˚9
 ((
uöt8_t
)0x09)

	)

88 
	#EXTI_PöSour˚10
 ((
uöt8_t
)0x0A)

	)

89 
	#EXTI_PöSour˚11
 ((
uöt8_t
)0x0B)

	)

90 
	#EXTI_PöSour˚12
 ((
uöt8_t
)0x0C)

	)

91 
	#EXTI_PöSour˚13
 ((
uöt8_t
)0x0D)

	)

92 
	#EXTI_PöSour˚14
 ((
uöt8_t
)0x0E)

	)

93 
	#EXTI_PöSour˚15
 ((
uöt8_t
)0x0F)

	)

95 
	#IS_EXTI_PIN_SOURCE
(
PINSOURCE
Ë(((PINSOURCEË=
EXTI_PöSour˚0
Ë|| \

	)

96 ((
PINSOURCE
Ë=
EXTI_PöSour˚1
) || \

97 ((
PINSOURCE
Ë=
EXTI_PöSour˚2
) || \

98 ((
PINSOURCE
Ë=
EXTI_PöSour˚3
) || \

99 ((
PINSOURCE
Ë=
EXTI_PöSour˚4
) || \

100 ((
PINSOURCE
Ë=
EXTI_PöSour˚5
) || \

101 ((
PINSOURCE
Ë=
EXTI_PöSour˚6
) || \

102 ((
PINSOURCE
Ë=
EXTI_PöSour˚7
) || \

103 ((
PINSOURCE
Ë=
EXTI_PöSour˚8
) || \

104 ((
PINSOURCE
Ë=
EXTI_PöSour˚9
) || \

105 ((
PINSOURCE
Ë=
EXTI_PöSour˚10
) || \

106 ((
PINSOURCE
Ë=
EXTI_PöSour˚11
) || \

107 ((
PINSOURCE
Ë=
EXTI_PöSour˚12
) || \

108 ((
PINSOURCE
Ë=
EXTI_PöSour˚13
) || \

109 ((
PINSOURCE
Ë=
EXTI_PöSour˚14
) || \

110 ((
PINSOURCE
Ë=
EXTI_PöSour˚15
))

118 
	#SYSCFG_Mem‹yRem≠_Fœsh
 ((
uöt8_t
)0x00)

	)

119 
	#SYSCFG_Mem‹yRem≠_Sy°emMem‹y
 ((
uöt8_t
)0x01)

	)

120 
	#SYSCFG_Mem‹yRem≠_SRAM
 ((
uöt8_t
)0x03)

	)

123 
	#IS_SYSCFG_MEMORY_REMAP
(
REMAP
Ë(((REMAPË=
SYSCFG_Mem‹yRem≠_Fœsh
Ë|| \

	)

124 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_Sy°emMem‹y
) || \

125 ((
REMAP
Ë=
SYSCFG_Mem‹yRem≠_SRAM
))

134 
	#SYSCFG_DMARem≠_TIM17
 
SYSCFG_CFGR1_TIM17_DMA_RMP


	)

135 
	#SYSCFG_DMARem≠_TIM16
 
SYSCFG_CFGR1_TIM16_DMA_RMP


	)

136 
	#SYSCFG_DMARem≠_TIM6DAC1
 
SYSCFG_CFGR1_TIM6DAC1_DMA_RMP


	)

137 
	#SYSCFG_DMARem≠_TIM7DAC2
 
SYSCFG_CFGR1_TIM7DAC2_DMA_RMP


	)

138 
	#SYSCFG_DMARem≠_ADC2ADC4
 
SYSCFG_CFGR1_ADC24_DMA_RMP


	)

140 
	#IS_SYSCFG_DMA_REMAP
(
REMAP
Ë(((REMAPË=
SYSCFG_DMARem≠_TIM17
Ë|| \

	)

141 ((
REMAP
Ë=
SYSCFG_DMARem≠_TIM16
) || \

142 ((
REMAP
Ë=
SYSCFG_DMARem≠_TIM6DAC1
) || \

143 ((
REMAP
Ë=
SYSCFG_DMARem≠_TIM7DAC2
) || \

144 ((
REMAP
Ë=
SYSCFG_DMARem≠_ADC2ADC4
))

153 
	#SYSCFG_TriggîRem≠_DACTIM3
 
SYSCFG_CFGR1_DAC_TRIG_RMP


	)

154 
	#SYSCFG_TriggîRem≠_TIM1TIM17
 
SYSCFG_CFGR1_TIM1_ITR3_RMP


	)

156 
	#IS_SYSCFG_TRIGGER_REMAP
(
REMAP
Ë(((REMAPË=
SYSCFG_TriggîRem≠_DACTIM3
Ë|| \

	)

157 ((
REMAP
Ë=
SYSCFG_TriggîRem≠_TIM1TIM17
))

166 
	#SYSCFG_EncodîRem≠_No
 ((
uöt32_t
)0x00000000Ë

	)

167 
	#SYSCFG_EncodîRem≠_TIM2
 
SYSCFG_CFGR1_ENCODER_MODE_0


	)

168 
	#SYSCFG_EncodîRem≠_TIM3
 
SYSCFG_CFGR1_ENCODER_MODE_1


	)

169 
	#SYSCFG_EncodîRem≠_TIM4
 
SYSCFG_CFGR1_ENCODER_MODE


	)

171 
	#IS_SYSCFG_ENCODER_REMAP
(
REMAP
Ë(((REMAPË=
SYSCFG_EncodîRem≠_No
Ë|| \

	)

172 ((
REMAP
Ë=
SYSCFG_EncodîRem≠_TIM2
) || \

173 ((
REMAP
Ë=
SYSCFG_EncodîRem≠_TIM3
) || \

174 ((
REMAP
Ë=
SYSCFG_EncodîRem≠_TIM4
))

183 
	#SYSCFG_I2CFa°ModePlus_PB6
 
SYSCFG_CFGR1_I2C_PB6_FMP


	)

184 
	#SYSCFG_I2CFa°ModePlus_PB7
 
SYSCFG_CFGR1_I2C_PB7_FMP


	)

185 
	#SYSCFG_I2CFa°ModePlus_PB8
 
SYSCFG_CFGR1_I2C_PB8_FMP


	)

186 
	#SYSCFG_I2CFa°ModePlus_PB9
 
SYSCFG_CFGR1_I2C_PB9_FMP


	)

187 
	#SYSCFG_I2CFa°ModePlus_I2C1
 
SYSCFG_CFGR1_I2C1_FMP


	)

188 
	#SYSCFG_I2CFa°ModePlus_I2C2
 
SYSCFG_CFGR1_I2C2_FMP


	)

190 
	#IS_SYSCFG_I2C_FMP
(
PIN
Ë(((PINË=
SYSCFG_I2CFa°ModePlus_PB6
Ë|| \

	)

191 ((
PIN
Ë=
SYSCFG_I2CFa°ModePlus_PB7
) || \

192 ((
PIN
Ë=
SYSCFG_I2CFa°ModePlus_PB8
) || \

193 ((
PIN
Ë=
SYSCFG_I2CFa°ModePlus_PB9
) || \

194 ((
PIN
Ë=
SYSCFG_I2CFa°ModePlus_I2C1
) || \

195 ((
PIN
Ë=
SYSCFG_I2CFa°ModePlus_I2C2
))

204 
	#SYSCFG_IT_IXC
 
SYSCFG_CFGR1_FPU_IE_5


	)

205 
	#SYSCFG_IT_IDC
 
SYSCFG_CFGR1_FPU_IE_4


	)

206 
	#SYSCFG_IT_OFC
 
SYSCFG_CFGR1_FPU_IE_3


	)

207 
	#SYSCFG_IT_UFC
 
SYSCFG_CFGR1_FPU_IE_2


	)

208 
	#SYSCFG_IT_DZC
 
SYSCFG_CFGR1_FPU_IE_1


	)

209 
	#SYSCFG_IT_IOC
 
SYSCFG_CFGR1_FPU_IE_0


	)

211 
	#IS_SYSCFG_IT
(
IT
Ë((((ITË& (
uöt32_t
)0x03FFFFFFË=0Ë&& ((ITË!0))

	)

220 
	#SYSCFG_Bªak_PVD
 
SYSCFG_CFGR2_PVD_LOCK


	)

221 
	#SYSCFG_Bªak_SRAMP¨ôy
 
SYSCFG_CFGR2_SRAM_PARITY_LOCK


	)

222 
	#SYSCFG_Bªak_Lockup
 
SYSCFG_CFGR2_LOCKUP_LOCK


	)

224 
	#IS_SYSCFG_LOCK_CONFIG
(
CONFIG
Ë(((CONFIGË=
SYSCFG_Bªak_PVD
Ë|| \

	)

225 ((
CONFIG
Ë=
SYSCFG_Bªak_SRAMP¨ôy
) || \

226 ((
CONFIG
Ë=
SYSCFG_Bªak_Lockup
))

235 
	#SYSCFG_SRAMWRP_Page0
 
SYSCFG_RCR_PAGE0


	)

236 
	#SYSCFG_SRAMWRP_Page1
 
SYSCFG_RCR_PAGE1


	)

237 
	#SYSCFG_SRAMWRP_Page2
 
SYSCFG_RCR_PAGE2


	)

238 
	#SYSCFG_SRAMWRP_Page3
 
SYSCFG_RCR_PAGE3


	)

239 
	#SYSCFG_SRAMWRP_Page4
 
SYSCFG_RCR_PAGE4


	)

240 
	#SYSCFG_SRAMWRP_Page5
 
SYSCFG_RCR_PAGE5


	)

241 
	#SYSCFG_SRAMWRP_Page6
 
SYSCFG_RCR_PAGE6


	)

242 
	#SYSCFG_SRAMWRP_Page7
 
SYSCFG_RCR_PAGE7


	)

244 
	#IS_SYSCFG_PAGE
(
PAGE
)((((PAGEË& (
uöt32_t
)0xFFFFFF00Ë=0x00000000Ë&& ((PAGEË!0x00000000))

	)

254 
	#SYSCFG_FLAG_PE
 
SYSCFG_CFGR2_SRAM_PE


	)

256 
	#IS_SYSCFG_FLAG
(
FLAG
Ë(((FLAGË=
SYSCFG_FLAG_PE
))

	)

270 
SYSCFG_DeInô
();

273 
SYSCFG_Mem‹yRem≠C⁄fig
(
uöt32_t
 
SYSCFG_Mem‹yRem≠
);

274 
SYSCFG_DMACh™√lRem≠C⁄fig
(
uöt32_t
 
SYSCFG_DMARem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

275 
SYSCFG_TriggîRem≠C⁄fig
(
uöt32_t
 
SYSCFG_TriggîRem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

276 
SYSCFG_EncodîRem≠C⁄fig
(
uöt32_t
 
SYSCFG_EncodîRem≠
);

277 
SYSCFG_USBI¡îru±LöeRem≠Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
);

278 
SYSCFG_I2CFa°ModePlusC⁄fig
(
uöt32_t
 
SYSCFG_I2CFa°ModePlus
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

279 
SYSCFG_ITC⁄fig
(
uöt32_t
 
SYSCFG_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

280 
SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
);

281 
SYSCFG_BªakC⁄fig
(
uöt32_t
 
SYSCFG_Bªak
);

282 
SYSCFG_By∑ssP¨ôyCheckDißbÀ
();

283 
SYSCFG_SRAMWRPE«bÀ
(
uöt32_t
 
SYSCFG_SRAMWRP
);

284 
FœgSètus
 
SYSCFG_GëFœgSètus
(
uöt32_t
 
SYSCFG_Fœg
);

285 
SYSCFG_CÀ¨Fœg
(
uöt32_t
 
SYSCFG_Fœg
);

287 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h

30 #i‚de‡
__°m32f30x_TIM_H


31 
	#__°m32f30x_TIM_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

57 
uöt16_t
 
TIM_PªsˇÀr
;

60 
uöt16_t
 
TIM_Cou¡îMode
;

63 
uöt32_t
 
TIM_Pîiod
;

67 
uöt16_t
 
TIM_ClockDivisi⁄
;

70 
uöt8_t
 
TIM_Rïëôi⁄Cou¡î
;

78 } 
	tTIM_TimeBa£InôTy≥Def
;

86 
uöt32_t
 
TIM_OCMode
;

89 
uöt16_t
 
TIM_OuçutSèã
;

92 
uöt16_t
 
TIM_OuçutNSèã
;

96 
uöt32_t
 
TIM_Pul£
;

99 
uöt16_t
 
TIM_OCPﬁ¨ôy
;

102 
uöt16_t
 
TIM_OCNPﬁ¨ôy
;

106 
uöt16_t
 
TIM_OCIdÀSèã
;

110 
uöt16_t
 
TIM_OCNIdÀSèã
;

113 } 
	tTIM_OCInôTy≥Def
;

122 
uöt16_t
 
TIM_Ch™√l
;

125 
uöt16_t
 
TIM_ICPﬁ¨ôy
;

128 
uöt16_t
 
TIM_ICSñe˘i⁄
;

131 
uöt16_t
 
TIM_ICPªsˇÀr
;

134 
uöt16_t
 
TIM_ICFûãr
;

136 } 
	tTIM_ICInôTy≥Def
;

146 
uöt16_t
 
TIM_OSSRSèã
;

149 
uöt16_t
 
TIM_OSSISèã
;

152 
uöt16_t
 
TIM_LOCKLevñ
;

155 
uöt16_t
 
TIM_DódTime
;

159 
uöt16_t
 
TIM_Bªak
;

162 
uöt16_t
 
TIM_BªakPﬁ¨ôy
;

165 
uöt16_t
 
TIM_Autom©icOuçut
;

167 } 
	tTIM_BDTRInôTy≥Def
;

175 
	#IS_TIM_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

176 ((
PERIPH
Ë=
TIM2
) || \

177 ((
PERIPH
Ë=
TIM3
) || \

178 ((
PERIPH
Ë=
TIM4
) || \

179 ((
PERIPH
Ë=
TIM6
) || \

180 ((
PERIPH
Ë=
TIM7
) || \

181 ((
PERIPH
Ë=
TIM8
) || \

182 ((
PERIPH
Ë=
TIM15
) || \

183 ((
PERIPH
Ë=
TIM16
) || \

184 ((
PERIPH
Ë=
TIM17
))

186 
	#IS_TIM_LIST1_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

187 ((
PERIPH
Ë=
TIM2
) || \

188 ((
PERIPH
Ë=
TIM3
) || \

189 ((
PERIPH
Ë=
TIM4
) || \

190 ((
PERIPH
Ë=
TIM8
) || \

191 ((
PERIPH
Ë=
TIM15
) || \

192 ((
PERIPH
Ë=
TIM16
) || \

193 ((
PERIPH
Ë=
TIM17
))

196 
	#IS_TIM_LIST2_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

197 ((
PERIPH
Ë=
TIM2
) || \

198 ((
PERIPH
Ë=
TIM3
) || \

199 ((
PERIPH
Ë=
TIM4
) || \

200 ((
PERIPH
Ë=
TIM8
) || \

201 ((
PERIPH
Ë=
TIM15
))

203 
	#IS_TIM_LIST3_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

204 ((
PERIPH
Ë=
TIM2
) || \

205 ((
PERIPH
Ë=
TIM3
) || \

206 ((
PERIPH
Ë=
TIM4
) || \

207 ((
PERIPH
Ë=
TIM8
))

209 
	#IS_TIM_LIST4_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë||\

	)

210 ((
PERIPH
Ë=
TIM8
))

212 
	#IS_TIM_LIST5_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

213 ((
PERIPH
Ë=
TIM2
) || \

214 ((
PERIPH
Ë=
TIM3
) || \

215 ((
PERIPH
Ë=
TIM4
) || \

216 ((
PERIPH
Ë=
TIM6
) || \

217 ((
PERIPH
Ë=
TIM7
) || \

218 ((
PERIPH
Ë=
TIM8
))

220 
	#IS_TIM_LIST6_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

221 ((
PERIPH
Ë=
TIM8
) || \

222 ((
PERIPH
Ë=
TIM15
) || \

223 ((
PERIPH
Ë=
TIM16
) || \

224 ((
PERIPH
Ë=
TIM17
))

227 
	#IS_TIM_LIST7_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM1
Ë|| \

	)

228 ((
PERIPH
Ë=
TIM2
) || \

229 ((
PERIPH
Ë=
TIM3
) || \

230 ((
PERIPH
Ë=
TIM4
) || \

231 ((
PERIPH
Ë=
TIM6
) || \

232 ((
PERIPH
Ë=
TIM7
) || \

233 ((
PERIPH
Ë=
TIM8
) || \

234 ((
PERIPH
Ë=
TIM15
))

236 
	#IS_TIM_LIST8_PERIPH
(
PERIPH
Ë(((PERIPHË=
TIM16
)|| \

	)

237 ((
PERIPH
Ë=
TIM1
)||\

238 ((
PERIPH
Ë=
TIM8
))

244 
	#TIM_OCMode_Timög
 ((
uöt32_t
)0x00000)

	)

245 
	#TIM_OCMode_A˘ive
 ((
uöt32_t
)0x00010)

	)

246 
	#TIM_OCMode_I«˘ive
 ((
uöt32_t
)0x00020)

	)

247 
	#TIM_OCMode_ToggÀ
 ((
uöt32_t
)0x00030)

	)

248 
	#TIM_OCMode_PWM1
 ((
uöt32_t
)0x00060)

	)

249 
	#TIM_OCMode_PWM2
 ((
uöt32_t
)0x00070)

	)

251 
	#TIM_OCMode_RërigîøbÀ_OPM1
 ((
uöt32_t
)0x10000)

	)

252 
	#TIM_OCMode_RërigîøbÀ_OPM2
 ((
uöt32_t
)0x10010)

	)

253 
	#TIM_OCMode_Comböed_PWM1
 ((
uöt32_t
)0x10040)

	)

254 
	#TIM_OCMode_Comböed_PWM2
 ((
uöt32_t
)0x10050)

	)

255 
	#TIM_OCMode_Asymmëric_PWM1
 ((
uöt32_t
)0x10060)

	)

256 
	#TIM_OCMode_Asymmëric_PWM2
 ((
uöt32_t
)0x10070)

	)

258 
	#IS_TIM_OC_MODE
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

259 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

260 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

261 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

262 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

263 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

264 ((
MODE
Ë=
TIM_OCMode_RërigîøbÀ_OPM1
) || \

265 ((
MODE
Ë=
TIM_OCMode_RërigîøbÀ_OPM2
) || \

266 ((
MODE
Ë=
TIM_OCMode_Comböed_PWM1
) || \

267 ((
MODE
Ë=
TIM_OCMode_Comböed_PWM2
) || \

268 ((
MODE
Ë=
TIM_OCMode_Asymmëric_PWM1
) || \

269 ((
MODE
Ë=
TIM_OCMode_Asymmëric_PWM2
))

271 
	#IS_TIM_OCM
(
MODE
Ë(((MODEË=
TIM_OCMode_Timög
Ë|| \

	)

272 ((
MODE
Ë=
TIM_OCMode_A˘ive
) || \

273 ((
MODE
Ë=
TIM_OCMode_I«˘ive
) || \

274 ((
MODE
Ë=
TIM_OCMode_ToggÀ
)|| \

275 ((
MODE
Ë=
TIM_OCMode_PWM1
) || \

276 ((
MODE
Ë=
TIM_OCMode_PWM2
) || \

277 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_A˘ive
) || \

278 ((
MODE
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
) || \

279 ((
MODE
Ë=
TIM_OCMode_RërigîøbÀ_OPM1
) || \

280 ((
MODE
Ë=
TIM_OCMode_RërigîøbÀ_OPM2
) || \

281 ((
MODE
Ë=
TIM_OCMode_Comböed_PWM1
) || \

282 ((
MODE
Ë=
TIM_OCMode_Comböed_PWM2
) || \

283 ((
MODE
Ë=
TIM_OCMode_Asymmëric_PWM1
) || \

284 ((
MODE
Ë=
TIM_OCMode_Asymmëric_PWM2
))

293 
	#TIM_OPMode_SögÀ
 ((
uöt16_t
)0x0008)

	)

294 
	#TIM_OPMode_Rïëôive
 ((
uöt16_t
)0x0000)

	)

295 
	#IS_TIM_OPM_MODE
(
MODE
Ë(((MODEË=
TIM_OPMode_SögÀ
Ë|| \

	)

296 ((
MODE
Ë=
TIM_OPMode_Rïëôive
))

305 
	#TIM_Ch™√l_1
 ((
uöt16_t
)0x0000)

	)

306 
	#TIM_Ch™√l_2
 ((
uöt16_t
)0x0004)

	)

307 
	#TIM_Ch™√l_3
 ((
uöt16_t
)0x0008)

	)

308 
	#TIM_Ch™√l_4
 ((
uöt16_t
)0x000C)

	)

309 
	#TIM_Ch™√l_5
 ((
uöt16_t
)0x0010)

	)

310 
	#TIM_Ch™√l_6
 ((
uöt16_t
)0x0014)

	)

312 
	#IS_TIM_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

313 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

314 ((
CHANNEL
Ë=
TIM_Ch™√l_3
) || \

315 ((
CHANNEL
Ë=
TIM_Ch™√l_4
))

317 
	#IS_TIM_PWMI_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

318 ((
CHANNEL
Ë=
TIM_Ch™√l_2
))

319 
	#IS_TIM_COMPLEMENTARY_CHANNEL
(
CHANNEL
Ë(((CHANNELË=
TIM_Ch™√l_1
Ë|| \

	)

320 ((
CHANNEL
Ë=
TIM_Ch™√l_2
) || \

321 ((
CHANNEL
Ë=
TIM_Ch™√l_3
))

330 
	#TIM_CKD_DIV1
 ((
uöt16_t
)0x0000)

	)

331 
	#TIM_CKD_DIV2
 ((
uöt16_t
)0x0100)

	)

332 
	#TIM_CKD_DIV4
 ((
uöt16_t
)0x0200)

	)

333 
	#IS_TIM_CKD_DIV
(
DIV
Ë(((DIVË=
TIM_CKD_DIV1
Ë|| \

	)

334 ((
DIV
Ë=
TIM_CKD_DIV2
) || \

335 ((
DIV
Ë=
TIM_CKD_DIV4
))

344 
	#TIM_Cou¡îMode_Up
 ((
uöt16_t
)0x0000)

	)

345 
	#TIM_Cou¡îMode_Down
 ((
uöt16_t
)0x0010)

	)

346 
	#TIM_Cou¡îMode_CíãrAlig√d1
 ((
uöt16_t
)0x0020)

	)

347 
	#TIM_Cou¡îMode_CíãrAlig√d2
 ((
uöt16_t
)0x0040)

	)

348 
	#TIM_Cou¡îMode_CíãrAlig√d3
 ((
uöt16_t
)0x0060)

	)

349 
	#IS_TIM_COUNTER_MODE
(
MODE
Ë(((MODEË=
TIM_Cou¡îMode_Up
Ë|| \

	)

350 ((
MODE
Ë=
TIM_Cou¡îMode_Down
) || \

351 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d1
) || \

352 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d2
) || \

353 ((
MODE
Ë=
TIM_Cou¡îMode_CíãrAlig√d3
))

362 
	#TIM_OCPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

363 
	#TIM_OCPﬁ¨ôy_Low
 ((
uöt16_t
)0x0002)

	)

364 
	#IS_TIM_OC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCPﬁ¨ôy_High
Ë|| \

	)

365 ((
POLARITY
Ë=
TIM_OCPﬁ¨ôy_Low
))

374 
	#TIM_OCNPﬁ¨ôy_High
 ((
uöt16_t
)0x0000)

	)

375 
	#TIM_OCNPﬁ¨ôy_Low
 ((
uöt16_t
)0x0008)

	)

376 
	#IS_TIM_OCN_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_OCNPﬁ¨ôy_High
Ë|| \

	)

377 ((
POLARITY
Ë=
TIM_OCNPﬁ¨ôy_Low
))

386 
	#TIM_OuçutSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

387 
	#TIM_OuçutSèã_E«bÀ
 ((
uöt16_t
)0x0001)

	)

388 
	#IS_TIM_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutSèã_DißbÀ
Ë|| \

	)

389 ((
STATE
Ë=
TIM_OuçutSèã_E«bÀ
))

398 
	#TIM_OuçutNSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

399 
	#TIM_OuçutNSèã_E«bÀ
 ((
uöt16_t
)0x0004)

	)

400 
	#IS_TIM_OUTPUTN_STATE
(
STATE
Ë(((STATEË=
TIM_OuçutNSèã_DißbÀ
Ë|| \

	)

401 ((
STATE
Ë=
TIM_OuçutNSèã_E«bÀ
))

410 
	#TIM_CCx_E«bÀ
 ((
uöt16_t
)0x0001)

	)

411 
	#TIM_CCx_DißbÀ
 ((
uöt16_t
)0x0000)

	)

412 
	#IS_TIM_CCX
(
CCX
Ë(((CCXË=
TIM_CCx_E«bÀ
Ë|| \

	)

413 ((
CCX
Ë=
TIM_CCx_DißbÀ
))

422 
	#TIM_CCxN_E«bÀ
 ((
uöt16_t
)0x0004)

	)

423 
	#TIM_CCxN_DißbÀ
 ((
uöt16_t
)0x0000)

	)

424 
	#IS_TIM_CCXN
(
CCXN
Ë(((CCXNË=
TIM_CCxN_E«bÀ
Ë|| \

	)

425 ((
CCXN
Ë=
TIM_CCxN_DißbÀ
))

434 
	#TIM_Bªak_E«bÀ
 ((
uöt16_t
)0x1000)

	)

435 
	#TIM_Bªak_DißbÀ
 ((
uöt16_t
)0x0000)

	)

436 
	#IS_TIM_BREAK_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak_E«bÀ
Ë|| \

	)

437 ((
STATE
Ë=
TIM_Bªak_DißbÀ
))

446 
	#TIM_Bªak1_E«bÀ
 ((
uöt32_t
)0x00001000)

	)

447 
	#TIM_Bªak1_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

448 
	#IS_TIM_BREAK1_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak1_E«bÀ
Ë|| \

	)

449 ((
STATE
Ë=
TIM_Bªak1_DißbÀ
))

458 
	#TIM_Bªak2_E«bÀ
 ((
uöt32_t
)0x01000000)

	)

459 
	#TIM_Bªak2_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

460 
	#IS_TIM_BREAK2_STATE
(
STATE
Ë(((STATEË=
TIM_Bªak2_E«bÀ
Ë|| \

	)

461 ((
STATE
Ë=
TIM_Bªak2_DißbÀ
))

470 
	#TIM_BªakPﬁ¨ôy_Low
 ((
uöt16_t
)0x0000)

	)

471 
	#TIM_BªakPﬁ¨ôy_High
 ((
uöt16_t
)0x2000)

	)

472 
	#IS_TIM_BREAK_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_BªakPﬁ¨ôy_Low
Ë|| \

	)

473 ((
POLARITY
Ë=
TIM_BªakPﬁ¨ôy_High
))

482 
	#TIM_Bªak1Pﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

483 
	#TIM_Bªak1Pﬁ¨ôy_High
 ((
uöt32_t
)0x00002000)

	)

484 
	#IS_TIM_BREAK1_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_Bªak1Pﬁ¨ôy_Low
Ë|| \

	)

485 ((
POLARITY
Ë=
TIM_Bªak1Pﬁ¨ôy_High
))

494 
	#TIM_Bªak2Pﬁ¨ôy_Low
 ((
uöt32_t
)0x00000000)

	)

495 
	#TIM_Bªak2Pﬁ¨ôy_High
 ((
uöt32_t
)0x02000000)

	)

496 
	#IS_TIM_BREAK2_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_Bªak2Pﬁ¨ôy_Low
Ë|| \

	)

497 ((
POLARITY
Ë=
TIM_Bªak2Pﬁ¨ôy_High
))

506 
	#IS_TIM_BREAK1_FILTER
(
FILTER
Ë((FILTERË<0xF)

	)

515 
	#IS_TIM_BREAK2_FILTER
(
FILTER
Ë((FILTERË<0xF)

	)

524 
	#TIM_Autom©icOuçut_E«bÀ
 ((
uöt16_t
)0x4000)

	)

525 
	#TIM_Autom©icOuçut_DißbÀ
 ((
uöt16_t
)0x0000)

	)

526 
	#IS_TIM_AUTOMATIC_OUTPUT_STATE
(
STATE
Ë(((STATEË=
TIM_Autom©icOuçut_E«bÀ
Ë|| \

	)

527 ((
STATE
Ë=
TIM_Autom©icOuçut_DißbÀ
))

536 
	#TIM_LOCKLevñ_OFF
 ((
uöt16_t
)0x0000)

	)

537 
	#TIM_LOCKLevñ_1
 ((
uöt16_t
)0x0100)

	)

538 
	#TIM_LOCKLevñ_2
 ((
uöt16_t
)0x0200)

	)

539 
	#TIM_LOCKLevñ_3
 ((
uöt16_t
)0x0300)

	)

540 
	#IS_TIM_LOCK_LEVEL
(
LEVEL
Ë(((LEVELË=
TIM_LOCKLevñ_OFF
Ë|| \

	)

541 ((
LEVEL
Ë=
TIM_LOCKLevñ_1
) || \

542 ((
LEVEL
Ë=
TIM_LOCKLevñ_2
) || \

543 ((
LEVEL
Ë=
TIM_LOCKLevñ_3
))

552 
	#TIM_OSSISèã_E«bÀ
 ((
uöt16_t
)0x0400)

	)

553 
	#TIM_OSSISèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

554 
	#IS_TIM_OSSI_STATE
(
STATE
Ë(((STATEË=
TIM_OSSISèã_E«bÀ
Ë|| \

	)

555 ((
STATE
Ë=
TIM_OSSISèã_DißbÀ
))

564 
	#TIM_OSSRSèã_E«bÀ
 ((
uöt16_t
)0x0800)

	)

565 
	#TIM_OSSRSèã_DißbÀ
 ((
uöt16_t
)0x0000)

	)

566 
	#IS_TIM_OSSR_STATE
(
STATE
Ë(((STATEË=
TIM_OSSRSèã_E«bÀ
Ë|| \

	)

567 ((
STATE
Ë=
TIM_OSSRSèã_DißbÀ
))

576 
	#TIM_OCIdÀSèã_Së
 ((
uöt16_t
)0x0100)

	)

577 
	#TIM_OCIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

578 
	#IS_TIM_OCIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCIdÀSèã_Së
Ë|| \

	)

579 ((
STATE
Ë=
TIM_OCIdÀSèã_Re£t
))

588 
	#TIM_OCNIdÀSèã_Së
 ((
uöt16_t
)0x0200)

	)

589 
	#TIM_OCNIdÀSèã_Re£t
 ((
uöt16_t
)0x0000)

	)

590 
	#IS_TIM_OCNIDLE_STATE
(
STATE
Ë(((STATEË=
TIM_OCNIdÀSèã_Së
Ë|| \

	)

591 ((
STATE
Ë=
TIM_OCNIdÀSèã_Re£t
))

600 
	#TIM_ICPﬁ¨ôy_Risög
 ((
uöt16_t
)0x0000)

	)

601 
	#TIM_ICPﬁ¨ôy_FÆlög
 ((
uöt16_t
)0x0002)

	)

602 
	#TIM_ICPﬁ¨ôy_BŸhEdge
 ((
uöt16_t
)0x000A)

	)

603 
	#IS_TIM_IC_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ICPﬁ¨ôy_Risög
Ë|| \

	)

604 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_FÆlög
)|| \

605 ((
POLARITY
Ë=
TIM_ICPﬁ¨ôy_BŸhEdge
))

614 
	#TIM_ICSñe˘i⁄_Dúe˘TI
 ((
uöt16_t
)0x0001Ë

	)

616 
	#TIM_ICSñe˘i⁄_Indúe˘TI
 ((
uöt16_t
)0x0002Ë

	)

618 
	#TIM_ICSñe˘i⁄_TRC
 ((
uöt16_t
)0x0003Ë

	)

619 
	#IS_TIM_IC_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_ICSñe˘i⁄_Dúe˘TI
Ë|| \

	)

620 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_Indúe˘TI
) || \

621 ((
SELECTION
Ë=
TIM_ICSñe˘i⁄_TRC
))

630 
	#TIM_ICPSC_DIV1
 ((
uöt16_t
)0x0000Ë

	)

631 
	#TIM_ICPSC_DIV2
 ((
uöt16_t
)0x0004Ë

	)

632 
	#TIM_ICPSC_DIV4
 ((
uöt16_t
)0x0008Ë

	)

633 
	#TIM_ICPSC_DIV8
 ((
uöt16_t
)0x000CË

	)

634 
	#IS_TIM_IC_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ICPSC_DIV1
Ë|| \

	)

635 ((
PRESCALER
Ë=
TIM_ICPSC_DIV2
) || \

636 ((
PRESCALER
Ë=
TIM_ICPSC_DIV4
) || \

637 ((
PRESCALER
Ë=
TIM_ICPSC_DIV8
))

646 
	#TIM_IT_Upd©e
 ((
uöt16_t
)0x0001)

	)

647 
	#TIM_IT_CC1
 ((
uöt16_t
)0x0002)

	)

648 
	#TIM_IT_CC2
 ((
uöt16_t
)0x0004)

	)

649 
	#TIM_IT_CC3
 ((
uöt16_t
)0x0008)

	)

650 
	#TIM_IT_CC4
 ((
uöt16_t
)0x0010)

	)

651 
	#TIM_IT_COM
 ((
uöt16_t
)0x0020)

	)

652 
	#TIM_IT_Triggî
 ((
uöt16_t
)0x0040)

	)

653 
	#TIM_IT_Bªak
 ((
uöt16_t
)0x0080)

	)

654 
	#IS_TIM_IT
(
IT
Ë((((ITË& (
uöt16_t
)0xFF00Ë=0x0000Ë&& ((ITË!0x0000))

	)

656 
	#IS_TIM_GET_IT
(
IT
Ë(((ITË=
TIM_IT_Upd©e
Ë|| \

	)

657 ((
IT
Ë=
TIM_IT_CC1
) || \

658 ((
IT
Ë=
TIM_IT_CC2
) || \

659 ((
IT
Ë=
TIM_IT_CC3
) || \

660 ((
IT
Ë=
TIM_IT_CC4
) || \

661 ((
IT
Ë=
TIM_IT_COM
) || \

662 ((
IT
Ë=
TIM_IT_Triggî
) || \

663 ((
IT
Ë=
TIM_IT_Bªak
))

672 
	#TIM_DMABa£_CR1
 ((
uöt16_t
)0x0000)

	)

673 
	#TIM_DMABa£_CR2
 ((
uöt16_t
)0x0001)

	)

674 
	#TIM_DMABa£_SMCR
 ((
uöt16_t
)0x0002)

	)

675 
	#TIM_DMABa£_DIER
 ((
uöt16_t
)0x0003)

	)

676 
	#TIM_DMABa£_SR
 ((
uöt16_t
)0x0004)

	)

677 
	#TIM_DMABa£_EGR
 ((
uöt16_t
)0x0005)

	)

678 
	#TIM_DMABa£_CCMR1
 ((
uöt16_t
)0x0006)

	)

679 
	#TIM_DMABa£_CCMR2
 ((
uöt16_t
)0x0007)

	)

680 
	#TIM_DMABa£_CCER
 ((
uöt16_t
)0x0008)

	)

681 
	#TIM_DMABa£_CNT
 ((
uöt16_t
)0x0009)

	)

682 
	#TIM_DMABa£_PSC
 ((
uöt16_t
)0x000A)

	)

683 
	#TIM_DMABa£_ARR
 ((
uöt16_t
)0x000B)

	)

684 
	#TIM_DMABa£_RCR
 ((
uöt16_t
)0x000C)

	)

685 
	#TIM_DMABa£_CCR1
 ((
uöt16_t
)0x000D)

	)

686 
	#TIM_DMABa£_CCR2
 ((
uöt16_t
)0x000E)

	)

687 
	#TIM_DMABa£_CCR3
 ((
uöt16_t
)0x000F)

	)

688 
	#TIM_DMABa£_CCR4
 ((
uöt16_t
)0x0010)

	)

689 
	#TIM_DMABa£_BDTR
 ((
uöt16_t
)0x0011)

	)

690 
	#TIM_DMABa£_DCR
 ((
uöt16_t
)0x0012)

	)

691 
	#TIM_DMABa£_OR
 ((
uöt16_t
)0x0013)

	)

692 
	#TIM_DMABa£_CCMR3
 ((
uöt16_t
)0x0014)

	)

693 
	#TIM_DMABa£_CCR5
 ((
uöt16_t
)0x0015)

	)

694 
	#TIM_DMABa£_CCR6
 ((
uöt16_t
)0x0016)

	)

695 
	#IS_TIM_DMA_BASE
(
BASE
Ë(((BASEË=
TIM_DMABa£_CR1
Ë|| \

	)

696 ((
BASE
Ë=
TIM_DMABa£_CR2
) || \

697 ((
BASE
Ë=
TIM_DMABa£_SMCR
) || \

698 ((
BASE
Ë=
TIM_DMABa£_DIER
) || \

699 ((
BASE
Ë=
TIM_DMABa£_SR
) || \

700 ((
BASE
Ë=
TIM_DMABa£_EGR
) || \

701 ((
BASE
Ë=
TIM_DMABa£_CCMR1
) || \

702 ((
BASE
Ë=
TIM_DMABa£_CCMR2
) || \

703 ((
BASE
Ë=
TIM_DMABa£_CCER
) || \

704 ((
BASE
Ë=
TIM_DMABa£_CNT
) || \

705 ((
BASE
Ë=
TIM_DMABa£_PSC
) || \

706 ((
BASE
Ë=
TIM_DMABa£_ARR
) || \

707 ((
BASE
Ë=
TIM_DMABa£_RCR
) || \

708 ((
BASE
Ë=
TIM_DMABa£_CCR1
) || \

709 ((
BASE
Ë=
TIM_DMABa£_CCR2
) || \

710 ((
BASE
Ë=
TIM_DMABa£_CCR3
) || \

711 ((
BASE
Ë=
TIM_DMABa£_CCR4
) || \

712 ((
BASE
Ë=
TIM_DMABa£_BDTR
) || \

713 ((
BASE
Ë=
TIM_DMABa£_DCR
) || \

714 ((
BASE
Ë=
TIM_DMABa£_OR
) || \

715 ((
BASE
Ë=
TIM_DMABa£_CCMR3
) || \

716 ((
BASE
Ë=
TIM_DMABa£_CCR5
) || \

717 ((
BASE
Ë=
TIM_DMABa£_CCR6
))

726 
	#TIM_DMABur°Lígth_1Tøns„r
 ((
uöt16_t
)0x0000)

	)

727 
	#TIM_DMABur°Lígth_2Tøns„rs
 ((
uöt16_t
)0x0100)

	)

728 
	#TIM_DMABur°Lígth_3Tøns„rs
 ((
uöt16_t
)0x0200)

	)

729 
	#TIM_DMABur°Lígth_4Tøns„rs
 ((
uöt16_t
)0x0300)

	)

730 
	#TIM_DMABur°Lígth_5Tøns„rs
 ((
uöt16_t
)0x0400)

	)

731 
	#TIM_DMABur°Lígth_6Tøns„rs
 ((
uöt16_t
)0x0500)

	)

732 
	#TIM_DMABur°Lígth_7Tøns„rs
 ((
uöt16_t
)0x0600)

	)

733 
	#TIM_DMABur°Lígth_8Tøns„rs
 ((
uöt16_t
)0x0700)

	)

734 
	#TIM_DMABur°Lígth_9Tøns„rs
 ((
uöt16_t
)0x0800)

	)

735 
	#TIM_DMABur°Lígth_10Tøns„rs
 ((
uöt16_t
)0x0900)

	)

736 
	#TIM_DMABur°Lígth_11Tøns„rs
 ((
uöt16_t
)0x0A00)

	)

737 
	#TIM_DMABur°Lígth_12Tøns„rs
 ((
uöt16_t
)0x0B00)

	)

738 
	#TIM_DMABur°Lígth_13Tøns„rs
 ((
uöt16_t
)0x0C00)

	)

739 
	#TIM_DMABur°Lígth_14Tøns„rs
 ((
uöt16_t
)0x0D00)

	)

740 
	#TIM_DMABur°Lígth_15Tøns„rs
 ((
uöt16_t
)0x0E00)

	)

741 
	#TIM_DMABur°Lígth_16Tøns„rs
 ((
uöt16_t
)0x0F00)

	)

742 
	#TIM_DMABur°Lígth_17Tøns„rs
 ((
uöt16_t
)0x1000)

	)

743 
	#TIM_DMABur°Lígth_18Tøns„rs
 ((
uöt16_t
)0x1100)

	)

744 
	#IS_TIM_DMA_LENGTH
(
LENGTH
Ë(((LENGTHË=
TIM_DMABur°Lígth_1Tøns„r
Ë|| \

	)

745 ((
LENGTH
Ë=
TIM_DMABur°Lígth_2Tøns„rs
) || \

746 ((
LENGTH
Ë=
TIM_DMABur°Lígth_3Tøns„rs
) || \

747 ((
LENGTH
Ë=
TIM_DMABur°Lígth_4Tøns„rs
) || \

748 ((
LENGTH
Ë=
TIM_DMABur°Lígth_5Tøns„rs
) || \

749 ((
LENGTH
Ë=
TIM_DMABur°Lígth_6Tøns„rs
) || \

750 ((
LENGTH
Ë=
TIM_DMABur°Lígth_7Tøns„rs
) || \

751 ((
LENGTH
Ë=
TIM_DMABur°Lígth_8Tøns„rs
) || \

752 ((
LENGTH
Ë=
TIM_DMABur°Lígth_9Tøns„rs
) || \

753 ((
LENGTH
Ë=
TIM_DMABur°Lígth_10Tøns„rs
) || \

754 ((
LENGTH
Ë=
TIM_DMABur°Lígth_11Tøns„rs
) || \

755 ((
LENGTH
Ë=
TIM_DMABur°Lígth_12Tøns„rs
) || \

756 ((
LENGTH
Ë=
TIM_DMABur°Lígth_13Tøns„rs
) || \

757 ((
LENGTH
Ë=
TIM_DMABur°Lígth_14Tøns„rs
) || \

758 ((
LENGTH
Ë=
TIM_DMABur°Lígth_15Tøns„rs
) || \

759 ((
LENGTH
Ë=
TIM_DMABur°Lígth_16Tøns„rs
) || \

760 ((
LENGTH
Ë=
TIM_DMABur°Lígth_17Tøns„rs
) || \

761 ((
LENGTH
Ë=
TIM_DMABur°Lígth_18Tøns„rs
))

770 
	#TIM_DMA_Upd©e
 ((
uöt16_t
)0x0100)

	)

771 
	#TIM_DMA_CC1
 ((
uöt16_t
)0x0200)

	)

772 
	#TIM_DMA_CC2
 ((
uöt16_t
)0x0400)

	)

773 
	#TIM_DMA_CC3
 ((
uöt16_t
)0x0800)

	)

774 
	#TIM_DMA_CC4
 ((
uöt16_t
)0x1000)

	)

775 
	#TIM_DMA_COM
 ((
uöt16_t
)0x2000)

	)

776 
	#TIM_DMA_Triggî
 ((
uöt16_t
)0x4000)

	)

777 
	#IS_TIM_DMA_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0x80FFË=0x0000Ë&& ((SOURCEË!0x0000))

	)

787 
	#TIM_ExtTRGPSC_OFF
 ((
uöt16_t
)0x0000)

	)

788 
	#TIM_ExtTRGPSC_DIV2
 ((
uöt16_t
)0x1000)

	)

789 
	#TIM_ExtTRGPSC_DIV4
 ((
uöt16_t
)0x2000)

	)

790 
	#TIM_ExtTRGPSC_DIV8
 ((
uöt16_t
)0x3000)

	)

791 
	#IS_TIM_EXT_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
TIM_ExtTRGPSC_OFF
Ë|| \

	)

792 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV2
) || \

793 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV4
) || \

794 ((
PRESCALER
Ë=
TIM_ExtTRGPSC_DIV8
))

803 
	#TIM_TS_ITR0
 ((
uöt16_t
)0x0000)

	)

804 
	#TIM_TS_ITR1
 ((
uöt16_t
)0x0010)

	)

805 
	#TIM_TS_ITR2
 ((
uöt16_t
)0x0020)

	)

806 
	#TIM_TS_ITR3
 ((
uöt16_t
)0x0030)

	)

807 
	#TIM_TS_TI1F_ED
 ((
uöt16_t
)0x0040)

	)

808 
	#TIM_TS_TI1FP1
 ((
uöt16_t
)0x0050)

	)

809 
	#TIM_TS_TI2FP2
 ((
uöt16_t
)0x0060)

	)

810 
	#TIM_TS_ETRF
 ((
uöt16_t
)0x0070)

	)

811 
	#IS_TIM_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

812 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

813 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

814 ((
SELECTION
Ë=
TIM_TS_ITR3
) || \

815 ((
SELECTION
Ë=
TIM_TS_TI1F_ED
) || \

816 ((
SELECTION
Ë=
TIM_TS_TI1FP1
) || \

817 ((
SELECTION
Ë=
TIM_TS_TI2FP2
) || \

818 ((
SELECTION
Ë=
TIM_TS_ETRF
))

819 
	#IS_TIM_INTERNAL_TRIGGER_SELECTION
(
SELECTION
Ë(((SELECTIONË=
TIM_TS_ITR0
Ë|| \

	)

820 ((
SELECTION
Ë=
TIM_TS_ITR1
) || \

821 ((
SELECTION
Ë=
TIM_TS_ITR2
) || \

822 ((
SELECTION
Ë=
TIM_TS_ITR3
))

831 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1
 ((
uöt16_t
)0x0050)

	)

832 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI2
 ((
uöt16_t
)0x0060)

	)

833 
	#TIM_TIxExã∫ÆCLK1Sour˚_TI1ED
 ((
uöt16_t
)0x0040)

	)

842 
	#TIM_ExtTRGPﬁ¨ôy_Invîãd
 ((
uöt16_t
)0x8000)

	)

843 
	#TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
 ((
uöt16_t
)0x0000)

	)

844 
	#IS_TIM_EXT_POLARITY
(
POLARITY
Ë(((POLARITYË=
TIM_ExtTRGPﬁ¨ôy_Invîãd
Ë|| \

	)

845 ((
POLARITY
Ë=
TIM_ExtTRGPﬁ¨ôy_N⁄Invîãd
))

854 
	#TIM_PSCRñﬂdMode_Upd©e
 ((
uöt16_t
)0x0000)

	)

855 
	#TIM_PSCRñﬂdMode_Immedüã
 ((
uöt16_t
)0x0001)

	)

856 
	#IS_TIM_PRESCALER_RELOAD
(
RELOAD
Ë(((RELOADË=
TIM_PSCRñﬂdMode_Upd©e
Ë|| \

	)

857 ((
RELOAD
Ë=
TIM_PSCRñﬂdMode_Immedüã
))

866 
	#TIM_F‹˚dA˘i⁄_A˘ive
 ((
uöt16_t
)0x0050)

	)

867 
	#TIM_F‹˚dA˘i⁄_InA˘ive
 ((
uöt16_t
)0x0040)

	)

868 
	#IS_TIM_FORCED_ACTION
(
ACTION
Ë(((ACTIONË=
TIM_F‹˚dA˘i⁄_A˘ive
Ë|| \

	)

869 ((
ACTION
Ë=
TIM_F‹˚dA˘i⁄_InA˘ive
))

878 
	#TIM_EncodîMode_TI1
 ((
uöt16_t
)0x0001)

	)

879 
	#TIM_EncodîMode_TI2
 ((
uöt16_t
)0x0002)

	)

880 
	#TIM_EncodîMode_TI12
 ((
uöt16_t
)0x0003)

	)

881 
	#IS_TIM_ENCODER_MODE
(
MODE
Ë(((MODEË=
TIM_EncodîMode_TI1
Ë|| \

	)

882 ((
MODE
Ë=
TIM_EncodîMode_TI2
) || \

883 ((
MODE
Ë=
TIM_EncodîMode_TI12
))

893 
	#TIM_EvítSour˚_Upd©e
 ((
uöt16_t
)0x0001)

	)

894 
	#TIM_EvítSour˚_CC1
 ((
uöt16_t
)0x0002)

	)

895 
	#TIM_EvítSour˚_CC2
 ((
uöt16_t
)0x0004)

	)

896 
	#TIM_EvítSour˚_CC3
 ((
uöt16_t
)0x0008)

	)

897 
	#TIM_EvítSour˚_CC4
 ((
uöt16_t
)0x0010)

	)

898 
	#TIM_EvítSour˚_COM
 ((
uöt16_t
)0x0020)

	)

899 
	#TIM_EvítSour˚_Triggî
 ((
uöt16_t
)0x0040)

	)

900 
	#TIM_EvítSour˚_Bªak
 ((
uöt16_t
)0x0080)

	)

901 
	#TIM_EvítSour˚_Bªak2
 ((
uöt16_t
)0x0100)

	)

902 
	#IS_TIM_EVENT_SOURCE
(
SOURCE
Ë((((SOURCEË& (
uöt16_t
)0xFE00Ë=0x0000Ë&& ((SOURCEË!0x0000))

	)

912 
	#TIM_Upd©eSour˚_GlobÆ
 ((
uöt16_t
)0x0000Ë

	)

915 
	#TIM_Upd©eSour˚_Reguœr
 ((
uöt16_t
)0x0001Ë

	)

916 
	#IS_TIM_UPDATE_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_Upd©eSour˚_GlobÆ
Ë|| \

	)

917 ((
SOURCE
Ë=
TIM_Upd©eSour˚_Reguœr
))

926 
	#TIM_OCPªlﬂd_E«bÀ
 ((
uöt16_t
)0x0008)

	)

927 
	#TIM_OCPªlﬂd_DißbÀ
 ((
uöt16_t
)0x0000)

	)

928 
	#IS_TIM_OCPRELOAD_STATE
(
STATE
Ë(((STATEË=
TIM_OCPªlﬂd_E«bÀ
Ë|| \

	)

929 ((
STATE
Ë=
TIM_OCPªlﬂd_DißbÀ
))

938 
	#TIM_OCFa°_E«bÀ
 ((
uöt16_t
)0x0004)

	)

939 
	#TIM_OCFa°_DißbÀ
 ((
uöt16_t
)0x0000)

	)

940 
	#IS_TIM_OCFAST_STATE
(
STATE
Ë(((STATEË=
TIM_OCFa°_E«bÀ
Ë|| \

	)

941 ((
STATE
Ë=
TIM_OCFa°_DißbÀ
))

951 
	#TIM_OCCÀ¨_E«bÀ
 ((
uöt16_t
)0x0080)

	)

952 
	#TIM_OCCÀ¨_DißbÀ
 ((
uöt16_t
)0x0000)

	)

953 
	#IS_TIM_OCCLEAR_STATE
(
STATE
Ë(((STATEË=
TIM_OCCÀ¨_E«bÀ
Ë|| \

	)

954 ((
STATE
Ë=
TIM_OCCÀ¨_DißbÀ
))

963 
	#TIM_TRGOSour˚_Re£t
 ((
uöt16_t
)0x0000)

	)

964 
	#TIM_TRGOSour˚_E«bÀ
 ((
uöt16_t
)0x0010)

	)

965 
	#TIM_TRGOSour˚_Upd©e
 ((
uöt16_t
)0x0020)

	)

966 
	#TIM_TRGOSour˚_OC1
 ((
uöt16_t
)0x0030)

	)

967 
	#TIM_TRGOSour˚_OC1Ref
 ((
uöt16_t
)0x0040)

	)

968 
	#TIM_TRGOSour˚_OC2Ref
 ((
uöt16_t
)0x0050)

	)

969 
	#TIM_TRGOSour˚_OC3Ref
 ((
uöt16_t
)0x0060)

	)

970 
	#TIM_TRGOSour˚_OC4Ref
 ((
uöt16_t
)0x0070)

	)

971 
	#IS_TIM_TRGO_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGOSour˚_Re£t
Ë|| \

	)

972 ((
SOURCE
Ë=
TIM_TRGOSour˚_E«bÀ
) || \

973 ((
SOURCE
Ë=
TIM_TRGOSour˚_Upd©e
) || \

974 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1
) || \

975 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC1Ref
) || \

976 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC2Ref
) || \

977 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC3Ref
) || \

978 ((
SOURCE
Ë=
TIM_TRGOSour˚_OC4Ref
))

981 
	#TIM_TRGO2Sour˚_Re£t
 ((
uöt32_t
)0x00000000)

	)

982 
	#TIM_TRGO2Sour˚_E«bÀ
 ((
uöt32_t
)0x00100000)

	)

983 
	#TIM_TRGO2Sour˚_Upd©e
 ((
uöt32_t
)0x00200000)

	)

984 
	#TIM_TRGO2Sour˚_OC1
 ((
uöt32_t
)0x00300000)

	)

985 
	#TIM_TRGO2Sour˚_OC1Ref
 ((
uöt32_t
)0x00400000)

	)

986 
	#TIM_TRGO2Sour˚_OC2Ref
 ((
uöt32_t
)0x00500000)

	)

987 
	#TIM_TRGO2Sour˚_OC3Ref
 ((
uöt32_t
)0x00600000)

	)

988 
	#TIM_TRGO2Sour˚_OC4Ref
 ((
uöt32_t
)0x00700000)

	)

989 
	#TIM_TRGO2Sour˚_OC5Ref
 ((
uöt32_t
)0x00800000)

	)

990 
	#TIM_TRGO2Sour˚_OC6Ref
 ((
uöt32_t
)0x00900000)

	)

991 
	#TIM_TRGO2Sour˚_OC4Ref_RisögFÆlög
 ((
uöt32_t
)0x00A00000)

	)

992 
	#TIM_TRGO2Sour˚_OC6Ref_RisögFÆlög
 ((
uöt32_t
)0x00B00000)

	)

993 
	#TIM_TRGO2Sour˚_OC4RefRisög_OC6RefRisög
 ((
uöt32_t
)0x00C00000)

	)

994 
	#TIM_TRGO2Sour˚_OC4RefRisög_OC6RefFÆlög
 ((
uöt32_t
)0x00D00000)

	)

995 
	#TIM_TRGO2Sour˚_OC5RefRisög_OC6RefRisög
 ((
uöt32_t
)0x00E00000)

	)

996 
	#TIM_TRGO2Sour˚_OC5RefRisög_OC6RefFÆlög
 ((
uöt32_t
)0x00F00000)

	)

997 
	#IS_TIM_TRGO2_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_TRGO2Sour˚_Re£t
Ë|| \

	)

998 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_E«bÀ
) || \

999 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_Upd©e
) || \

1000 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC1
) || \

1001 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC1Ref
) || \

1002 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC2Ref
) || \

1003 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC3Ref
) || \

1004 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC4Ref
) || \

1005 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC5Ref
) || \

1006 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC6Ref
) || \

1007 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC4Ref_RisögFÆlög
) || \

1008 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC6Ref_RisögFÆlög
) || \

1009 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC4RefRisög_OC6RefRisög
) || \

1010 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC4RefRisög_OC6RefFÆlög
) || \

1011 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC5RefRisög_OC6RefRisög
) || \

1012 ((
SOURCE
Ë=
TIM_TRGO2Sour˚_OC5RefRisög_OC6RefFÆlög
))

1021 
	#TIM_SœveMode_Re£t
 ((
uöt32_t
)0x00004)

	)

1022 
	#TIM_SœveMode_G©ed
 ((
uöt32_t
)0x00005)

	)

1023 
	#TIM_SœveMode_Triggî
 ((
uöt32_t
)0x00006)

	)

1024 
	#TIM_SœveMode_Exã∫Æ1
 ((
uöt32_t
)0x00007)

	)

1025 
	#TIM_SœveMode_Comböed_Re£tTriggî
 ((
uöt32_t
)0x10000)

	)

1026 
	#IS_TIM_SLAVE_MODE
(
MODE
Ë(((MODEË=
TIM_SœveMode_Re£t
Ë|| \

	)

1027 ((
MODE
Ë=
TIM_SœveMode_G©ed
) || \

1028 ((
MODE
Ë=
TIM_SœveMode_Triggî
) || \

1029 ((
MODE
Ë=
TIM_SœveMode_Exã∫Æ1
) || \

1030 ((
MODE
Ë=
TIM_SœveMode_Comböed_Re£tTriggî
))

1039 
	#TIM_Ma°îSœveMode_E«bÀ
 ((
uöt16_t
)0x0080)

	)

1040 
	#TIM_Ma°îSœveMode_DißbÀ
 ((
uöt16_t
)0x0000)

	)

1041 
	#IS_TIM_MSM_STATE
(
STATE
Ë(((STATEË=
TIM_Ma°îSœveMode_E«bÀ
Ë|| \

	)

1042 ((
STATE
Ë=
TIM_Ma°îSœveMode_DißbÀ
))

1049 
	#TIM16_GPIO
 ((
uöt16_t
)0x0000)

	)

1050 
	#TIM16_RTC_CLK
 ((
uöt16_t
)0x0001)

	)

1051 
	#TIM16_HSEDiv32
 ((
uöt16_t
)0x0002)

	)

1052 
	#TIM16_MCO
 ((
uöt16_t
)0x0003)

	)

1054 
	#TIM1_ADC1_AWDG1
 ((
uöt16_t
)0x0001)

	)

1055 
	#TIM1_ADC1_AWDG2
 ((
uöt16_t
)0x0002)

	)

1056 
	#TIM1_ADC1_AWDG3
 ((
uöt16_t
)0x0003)

	)

1057 
	#TIM1_ADC4_AWDG1
 ((
uöt16_t
)0x0004)

	)

1058 
	#TIM1_ADC4_AWDG2
 ((
uöt16_t
)0x0008)

	)

1059 
	#TIM1_ADC4_AWDG3
 ((
uöt16_t
)0x000C)

	)

1061 
	#TIM8_ADC2_AWDG1
 ((
uöt16_t
)0x0001)

	)

1062 
	#TIM8_ADC2_AWDG2
 ((
uöt16_t
)0x0002)

	)

1063 
	#TIM8_ADC2_AWDG3
 ((
uöt16_t
)0x0003)

	)

1064 
	#TIM8_ADC3_AWDG1
 ((
uöt16_t
)0x0004)

	)

1065 
	#TIM8_ADC3_AWDG2
 ((
uöt16_t
)0x0008)

	)

1066 
	#TIM8_ADC3_AWDG3
 ((
uöt16_t
)0x000C)

	)

1068 
	#IS_TIM_REMAP
(
TIM_REMAP
Ë(((TIM_REMAPË=
TIM16_GPIO
)|| \

	)

1069 ((
TIM_REMAP
Ë=
TIM16_RTC_CLK
) || \

1070 ((
TIM_REMAP
Ë=
TIM16_HSEDiv32
) || \

1071 ((
TIM_REMAP
Ë=
TIM16_MCO
) ||\

1072 ((
TIM_REMAP
Ë=
TIM1_ADC1_AWDG1
) ||\

1073 ((
TIM_REMAP
Ë=
TIM1_ADC1_AWDG2
) ||\

1074 ((
TIM_REMAP
Ë=
TIM1_ADC1_AWDG3
) ||\

1075 ((
TIM_REMAP
Ë=
TIM1_ADC4_AWDG1
) ||\

1076 ((
TIM_REMAP
Ë=
TIM1_ADC4_AWDG2
) ||\

1077 ((
TIM_REMAP
Ë=
TIM1_ADC4_AWDG3
) ||\

1078 ((
TIM_REMAP
Ë=
TIM8_ADC2_AWDG1
) ||\

1079 ((
TIM_REMAP
Ë=
TIM8_ADC2_AWDG2
) ||\

1080 ((
TIM_REMAP
Ë=
TIM8_ADC2_AWDG3
) ||\

1081 ((
TIM_REMAP
Ë=
TIM8_ADC3_AWDG1
) ||\

1082 ((
TIM_REMAP
Ë=
TIM8_ADC3_AWDG2
) ||\

1083 ((
TIM_REMAP
Ë=
TIM8_ADC3_AWDG3
))

1092 
	#TIM_FLAG_Upd©e
 ((
uöt32_t
)0x00001)

	)

1093 
	#TIM_FLAG_CC1
 ((
uöt32_t
)0x00002)

	)

1094 
	#TIM_FLAG_CC2
 ((
uöt32_t
)0x00004)

	)

1095 
	#TIM_FLAG_CC3
 ((
uöt32_t
)0x00008)

	)

1096 
	#TIM_FLAG_CC4
 ((
uöt32_t
)0x00010)

	)

1097 
	#TIM_FLAG_COM
 ((
uöt32_t
)0x00020)

	)

1098 
	#TIM_FLAG_Triggî
 ((
uöt32_t
)0x00040)

	)

1099 
	#TIM_FLAG_Bªak
 ((
uöt32_t
)0x00080)

	)

1100 
	#TIM_FLAG_Bªak2
 ((
uöt32_t
)0x00100)

	)

1101 
	#TIM_FLAG_CC1OF
 ((
uöt32_t
)0x00200)

	)

1102 
	#TIM_FLAG_CC2OF
 ((
uöt32_t
)0x00400)

	)

1103 
	#TIM_FLAG_CC3OF
 ((
uöt32_t
)0x00800)

	)

1104 
	#TIM_FLAG_CC4OF
 ((
uöt32_t
)0x01000)

	)

1105 
	#TIM_FLAG_CC5
 ((
uöt32_t
)0x10000)

	)

1106 
	#TIM_FLAG_CC6
 ((
uöt32_t
)0x20000)

	)

1107 
	#IS_TIM_GET_FLAG
(
FLAG
Ë(((FLAGË=
TIM_FLAG_Upd©e
Ë|| \

	)

1108 ((
FLAG
Ë=
TIM_FLAG_CC1
) || \

1109 ((
FLAG
Ë=
TIM_FLAG_CC2
) || \

1110 ((
FLAG
Ë=
TIM_FLAG_CC3
) || \

1111 ((
FLAG
Ë=
TIM_FLAG_CC4
) || \

1112 ((
FLAG
Ë=
TIM_FLAG_COM
) || \

1113 ((
FLAG
Ë=
TIM_FLAG_Triggî
) || \

1114 ((
FLAG
Ë=
TIM_FLAG_Bªak
) || \

1115 ((
FLAG
Ë=
TIM_FLAG_Bªak2
) || \

1116 ((
FLAG
Ë=
TIM_FLAG_CC1OF
) || \

1117 ((
FLAG
Ë=
TIM_FLAG_CC2OF
) || \

1118 ((
FLAG
Ë=
TIM_FLAG_CC3OF
) || \

1119 ((
FLAG
Ë=
TIM_FLAG_CC4OF
) ||\

1120 ((
FLAG
Ë=
TIM_FLAG_CC5
) ||\

1121 ((
FLAG
Ë=
TIM_FLAG_CC6
))

1123 
	#IS_TIM_CLEAR_FLAG
(
TIM_FLAG
Ë((((TIM_FLAGË& (
uöt32_t
)0xE000Ë=0x0000Ë&& ((TIM_FLAGË!0x0000))

	)

1131 
	#TIM_OCRe„ªn˚CÀ¨_ETRF
 ((
uöt16_t
)0x0008)

	)

1132 
	#TIM_OCRe„ªn˚CÀ¨_OCREFCLR
 ((
uöt16_t
)0x0000)

	)

1133 
	#TIM_OCREFERENCECECLEAR_SOURCE
(
SOURCE
Ë(((SOURCEË=
TIM_OCRe„ªn˚CÀ¨_ETRF
Ë|| \

	)

1134 ((
SOURCE
Ë=
TIM_OCRe„ªn˚CÀ¨_OCREFCLR
))

1140 
	#IS_TIM_IC_FILTER
(
ICFILTER
Ë((ICFILTERË<0xF)

	)

1149 
	#IS_TIM_EXT_FILTER
(
EXTFILTER
Ë((EXTFILTERË<0xF)

	)

1158 
	#TIM_DMABur°Lígth_1Byã
 
TIM_DMABur°Lígth_1Tøns„r


	)

1159 
	#TIM_DMABur°Lígth_2Byãs
 
TIM_DMABur°Lígth_2Tøns„rs


	)

1160 
	#TIM_DMABur°Lígth_3Byãs
 
TIM_DMABur°Lígth_3Tøns„rs


	)

1161 
	#TIM_DMABur°Lígth_4Byãs
 
TIM_DMABur°Lígth_4Tøns„rs


	)

1162 
	#TIM_DMABur°Lígth_5Byãs
 
TIM_DMABur°Lígth_5Tøns„rs


	)

1163 
	#TIM_DMABur°Lígth_6Byãs
 
TIM_DMABur°Lígth_6Tøns„rs


	)

1164 
	#TIM_DMABur°Lígth_7Byãs
 
TIM_DMABur°Lígth_7Tøns„rs


	)

1165 
	#TIM_DMABur°Lígth_8Byãs
 
TIM_DMABur°Lígth_8Tøns„rs


	)

1166 
	#TIM_DMABur°Lígth_9Byãs
 
TIM_DMABur°Lígth_9Tøns„rs


	)

1167 
	#TIM_DMABur°Lígth_10Byãs
 
TIM_DMABur°Lígth_10Tøns„rs


	)

1168 
	#TIM_DMABur°Lígth_11Byãs
 
TIM_DMABur°Lígth_11Tøns„rs


	)

1169 
	#TIM_DMABur°Lígth_12Byãs
 
TIM_DMABur°Lígth_12Tøns„rs


	)

1170 
	#TIM_DMABur°Lígth_13Byãs
 
TIM_DMABur°Lígth_13Tøns„rs


	)

1171 
	#TIM_DMABur°Lígth_14Byãs
 
TIM_DMABur°Lígth_14Tøns„rs


	)

1172 
	#TIM_DMABur°Lígth_15Byãs
 
TIM_DMABur°Lígth_15Tøns„rs


	)

1173 
	#TIM_DMABur°Lígth_16Byãs
 
TIM_DMABur°Lígth_16Tøns„rs


	)

1174 
	#TIM_DMABur°Lígth_17Byãs
 
TIM_DMABur°Lígth_17Tøns„rs


	)

1175 
	#TIM_DMABur°Lígth_18Byãs
 
TIM_DMABur°Lígth_18Tøns„rs


	)

1188 
TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
);

1189 
TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1190 
TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
);

1191 
TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
);

1192 
TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
);

1193 
TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
);

1194 
TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
);

1195 
uöt32_t
 
TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
);

1196 
uöt16_t
 
TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
);

1197 
TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1198 
TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
);

1199 
TIM_UIFRem≠
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1200 
TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1201 
TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
);

1202 
TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
);

1203 
TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1206 
TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1207 
TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1208 
TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1209 
TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1210 
TIM_OC5Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1211 
TIM_OC6Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1212 
TIM_Sñe˘GC5C1
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1213 
TIM_Sñe˘GC5C2
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1214 
TIM_Sñe˘GC5C3
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1215 
TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
);

1216 
TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, 
uöt32_t
 
TIM_OCMode
);

1217 
TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
);

1218 
TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
);

1219 
TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
);

1220 
TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
);

1221 
TIM_SëCom∑ª5
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª5
);

1222 
TIM_SëCom∑ª6
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª6
);

1223 
TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1224 
TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1225 
TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1226 
TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1227 
TIM_F‹˚dOC5C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1228 
TIM_F‹˚dOC6C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
);

1229 
TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1230 
TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1231 
TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1232 
TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1233 
TIM_OC5PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1234 
TIM_OC6PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
);

1235 
TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1236 
TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1237 
TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1238 
TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
);

1239 
TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1240 
TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1241 
TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1242 
TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1243 
TIM_CÀ¨OC5Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1244 
TIM_CÀ¨OC6Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
);

1245 
TIM_Sñe˘OCREFCÀ¨
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCRe„ªn˚CÀ¨
);

1246 
TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1247 
TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1248 
TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1249 
TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1250 
TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1251 
TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
);

1252 
TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1253 
TIM_OC5Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1254 
TIM_OC6Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
);

1255 
TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
);

1256 
TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
);

1259 
TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1260 
TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1261 
TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
);

1262 
uöt32_t
 
TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
);

1263 
uöt32_t
 
TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
);

1264 
uöt32_t
 
TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
);

1265 
uöt32_t
 
TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
);

1266 
TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1267 
TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1268 
TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1269 
TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
);

1272 
TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
);

1273 
TIM_Bªak1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_Bªak1Pﬁ¨ôy
, 
uöt8_t
 
TIM_Bªak1Fûãr
);

1274 
TIM_Bªak2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_Bªak2Pﬁ¨ôy
, 
uöt8_t
 
TIM_Bªak2Fûãr
);

1275 
TIM_Bªak1Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1276 
TIM_Bªak2Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1277 
TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
);

1278 
TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1279 
TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1280 
TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1283 
TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1284 
TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
);

1285 
FœgSètus
 
TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_FLAG
);

1286 
TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
);

1287 
ITSètus
 
TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1288 
TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
);

1289 
TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
);

1290 
TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1291 
TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1294 
TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
);

1295 
TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1296 
TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

1297 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
);

1298 
TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1299 
uöt16_t
 
ExtTRGFûãr
);

1300 
TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

1301 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
);

1304 
TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
);

1305 
TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
);

1306 
TIM_Sñe˘OuçutTriggî2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_TRGO2Sour˚
);

1307 
TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_SœveMode
);

1308 
TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
);

1309 
TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
, uöt16_à
TIM_ExtTRGPﬁ¨ôy
,

1310 
uöt16_t
 
ExtTRGFûãr
);

1313 
TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

1314 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
);

1315 
TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

1318 
TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
);

1320 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h

30 #i‚de‡
__STM32F30x_USART_H


31 
	#__STM32F30x_USART_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

58 
uöt32_t
 
USART_BaudR©e
;

63 
uöt32_t
 
USART_W‹dLígth
;

66 
uöt32_t
 
USART_St›Bôs
;

69 
uöt32_t
 
USART_P¨ôy
;

76 
uöt32_t
 
USART_Mode
;

79 
uöt32_t
 
USART_H¨dw¨eFlowC⁄åﬁ
;

82 } 
	tUSART_InôTy≥Def
;

90 
uöt32_t
 
USART_Clock
;

93 
uöt32_t
 
USART_CPOL
;

96 
uöt32_t
 
USART_CPHA
;

99 
uöt32_t
 
USART_La°Bô
;

102 } 
	tUSART_ClockInôTy≥Def
;

110 
	#IS_USART_ALL_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

111 ((
PERIPH
Ë=
USART2
) || \

112 ((
PERIPH
Ë=
USART3
) || \

113 ((
PERIPH
Ë=
UART4
) || \

114 ((
PERIPH
Ë=
UART5
))

116 
	#IS_USART_123_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

117 ((
PERIPH
Ë=
USART2
) || \

118 ((
PERIPH
Ë=
USART3
))

120 
	#IS_USART_1234_PERIPH
(
PERIPH
Ë(((PERIPHË=
USART1
Ë|| \

	)

121 ((
PERIPH
Ë=
USART2
) || \

122 ((
PERIPH
Ë=
USART3
) || \

123 ((
PERIPH
Ë=
UART4
))

130 
	#USART_W‹dLígth_8b
 ((
uöt32_t
)0x00000000)

	)

131 
	#USART_W‹dLígth_9b
 
USART_CR1_M


	)

132 
	#IS_USART_WORD_LENGTH
(
LENGTH
Ë(((LENGTHË=
USART_W‹dLígth_8b
Ë|| \

	)

133 ((
LENGTH
Ë=
USART_W‹dLígth_9b
))

142 
	#USART_St›Bôs_1
 ((
uöt32_t
)0x00000000)

	)

143 
	#USART_St›Bôs_2
 
USART_CR2_STOP_1


	)

144 
	#USART_St›Bôs_1_5
 (
USART_CR2_STOP_0
 | 
USART_CR2_STOP_1
)

	)

145 
	#IS_USART_STOPBITS
(
STOPBITS
Ë(((STOPBITSË=
USART_St›Bôs_1
Ë|| \

	)

146 ((
STOPBITS
Ë=
USART_St›Bôs_2
) || \

147 ((
STOPBITS
Ë=
USART_St›Bôs_1_5
))

156 
	#USART_P¨ôy_No
 ((
uöt32_t
)0x00000000)

	)

157 
	#USART_P¨ôy_Eví
 
USART_CR1_PCE


	)

158 
	#USART_P¨ôy_Odd
 (
USART_CR1_PCE
 | 
USART_CR1_PS
)

	)

159 
	#IS_USART_PARITY
(
PARITY
Ë(((PARITYË=
USART_P¨ôy_No
Ë|| \

	)

160 ((
PARITY
Ë=
USART_P¨ôy_Eví
) || \

161 ((
PARITY
Ë=
USART_P¨ôy_Odd
))

170 
	#USART_Mode_Rx
 
USART_CR1_RE


	)

171 
	#USART_Mode_Tx
 
USART_CR1_TE


	)

172 
	#IS_USART_MODE
(
MODE
Ë((((MODEË& (
uöt32_t
)0xFFFFFFF3Ë=0x00Ë&& \

	)

173 ((
MODE
Ë!(
uöt32_t
)0x00))

182 
	#USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
 ((
uöt32_t
)0x00000000)

	)

183 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS
 
USART_CR3_RTSE


	)

184 
	#USART_H¨dw¨eFlowC⁄åﬁ_CTS
 
USART_CR3_CTSE


	)

185 
	#USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
 (
USART_CR3_RTSE
 | 
USART_CR3_CTSE
)

	)

186 
	#IS_USART_HARDWARE_FLOW_CONTROL
(
CONTROL
)\

	)

187 (((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
) || \

188 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS
) || \

189 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_CTS
) || \

190 ((
CONTROL
Ë=
USART_H¨dw¨eFlowC⁄åﬁ_RTS_CTS
))

199 
	#USART_Clock_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

200 
	#USART_Clock_E«bÀ
 
USART_CR2_CLKEN


	)

201 
	#IS_USART_CLOCK
(
CLOCK
Ë(((CLOCKË=
USART_Clock_DißbÀ
Ë|| \

	)

202 ((
CLOCK
Ë=
USART_Clock_E«bÀ
))

211 
	#USART_CPOL_Low
 ((
uöt32_t
)0x00000000)

	)

212 
	#USART_CPOL_High
 
USART_CR2_CPOL


	)

213 
	#IS_USART_CPOL
(
CPOL
Ë(((CPOLË=
USART_CPOL_Low
Ë|| ((CPOLË=
USART_CPOL_High
))

	)

223 
	#USART_CPHA_1Edge
 ((
uöt32_t
)0x00000000)

	)

224 
	#USART_CPHA_2Edge
 
USART_CR2_CPHA


	)

225 
	#IS_USART_CPHA
(
CPHA
Ë(((CPHAË=
USART_CPHA_1Edge
Ë|| ((CPHAË=
USART_CPHA_2Edge
))

	)

235 
	#USART_La°Bô_DißbÀ
 ((
uöt32_t
)0x00000000)

	)

236 
	#USART_La°Bô_E«bÀ
 
USART_CR2_LBCL


	)

237 
	#IS_USART_LASTBIT
(
LASTBIT
Ë(((LASTBITË=
USART_La°Bô_DißbÀ
Ë|| \

	)

238 ((
LASTBIT
Ë=
USART_La°Bô_E«bÀ
))

247 
	#USART_DMAReq_Tx
 
USART_CR3_DMAT


	)

248 
	#USART_DMAReq_Rx
 
USART_CR3_DMAR


	)

249 
	#IS_USART_DMAREQ
(
DMAREQ
Ë((((DMAREQË& (
uöt32_t
)0xFFFFFF3FË=0x00Ë&& \

	)

250 ((
DMAREQ
Ë!(
uöt32_t
)0x00))

260 
	#USART_DMAOnEº‹_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

261 
	#USART_DMAOnEº‹_DißbÀ
 
USART_CR3_DDRE


	)

262 
	#IS_USART_DMAONERROR
(
DMAERROR
Ë(((DMAERRORË=
USART_DMAOnEº‹_DißbÀ
)|| \

	)

263 ((
DMAERROR
Ë=
USART_DMAOnEº‹_E«bÀ
))

272 
	#USART_WakeUp_IdÀLöe
 ((
uöt32_t
)0x00000000)

	)

273 
	#USART_WakeUp_AddªssM¨k
 
USART_CR1_WAKE


	)

274 
	#IS_USART_MUTEMODE_WAKEUP
(
WAKEUP
Ë(((WAKEUPË=
USART_WakeUp_IdÀLöe
Ë|| \

	)

275 ((
WAKEUP
Ë=
USART_WakeUp_AddªssM¨k
))

284 
	#USART_AddªssLígth_4b
 ((
uöt32_t
)0x00000000)

	)

285 
	#USART_AddªssLígth_7b
 
USART_CR2_ADDM7


	)

286 
	#IS_USART_ADDRESS_DETECTION
(
ADDRESS
Ë(((ADDRESSË=
USART_AddªssLígth_4b
Ë|| \

	)

287 ((
ADDRESS
Ë=
USART_AddªssLígth_7b
))

296 
	#USART_WakeUpSour˚_AddªssM©ch
 ((
uöt32_t
)0x00000000)

	)

297 
	#USART_WakeUpSour˚_SèπBô
 
USART_CR3_WUS_1


	)

298 
	#USART_WakeUpSour˚_RXNE
 (
uöt32_t
)(
USART_CR3_WUS_0
 | 
USART_CR3_WUS_1
)

	)

299 
	#IS_USART_STOPMODE_WAKEUPSOURCE
(
SOURCE
Ë(((SOURCEË=
USART_WakeUpSour˚_AddªssM©ch
Ë|| \

	)

300 ((
SOURCE
Ë=
USART_WakeUpSour˚_SèπBô
) || \

301 ((
SOURCE
Ë=
USART_WakeUpSour˚_RXNE
))

310 
	#USART_LINBªakDëe˘Lígth_10b
 ((
uöt32_t
)0x00000000)

	)

311 
	#USART_LINBªakDëe˘Lígth_11b
 
USART_CR2_LBDL


	)

312 
	#IS_USART_LIN_BREAK_DETECT_LENGTH
(
LENGTH
Ë\

	)

313 (((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_10b
) || \

314 ((
LENGTH
Ë=
USART_LINBªakDëe˘Lígth_11b
))

323 
	#USART_IrDAMode_LowPowî
 
USART_CR3_IRLP


	)

324 
	#USART_IrDAMode_N‹mÆ
 ((
uöt32_t
)0x00000000)

	)

325 
	#IS_USART_IRDA_MODE
(
MODE
Ë(((MODEË=
USART_IrDAMode_LowPowî
Ë|| \

	)

326 ((
MODE
Ë=
USART_IrDAMode_N‹mÆ
))

335 
	#USART_DEPﬁ¨ôy_High
 ((
uöt32_t
)0x00000000)

	)

336 
	#USART_DEPﬁ¨ôy_Low
 
USART_CR3_DEP


	)

337 
	#IS_USART_DE_POLARITY
(
POLARITY
Ë(((POLARITYË=
USART_DEPﬁ¨ôy_Low
Ë|| \

	)

338 ((
POLARITY
Ë=
USART_DEPﬁ¨ôy_High
))

347 
	#USART_InvPö_Tx
 
USART_CR2_TXINV


	)

348 
	#USART_InvPö_Rx
 
USART_CR2_RXINV


	)

349 
	#IS_USART_INVERSTION_PIN
(
PIN
Ë((((PINË& (
uöt32_t
)0xFFFCFFFFË=0x00Ë&& \

	)

350 ((
PIN
Ë!(
uöt32_t
)0x00))

360 
	#USART_AutoBaudR©e_SèπBô
 ((
uöt32_t
)0x00000000)

	)

361 
	#USART_AutoBaudR©e_FÆlögEdge
 
USART_CR2_ABRMODE_0


	)

362 
	#USART_AutoBaudR©e_0x7FFøme
 
USART_CR2_ABRMODE_1


	)

363 
	#USART_AutoBaudR©e_0x55Føme
 (
USART_CR2_ABRMODE_0
 | 
USART_CR2_ABRMODE_1
)

	)

364 
	#IS_USART_AUTOBAUDRATE_MODE
(
MODE
Ë(((MODEË=
USART_AutoBaudR©e_SèπBô
Ë|| \

	)

365 ((
MODE
Ë=
USART_AutoBaudR©e_FÆlögEdge
) || \

366 ((
MODE
Ë=
USART_AutoBaudR©e_0x7FFøme
) || \

367 ((
MODE
Ë=
USART_AutoBaudR©e_0x55Føme
))

376 
	#USART_OVRDëe˘i⁄_E«bÀ
 ((
uöt32_t
)0x00000000)

	)

377 
	#USART_OVRDëe˘i⁄_DißbÀ
 
USART_CR3_OVRDIS


	)

378 
	#IS_USART_OVRDETECTION
(
OVR
Ë(((OVRË=
USART_OVRDëe˘i⁄_E«bÀ
)|| \

	)

379 ((
OVR
Ë=
USART_OVRDëe˘i⁄_DißbÀ
))

387 
	#USART_Reque°_ABRRQ
 
USART_RQR_ABRRQ


	)

388 
	#USART_Reque°_SBKRQ
 
USART_RQR_SBKRQ


	)

389 
	#USART_Reque°_MMRQ
 
USART_RQR_MMRQ


	)

390 
	#USART_Reque°_RXFRQ
 
USART_RQR_RXFRQ


	)

391 
	#USART_Reque°_TXFRQ
 
USART_RQR_TXFRQ


	)

393 
	#IS_USART_REQUEST
(
REQUEST
Ë(((REQUESTË=
USART_Reque°_TXFRQ
Ë|| \

	)

394 ((
REQUEST
Ë=
USART_Reque°_RXFRQ
) || \

395 ((
REQUEST
Ë=
USART_Reque°_MMRQ
) || \

396 ((
REQUEST
Ë=
USART_Reque°_SBKRQ
) || \

397 ((
REQUEST
Ë=
USART_Reque°_ABRRQ
))

405 
	#USART_FLAG_REACK
 
USART_ISR_REACK


	)

406 
	#USART_FLAG_TEACK
 
USART_ISR_TEACK


	)

407 
	#USART_FLAG_WU
 
USART_ISR_WUF


	)

408 
	#USART_FLAG_RWU
 
USART_ISR_RWU


	)

409 
	#USART_FLAG_SBK
 
USART_ISR_SBKF


	)

410 
	#USART_FLAG_CM
 
USART_ISR_CMF


	)

411 
	#USART_FLAG_BUSY
 
USART_ISR_BUSY


	)

412 
	#USART_FLAG_ABRF
 
USART_ISR_ABRF


	)

413 
	#USART_FLAG_ABRE
 
USART_ISR_ABRE


	)

414 
	#USART_FLAG_EOB
 
USART_ISR_EOBF


	)

415 
	#USART_FLAG_RTO
 
USART_ISR_RTOF


	)

416 
	#USART_FLAG_nCTSS
 
USART_ISR_CTS


	)

417 
	#USART_FLAG_CTS
 
USART_ISR_CTSIF


	)

418 
	#USART_FLAG_LBD
 
USART_ISR_LBD


	)

419 
	#USART_FLAG_TXE
 
USART_ISR_TXE


	)

420 
	#USART_FLAG_TC
 
USART_ISR_TC


	)

421 
	#USART_FLAG_RXNE
 
USART_ISR_RXNE


	)

422 
	#USART_FLAG_IDLE
 
USART_ISR_IDLE


	)

423 
	#USART_FLAG_ORE
 
USART_ISR_ORE


	)

424 
	#USART_FLAG_NE
 
USART_ISR_NE


	)

425 
	#USART_FLAG_FE
 
USART_ISR_FE


	)

426 
	#USART_FLAG_PE
 
USART_ISR_PE


	)

427 
	#IS_USART_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_PE
Ë|| ((FLAGË=
USART_FLAG_TXE
Ë|| \

	)

428 ((
FLAG
Ë=
USART_FLAG_TC
Ë|| ((FLAGË=
USART_FLAG_RXNE
) || \

429 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_LBD
) || \

430 ((
FLAG
Ë=
USART_FLAG_CTS
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

431 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
) || \

432 ((
FLAG
Ë=
USART_FLAG_nCTSS
Ë|| ((FLAGË=
USART_FLAG_RTO
) || \

433 ((
FLAG
Ë=
USART_FLAG_EOB
Ë|| ((FLAGË=
USART_FLAG_ABRE
) || \

434 ((
FLAG
Ë=
USART_FLAG_ABRF
Ë|| ((FLAGË=
USART_FLAG_BUSY
) || \

435 ((
FLAG
Ë=
USART_FLAG_CM
Ë|| ((FLAGË=
USART_FLAG_SBK
) || \

436 ((
FLAG
Ë=
USART_FLAG_RWU
Ë|| ((FLAGË=
USART_FLAG_WU
) || \

437 ((
FLAG
Ë=
USART_FLAG_TEACK
)|| ((FLAGË=
USART_FLAG_REACK
))

439 
	#IS_USART_CLEAR_FLAG
(
FLAG
Ë(((FLAGË=
USART_FLAG_WU
Ë|| ((FLAGË=
USART_FLAG_TC
Ë|| \

	)

440 ((
FLAG
Ë=
USART_FLAG_IDLE
Ë|| ((FLAGË=
USART_FLAG_ORE
) || \

441 ((
FLAG
Ë=
USART_FLAG_NE
Ë|| ((FLAGË=
USART_FLAG_FE
) || \

442 ((
FLAG
Ë=
USART_FLAG_LBD
Ë|| ((FLAGË=
USART_FLAG_CTS
) || \

443 ((
FLAG
Ë=
USART_FLAG_RTO
Ë|| ((FLAGË=
USART_FLAG_EOB
) || \

444 ((
FLAG
Ë=
USART_FLAG_CM
Ë|| ((FLAGË=
USART_FLAG_PE
))

459 
	#USART_IT_WU
 ((
uöt32_t
)0x00140316)

	)

460 
	#USART_IT_CM
 ((
uöt32_t
)0x0011010E)

	)

461 
	#USART_IT_EOB
 ((
uöt32_t
)0x000C011B)

	)

462 
	#USART_IT_RTO
 ((
uöt32_t
)0x000B011A)

	)

463 
	#USART_IT_PE
 ((
uöt32_t
)0x00000108)

	)

464 
	#USART_IT_TXE
 ((
uöt32_t
)0x00070107)

	)

465 
	#USART_IT_TC
 ((
uöt32_t
)0x00060106)

	)

466 
	#USART_IT_RXNE
 ((
uöt32_t
)0x00050105)

	)

467 
	#USART_IT_IDLE
 ((
uöt32_t
)0x00040104)

	)

468 
	#USART_IT_LBD
 ((
uöt32_t
)0x00080206)

	)

469 
	#USART_IT_CTS
 ((
uöt32_t
)0x0009030A)

	)

470 
	#USART_IT_ERR
 ((
uöt32_t
)0x00000300)

	)

471 
	#USART_IT_ORE
 ((
uöt32_t
)0x00030300)

	)

472 
	#USART_IT_NE
 ((
uöt32_t
)0x00020300)

	)

473 
	#USART_IT_FE
 ((
uöt32_t
)0x00010300)

	)

475 
	#IS_USART_CONFIG_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

476 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

477 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

478 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ERR
) || \

479 ((
IT
Ë=
USART_IT_RTO
Ë|| ((ITË=
USART_IT_EOB
) || \

480 ((
IT
Ë=
USART_IT_CM
Ë|| ((ITË=
USART_IT_WU
))

482 
	#IS_USART_GET_IT
(
IT
Ë(((ITË=
USART_IT_PE
Ë|| ((ITË=
USART_IT_TXE
Ë|| \

	)

483 ((
IT
Ë=
USART_IT_TC
Ë|| ((ITË=
USART_IT_RXNE
) || \

484 ((
IT
Ë=
USART_IT_IDLE
Ë|| ((ITË=
USART_IT_LBD
) || \

485 ((
IT
Ë=
USART_IT_CTS
Ë|| ((ITË=
USART_IT_ORE
) || \

486 ((
IT
Ë=
USART_IT_NE
Ë|| ((ITË=
USART_IT_FE
) || \

487 ((
IT
Ë=
USART_IT_RTO
Ë|| ((ITË=
USART_IT_EOB
) || \

488 ((
IT
Ë=
USART_IT_CM
Ë|| ((ITË=
USART_IT_WU
))

490 
	#IS_USART_CLEAR_IT
(
IT
Ë(((ITË=
USART_IT_TC
Ë|| ((ITË=
USART_IT_PE
Ë|| \

	)

491 ((
IT
Ë=
USART_IT_FE
Ë|| ((ITË=
USART_IT_NE
) || \

492 ((
IT
Ë=
USART_IT_ORE
Ë|| ((ITË=
USART_IT_IDLE
) || \

493 ((
IT
Ë=
USART_IT_LBD
Ë|| ((ITË=
USART_IT_CTS
) || \

494 ((
IT
Ë=
USART_IT_RTO
Ë|| ((ITË=
USART_IT_EOB
) || \

495 ((
IT
Ë=
USART_IT_CM
Ë|| ((ITË=
USART_IT_WU
))

504 
	#IS_USART_BAUDRATE
(
BAUDRATE
Ë(((BAUDRATEË> 0Ë&& ((BAUDRATEË< 0x005B8D81))

	)

505 
	#IS_USART_DE_ASSERTION_DEASSERTION_TIME
(
TIME
Ë((TIMEË<0x1F)

	)

506 
	#IS_USART_AUTO_RETRY_COUNTER
(
COUNTER
Ë((COUNTERË<0x7)

	)

507 
	#IS_USART_TIMEOUT
(
TIMEOUT
Ë((TIMEOUTË<0x00FFFFFF)

	)

508 
	#IS_USART_DATA
(
DATA
Ë((DATAË<0x1FF)

	)

522 
USART_DeInô
(
USART_Ty≥Def
* 
USARTx
);

523 
USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
);

524 
USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
);

525 
USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

526 
USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
);

527 
USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

528 
USART_Dúe˘i⁄ModeCmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_Dúe˘i⁄Mode
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

529 
USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
);

530 
USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

531 
USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

532 
USART_MSBFú°Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

533 
USART_D©aInvCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

534 
USART_InvPöCmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_InvPö
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

535 
USART_SWAPPöCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

536 
USART_Re˚ivîTimeOutCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

537 
USART_SëRe˚ivîTimeOut
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_Re˚ivîTimeOut
);

540 
USART_STOPModeCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

541 
USART_St›ModeWakeUpSour˚C⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_WakeUpSour˚
);

544 
USART_AutoBaudR©eCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

545 
USART_AutoBaudR©eC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_AutoBaudR©e
);

548 
USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
);

549 
uöt16_t
 
USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
);

552 
USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
);

553 
USART_MuãModeWakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_WakeUp
);

554 
USART_MuãModeCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

555 
USART_AddªssDëe˘i⁄C⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_AddªssLígth
);

557 
USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_LINBªakDëe˘Lígth
);

558 
USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

561 
USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

564 
USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

565 
USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

566 
USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
);

567 
USART_SëAutoRëryCou¡
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_AutoCou¡
);

568 
USART_SëBlockLígth
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_BlockLígth
);

571 
USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_IrDAMode
);

572 
USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

575 
USART_DECmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

576 
USART_DEPﬁ¨ôyC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DEPﬁ¨ôy
);

577 
USART_SëDEAs£πi⁄Time
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DEAs£πi⁄Time
);

578 
USART_SëDEDós£πi⁄Time
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DEDós£πi⁄Time
);

581 
USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

582 
USART_DMARe˚±i⁄Eº‹C⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DMAOnEº‹
);

585 
USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

586 
USART_Reque°Cmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_Reque°
, 
Fun˘i⁄ÆSèã
 
NewSèã
);

587 
USART_OvîrunDëe˘i⁄C⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_OVRDëe˘i⁄
);

588 
FœgSètus
 
USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_FLAG
);

589 
USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_FLAG
);

590 
ITSètus
 
USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_IT
);

591 
USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_IT
);

593 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_wwdg.h

30 #i‚de‡
__STM32F30X_WWDG_H


31 
	#__STM32F30X_WWDG_H


	)

33 #ifde‡
__˝lu•lus


38 
	~"°m32f30x.h
"

58 
	#WWDG_PªsˇÀr_1
 ((
uöt32_t
)0x00000000)

	)

59 
	#WWDG_PªsˇÀr_2
 ((
uöt32_t
)0x00000080)

	)

60 
	#WWDG_PªsˇÀr_4
 ((
uöt32_t
)0x00000100)

	)

61 
	#WWDG_PªsˇÀr_8
 ((
uöt32_t
)0x00000180)

	)

62 
	#IS_WWDG_PRESCALER
(
PRESCALER
Ë(((PRESCALERË=
WWDG_PªsˇÀr_1
Ë|| \

	)

63 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_2
) || \

64 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_4
) || \

65 ((
PRESCALER
Ë=
WWDG_PªsˇÀr_8
))

66 
	#IS_WWDG_WINDOW_VALUE
(
VALUE
Ë((VALUEË<0x7F)

	)

67 
	#IS_WWDG_COUNTER
(
COUNTER
Ë(((COUNTERË>0x40Ë&& ((COUNTERË<0x7F))

	)

80 
WWDG_DeInô
();

83 
WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
);

84 
WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
);

85 
WWDG_E«bÀIT
();

86 
WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
);

89 
WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
);

92 
FœgSètus
 
WWDG_GëFœgSètus
();

93 
WWDG_CÀ¨Fœg
();

95 #ifde‡
__˝lu•lus


	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_adc.c

76 
	~"°m32f30x_adc.h
"

77 
	~"°m32f30x_rcc.h
"

92 
	#CFGR_CLEAR_Mask
 ((
uöt32_t
)0xFDFFC007)

	)

95 
	#JSQR_CLEAR_Mask
 ((
uöt32_t
)0x00000000)

	)

98 
	#CCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFC10E0)

	)

101 
	#JDR_Off£t
 ((
uöt8_t
)0x80)

	)

139 
	$ADC_DeInô
(
ADC_Ty≥Def
* 
ADCx
)

142 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

145 if((
ADCx
 =
ADC1
Ë|| (ADCx =
ADC2
))

148 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_ADC12
, 
ENABLE
);

150 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_ADC12
, 
DISABLE
);

152 if((
ADCx
 =
ADC3
Ë|| (ADCx =
ADC4
))

155 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_ADC34
, 
ENABLE
);

157 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_ADC34
, 
DISABLE
);

159 
	}
}

168 
	$ADC_Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

170 
uöt32_t
 
tm¥eg1
 = 0;

172 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

173 
	`as£π_∑øm
(
	`IS_ADC_CONVMODE
(
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
));

174 
	`as£π_∑øm
(
	`IS_ADC_RESOLUTION
(
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
));

175 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEvít
));

176 
	`as£π_∑øm
(
	`IS_EXTERNALTRIG_EDGE
(
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigEvítEdge
));

177 
	`as£π_∑øm
(
	`IS_ADC_DATA_ALIGN
(
ADC_InôSåu˘
->
ADC_D©aAlign
));

178 
	`as£π_∑øm
(
	`IS_ADC_OVRUNMODE
(
ADC_InôSåu˘
->
ADC_OvîrunMode
));

179 
	`as£π_∑øm
(
	`IS_ADC_AUTOINJECMODE
(
ADC_InôSåu˘
->
ADC_AutoInjMode
));

180 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_LENGTH
(
ADC_InôSåu˘
->
ADC_NbrOfRegCh™√l
));

184 
tm¥eg1
 = 
ADCx
->
CFGR
;

186 
tm¥eg1
 &
CFGR_CLEAR_Mask
;

189 
tm¥eg1
 |(
uöt32_t
)
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 |

190 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
|

191 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEvít
|

192 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigEvítEdge
|

193 
ADC_InôSåu˘
->
ADC_D©aAlign
|

194 
ADC_InôSåu˘
->
ADC_OvîrunMode
|

195 
ADC_InôSåu˘
->
ADC_AutoInjMode
;

198 
ADCx
->
CFGR
 = 
tm¥eg1
;

202 
tm¥eg1
 = 
ADCx
->
SQR1
;

204 
tm¥eg1
 &~(
uöt32_t
)(
ADC_SQR1_L
);

207 
tm¥eg1
 |(
uöt32_t
Ë(
ADC_InôSåu˘
->
ADC_NbrOfRegCh™√l
 - 1);

209 
ADCx
->
SQR1
 = 
tm¥eg1
;

211 
	}
}

218 
	$ADC_Såu˘Inô
(
ADC_InôTy≥Def
* 
ADC_InôSåu˘
)

221 
ADC_InôSåu˘
->
ADC_C⁄töuousC⁄vMode
 = 
DISABLE
;

222 
ADC_InôSåu˘
->
ADC_Resﬁuti⁄
 = 
ADC_Resﬁuti⁄_12b
;

223 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigC⁄vEvít
 = 
ADC_Exã∫ÆTrigC⁄vEvít_0
;

224 
ADC_InôSåu˘
->
ADC_Exã∫ÆTrigEvítEdge
 = 
ADC_Exã∫ÆTrigEvítEdge_N⁄e
;

225 
ADC_InôSåu˘
->
ADC_D©aAlign
 = 
ADC_D©aAlign_Right
;

226 
ADC_InôSåu˘
->
ADC_OvîrunMode
 = 
DISABLE
;

227 
ADC_InôSåu˘
->
ADC_AutoInjMode
 = 
DISABLE
;

228 
ADC_InôSåu˘
->
ADC_NbrOfRegCh™√l
 = 1;

229 
	}
}

239 
	$ADC_Inje˘edInô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_Inje˘edInôTy≥Def
* 
ADC_Inje˘edInôSåu˘
)

241 
uöt32_t
 
tm¥eg1
 = 0;

243 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

244 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Inje˘edInôSåu˘
->
ADC_Exã∫ÆTrigInjecC⁄vEvít
));

245 
	`as£π_∑øm
(
	`IS_EXTERNALTRIGINJ_EDGE
(
ADC_Inje˘edInôSåu˘
->
ADC_Exã∫ÆTrigInjecEvítEdge
));

246 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
ADC_Inje˘edInôSåu˘
->
ADC_NbrOfInjecCh™√l
));

247 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚1
));

248 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚2
));

249 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚3
));

250 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚4
));

254 
tm¥eg1
 = 
ADCx
->
JSQR
;

256 
tm¥eg1
 &
JSQR_CLEAR_Mask
;

260 
tm¥eg1
 = (
uöt32_t
Ë((
ADC_Inje˘edInôSåu˘
->
ADC_NbrOfInjecCh™√l
 - (
uöt8_t
)1) |

261 
ADC_Inje˘edInôSåu˘
->
ADC_Exã∫ÆTrigInjecC⁄vEvít
 |

262 
ADC_Inje˘edInôSåu˘
->
ADC_Exã∫ÆTrigInjecEvítEdge
 |

263 (
uöt32_t
)((
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚1
) << 8) |

264 (
uöt32_t
)((
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚2
) << 14) |

265 (
uöt32_t
)((
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚3
) << 20) |

266 (
uöt32_t
)((
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚4
) << 26));

268 
ADCx
->
JSQR
 = 
tm¥eg1
;

269 
	}
}

276 
	$ADC_Inje˘edSåu˘Inô
(
ADC_Inje˘edInôTy≥Def
* 
ADC_Inje˘edInôSåu˘
)

278 
ADC_Inje˘edInôSåu˘
->
ADC_Exã∫ÆTrigInjecC⁄vEvít
 = 
ADC_Exã∫ÆTrigInjecC⁄vEvít_0
;

279 
ADC_Inje˘edInôSåu˘
->
ADC_Exã∫ÆTrigInjecEvítEdge
 = 
ADC_Exã∫ÆTrigInjecEvítEdge_N⁄e
;

280 
ADC_Inje˘edInôSåu˘
->
ADC_NbrOfInjecCh™√l
 = 1;

281 
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚1
 = 
ADC_Inje˘edCh™√l_1
;

282 
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚2
 = 
ADC_Inje˘edCh™√l_1
;

283 
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚3
 = 
ADC_Inje˘edCh™√l_1
;

284 
ADC_Inje˘edInôSåu˘
->
ADC_InjecSequí˚4
 = 
ADC_Inje˘edCh™√l_1
;

285 
	}
}

295 
	$ADC_Comm⁄Inô
(
ADC_Ty≥Def
* 
ADCx
, 
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

297 
uöt32_t
 
tm¥eg1
 = 0;

299 
	`as£π_∑øm
(
	`IS_ADC_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
));

300 
	`as£π_∑øm
(
	`IS_ADC_CLOCKMODE
(
ADC_Comm⁄InôSåu˘
->
ADC_Clock
));

301 
	`as£π_∑øm
(
	`IS_ADC_DMA_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_DMAMode
));

302 
	`as£π_∑øm
(
	`IS_ADC_DMA_ACCESS_MODE
(
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
));

303 
	`as£π_∑øm
(
	`IS_ADC_TWOSAMPLING_DELAY
(
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
));

305 if((
ADCx
 =
ADC1
Ë|| (ADCx =
ADC2
))

308 
tm¥eg1
 = 
ADC1_2
->
CCR
;

311 
tm¥eg1
 &
CCR_CLEAR_MASK
;

316 
tm¥eg1
 = 
ADC3_4
->
CCR
;

319 
tm¥eg1
 &
CCR_CLEAR_MASK
;

329 
tm¥eg1
 |(
uöt32_t
)(
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 |

330 
ADC_Comm⁄InôSåu˘
->
ADC_Clock
 |

331 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 |

332 (
uöt32_t
)(
ADC_Comm⁄InôSåu˘
->
ADC_DMAMode
 << 12) |

333 (
uöt32_t
)((uöt32_t)
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
 << 8));

335 if((
ADCx
 =
ADC1
Ë|| (ADCx =
ADC2
))

338 
ADC1_2
->
CCR
 = 
tm¥eg1
;

343 
ADC3_4
->
CCR
 = 
tm¥eg1
;

345 
	}
}

353 
	$ADC_Comm⁄Såu˘Inô
(
ADC_Comm⁄InôTy≥Def
* 
ADC_Comm⁄InôSåu˘
)

356 
ADC_Comm⁄InôSåu˘
->
ADC_Mode
 = 
ADC_Mode_Indïídít
;

359 
ADC_Comm⁄InôSåu˘
->
ADC_Clock
 = 
ADC_Clock_AsynClkMode
;

362 
ADC_Comm⁄InôSåu˘
->
ADC_DMAAc˚ssMode
 = 
ADC_DMAAc˚ssMode_DißbÀd
;

365 
ADC_Comm⁄InôSåu˘
->
ADC_DMAMode
 = 
ADC_DMAMode_O√ShŸ
;

368 
ADC_Comm⁄InôSåu˘
->
ADC_TwoSam∂ögDñay
 = 0;

370 
	}
}

379 
	$ADC_Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

382 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

383 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

385 i‡(
NewSèã
 !
DISABLE
)

388 
ADCx
->
CR
 |
ADC_CR_ADEN
;

393 
ADCx
->
CR
 |
ADC_CR_ADDIS
;

395 
	}
}

402 
	$ADC_SèπCÆibøti⁄
(
ADC_Ty≥Def
* 
ADCx
)

405 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

408 
ADCx
->
CR
 |
ADC_CR_ADCAL
;

409 
	}
}

416 
uöt32_t
 
	$ADC_GëCÆibøti⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

419 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

422  (
uöt32_t
)
ADCx
->
CALFACT
;

423 
	}
}

430 
	$ADC_SëCÆibøti⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_CÆibøti⁄
)

433 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

436 
ADCx
->
CALFACT
 = 
ADC_CÆibøti⁄
;

437 
	}
}

448 
	$ADC_Sñe˘CÆibøti⁄Mode
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_CÆibøti⁄Mode
)

451 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

452 
	`as£π_∑øm
(
	`IS_ADC_CALIBRATION_MODE
(
ADC_CÆibøti⁄Mode
));

454 
ADCx
->
CR
 &(~
ADC_CR_ADCALDIF
);

455 
ADCx
->
CR
 |
ADC_CÆibøti⁄Mode
;

457 
	}
}

464 
FœgSètus
 
	$ADC_GëCÆibøti⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

466 
FœgSètus
 
bô°©us
 = 
RESET
;

468 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

470 i‡((
ADCx
->
CR
 & 
ADC_CR_ADCAL
Ë!(
uöt32_t
)
RESET
)

473 
bô°©us
 = 
SET
;

478 
bô°©us
 = 
RESET
;

481  
bô°©us
;

482 
	}
}

489 
	$ADC_DißbÀCmd
(
ADC_Ty≥Def
* 
ADCx
)

492 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

495 
ADCx
->
CR
 |
ADC_CR_ADDIS
;

496 
	}
}

504 
FœgSètus
 
	$ADC_GëDißbÀCmdSètus
(
ADC_Ty≥Def
* 
ADCx
)

506 
FœgSètus
 
bô°©us
 = 
RESET
;

508 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

511 i‡((
ADCx
->
CR
 & 
ADC_CR_ADDIS
Ë!(
uöt32_t
)
RESET
)

514 
bô°©us
 = 
SET
;

519 
bô°©us
 = 
RESET
;

522  
bô°©us
;

523 
	}
}

532 
	$ADC_VﬁègeReguœt‹Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

535 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

536 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

540 
ADCx
->
CR
 &~(
ADC_CR_ADVREGEN
);

542 i‡(
NewSèã
 !
DISABLE
)

545 
ADCx
->
CR
 |
ADC_CR_ADVREGEN_0
;

550 
ADCx
->
CR
 |=
ADC_CR_ADVREGEN_1
;

552 
	}
}

576 
	$ADC_Sñe˘Dif„ª¡ülMode
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

579 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

580 
	`as£π_∑øm
(
	`IS_ADC_DIFFCHANNEL
(
ADC_Ch™√l
));

581 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

583 i‡(
NewSèã
 !
DISABLE
)

586 
ADCx
->
DIFSEL
 |(
uöt32_t
)(1 << 
ADC_Ch™√l
 );

591 
ADCx
->
DIFSEL
 &~(
uöt32_t
)(1 << 
ADC_Ch™√l
);

593 
	}
}

602 
	$ADC_Sñe˘QueueOfC⁄ãxtMode
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

605 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

606 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

608 i‡(
NewSèã
 !
DISABLE
)

611 
ADCx
->
CFGR
 |(
uöt32_t
)(
ADC_CFGR_JQM
 );

616 
ADCx
->
CFGR
 &~(
uöt32_t
)(
ADC_CFGR_JQM
);

618 
	}
}

627 
	$ADC_AutoDñayCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

630 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

631 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

633 i‡(
NewSèã
 !
DISABLE
)

636 
ADCx
->
CFGR
 |(
uöt32_t
)(
ADC_CFGR_AUTDLY
 );

641 
ADCx
->
CFGR
 &~(
uöt32_t
)(
ADC_CFGR_AUTDLY
);

643 
	}
}

694 
	$ADC_A«logW©chdogCmd
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_A«logW©chdog
)

696 
uöt32_t
 
tm¥eg
 = 0;

698 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

699 
	`as£π_∑øm
(
	`IS_ADC_ANALOG_WATCHDOG
(
ADC_A«logW©chdog
));

701 
tm¥eg
 = 
ADCx
->
CFGR
;

703 
tm¥eg
 &~(
uöt32_t
)(
ADC_CFGR_AWD1SGL
|
ADC_CFGR_AWD1EN
|
ADC_CFGR_JAWD1EN
);

705 
tm¥eg
 |
ADC_A«logW©chdog
;

707 
ADCx
->
CFGR
 = 
tm¥eg
;

708 
	}
}

719 
	$ADC_A«logW©chdog1ThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
HighThªshﬁd
,

720 
uöt16_t
 
LowThªshﬁd
)

723 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

724 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
HighThªshﬁd
));

725 
	`as£π_∑øm
(
	`IS_ADC_THRESHOLD
(
LowThªshﬁd
));

727 
ADCx
->
TR1
 &~(
uöt32_t
)
ADC_TR1_HT1
;

728 
ADCx
->
TR1
 |(
uöt32_t
)((uöt32_t)
HighThªshﬁd
 << 16);

731 
ADCx
->
TR1
 &~(
uöt32_t
)
ADC_TR1_LT1
;

732 
ADCx
->
TR1
 |
LowThªshﬁd
;

733 
	}
}

744 
	$ADC_A«logW©chdog2ThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
HighThªshﬁd
,

745 
uöt8_t
 
LowThªshﬁd
)

748 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

751 
ADCx
->
TR2
 &~(
uöt32_t
)
ADC_TR2_HT2
;

752 
ADCx
->
TR2
 |(
uöt32_t
)((uöt32_t)
HighThªshﬁd
 << 16);

755 
ADCx
->
TR2
 &~(
uöt32_t
)
ADC_TR2_LT2
;

756 
ADCx
->
TR2
 |
LowThªshﬁd
;

757 
	}
}

768 
	$ADC_A«logW©chdog3ThªshﬁdsC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
HighThªshﬁd
,

769 
uöt8_t
 
LowThªshﬁd
)

772 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

775 
ADCx
->
TR3
 &~(
uöt32_t
)
ADC_TR3_HT3
;

776 
ADCx
->
TR3
 |(
uöt32_t
)((uöt32_t)
HighThªshﬁd
 << 16);

779 
ADCx
->
TR3
 &~(
uöt32_t
)
ADC_TR3_LT3
;

780 
ADCx
->
TR3
 |
LowThªshﬁd
;

781 
	}
}

808 
	$ADC_A«logW©chdog1SögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

810 
uöt32_t
 
tm¥eg
 = 0;

812 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

813 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

815 
tm¥eg
 = 
ADCx
->
CFGR
;

817 
tm¥eg
 &~(
uöt32_t
)
ADC_CFGR_AWD1CH
;

819 
tm¥eg
 |(
uöt32_t
)((uöt32_t)
ADC_Ch™√l
 << 26);

821 
ADCx
->
CFGR
 = 
tm¥eg
;

822 
	}
}

849 
	$ADC_A«logW©chdog2SögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

851 
uöt32_t
 
tm¥eg
 = 0;

853 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

854 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

856 
tm¥eg
 = 
ADCx
->
AWD2CR
;

858 
tm¥eg
 &~(
uöt32_t
)
ADC_AWD2CR_AWD2CH
;

860 
tm¥eg
 |(
uöt32_t
)1 << (
ADC_Ch™√l
);

862 
ADCx
->
AWD2CR
 |
tm¥eg
;

863 
	}
}

890 
	$ADC_A«logW©chdog3SögÀCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
)

892 
uöt32_t
 
tm¥eg
 = 0;

894 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

895 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

897 
tm¥eg
 = 
ADCx
->
AWD3CR
;

899 
tm¥eg
 &~(
uöt32_t
)
ADC_AWD3CR_AWD3CH
;

901 
tm¥eg
 |(
uöt32_t
)1 << (
ADC_Ch™√l
);

903 
ADCx
->
AWD3CR
 |
tm¥eg
;

904 
	}
}

948 
	$ADC_TempSís‹Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

951 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

952 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

954 if((
ADCx
 =
ADC1
Ë|| (ADCx =
ADC2
))

956 i‡(
NewSèã
 !
DISABLE
)

959 
ADC1_2
->
CCR
 |
ADC12_CCR_TSEN
;

964 
ADC1_2
->
CCR
 &~(
uöt32_t
)
ADC12_CCR_TSEN
;

969 i‡(
NewSèã
 !
DISABLE
)

972 
ADC3_4
->
CCR
 |
ADC34_CCR_TSEN
;

977 
ADC3_4
->
CCR
 &~(
uöt32_t
)
ADC34_CCR_TSEN
;

980 
	}
}

989 
	$ADC_VªfötCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

992 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

993 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

995 if((
ADCx
 =
ADC1
Ë|| (ADCx =
ADC2
))

997 i‡(
NewSèã
 !
DISABLE
)

1000 
ADC1_2
->
CCR
 |
ADC12_CCR_VREFEN
;

1005 
ADC1_2
->
CCR
 &~(
uöt32_t
)
ADC12_CCR_VREFEN
;

1010 i‡(
NewSèã
 !
DISABLE
)

1013 
ADC3_4
->
CCR
 |
ADC34_CCR_VREFEN
;

1018 
ADC3_4
->
CCR
 &~(
uöt32_t
)
ADC34_CCR_VREFEN
;

1021 
	}
}

1030 
	$ADC_Vb©Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1033 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1034 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1036 if((
ADCx
 =
ADC1
Ë|| (ADCx =
ADC2
))

1038 i‡(
NewSèã
 !
DISABLE
)

1041 
ADC1_2
->
CCR
 |
ADC12_CCR_VBATEN
;

1046 
ADC1_2
->
CCR
 &~(
uöt32_t
)
ADC12_CCR_VBATEN
;

1051 i‡(
NewSèã
 !
DISABLE
)

1054 
ADC3_4
->
CCR
 |
ADC34_CCR_VBATEN
;

1059 
ADC3_4
->
CCR
 &~(
uöt32_t
)
ADC34_CCR_VBATEN
;

1062 
	}
}

1162 
	$ADC_ReguœrCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

1164 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

1166 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1167 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1168 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

1172 i‡(
R™k
 < 5)

1175 
tm¥eg1
 = 
ADCx
->
SQR1
;

1177 
tm¥eg2
 = 0x1F << (6 * (
R™k
 ));

1179 
tm¥eg1
 &~
tm¥eg2
;

1181 
tm¥eg2
 = (
uöt32_t
)(
ADC_Ch™√l
Ë<< (6 * (
R™k
));

1183 
tm¥eg1
 |
tm¥eg2
;

1185 
ADCx
->
SQR1
 = 
tm¥eg1
;

1188 i‡(
R™k
 < 10)

1191 
tm¥eg1
 = 
ADCx
->
SQR2
;

1193 
tm¥eg2
 = 
ADC_SQR2_SQ5
 << (6 * (
R™k
 - 5));

1195 
tm¥eg1
 &~
tm¥eg2
;

1197 
tm¥eg2
 = (
uöt32_t
)(
ADC_Ch™√l
Ë<< (6 * (
R™k
 - 5));

1199 
tm¥eg1
 |
tm¥eg2
;

1201 
ADCx
->
SQR2
 = 
tm¥eg1
;

1204 i‡(
R™k
 < 15)

1207 
tm¥eg1
 = 
ADCx
->
SQR3
;

1209 
tm¥eg2
 = 
ADC_SQR3_SQ10
 << (6 * (
R™k
 - 10));

1211 
tm¥eg1
 &~
tm¥eg2
;

1213 
tm¥eg2
 = (
uöt32_t
)(
ADC_Ch™√l
Ë<< (6 * (
R™k
 - 10));

1215 
tm¥eg1
 |
tm¥eg2
;

1217 
ADCx
->
SQR3
 = 
tm¥eg1
;

1222 
tm¥eg1
 = 
ADCx
->
SQR4
;

1224 
tm¥eg2
 = 
ADC_SQR3_SQ15
 << (6 * (
R™k
 - 15));

1226 
tm¥eg1
 &~
tm¥eg2
;

1228 
tm¥eg2
 = (
uöt32_t
)(
ADC_Ch™√l
Ë<< (6 * (
R™k
 - 15));

1230 
tm¥eg1
 |
tm¥eg2
;

1232 
ADCx
->
SQR4
 = 
tm¥eg1
;

1237 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

1240 
tm¥eg1
 = 
ADCx
->
SMPR2
;

1242 
tm¥eg2
 = 
ADC_SMPR2_SMP10
 << (3 * (
ADC_Ch™√l
 - 10));

1244 
ADCx
->
SMPR2
 &~
tm¥eg2
;

1246 
ADCx
->
SMPR2
 |(
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

1252 
tm¥eg1
 = 
ADCx
->
SMPR1
;

1254 
tm¥eg2
 = 
ADC_SMPR1_SMP1
 << (3 * (
ADC_Ch™√l
 - 1));

1256 
ADCx
->
SMPR1
 &~
tm¥eg2
;

1258 
ADCx
->
SMPR1
 |(
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
));

1260 
	}
}

1269 
	$ADC_ReguœrCh™√lSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Sequí˚rLígth
)

1272 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1275 
ADCx
->
SQR1
 &~(
uöt32_t
)
ADC_SQR1_L
;

1276 
ADCx
->
SQR1
 |(
uöt32_t
)(
Sequí˚rLígth
 - 1);

1277 
	}
}

1309 
	$ADC_Exã∫ÆTriggîC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_Exã∫ÆTrigC⁄vEvít
, uöt16_à
ADC_Exã∫ÆTrigEvítEdge
)

1312 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1313 
	`as£π_∑øm
(
	`IS_ADC_EXT_TRIG
(
ADC_Exã∫ÆTrigC⁄vEvít
));

1314 
	`as£π_∑øm
(
	`IS_EXTERNALTRIG_EDGE
(
ADC_Exã∫ÆTrigEvítEdge
));

1317 
ADCx
->
CFGR
 &~(
ADC_CFGR_EXTEN
 | 
ADC_CFGR_EXTSEL
);

1318 
ADCx
->
CFGR
 |(
uöt32_t
)(
ADC_Exã∫ÆTrigEvítEdge
 | 
ADC_Exã∫ÆTrigC⁄vEvít
);

1319 
	}
}

1326 
	$ADC_SèπC⁄vîsi⁄
(
ADC_Ty≥Def
* 
ADCx
)

1329 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1332 
ADCx
->
CR
 |
ADC_CR_ADSTART
;

1333 
	}
}

1340 
FœgSètus
 
	$ADC_GëSèπC⁄vîsi⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

1342 
FœgSètus
 
bô°©us
 = 
RESET
;

1344 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1346 i‡((
ADCx
->
CR
 & 
ADC_CR_ADSTART
Ë!(
uöt32_t
)
RESET
)

1349 
bô°©us
 = 
SET
;

1354 
bô°©us
 = 
RESET
;

1357  
bô°©us
;

1358 
	}
}

1365 
	$ADC_St›C⁄vîsi⁄
(
ADC_Ty≥Def
* 
ADCx
)

1368 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1371 
ADCx
->
CR
 |
ADC_CR_ADSTP
;

1372 
	}
}

1383 
	$ADC_DiscModeCh™√lCou¡C⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Numbî
)

1385 
uöt32_t
 
tm¥eg1
 = 0;

1386 
uöt32_t
 
tm¥eg2
 = 0;

1388 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1389 
	`as£π_∑øm
(
	`IS_ADC_REGULAR_DISC_NUMBER
(
Numbî
));

1391 
tm¥eg1
 = 
ADCx
->
CFGR
;

1393 
tm¥eg1
 &~(
uöt32_t
)(
ADC_CFGR_DISCNUM
);

1395 
tm¥eg2
 = 
Numbî
 - 1;

1396 
tm¥eg1
 |
tm¥eg2
 << 17;

1398 
ADCx
->
CFGR
 = 
tm¥eg1
;

1399 
	}
}

1410 
	$ADC_DiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1413 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1414 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1415 i‡(
NewSèã
 !
DISABLE
)

1418 
ADCx
->
CFGR
 |
ADC_CFGR_DISCEN
;

1423 
ADCx
->
CFGR
 &~(
uöt32_t
)(
ADC_CFGR_DISCEN
);

1425 
	}
}

1432 
uöt16_t
 
	$ADC_GëC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

1435 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1437  (
uöt16_t
Ë
ADCx
->
DR
;

1438 
	}
}

1449 
uöt32_t
 
	$ADC_GëDuÆModeC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
)

1451 
uöt32_t
 
tm¥eg1
 = 0;

1454 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1456 if((
ADCx
 =
ADC1
Ë|| (ADCx=
ADC2
))

1459 
tm¥eg1
 = 
ADC1_2
->
CDR
;

1464 
tm¥eg1
 = 
ADC3_4
->
CDR
;

1467  (
uöt32_t
Ë
tm¥eg1
;

1468 
	}
}

1497 
	$ADC_SëCh™√lOff£t1
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
uöt16_t
 
Off£t
)

1500 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1501 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1502 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1505 
ADCx
->
OFR1
 &~ (
uöt32_t
Ë
ADC_OFR1_OFFSET1_CH
;

1506 
ADCx
->
OFR1
 |(
uöt32_t
)((uöt32_t)
ADC_Ch™√l
 << 26);

1509 
ADCx
->
OFR1
 &~ (
uöt32_t
Ë
ADC_OFR1_OFFSET1
;

1510 
ADCx
->
OFR1
 |(
uöt32_t
)
Off£t
;

1511 
	}
}

1540 
	$ADC_SëCh™√lOff£t2
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
uöt16_t
 
Off£t
)

1543 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1544 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1545 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1548 
ADCx
->
OFR2
 &~ (
uöt32_t
Ë
ADC_OFR2_OFFSET2_CH
;

1549 
ADCx
->
OFR2
 |(
uöt32_t
)((uöt32_t)
ADC_Ch™√l
 << 26);

1552 
ADCx
->
OFR2
 &~ (
uöt32_t
Ë
ADC_OFR2_OFFSET2
;

1553 
ADCx
->
OFR2
 |(
uöt32_t
)
Off£t
;

1554 
	}
}

1583 
	$ADC_SëCh™√lOff£t3
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
uöt16_t
 
Off£t
)

1586 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1587 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1588 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1591 
ADCx
->
OFR3
 &~ (
uöt32_t
Ë
ADC_OFR3_OFFSET3_CH
;

1592 
ADCx
->
OFR3
 |(
uöt32_t
)((uöt32_t)
ADC_Ch™√l
 << 26);

1595 
ADCx
->
OFR3
 &~ (
uöt32_t
Ë
ADC_OFR3_OFFSET3
;

1596 
ADCx
->
OFR3
 |(
uöt32_t
)
Off£t
;

1597 
	}
}

1626 
	$ADC_SëCh™√lOff£t4
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, 
uöt16_t
 
Off£t
)

1629 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1630 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1631 
	`as£π_∑øm
(
	`IS_ADC_OFFSET
(
Off£t
));

1634 
ADCx
->
OFR4
 &~ (
uöt32_t
Ë
ADC_OFR4_OFFSET4_CH
;

1635 
ADCx
->
OFR4
 |(
uöt32_t
)((uöt32_t)
ADC_Ch™√l
 << 26);

1638 
ADCx
->
OFR4
 &~ (
uöt32_t
Ë
ADC_OFR4_OFFSET4
;

1639 
ADCx
->
OFR4
 |(
uöt32_t
)
Off£t
;

1640 
	}
}

1649 
	$ADC_Ch™√lOff£t1Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1652 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1653 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1655 i‡(
NewSèã
 !
DISABLE
)

1658 
ADCx
->
OFR1
 |
ADC_OFR1_OFFSET1_EN
;

1663 
ADCx
->
OFR1
 &~(
ADC_OFR1_OFFSET1_EN
);

1665 
	}
}

1674 
	$ADC_Ch™√lOff£t2Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1677 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1678 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1680 i‡(
NewSèã
 !
DISABLE
)

1683 
ADCx
->
OFR2
 |
ADC_OFR2_OFFSET2_EN
;

1688 
ADCx
->
OFR2
 &~(
ADC_OFR2_OFFSET2_EN
);

1690 
	}
}

1699 
	$ADC_Ch™√lOff£t3Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1702 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1703 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1705 i‡(
NewSèã
 !
DISABLE
)

1708 
ADCx
->
OFR3
 |
ADC_OFR3_OFFSET3_EN
;

1713 
ADCx
->
OFR3
 &~(
ADC_OFR3_OFFSET3_EN
);

1715 
	}
}

1724 
	$ADC_Ch™√lOff£t4Cmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1727 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1728 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1730 i‡(
NewSèã
 !
DISABLE
)

1733 
ADCx
->
OFR4
 |
ADC_OFR4_OFFSET4_EN
;

1738 
ADCx
->
OFR4
 &~(
ADC_OFR4_OFFSET4_EN
);

1740 
	}
}

1775 
	$ADC_DMACmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1778 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

1779 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1780 i‡(
NewSèã
 !
DISABLE
)

1783 
ADCx
->
CFGR
 |
ADC_CFGR_DMAEN
;

1788 
ADCx
->
CFGR
 &~(
uöt32_t
)
ADC_CFGR_DMAEN
;

1790 
	}
}

1799 
	$ADC_DMAC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_DMAMode
)

1802 
	`as£π_∑øm
(
	`IS_ADC_DMA_PERIPH
(
ADCx
));

1803 
	`as£π_∑øm
(
	`IS_ADC_DMA_MODE
(
ADC_DMAMode
));

1806 
ADCx
->
CFGR
 &~(
uöt32_t
)
ADC_CFGR_DMACFG
;

1807 
ADCx
->
CFGR
 |
ADC_DMAMode
;

1808 
	}
}

1880 
	$ADC_Inje˘edCh™√lC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Ch™√l
, uöt8_à
R™k
, uöt8_à
ADC_Sam∂eTime
)

1882 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

1884 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1885 
	`as£π_∑øm
(
	`IS_ADC_CHANNEL
(
ADC_Ch™√l
));

1886 
	`as£π_∑øm
(
	`IS_ADC_SAMPLE_TIME
(
ADC_Sam∂eTime
));

1890 i‡(
ADC_Ch™√l
 > 
ADC_Ch™√l_9
)

1893 
tm¥eg1
 = 
ADCx
->
SMPR2
;

1895 
tm¥eg2
 = 
ADC_SMPR2_SMP10
 << (3 * (
ADC_Ch™√l
 - 10));

1897 
tm¥eg1
 &~
tm¥eg2
;

1899 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * (
ADC_Ch™√l
 - 10));

1901 
tm¥eg1
 |
tm¥eg2
;

1903 
ADCx
->
SMPR2
 = 
tm¥eg1
;

1908 
tm¥eg1
 = 
ADCx
->
SMPR1
;

1910 
tm¥eg2
 = 
ADC_SMPR1_SMP0
 << (3 * 
ADC_Ch™√l
);

1912 
tm¥eg1
 &~
tm¥eg2
;

1914 
tm¥eg2
 = (
uöt32_t
)
ADC_Sam∂eTime
 << (3 * 
ADC_Ch™√l
);

1916 
tm¥eg1
 |
tm¥eg2
;

1918 
ADCx
->
SMPR1
 = 
tm¥eg1
;

1923 
tm¥eg1
 = 
ADCx
->
JSQR
;

1925 
tm¥eg2
 = 
ADC_JSQR_JSQ1
 << (6 * (
R™k
 - 1));

1927 
tm¥eg1
 &~
tm¥eg2
;

1929 
tm¥eg2
 = (
uöt32_t
)
ADC_Ch™√l
 << (6 * (
R™k
 - 1));

1931 
tm¥eg1
 |
tm¥eg2
;

1933 
ADCx
->
JSQR
 = 
tm¥eg1
;

1934 
	}
}

1943 
	$ADC_Inje˘edSequí˚rLígthC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
Sequí˚rLígth
)

1945 
uöt32_t
 
tm¥eg1
 = 0;

1947 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1948 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_LENGTH
(
Sequí˚rLígth
));

1951 
tm¥eg1
 = 
ADCx
->
JSQR
;

1953 
tm¥eg1
 &~(
uöt32_t
)
ADC_JSQR_JL
;

1955 
tm¥eg1
 |(
uöt32_t
)(
Sequí˚rLígth
 - 1);

1957 
ADCx
->
JSQR
 = 
tm¥eg1
;

1958 
	}
}

1990 
	$ADC_Exã∫ÆTriggîInje˘edC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt16_t
 
ADC_Exã∫ÆTrigInjecC⁄vEvít
, uöt16_à
ADC_Exã∫ÆTrigInjecEvítEdge
)

1993 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

1994 
	`as£π_∑øm
(
	`IS_EXTERNALTRIGINJ_EDGE
(
ADC_Exã∫ÆTrigInjecEvítEdge
));

1995 
	`as£π_∑øm
(
	`IS_ADC_EXT_INJEC_TRIG
(
ADC_Exã∫ÆTrigInjecC⁄vEvít
));

1998 
ADCx
->
JSQR
 &~(
ADC_JSQR_JEXTEN
 | 
ADC_JSQR_JEXTSEL
);

1999 
ADCx
->
JSQR
 |(
uöt32_t
)(
ADC_Exã∫ÆTrigInjecC⁄vEvít
 | 
ADC_Exã∫ÆTrigInjecEvítEdge
);

2000 
	}
}

2010 
	$ADC_SèπInje˘edC⁄vîsi⁄
(
ADC_Ty≥Def
* 
ADCx
)

2013 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2017 
ADCx
->
CR
 |
ADC_CR_JADSTART
;

2018 
	}
}

2025 
	$ADC_St›Inje˘edC⁄vîsi⁄
(
ADC_Ty≥Def
* 
ADCx
)

2028 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2031 
ADCx
->
CR
 |
ADC_CR_JADSTP
;

2032 
	}
}

2039 
FœgSètus
 
	$ADC_GëSèπInje˘edC⁄vîsi⁄Sètus
(
ADC_Ty≥Def
* 
ADCx
)

2041 
FœgSètus
 
bô°©us
 = 
RESET
;

2043 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2046 i‡((
ADCx
->
CR
 & 
ADC_CR_JADSTART
Ë!(
uöt32_t
)
RESET
)

2049 
bô°©us
 = 
SET
;

2054 
bô°©us
 = 
RESET
;

2057  
bô°©us
;

2058 
	}
}

2068 
	$ADC_AutoInje˘edC⁄vCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2071 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2072 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2073 i‡(
NewSèã
 !
DISABLE
)

2076 
ADCx
->
CFGR
 |
ADC_CFGR_JAUTO
;

2081 
ADCx
->
CFGR
 &~
ADC_CFGR_JAUTO
;

2083 
	}
}

2094 
	$ADC_Inje˘edDiscModeCmd
(
ADC_Ty≥Def
* 
ADCx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2097 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2098 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2099 i‡(
NewSèã
 !
DISABLE
)

2102 
ADCx
->
CFGR
 |
ADC_CFGR_JDISCEN
;

2107 
ADCx
->
CFGR
 &~
ADC_CFGR_JDISCEN
;

2109 
	}
}

2122 
uöt16_t
 
	$ADC_GëInje˘edC⁄vîsi⁄VÆue
(
ADC_Ty≥Def
* 
ADCx
, 
uöt8_t
 
ADC_Inje˘edCh™√l
)

2124 
__IO
 
uöt32_t
 
tmp
 = 0;

2127 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2128 
	`as£π_∑øm
(
	`IS_ADC_INJECTED_CHANNEL
(
ADC_Inje˘edCh™√l
));

2130 
tmp
 = (
uöt32_t
)
ADCx
;

2131 
tmp
 +
ADC_Inje˘edCh™√l
 + 
JDR_Off£t
;

2134  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

2135 
	}
}

2255 
	$ADC_ITC⁄fig
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2258 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2259 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2260 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

2262 i‡(
NewSèã
 !
DISABLE
)

2265 
ADCx
->
IER
 |
ADC_IT
;

2270 
ADCx
->
IER
 &(~(
uöt32_t
)
ADC_IT
);

2272 
	}
}

2292 
FœgSètus
 
	$ADC_GëFœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_FLAG
)

2294 
FœgSètus
 
bô°©us
 = 
RESET
;

2296 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2297 
	`as£π_∑øm
(
	`IS_ADC_GET_FLAG
(
ADC_FLAG
));

2300 i‡((
ADCx
->
ISR
 & 
ADC_FLAG
Ë!(
uöt32_t
)
RESET
)

2303 
bô°©us
 = 
SET
;

2308 
bô°©us
 = 
RESET
;

2311  
bô°©us
;

2312 
	}
}

2332 
	$ADC_CÀ¨Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_FLAG
)

2335 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2336 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_FLAG
(
ADC_FLAG
));

2338 
ADCx
->
ISR
 = (
uöt32_t
)
ADC_FLAG
;

2339 
	}
}

2370 
FœgSètus
 
	$ADC_GëComm⁄FœgSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_FLAG
)

2372 
uöt32_t
 
tm¥eg1
 = 0;

2373 
FœgSètus
 
bô°©us
 = 
RESET
;

2376 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2377 
	`as£π_∑øm
(
	`IS_ADC_GET_COMMONFLAG
(
ADC_FLAG
));

2379 if((
ADCx
 =
ADC1
Ë|| (ADCx =
ADC2
))

2381 
tm¥eg1
 = 
ADC1_2
->
CSR
;

2385 
tm¥eg1
 = 
ADC3_4
->
CSR
;

2388 i‡((
tm¥eg1
 & 
ADC_FLAG
Ë!(
uöt32_t
)
RESET
)

2391 
bô°©us
 = 
SET
;

2396 
bô°©us
 = 
RESET
;

2399  
bô°©us
;

2400 
	}
}

2431 
	$ADC_CÀ¨Comm⁄Fœg
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_FLAG
)

2434 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2435 
	`as£π_∑øm
(
	`IS_ADC_CLEAR_COMMONFLAG
(
ADC_FLAG
));

2437 if((
ADCx
 =
ADC1
Ë|| (ADCx =
ADC2
))

2440 
ADC1_2
->
CSR
 |(
uöt32_t
)
ADC_FLAG
;

2445 
ADC3_4
->
CSR
 |(
uöt32_t
)
ADC_FLAG
;

2447 
	}
}

2467 
ITSètus
 
	$ADC_GëITSètus
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_IT
)

2469 
ITSètus
 
bô°©us
 = 
RESET
;

2470 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

2472 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2473 
	`as£π_∑øm
(
	`IS_ADC_GET_IT
(
ADC_IT
));

2475 
ô°©us
 = 
ADCx
->
ISR
 & 
ADC_IT
;

2477 
ôíabÀ
 = 
ADCx
->
IER
 & 
ADC_IT
;

2478 i‡((
ô°©us
 !(
uöt32_t
)
RESET
Ë&& (
ôíabÀ
 != (uint32_t)RESET))

2480 
bô°©us
 = 
SET
;

2484 
bô°©us
 = 
RESET
;

2486  
bô°©us
;

2487 
	}
}

2507 
	$ADC_CÀ¨ITPídögBô
(
ADC_Ty≥Def
* 
ADCx
, 
uöt32_t
 
ADC_IT
)

2510 
	`as£π_∑øm
(
	`IS_ADC_ALL_PERIPH
(
ADCx
));

2511 
	`as£π_∑øm
(
	`IS_ADC_IT
(
ADC_IT
));

2513 
ADCx
->
ISR
 |(
uöt32_t
)
ADC_IT
;

2514 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_can.c

71 
	~"°m32f30x_ˇn.h
"

72 
	~"°m32f30x_rcc.h
"

86 
	#MCR_DBF
 ((
uöt32_t
)0x00010000Ë

	)

89 
	#TMIDxR_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

92 
	#FMR_FINIT
 ((
uöt32_t
)0x00000001Ë

	)

95 
	#INAK_TIMEOUT
 ((
uöt32_t
)0x00FFFFFF)

	)

97 
	#SLAK_TIMEOUT
 ((
uöt32_t
)0x00FFFFFF)

	)

100 
	#CAN_FLAGS_TSR
 ((
uöt32_t
)0x08000000)

	)

102 
	#CAN_FLAGS_RF1R
 ((
uöt32_t
)0x04000000)

	)

104 
	#CAN_FLAGS_RF0R
 ((
uöt32_t
)0x02000000)

	)

106 
	#CAN_FLAGS_MSR
 ((
uöt32_t
)0x01000000)

	)

108 
	#CAN_FLAGS_ESR
 ((
uöt32_t
)0x00F00000)

	)

111 
	#CAN_TXMAILBOX_0
 ((
uöt8_t
)0x00)

	)

112 
	#CAN_TXMAILBOX_1
 ((
uöt8_t
)0x01)

	)

113 
	#CAN_TXMAILBOX_2
 ((
uöt8_t
)0x02)

	)

115 
	#CAN_MODE_MASK
 ((
uöt32_t
Ë0x00000003)

	)

121 
ITSètus
 
CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
);

152 
	$CAN_DeInô
(
CAN_Ty≥Def
* 
CANx
)

155 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

158 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
ENABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_CAN1
, 
DISABLE
);

161 
	}
}

172 
uöt8_t
 
	$CAN_Inô
(
CAN_Ty≥Def
* 
CANx
, 
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

174 
uöt8_t
 
InôSètus
 = 
CAN_InôSètus_Faûed
;

175 
__IO
 
uöt32_t
 
waô_ack
 = 0x00000000;

177 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

178 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TTCM
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_ABOM
));

180 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_AWUM
));

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_NART
));

182 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_RFLM
));

183 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_InôSåu˘
->
CAN_TXFP
));

184 
	`as£π_∑øm
(
	`IS_CAN_MODE
(
CAN_InôSåu˘
->
CAN_Mode
));

185 
	`as£π_∑øm
(
	`IS_CAN_SJW
(
CAN_InôSåu˘
->
CAN_SJW
));

186 
	`as£π_∑øm
(
	`IS_CAN_BS1
(
CAN_InôSåu˘
->
CAN_BS1
));

187 
	`as£π_∑øm
(
	`IS_CAN_BS2
(
CAN_InôSåu˘
->
CAN_BS2
));

188 
	`as£π_∑øm
(
	`IS_CAN_PRESCALER
(
CAN_InôSåu˘
->
CAN_PªsˇÀr
));

191 
CANx
->
MCR
 &(~(
uöt32_t
)
CAN_MCR_SLEEP
);

194 
CANx
->
MCR
 |
CAN_MCR_INRQ
 ;

197 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë!CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

199 
waô_ack
++;

203 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) != CAN_MSR_INAK)

205 
InôSètus
 = 
CAN_InôSètus_Faûed
;

210 i‡(
CAN_InôSåu˘
->
CAN_TTCM
 =
ENABLE
)

212 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

216 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TTCM
;

220 i‡(
CAN_InôSåu˘
->
CAN_ABOM
 =
ENABLE
)

222 
CANx
->
MCR
 |
CAN_MCR_ABOM
;

226 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_ABOM
;

230 i‡(
CAN_InôSåu˘
->
CAN_AWUM
 =
ENABLE
)

232 
CANx
->
MCR
 |
CAN_MCR_AWUM
;

236 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_AWUM
;

240 i‡(
CAN_InôSåu˘
->
CAN_NART
 =
ENABLE
)

242 
CANx
->
MCR
 |
CAN_MCR_NART
;

246 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_NART
;

250 i‡(
CAN_InôSåu˘
->
CAN_RFLM
 =
ENABLE
)

252 
CANx
->
MCR
 |
CAN_MCR_RFLM
;

256 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_RFLM
;

260 i‡(
CAN_InôSåu˘
->
CAN_TXFP
 =
ENABLE
)

262 
CANx
->
MCR
 |
CAN_MCR_TXFP
;

266 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_TXFP
;

270 
CANx
->
BTR
 = (
uöt32_t
)((uöt32_t)
CAN_InôSåu˘
->
CAN_Mode
 << 30) | \

271 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_SJW
 << 24) | \

272 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS1
 << 16) | \

273 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_BS2
 << 20) | \

274 ((
uöt32_t
)
CAN_InôSåu˘
->
CAN_PªsˇÀr
 - 1);

277 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_INRQ
;

280 
waô_ack
 = 0;

282 ((
CANx
->
MSR
 & 
CAN_MSR_INAK
Ë=CAN_MSR_INAKË&& (
waô_ack
 !
INAK_TIMEOUT
))

284 
waô_ack
++;

288 i‡((
CANx
->
MSR
 & 
CAN_MSR_INAK
) == CAN_MSR_INAK)

290 
InôSètus
 = 
CAN_InôSètus_Faûed
;

294 
InôSètus
 = 
CAN_InôSètus_Suc˚ss
 ;

299  
InôSètus
;

300 
	}
}

309 
	$CAN_FûãrInô
(
CAN_FûãrInôTy≥Def
* 
CAN_FûãrInôSåu˘
)

311 
uöt32_t
 
fûãr_numbî_bô_pos
 = 0;

313 
	`as£π_∑øm
(
	`IS_CAN_FILTER_NUMBER
(
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
));

314 
	`as£π_∑øm
(
	`IS_CAN_FILTER_MODE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
));

315 
	`as£π_∑øm
(
	`IS_CAN_FILTER_SCALE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
));

316 
	`as£π_∑øm
(
	`IS_CAN_FILTER_FIFO
(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
));

317 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
));

319 
fûãr_numbî_bô_pos
 = ((
uöt32_t
)1Ë<< 
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
;

322 
CAN1
->
FMR
 |
FMR_FINIT
;

325 
CAN1
->
FA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

328 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_16bô
)

331 
CAN1
->
FS1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

335 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

336 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
) << 16) |

337 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

341 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

342 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

343 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
);

346 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrSˇÀ
 =
CAN_FûãrSˇÀ_32bô
)

349 
CAN1
->
FS1R
 |
fûãr_numbî_bô_pos
;

351 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR1
 =

352 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdHigh
) << 16) |

353 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrIdLow
);

355 
CAN1
->
sFûãrRegi°î
[
CAN_FûãrInôSåu˘
->
CAN_FûãrNumbî
].
FR2
 =

356 ((0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdHigh
) << 16) |

357 (0x0000FFFF & (
uöt32_t
)
CAN_FûãrInôSåu˘
->
CAN_FûãrMaskIdLow
);

361 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrMode
 =
CAN_FûãrMode_IdMask
)

364 
CAN1
->
FM1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

369 
CAN1
->
FM1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

373 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO0
)

376 
CAN1
->
FFA1R
 &~(
uöt32_t
)
fûãr_numbî_bô_pos
;

379 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrFIFOAssignmít
 =
CAN_Fûãr_FIFO1
)

382 
CAN1
->
FFA1R
 |(
uöt32_t
)
fûãr_numbî_bô_pos
;

386 i‡(
CAN_FûãrInôSåu˘
->
CAN_FûãrA˘iv©i⁄
 =
ENABLE
)

388 
CAN1
->
FA1R
 |
fûãr_numbî_bô_pos
;

392 
CAN1
->
FMR
 &~
FMR_FINIT
;

393 
	}
}

400 
	$CAN_Såu˘Inô
(
CAN_InôTy≥Def
* 
CAN_InôSåu˘
)

405 
CAN_InôSåu˘
->
CAN_TTCM
 = 
DISABLE
;

408 
CAN_InôSåu˘
->
CAN_ABOM
 = 
DISABLE
;

411 
CAN_InôSåu˘
->
CAN_AWUM
 = 
DISABLE
;

414 
CAN_InôSåu˘
->
CAN_NART
 = 
DISABLE
;

417 
CAN_InôSåu˘
->
CAN_RFLM
 = 
DISABLE
;

420 
CAN_InôSåu˘
->
CAN_TXFP
 = 
DISABLE
;

423 
CAN_InôSåu˘
->
CAN_Mode
 = 
CAN_Mode_N‹mÆ
;

426 
CAN_InôSåu˘
->
CAN_SJW
 = 
CAN_SJW_1tq
;

429 
CAN_InôSåu˘
->
CAN_BS1
 = 
CAN_BS1_4tq
;

432 
CAN_InôSåu˘
->
CAN_BS2
 = 
CAN_BS2_3tq
;

435 
CAN_InôSåu˘
->
CAN_PªsˇÀr
 = 1;

436 
	}
}

443 
	$CAN_SœveSèπB™k
(
uöt8_t
 
CAN_B™kNumbî
)

446 
	`as£π_∑øm
(
	`IS_CAN_BANKNUMBER
(
CAN_B™kNumbî
));

449 
CAN1
->
FMR
 |
FMR_FINIT
;

452 
CAN1
->
FMR
 &(
uöt32_t
)0xFFFFC0F1 ;

453 
CAN1
->
FMR
 |(
uöt32_t
)(
CAN_B™kNumbî
)<<8;

456 
CAN1
->
FMR
 &~
FMR_FINIT
;

457 
	}
}

468 
	$CAN_DBGFªeze
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

471 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

472 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

474 i‡(
NewSèã
 !
DISABLE
)

477 
CANx
->
MCR
 |
MCR_DBF
;

482 
CANx
->
MCR
 &~
MCR_DBF
;

484 
	}
}

497 
	$CAN_TTComModeCmd
(
CAN_Ty≥Def
* 
CANx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

500 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

501 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

502 i‡(
NewSèã
 !
DISABLE
)

505 
CANx
->
MCR
 |
CAN_MCR_TTCM
;

508 
CANx
->
sTxMaûBox
[0].
TDTR
 |((
uöt32_t
)
CAN_TDT0R_TGT
);

509 
CANx
->
sTxMaûBox
[1].
TDTR
 |((
uöt32_t
)
CAN_TDT1R_TGT
);

510 
CANx
->
sTxMaûBox
[2].
TDTR
 |((
uöt32_t
)
CAN_TDT2R_TGT
);

515 
CANx
->
MCR
 &(
uöt32_t
)(~(uöt32_t)
CAN_MCR_TTCM
);

518 
CANx
->
sTxMaûBox
[0].
TDTR
 &((
uöt32_t
)~
CAN_TDT0R_TGT
);

519 
CANx
->
sTxMaûBox
[1].
TDTR
 &((
uöt32_t
)~
CAN_TDT1R_TGT
);

520 
CANx
->
sTxMaûBox
[2].
TDTR
 &((
uöt32_t
)~
CAN_TDT2R_TGT
);

522 
	}
}

551 
uöt8_t
 
	$CAN_Tønsmô
(
CAN_Ty≥Def
* 
CANx
, 
C™TxMsg
* 
TxMesßge
)

553 
uöt8_t
 
å™smô_maûbox
 = 0;

555 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

556 
	`as£π_∑øm
(
	`IS_CAN_IDTYPE
(
TxMesßge
->
IDE
));

557 
	`as£π_∑øm
(
	`IS_CAN_RTR
(
TxMesßge
->
RTR
));

558 
	`as£π_∑øm
(
	`IS_CAN_DLC
(
TxMesßge
->
DLC
));

561 i‡((
CANx
->
TSR
&
CAN_TSR_TME0
) == CAN_TSR_TME0)

563 
å™smô_maûbox
 = 0;

565 i‡((
CANx
->
TSR
&
CAN_TSR_TME1
) == CAN_TSR_TME1)

567 
å™smô_maûbox
 = 1;

569 i‡((
CANx
->
TSR
&
CAN_TSR_TME2
) == CAN_TSR_TME2)

571 
å™smô_maûbox
 = 2;

575 
å™smô_maûbox
 = 
CAN_TxSètus_NoMaûBox
;

578 i‡(
å™smô_maûbox
 !
CAN_TxSètus_NoMaûBox
)

581 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 &
TMIDxR_TXRQ
;

582 i‡(
TxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

584 
	`as£π_∑øm
(
	`IS_CAN_STDID
(
TxMesßge
->
StdId
));

585 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
StdId
 << 21) | \

586 
TxMesßge
->
RTR
);

590 
	`as£π_∑øm
(
	`IS_CAN_EXTID
(
TxMesßge
->
ExtId
));

591 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |((
TxMesßge
->
ExtId
 << 3) | \

592 
TxMesßge
->
IDE
 | \

593 
TxMesßge
->
RTR
);

597 
TxMesßge
->
DLC
 &(
uöt8_t
)0x0000000F;

598 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 &(
uöt32_t
)0xFFFFFFF0;

599 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDTR
 |
TxMesßge
->
DLC
;

602 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDLR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[3] << 24) |

603 ((
uöt32_t
)
TxMesßge
->
D©a
[2] << 16) |

604 ((
uöt32_t
)
TxMesßge
->
D©a
[1] << 8) |

605 ((
uöt32_t
)
TxMesßge
->
D©a
[0]));

606 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TDHR
 = (((
uöt32_t
)
TxMesßge
->
D©a
[7] << 24) |

607 ((
uöt32_t
)
TxMesßge
->
D©a
[6] << 16) |

608 ((
uöt32_t
)
TxMesßge
->
D©a
[5] << 8) |

609 ((
uöt32_t
)
TxMesßge
->
D©a
[4]));

611 
CANx
->
sTxMaûBox
[
å™smô_maûbox
].
TIR
 |
TMIDxR_TXRQ
;

613  
å™smô_maûbox
;

614 
	}
}

623 
uöt8_t
 
	$CAN_TønsmôSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
TønsmôMaûbox
)

625 
uöt32_t
 
°©e
 = 0;

628 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

629 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
TønsmôMaûbox
));

631 
TønsmôMaûbox
)

633 (
CAN_TXMAILBOX_0
):

634 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
);

636 (
CAN_TXMAILBOX_1
):

637 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
);

639 (
CAN_TXMAILBOX_2
):

640 
°©e
 = 
CANx
->
TSR
 & (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
);

643 
°©e
 = 
CAN_TxSètus_Faûed
;

646 
°©e
)

649 (0x0): 
°©e
 = 
CAN_TxSètus_Pídög
;

652 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TME0
): 
°©e
 = 
CAN_TxSètus_Faûed
;

654 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TME1
): 
°©e
 = 
CAN_TxSètus_Faûed
;

656 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TME2
): 
°©e
 = 
CAN_TxSètus_Faûed
;

659 (
CAN_TSR_RQCP0
 | 
CAN_TSR_TXOK0
 | 
CAN_TSR_TME0
):
°©e
 = 
CAN_TxSètus_Ok
;

661 (
CAN_TSR_RQCP1
 | 
CAN_TSR_TXOK1
 | 
CAN_TSR_TME1
):
°©e
 = 
CAN_TxSètus_Ok
;

663 (
CAN_TSR_RQCP2
 | 
CAN_TSR_TXOK2
 | 
CAN_TSR_TME2
):
°©e
 = 
CAN_TxSètus_Ok
;

665 : 
°©e
 = 
CAN_TxSètus_Faûed
;

668  (
uöt8_t
Ë
°©e
;

669 
	}
}

677 
	$CAN_C™˚lTønsmô
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
Maûbox
)

680 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

681 
	`as£π_∑øm
(
	`IS_CAN_TRANSMITMAILBOX
(
Maûbox
));

683 
Maûbox
)

685 (
CAN_TXMAILBOX_0
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ0
;

687 (
CAN_TXMAILBOX_1
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ1
;

689 (
CAN_TXMAILBOX_2
): 
CANx
->
TSR
 |
CAN_TSR_ABRQ2
;

694 
	}
}

724 
	$CAN_Re˚ive
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
, 
C™RxMsg
* 
RxMesßge
)

727 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

728 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

730 
RxMesßge
->
IDE
 = (
uöt8_t
)0x04 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

731 i‡(
RxMesßge
->
IDE
 =
CAN_Id_Sènd¨d
)

733 
RxMesßge
->
StdId
 = (
uöt32_t
)0x000007FF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 21);

737 
RxMesßge
->
ExtId
 = (
uöt32_t
)0x1FFFFFFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
 >> 3);

740 
RxMesßge
->
RTR
 = (
uöt8_t
)0x02 & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RIR
;

742 
RxMesßge
->
DLC
 = (
uöt8_t
)0x0F & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
;

744 
RxMesßge
->
FMI
 = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDTR
 >> 8);

746 
RxMesßge
->
D©a
[0] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
;

747 
RxMesßge
->
D©a
[1] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 8);

748 
RxMesßge
->
D©a
[2] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 16);

749 
RxMesßge
->
D©a
[3] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDLR
 >> 24);

750 
RxMesßge
->
D©a
[4] = (
uöt8_t
)0xFF & 
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
;

751 
RxMesßge
->
D©a
[5] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 8);

752 
RxMesßge
->
D©a
[6] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 16);

753 
RxMesßge
->
D©a
[7] = (
uöt8_t
)0xFF & (
CANx
->
sFIFOMaûBox
[
FIFONumbî
].
RDHR
 >> 24);

756 i‡(
FIFONumbî
 =
CAN_FIFO0
)

758 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

763 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

765 
	}
}

773 
	$CAN_FIFORñó£
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

776 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

777 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

779 i‡(
FIFONumbî
 =
CAN_FIFO0
)

781 
CANx
->
RF0R
 |
CAN_RF0R_RFOM0
;

786 
CANx
->
RF1R
 |
CAN_RF1R_RFOM1
;

788 
	}
}

796 
uöt8_t
 
	$CAN_MesßgePídög
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
FIFONumbî
)

798 
uöt8_t
 
mesßge_≥ndög
=0;

800 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

801 
	`as£π_∑øm
(
	`IS_CAN_FIFO
(
FIFONumbî
));

802 i‡(
FIFONumbî
 =
CAN_FIFO0
)

804 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF0R
&(
uöt32_t
)0x03);

806 i‡(
FIFONumbî
 =
CAN_FIFO1
)

808 
mesßge_≥ndög
 = (
uöt8_t
)(
CANx
->
RF1R
&(
uöt32_t
)0x03);

812 
mesßge_≥ndög
 = 0;

814  
mesßge_≥ndög
;

815 
	}
}

846 
uöt8_t
 
	$CAN_O≥øtögModeReque°
(
CAN_Ty≥Def
* 
CANx
, 
uöt8_t
 
CAN_O≥øtögMode
)

848 
uöt8_t
 
°©us
 = 
CAN_ModeSètus_Faûed
;

851 
uöt32_t
 
timeout
 = 
INAK_TIMEOUT
;

854 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

855 
	`as£π_∑øm
(
	`IS_CAN_OPERATING_MODE
(
CAN_O≥øtögMode
));

857 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_Inôüliz©i⁄
)

860 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_SLEEP
)Ë| 
CAN_MCR_INRQ
);

863 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
Ë&& (
timeout
 != 0))

865 
timeout
--;

867 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_INAK
)

869 
°©us
 = 
CAN_ModeSètus_Faûed
;

873 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

876 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_N‹mÆ
)

879 
CANx
->
MCR
 &(
uöt32_t
)(~(
CAN_MCR_SLEEP
|
CAN_MCR_INRQ
));

882 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!0Ë&& (
timeout
!=0))

884 
timeout
--;

886 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
) != 0)

888 
°©us
 = 
CAN_ModeSètus_Faûed
;

892 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

895 i‡(
CAN_O≥øtögMode
 =
CAN_O≥øtögMode_SÀï
)

898 
CANx
->
MCR
 = (
uöt32_t
)((CANx->MCR & (uöt32_t)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

901 ((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
Ë&& (
timeout
!=0))

903 
timeout
--;

905 i‡((
CANx
->
MSR
 & 
CAN_MODE_MASK
Ë!
CAN_MSR_SLAK
)

907 
°©us
 = 
CAN_ModeSètus_Faûed
;

911 
°©us
 = 
CAN_ModeSètus_Suc˚ss
;

916 
°©us
 = 
CAN_ModeSètus_Faûed
;

919  (
uöt8_t
Ë
°©us
;

920 
	}
}

927 
uöt8_t
 
	$CAN_SÀï
(
CAN_Ty≥Def
* 
CANx
)

929 
uöt8_t
 
¶ìp°©us
 = 
CAN_SÀï_Faûed
;

932 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

935 
CANx
->
MCR
 = (((CANx->MCRË& (
uöt32_t
)(~(uöt32_t)
CAN_MCR_INRQ
)Ë| 
CAN_MCR_SLEEP
);

938 i‡((
CANx
->
MSR
 & (
CAN_MSR_SLAK
|
CAN_MSR_INAK
)) == CAN_MSR_SLAK)

941 
¶ìp°©us
 = 
CAN_SÀï_Ok
;

944  (
uöt8_t
)
¶ìp°©us
;

945 
	}
}

952 
uöt8_t
 
	$CAN_WakeUp
(
CAN_Ty≥Def
* 
CANx
)

954 
uöt32_t
 
waô_¶ak
 = 
SLAK_TIMEOUT
;

955 
uöt8_t
 
wakeup°©us
 = 
CAN_WakeUp_Faûed
;

958 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

961 
CANx
->
MCR
 &~(
uöt32_t
)
CAN_MCR_SLEEP
;

964 ((
CANx
->
MSR
 & 
CAN_MSR_SLAK
Ë=CAN_MSR_SLAK)&&(
waô_¶ak
!=0x00))

966 
waô_¶ak
--;

968 if((
CANx
->
MSR
 & 
CAN_MSR_SLAK
) != CAN_MSR_SLAK)

971 
wakeup°©us
 = 
CAN_WakeUp_Ok
;

974  (
uöt8_t
)
wakeup°©us
;

975 
	}
}

1014 
uöt8_t
 
	$CAN_GëLa°Eº‹Code
(
CAN_Ty≥Def
* 
CANx
)

1016 
uöt8_t
 
îr‹code
=0;

1019 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1022 
îr‹code
 = (((
uöt8_t
)
CANx
->
ESR
Ë& (uöt8_t)
CAN_ESR_LEC
);

1025  
îr‹code
;

1026 
	}
}

1039 
uöt8_t
 
	$CAN_GëRe˚iveEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1041 
uöt8_t
 
cou¡î
=0;

1044 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1047 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_REC
)>> 24);

1050  
cou¡î
;

1051 
	}
}

1059 
uöt8_t
 
	$CAN_GëLSBTønsmôEº‹Cou¡î
(
CAN_Ty≥Def
* 
CANx
)

1061 
uöt8_t
 
cou¡î
=0;

1064 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1067 
cou¡î
 = (
uöt8_t
)((
CANx
->
ESR
 & 
CAN_ESR_TEC
)>> 16);

1070  
cou¡î
;

1071 
	}
}

1218 
	$CAN_ITC⁄fig
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1221 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1222 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1223 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1225 i‡(
NewSèã
 !
DISABLE
)

1228 
CANx
->
IER
 |
CAN_IT
;

1233 
CANx
->
IER
 &~
CAN_IT
;

1235 
	}
}

1258 
FœgSètus
 
	$CAN_GëFœgSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1260 
FœgSètus
 
bô°©us
 = 
RESET
;

1263 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1264 
	`as£π_∑øm
(
	`IS_CAN_GET_FLAG
(
CAN_FLAG
));

1267 if((
CAN_FLAG
 & 
CAN_FLAGS_ESR
Ë!(
uöt32_t
)
RESET
)

1270 i‡((
CANx
->
ESR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1273 
bô°©us
 = 
SET
;

1278 
bô°©us
 = 
RESET
;

1281 if((
CAN_FLAG
 & 
CAN_FLAGS_MSR
Ë!(
uöt32_t
)
RESET
)

1284 i‡((
CANx
->
MSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1287 
bô°©us
 = 
SET
;

1292 
bô°©us
 = 
RESET
;

1295 if((
CAN_FLAG
 & 
CAN_FLAGS_TSR
Ë!(
uöt32_t
)
RESET
)

1298 i‡((
CANx
->
TSR
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1301 
bô°©us
 = 
SET
;

1306 
bô°©us
 = 
RESET
;

1309 if((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
Ë!(
uöt32_t
)
RESET
)

1312 i‡((
CANx
->
RF0R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(
uöt32_t
)
RESET
)

1315 
bô°©us
 = 
SET
;

1320 
bô°©us
 = 
RESET
;

1326 i‡((
uöt32_t
)(
CANx
->
RF1R
 & (
CAN_FLAG
 & 0x000FFFFF)Ë!(uöt32_t)
RESET
)

1329 
bô°©us
 = 
SET
;

1334 
bô°©us
 = 
RESET
;

1338  
bô°©us
;

1339 
	}
}

1358 
	$CAN_CÀ¨Fœg
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_FLAG
)

1360 
uöt32_t
 
Êagtmp
=0;

1362 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1363 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_FLAG
(
CAN_FLAG
));

1365 i‡(
CAN_FLAG
 =
CAN_FLAG_LEC
)

1368 
CANx
->
ESR
 = (
uöt32_t
)
RESET
;

1372 
Êagtmp
 = 
CAN_FLAG
 & 0x000FFFFF;

1374 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF0R
)!=(
uöt32_t
)
RESET
)

1377 
CANx
->
RF0R
 = (
uöt32_t
)(
Êagtmp
);

1379 i‡((
CAN_FLAG
 & 
CAN_FLAGS_RF1R
)!=(
uöt32_t
)
RESET
)

1382 
CANx
->
RF1R
 = (
uöt32_t
)(
Êagtmp
);

1384 i‡((
CAN_FLAG
 & 
CAN_FLAGS_TSR
)!=(
uöt32_t
)
RESET
)

1387 
CANx
->
TSR
 = (
uöt32_t
)(
Êagtmp
);

1392 
CANx
->
MSR
 = (
uöt32_t
)(
Êagtmp
);

1395 
	}
}

1418 
ITSètus
 
	$CAN_GëITSètus
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1420 
ITSètus
 
ô°©us
 = 
RESET
;

1422 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1423 
	`as£π_∑øm
(
	`IS_CAN_IT
(
CAN_IT
));

1426 if((
CANx
->
IER
 & 
CAN_IT
Ë!
RESET
)

1429 
CAN_IT
)

1431 
CAN_IT_TME
:

1433 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
TSR
, 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
);

1435 
CAN_IT_FMP0
:

1437 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FMP0
);

1439 
CAN_IT_FF0
:

1441 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FULL0
);

1443 
CAN_IT_FOV0
:

1445 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF0R
, 
CAN_RF0R_FOVR0
);

1447 
CAN_IT_FMP1
:

1449 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FMP1
);

1451 
CAN_IT_FF1
:

1453 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FULL1
);

1455 
CAN_IT_FOV1
:

1457 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
RF1R
, 
CAN_RF1R_FOVR1
);

1459 
CAN_IT_WKU
:

1461 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_WKUI
);

1463 
CAN_IT_SLK
:

1465 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_SLAKI
);

1467 
CAN_IT_EWG
:

1469 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EWGF
);

1471 
CAN_IT_EPV
:

1473 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_EPVF
);

1475 
CAN_IT_BOF
:

1477 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_BOFF
);

1479 
CAN_IT_LEC
:

1481 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
ESR
, 
CAN_ESR_LEC
);

1483 
CAN_IT_ERR
:

1485 
ô°©us
 = 
	`CheckITSètus
(
CANx
->
MSR
, 
CAN_MSR_ERRI
);

1489 
ô°©us
 = 
RESET
;

1496 
ô°©us
 = 
RESET
;

1500  
ô°©us
;

1501 
	}
}

1522 
	$CAN_CÀ¨ITPídögBô
(
CAN_Ty≥Def
* 
CANx
, 
uöt32_t
 
CAN_IT
)

1525 
	`as£π_∑øm
(
	`IS_CAN_ALL_PERIPH
(
CANx
));

1526 
	`as£π_∑øm
(
	`IS_CAN_CLEAR_IT
(
CAN_IT
));

1528 
CAN_IT
)

1530 
CAN_IT_TME
:

1532 
CANx
->
TSR
 = 
CAN_TSR_RQCP0
|
CAN_TSR_RQCP1
|
CAN_TSR_RQCP2
;

1534 
CAN_IT_FF0
:

1536 
CANx
->
RF0R
 = 
CAN_RF0R_FULL0
;

1538 
CAN_IT_FOV0
:

1540 
CANx
->
RF0R
 = 
CAN_RF0R_FOVR0
;

1542 
CAN_IT_FF1
:

1544 
CANx
->
RF1R
 = 
CAN_RF1R_FULL1
;

1546 
CAN_IT_FOV1
:

1548 
CANx
->
RF1R
 = 
CAN_RF1R_FOVR1
;

1550 
CAN_IT_WKU
:

1552 
CANx
->
MSR
 = 
CAN_MSR_WKUI
;

1554 
CAN_IT_SLK
:

1556 
CANx
->
MSR
 = 
CAN_MSR_SLAKI
;

1558 
CAN_IT_EWG
:

1560 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1563 
CAN_IT_EPV
:

1565 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1568 
CAN_IT_BOF
:

1570 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1573 
CAN_IT_LEC
:

1575 
CANx
->
ESR
 = 
RESET
;

1577 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1579 
CAN_IT_ERR
:

1581 
CANx
->
ESR
 = 
RESET
;

1583 
CANx
->
MSR
 = 
CAN_MSR_ERRI
;

1589 
	}
}

1600 
ITSètus
 
	$CheckITSètus
(
uöt32_t
 
CAN_Reg
, uöt32_à
It_Bô
)

1602 
ITSètus
 
≥ndögbô°©us
 = 
RESET
;

1604 i‡((
CAN_Reg
 & 
It_Bô
Ë!(
uöt32_t
)
RESET
)

1607 
≥ndögbô°©us
 = 
SET
;

1612 
≥ndögbô°©us
 = 
RESET
;

1614  
≥ndögbô°©us
;

1615 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_comp.c

166 
	~"°m32f30x_comp.h
"

180 
	#COMP_CSR_CLEAR_MASK
 ((
uöt32_t
)0x00000003)

	)

213 
	$COMP_DeInô
(
uöt32_t
 
COMP_Sñe˘i⁄
)

216 *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
) = ((uint32_t)0x00000000);

217 
	}
}

241 
	$COMP_Inô
(
uöt32_t
 
COMP_Sñe˘i⁄
, 
COMP_InôTy≥Def
* 
COMP_InôSåu˘
)

243 
uöt32_t
 
tm¥eg
 = 0;

246 
	`as£π_∑øm
(
	`IS_COMP_ALL_PERIPH
(
COMP_Sñe˘i⁄
));

247 
	`as£π_∑øm
(
	`IS_COMP_INVERTING_INPUT
(
COMP_InôSåu˘
->
COMP_InvîtögI≈ut
));

248 
	`as£π_∑øm
(
	`IS_COMP_NONINVERTING_INPUT
(
COMP_InôSåu˘
->
COMP_N⁄InvîtögI≈ut
));

249 
	`as£π_∑øm
(
	`IS_COMP_OUTPUT
(
COMP_InôSåu˘
->
COMP_Ouçut
));

250 
	`as£π_∑øm
(
	`IS_COMP_BLANKING_SOURCE
(
COMP_InôSåu˘
->
COMP_BœnkögSr˚
));

251 
	`as£π_∑øm
(
	`IS_COMP_OUTPUT_POL
(
COMP_InôSåu˘
->
COMP_OuçutPﬁ
));

252 
	`as£π_∑øm
(
	`IS_COMP_HYSTERESIS
(
COMP_InôSåu˘
->
COMP_Hy°îesis
));

253 
	`as£π_∑øm
(
	`IS_COMP_MODE
(
COMP_InôSåu˘
->
COMP_Mode
));

256 
tm¥eg
 = *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
);

259 
tm¥eg
 &(
uöt32_t
Ë(
COMP_CSR_CLEAR_MASK
);

269 
tm¥eg
 |(
uöt32_t
)(
COMP_InôSåu˘
->
COMP_InvîtögI≈ut
 | COMP_InôSåu˘->
COMP_N⁄InvîtögI≈ut
 |

270 
COMP_InôSåu˘
->
COMP_Ouçut
 | COMP_InôSåu˘->
COMP_OuçutPﬁ
 | COMP_InôSåu˘->
COMP_BœnkögSr˚
 |

271 
COMP_InôSåu˘
->
COMP_Hy°îesis
 | COMP_InôSåu˘->
COMP_Mode
);

274 *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
Ë
tm¥eg
;

275 
	}
}

283 
	$COMP_Såu˘Inô
(
COMP_InôTy≥Def
* 
COMP_InôSåu˘
)

285 
COMP_InôSåu˘
->
COMP_InvîtögI≈ut
 = 
COMP_InvîtögI≈ut_1_4VREFINT
;

286 
COMP_InôSåu˘
->
COMP_N⁄InvîtögI≈ut
 = 
COMP_N⁄InvîtögI≈ut_IO1
;

287 
COMP_InôSåu˘
->
COMP_Ouçut
 = 
COMP_Ouçut_N⁄e
;

288 
COMP_InôSåu˘
->
COMP_BœnkögSr˚
 = 
COMP_BœnkögSr˚_N⁄e
;

289 
COMP_InôSåu˘
->
COMP_OuçutPﬁ
 = 
COMP_OuçutPﬁ_N⁄Invîãd
;

290 
COMP_InôSåu˘
->
COMP_Hy°îesis
 = 
COMP_Hy°îesis_No
;

291 
COMP_InôSåu˘
->
COMP_Mode
 = 
COMP_Mode_U…øLowPowî
;

292 
	}
}

310 
	$COMP_Cmd
(
uöt32_t
 
COMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

313 
	`as£π_∑øm
(
	`IS_COMP_ALL_PERIPH
(
COMP_Sñe˘i⁄
));

314 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

316 i‡(
NewSèã
 !
DISABLE
)

319 *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
Ë|(uöt32_tË(
COMP_CSR_COMPxEN
);

324 *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
Ë&(uöt32_t)(~
COMP_CSR_COMPxEN
);

326 
	}
}

340 
	$COMP_SwôchCmd
(
uöt32_t
 
COMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

343 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

345 i‡(
NewSèã
 !
DISABLE
)

348 *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
Ë|(uöt32_tË(
COMP_CSR_COMP1SW1
);

353 *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
Ë&(uöt32_t)(~
COMP_CSR_COMP1SW1
);

355 
	}
}

376 
uöt32_t
 
	$COMP_GëOuçutLevñ
(
uöt32_t
 
COMP_Sñe˘i⁄
)

378 
uöt32_t
 
compout
 = 0x0;

381 
	`as£π_∑øm
(
	`IS_COMP_ALL_PERIPH
(
COMP_Sñe˘i⁄
));

384 i‡((*(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
Ë& (
COMP_CSR_COMPxOUT
)) != 0)

386 
compout
 = 
COMP_OuçutLevñ_High
;

390 
compout
 = 
COMP_OuçutLevñ_Low
;

394  (
uöt32_t
)(
compout
);

395 
	}
}

433 
	$COMP_WödowCmd
(
uöt32_t
 
COMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

436 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

437 
	`as£π_∑øm
(
	`IS_COMP_WINDOW
(
COMP_Sñe˘i⁄
));

439 i‡(
NewSèã
 !
DISABLE
)

442 *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
Ë|(uöt32_tË
COMP_CSR_COMPxWNDWEN
;

447 *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
Ë&(uöt32_t)(~
COMP_CSR_COMPxWNDWEN
);

449 
	}
}

478 
	$COMP_LockC⁄fig
(
uöt32_t
 
COMP_Sñe˘i⁄
)

481 
	`as£π_∑øm
(
	`IS_COMP_ALL_PERIPH
(
COMP_Sñe˘i⁄
));

484 *(
__IO
 
uöt32_t
 *Ë(
COMP_BASE
 + 
COMP_Sñe˘i⁄
Ë|(uöt32_tË(
COMP_CSR_COMPxLOCK
);

485 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_crc.c

56 
	~"°m32f30x_¸c.h
"

95 
	$CRC_DeInô
()

98 
CRC
->
DR
 = 0xFFFFFFFF;

100 
CRC
->
POL
 = 0x04C11DB7;

102 
CRC
->
IDR
 = 0x00;

104 
CRC
->
INIT
 = 0xFFFFFFFF;

106 
CRC
->
CR
 = 
CRC_CR_RESET
;

107 
	}
}

114 
	$CRC_Re£tDR
()

117 
CRC
->
CR
 |
CRC_CR_RESET
;

118 
	}
}

130 
	$CRC_PﬁynomülSizeSñe˘
(
uöt32_t
 
CRC_PﬁSize
)

132 
uöt32_t
 
tmp¸
 = 0;

135 
	`as£π_∑øm
(
	`IS_CRC_POL_SIZE
(
CRC_PﬁSize
));

138 
tmp¸
 = 
CRC
->
CR
;

141 
tmp¸
 &(
uöt32_t
)~((uöt32_t)
CRC_CR_POLSIZE
);

143 
tmp¸
 |(
uöt32_t
)
CRC_PﬁSize
;

146 
CRC
->
CR
 = (
uöt32_t
)
tmp¸
;

147 
	}
}

159 
	$CRC_Revî£I≈utD©aSñe˘
(
uöt32_t
 
CRC_Revî£I≈utD©a
)

161 
uöt32_t
 
tmp¸
 = 0;

164 
	`as£π_∑øm
(
	`IS_CRC_REVERSE_INPUT_DATA
(
CRC_Revî£I≈utD©a
));

167 
tmp¸
 = 
CRC
->
CR
;

170 
tmp¸
 &(
uöt32_t
)~((uöt32_t)
CRC_CR_REV_IN
);

172 
tmp¸
 |(
uöt32_t
)
CRC_Revî£I≈utD©a
;

175 
CRC
->
CR
 = (
uöt32_t
)
tmp¸
;

176 
	}
}

185 
	$CRC_Revî£OuçutD©aCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

188 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

190 i‡(
NewSèã
 !
DISABLE
)

193 
CRC
->
CR
 |
CRC_CR_REV_OUT
;

198 
CRC
->
CR
 &(
uöt32_t
)~((uöt32_t)
CRC_CR_REV_OUT
);

200 
	}
}

208 
	$CRC_SëInôRegi°î
(
uöt32_t
 
CRC_InôVÆue
)

210 
CRC
->
INIT
 = 
CRC_InôVÆue
;

211 
	}
}

218 
	$CRC_SëPﬁynomül
(
uöt32_t
 
CRC_Pﬁ
)

220 
CRC
->
POL
 = 
CRC_Pﬁ
;

221 
	}
}

244 
uöt32_t
 
	$CRC_CÆcCRC
(
uöt32_t
 
CRC_D©a
)

246 
CRC
->
DR
 = 
CRC_D©a
;

248  (
CRC
->
DR
);

249 
	}
}

256 
uöt32_t
 
	$CRC_CÆcCRC16bôs
(
uöt16_t
 
CRC_D©a
)

258 *(
uöt16_t
*)(
CRC_BASE
Ë(uöt16_tË
CRC_D©a
;

260  (
CRC
->
DR
);

261 
	}
}

268 
uöt32_t
 
	$CRC_CÆcCRC8bôs
(
uöt8_t
 
CRC_D©a
)

270 *(
uöt8_t
*)(
CRC_BASE
Ë(uöt8_tË
CRC_D©a
;

272  (
CRC
->
DR
);

273 
	}
}

281 
uöt32_t
 
	$CRC_CÆcBlockCRC
(
uöt32_t
 
pBuf„r
[], uöt32_à
Buf„rLígth
)

283 
uöt32_t
 
ödex
 = 0;

285 
ödex
 = 0; index < 
Buf„rLígth
; index++)

287 
CRC
->
DR
 = 
pBuf„r
[
ödex
];

289  (
CRC
->
DR
);

290 
	}
}

297 
uöt32_t
 
	$CRC_GëCRC
()

299  (
CRC
->
DR
);

300 
	}
}

323 
	$CRC_SëIDRegi°î
(
uöt8_t
 
CRC_IDVÆue
)

325 
CRC
->
IDR
 = 
CRC_IDVÆue
;

326 
	}
}

333 
uöt8_t
 
	$CRC_GëIDRegi°î
()

335  (
CRC
->
IDR
);

336 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_dac.c

102 
	~"°m32f30x_dac.h
"

103 
	~"°m32f30x_rcc.h
"

118 
	#CR_CLEAR_MASK
 ((
uöt32_t
)0x00000FFE)

	)

121 
	#DUAL_SWTRIG_SET
 ((
uöt32_t
)0x00000003)

	)

122 
	#DUAL_SWTRIG_RESET
 ((
uöt32_t
)0xFFFFFFFC)

	)

125 
	#DHR12R1_OFFSET
 ((
uöt32_t
)0x00000008)

	)

126 
	#DHR12R2_OFFSET
 ((
uöt32_t
)0x00000014)

	)

127 
	#DHR12RD_OFFSET
 ((
uöt32_t
)0x00000020)

	)

130 
	#DOR_OFFSET
 ((
uöt32_t
)0x0000002C)

	)

158 
	$DAC_DeInô
()

161 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
ENABLE
);

163 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_DAC
, 
DISABLE
);

164 
	}
}

177 
	$DAC_Inô
(
uöt32_t
 
DAC_Ch™√l
, 
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

179 
uöt32_t
 
tm¥eg1
 = 0, 
tm¥eg2
 = 0;

182 
	`as£π_∑øm
(
	`IS_DAC_TRIGGER
(
DAC_InôSåu˘
->
DAC_Triggî
));

183 
	`as£π_∑øm
(
	`IS_DAC_GENERATE_WAVE
(
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
));

184 
	`as£π_∑øm
(
	`IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE
(
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
));

185 
	`as£π_∑øm
(
	`IS_DAC_OUTPUT_BUFFER_STATE
(
DAC_InôSåu˘
->
DAC_OuçutBuf„r
));

189 
tm¥eg1
 = 
DAC
->
CR
;

191 
tm¥eg1
 &~(
CR_CLEAR_MASK
 << 
DAC_Ch™√l
);

198 
tm¥eg2
 = (
DAC_InôSåu˘
->
DAC_Triggî
 | DAC_InôSåu˘->
DAC_WaveGíî©i⁄
 |

199 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 | \

200 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
);

202 
tm¥eg1
 |
tm¥eg2
 << 
DAC_Ch™√l
;

204 
DAC
->
CR
 = 
tm¥eg1
;

205 
	}
}

213 
	$DAC_Såu˘Inô
(
DAC_InôTy≥Def
* 
DAC_InôSåu˘
)

217 
DAC_InôSåu˘
->
DAC_Triggî
 = 
DAC_Triggî_N⁄e
;

219 
DAC_InôSåu˘
->
DAC_WaveGíî©i⁄
 = 
DAC_WaveGíî©i⁄_N⁄e
;

221 
DAC_InôSåu˘
->
DAC_LFSRUnmask_TrüngÀAm∂ôude
 = 
DAC_LFSRUnmask_Bô0
;

223 
DAC_InôSåu˘
->
DAC_OuçutBuf„r
 = 
DAC_OuçutBuf„r_E«bÀ
;

224 
	}
}

237 
	$DAC_Cmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

240 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

241 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

243 i‡(
NewSèã
 !
DISABLE
)

246 
DAC
->
CR
 |(
DAC_CR_EN1
 << 
DAC_Ch™√l
);

251 
DAC
->
CR
 &(~(
DAC_CR_EN1
 << 
DAC_Ch™√l
));

253 
	}
}

265 
	$DAC_So·w¨eTriggîCmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

268 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

269 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

271 i‡(
NewSèã
 !
DISABLE
)

274 
DAC
->
SWTRIGR
 |(
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4);

279 
DAC
->
SWTRIGR
 &~((
uöt32_t
)
DAC_SWTRIGR_SWTRIG1
 << (
DAC_Ch™√l
 >> 4));

281 
	}
}

289 
	$DAC_DuÆSo·w¨eTriggîCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

292 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

294 i‡(
NewSèã
 !
DISABLE
)

297 
DAC
->
SWTRIGR
 |
DUAL_SWTRIG_SET
;

302 
DAC
->
SWTRIGR
 &
DUAL_SWTRIG_RESET
;

304 
	}
}

320 
	$DAC_WaveGíî©i⁄Cmd
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_Wave
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

323 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

324 
	`as£π_∑øm
(
	`IS_DAC_WAVE
(
DAC_Wave
));

325 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

327 i‡(
NewSèã
 !
DISABLE
)

330 
DAC
->
CR
 |
DAC_Wave
 << 
DAC_Ch™√l
;

335 
DAC
->
CR
 &~(
DAC_Wave
 << 
DAC_Ch™√l
);

337 
	}
}

349 
	$DAC_SëCh™√l1D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

351 
__IO
 
uöt32_t
 
tmp
 = 0;

354 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

355 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

357 
tmp
 = (
uöt32_t
)
DAC_BASE
;

358 
tmp
 +
DHR12R1_OFFSET
 + 
DAC_Align
;

361 *(
__IO
 
uöt32_t
 *Ë
tmp
 = 
D©a
;

362 
	}
}

374 
	$DAC_SëCh™√l2D©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a
)

376 
__IO
 
uöt32_t
 
tmp
 = 0;

379 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

380 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a
));

382 
tmp
 = (
uöt32_t
)
DAC_BASE
;

383 
tmp
 +
DHR12R2_OFFSET
 + 
DAC_Align
;

386 *(
__IO
 
uöt32_t
 *)
tmp
 = 
D©a
;

387 
	}
}

402 
	$DAC_SëDuÆCh™√lD©a
(
uöt32_t
 
DAC_Align
, 
uöt16_t
 
D©a2
, uöt16_à
D©a1
)

404 
uöt32_t
 
d©a
 = 0, 
tmp
 = 0;

407 
	`as£π_∑øm
(
	`IS_DAC_ALIGN
(
DAC_Align
));

408 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a1
));

409 
	`as£π_∑øm
(
	`IS_DAC_DATA
(
D©a2
));

412 i‡(
DAC_Align
 =
DAC_Align_8b_R
)

414 
d©a
 = ((
uöt32_t
)
D©a2
 << 8Ë| 
D©a1
;

418 
d©a
 = ((
uöt32_t
)
D©a2
 << 16Ë| 
D©a1
;

421 
tmp
 = (
uöt32_t
)
DAC_BASE
;

422 
tmp
 +
DHR12RD_OFFSET
 + 
DAC_Align
;

425 *(
__IO
 
uöt32_t
 *)
tmp
 = 
d©a
;

426 
	}
}

436 
uöt16_t
 
	$DAC_GëD©aOuçutVÆue
(
uöt32_t
 
DAC_Ch™√l
)

438 
__IO
 
uöt32_t
 
tmp
 = 0;

441 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

443 
tmp
 = (
uöt32_t
Ë
DAC_BASE
 ;

444 
tmp
 +
DOR_OFFSET
 + ((
uöt32_t
)
DAC_Ch™√l
 >> 2);

447  (
uöt16_t
Ë(*(
__IO
 
uöt32_t
*Ë
tmp
);

448 
	}
}

481 
	$DAC_DMACmd
(
uöt32_t
 
DAC_Ch™√l
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

485 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

487 i‡(
NewSèã
 !
DISABLE
)

490 
DAC
->
CR
 |(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
);

495 
DAC
->
CR
 &(~(
DAC_CR_DMAEN1
 << 
DAC_Ch™√l
));

497 
	}
}

529 
	$DAC_ITC⁄fig
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

532 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

533 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

534 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

536 i‡(
NewSèã
 !
DISABLE
)

539 
DAC
->
CR
 |(
DAC_IT
 << 
DAC_Ch™√l
);

544 
DAC
->
CR
 &(~(
uöt32_t
)(
DAC_IT
 << 
DAC_Ch™√l
));

546 
	}
}

561 
FœgSètus
 
	$DAC_GëFœgSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

563 
FœgSètus
 
bô°©us
 = 
RESET
;

565 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

566 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

569 i‡((
DAC
->
SR
 & (
DAC_FLAG
 << 
DAC_Ch™√l
)Ë!(
uöt8_t
)
RESET
)

572 
bô°©us
 = 
SET
;

577 
bô°©us
 = 
RESET
;

580  
bô°©us
;

581 
	}
}

594 
	$DAC_CÀ¨Fœg
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_FLAG
)

597 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

598 
	`as£π_∑øm
(
	`IS_DAC_FLAG
(
DAC_FLAG
));

601 
DAC
->
SR
 = (
DAC_FLAG
 << 
DAC_Ch™√l
);

602 
	}
}

617 
ITSètus
 
	$DAC_GëITSètus
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

619 
ITSètus
 
bô°©us
 = 
RESET
;

620 
uöt32_t
 
íabÀ°©us
 = 0;

623 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

624 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

627 
íabÀ°©us
 = (
DAC
->
CR
 & (
DAC_IT
 << 
DAC_Ch™√l
)) ;

630 i‡(((
DAC
->
SR
 & (
DAC_IT
 << 
DAC_Ch™√l
)Ë!(
uöt32_t
)
RESET
Ë&& 
íabÀ°©us
)

633 
bô°©us
 = 
SET
;

638 
bô°©us
 = 
RESET
;

641  
bô°©us
;

642 
	}
}

655 
	$DAC_CÀ¨ITPídögBô
(
uöt32_t
 
DAC_Ch™√l
, uöt32_à
DAC_IT
)

658 
	`as£π_∑øm
(
	`IS_DAC_CHANNEL
(
DAC_Ch™√l
));

659 
	`as£π_∑øm
(
	`IS_DAC_IT
(
DAC_IT
));

662 
DAC
->
SR
 = (
DAC_IT
 << 
DAC_Ch™√l
);

663 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_dbgmcu.c

32 
	~"°m32f30x_dbgmcu.h
"

45 
	#IDCODE_DEVID_MASK
 ((
uöt32_t
)0x00000FFF)

	)

73 
uöt32_t
 
	$DBGMCU_GëREVID
()

75 (
DBGMCU
->
IDCODE
 >> 16);

76 
	}
}

83 
uöt32_t
 
	$DBGMCU_GëDEVID
()

85 (
DBGMCU
->
IDCODE
 & 
IDCODE_DEVID_MASK
);

86 
	}
}

115 
	$DBGMCU_C⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

118 
	`as£π_∑øm
(
	`IS_DBGMCU_PERIPH
(
DBGMCU_Pîùh
));

119 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

120 i‡(
NewSèã
 !
DISABLE
)

122 
DBGMCU
->
CR
 |
DBGMCU_Pîùh
;

126 
DBGMCU
->
CR
 &~
DBGMCU_Pîùh
;

128 
	}
}

152 
	$DBGMCU_APB1PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

155 
	`as£π_∑øm
(
	`IS_DBGMCU_APB1PERIPH
(
DBGMCU_Pîùh
));

156 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

158 i‡(
NewSèã
 !
DISABLE
)

160 
DBGMCU
->
APB1FZ
 |
DBGMCU_Pîùh
;

164 
DBGMCU
->
APB1FZ
 &~
DBGMCU_Pîùh
;

166 
	}
}

181 
	$DBGMCU_APB2PîùhC⁄fig
(
uöt32_t
 
DBGMCU_Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

184 
	`as£π_∑øm
(
	`IS_DBGMCU_APB2PERIPH
(
DBGMCU_Pîùh
));

185 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

187 i‡(
NewSèã
 !
DISABLE
)

189 
DBGMCU
->
APB2FZ
 |
DBGMCU_Pîùh
;

193 
DBGMCU
->
APB2FZ
 &~
DBGMCU_Pîùh
;

195 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_dma.c

74 
	~"°m32f30x_dma.h
"

87 
	#CCR_CLEAR_MASK
 ((
uöt32_t
)0xFFFF800FË

	)

88 
	#FLAG_Mask
 ((
uöt32_t
)0x10000000Ë

	)

92 
	#DMA1_CHANNEL1_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

93 
	#DMA1_CHANNEL2_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

94 
	#DMA1_CHANNEL3_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

95 
	#DMA1_CHANNEL4_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

96 
	#DMA1_CHANNEL5_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

97 
	#DMA1_CHANNEL6_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF6
 | 
DMA_ISR_TCIF6
 | 
DMA_ISR_HTIF6
 | 
DMA_ISR_TEIF6
))

	)

98 
	#DMA1_CHANNEL7_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF7
 | 
DMA_ISR_TCIF7
 | 
DMA_ISR_HTIF7
 | 
DMA_ISR_TEIF7
))

	)

101 
	#DMA2_CHANNEL1_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF1
 | 
DMA_ISR_TCIF1
 | 
DMA_ISR_HTIF1
 | 
DMA_ISR_TEIF1
))

	)

102 
	#DMA2_CHANNEL2_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF2
 | 
DMA_ISR_TCIF2
 | 
DMA_ISR_HTIF2
 | 
DMA_ISR_TEIF2
))

	)

103 
	#DMA2_CHANNEL3_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF3
 | 
DMA_ISR_TCIF3
 | 
DMA_ISR_HTIF3
 | 
DMA_ISR_TEIF3
))

	)

104 
	#DMA2_CHANNEL4_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF4
 | 
DMA_ISR_TCIF4
 | 
DMA_ISR_HTIF4
 | 
DMA_ISR_TEIF4
))

	)

105 
	#DMA2_CHANNEL5_IT_MASK
 ((
uöt32_t
)(
DMA_ISR_GIF5
 | 
DMA_ISR_TCIF5
 | 
DMA_ISR_HTIF5
 | 
DMA_ISR_TEIF5
))

	)

141 
	$DMA_DeInô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

144 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

147 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR_EN
);

150 
DMAy_Ch™√lx
->
CCR
 = 0;

153 
DMAy_Ch™√lx
->
CNDTR
 = 0;

156 
DMAy_Ch™√lx
->
CPAR
 = 0;

159 
DMAy_Ch™√lx
->
CMAR
 = 0;

161 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l1
)

164 
DMA1
->
IFCR
 |
DMA1_CHANNEL1_IT_MASK
;

166 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l2
)

169 
DMA1
->
IFCR
 |
DMA1_CHANNEL2_IT_MASK
;

171 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l3
)

174 
DMA1
->
IFCR
 |
DMA1_CHANNEL3_IT_MASK
;

176 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l4
)

179 
DMA1
->
IFCR
 |
DMA1_CHANNEL4_IT_MASK
;

181 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l5
)

184 
DMA1
->
IFCR
 |
DMA1_CHANNEL5_IT_MASK
;

186 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l6
)

189 
DMA1
->
IFCR
 |
DMA1_CHANNEL6_IT_MASK
;

191 i‡(
DMAy_Ch™√lx
 =
DMA1_Ch™√l7
)

194 
DMA1
->
IFCR
 |
DMA1_CHANNEL7_IT_MASK
;

196 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l1
)

199 
DMA2
->
IFCR
 |
DMA2_CHANNEL1_IT_MASK
;

201 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l2
)

204 
DMA2
->
IFCR
 |
DMA2_CHANNEL2_IT_MASK
;

206 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l3
)

209 
DMA2
->
IFCR
 |
DMA2_CHANNEL3_IT_MASK
;

211 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l4
)

214 
DMA2
->
IFCR
 |
DMA2_CHANNEL4_IT_MASK
;

218 i‡(
DMAy_Ch™√lx
 =
DMA2_Ch™√l5
)

221 
DMA2
->
IFCR
 |
DMA2_CHANNEL5_IT_MASK
;

224 
	}
}

235 
	$DMA_Inô
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

237 
uöt32_t
 
tm¥eg
 = 0;

240 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

241 
	`as£π_∑øm
(
	`IS_DMA_DIR
(
DMA_InôSåu˘
->
DMA_DIR
));

242 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_INC_STATE
(
DMA_InôSåu˘
->
DMA_PîùhîÆInc
));

243 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_INC_STATE
(
DMA_InôSåu˘
->
DMA_Mem‹yInc
));

244 
	`as£π_∑øm
(
	`IS_DMA_PERIPHERAL_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
));

245 
	`as£π_∑øm
(
	`IS_DMA_MEMORY_DATA_SIZE
(
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
));

246 
	`as£π_∑øm
(
	`IS_DMA_MODE
(
DMA_InôSåu˘
->
DMA_Mode
));

247 
	`as£π_∑øm
(
	`IS_DMA_PRIORITY
(
DMA_InôSåu˘
->
DMA_Pri‹ôy
));

248 
	`as£π_∑øm
(
	`IS_DMA_M2M_STATE
(
DMA_InôSåu˘
->
DMA_M2M
));

252 
tm¥eg
 = 
DMAy_Ch™√lx
->
CCR
;

255 
tm¥eg
 &
CCR_CLEAR_MASK
;

266 
tm¥eg
 |
DMA_InôSåu˘
->
DMA_DIR
 | DMA_InôSåu˘->
DMA_Mode
 |

267 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 | DMA_InôSåu˘->
DMA_Mem‹yInc
 |

268 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 | DMA_InôSåu˘->
DMA_Mem‹yD©aSize
 |

269 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 | DMA_InôSåu˘->
DMA_M2M
;

272 
DMAy_Ch™√lx
->
CCR
 = 
tm¥eg
;

276 
DMAy_Ch™√lx
->
CNDTR
 = 
DMA_InôSåu˘
->
DMA_Buf„rSize
;

280 
DMAy_Ch™√lx
->
CPAR
 = 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
;

284 
DMAy_Ch™√lx
->
CMAR
 = 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
;

285 
	}
}

293 
	$DMA_Såu˘Inô
(
DMA_InôTy≥Def
* 
DMA_InôSåu˘
)

297 
DMA_InôSåu˘
->
DMA_PîùhîÆBa£Addr
 = 0;

299 
DMA_InôSåu˘
->
DMA_Mem‹yBa£Addr
 = 0;

301 
DMA_InôSåu˘
->
DMA_DIR
 = 
DMA_DIR_PîùhîÆSRC
;

303 
DMA_InôSåu˘
->
DMA_Buf„rSize
 = 0;

305 
DMA_InôSåu˘
->
DMA_PîùhîÆInc
 = 
DMA_PîùhîÆInc_DißbÀ
;

307 
DMA_InôSåu˘
->
DMA_Mem‹yInc
 = 
DMA_Mem‹yInc_DißbÀ
;

309 
DMA_InôSåu˘
->
DMA_PîùhîÆD©aSize
 = 
DMA_PîùhîÆD©aSize_Byã
;

311 
DMA_InôSåu˘
->
DMA_Mem‹yD©aSize
 = 
DMA_Mem‹yD©aSize_Byã
;

313 
DMA_InôSåu˘
->
DMA_Mode
 = 
DMA_Mode_N‹mÆ
;

315 
DMA_InôSåu˘
->
DMA_Pri‹ôy
 = 
DMA_Pri‹ôy_Low
;

317 
DMA_InôSåu˘
->
DMA_M2M
 = 
DMA_M2M_DißbÀ
;

318 
	}
}

328 
	$DMA_Cmd
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

331 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

332 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

334 i‡(
NewSèã
 !
DISABLE
)

337 
DMAy_Ch™√lx
->
CCR
 |
DMA_CCR_EN
;

342 
DMAy_Ch™√lx
->
CCR
 &(
uöt16_t
)(~
DMA_CCR_EN
);

344 
	}
}

387 
	$DMA_SëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt16_t
 
D©aNumbî
)

390 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

394 
DMAy_Ch™√lx
->
CNDTR
 = 
D©aNumbî
;

395 
	}
}

405 
uöt16_t
 
	$DMA_GëCuºD©aCou¡î
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
)

408 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

410  ((
uöt16_t
)(
DMAy_Ch™√lx
->
CNDTR
));

411 
	}
}

481 
	$DMA_ITC⁄fig
(
DMA_Ch™√l_Ty≥Def
* 
DMAy_Ch™√lx
, 
uöt32_t
 
DMA_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

484 
	`as£π_∑øm
(
	`IS_DMA_ALL_PERIPH
(
DMAy_Ch™√lx
));

485 
	`as£π_∑øm
(
	`IS_DMA_CONFIG_IT
(
DMA_IT
));

486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

488 i‡(
NewSèã
 !
DISABLE
)

491 
DMAy_Ch™√lx
->
CCR
 |
DMA_IT
;

496 
DMAy_Ch™√lx
->
CCR
 &~
DMA_IT
;

498 
	}
}

561 
FœgSètus
 
	$DMA_GëFœgSètus
(
uöt32_t
 
DMAy_FLAG
)

563 
FœgSètus
 
bô°©us
 = 
RESET
;

564 
uöt32_t
 
tm¥eg
 = 0;

567 
	`as£π_∑øm
(
	`IS_DMA_GET_FLAG
(
DMAy_FLAG
));

570 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

573 
tm¥eg
 = 
DMA2
->
ISR
 ;

578 
tm¥eg
 = 
DMA1
->
ISR
 ;

582 i‡((
tm¥eg
 & 
DMAy_FLAG
Ë!(
uöt32_t
)
RESET
)

585 
bô°©us
 = 
SET
;

590 
bô°©us
 = 
RESET
;

594  
bô°©us
;

595 
	}
}

657 
	$DMA_CÀ¨Fœg
(
uöt32_t
 
DMAy_FLAG
)

660 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_FLAG
(
DMAy_FLAG
));

663 i‡((
DMAy_FLAG
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

666 
DMA2
->
IFCR
 = 
DMAy_FLAG
;

671 
DMA1
->
IFCR
 = 
DMAy_FLAG
;

673 
	}
}

736 
ITSètus
 
	$DMA_GëITSètus
(
uöt32_t
 
DMAy_IT
)

738 
ITSètus
 
bô°©us
 = 
RESET
;

739 
uöt32_t
 
tm¥eg
 = 0;

742 
	`as£π_∑øm
(
	`IS_DMA_GET_IT
(
DMAy_IT
));

745 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

748 
tm¥eg
 = 
DMA2
->
ISR
;

753 
tm¥eg
 = 
DMA1
->
ISR
;

757 i‡((
tm¥eg
 & 
DMAy_IT
Ë!(
uöt32_t
)
RESET
)

760 
bô°©us
 = 
SET
;

765 
bô°©us
 = 
RESET
;

768  
bô°©us
;

769 
	}
}

832 
	$DMA_CÀ¨ITPídögBô
(
uöt32_t
 
DMAy_IT
)

835 
	`as£π_∑øm
(
	`IS_DMA_CLEAR_IT
(
DMAy_IT
));

838 i‡((
DMAy_IT
 & 
FLAG_Mask
Ë!(
uöt32_t
)
RESET
)

841 
DMA2
->
IFCR
 = 
DMAy_IT
;

846 
DMA1
->
IFCR
 = 
DMAy_IT
;

848 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_exti.c

81 
	~"°m32f30x_exti.h
"

95 
	#EXTI_LINENONE
 ((
uöt32_t
)0x00000Ë

	)

124 
	$EXTI_DeInô
()

126 
EXTI
->
IMR
 = 0x1F800000;

127 
EXTI
->
EMR
 = 0x00000000;

128 
EXTI
->
RTSR
 = 0x00000000;

129 
EXTI
->
FTSR
 = 0x00000000;

130 
EXTI
->
SWIER
 = 0x00000000;

131 
EXTI
->
PR
 = 0xE07FFFFF;

132 
EXTI
->
IMR2
 = 0x0000000C;

133 
EXTI
->
EMR2
 = 0x00000000;

134 
EXTI
->
RTSR2
 = 0x00000000;

135 
EXTI
->
FTSR2
 = 0x00000000;

136 
EXTI
->
SWIER2
 = 0x00000000;

137 
EXTI
->
PR2
 = 0x00000003;

138 
	}
}

154 
	$EXTI_Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

156 
uöt32_t
 
tmp
 = 0;

159 
	`as£π_∑øm
(
	`IS_EXTI_MODE
(
EXTI_InôSåu˘
->
EXTI_Mode
));

160 
	`as£π_∑øm
(
	`IS_EXTI_TRIGGER
(
EXTI_InôSåu˘
->
EXTI_Triggî
));

161 
	`as£π_∑øm
(
	`IS_EXTI_LINE_ALL
(
EXTI_InôSåu˘
->
EXTI_Löe
));

162 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
EXTI_InôSåu˘
->
EXTI_LöeCmd
));

164 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

166 i‡(
EXTI_InôSåu˘
->
EXTI_LöeCmd
 !
DISABLE
)

169 *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
IMR
)Ë+ ((
EXTI_InôSåu˘
->
EXTI_Löe
) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));

170 *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
EMR
)Ë+ ((
EXTI_InôSåu˘
->
EXTI_Löe
) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));

172 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
 + (((EXTI_InôSåu˘->
EXTI_Löe
) >> 5 ) * 0x20);

174 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(uöt32_t)(1 << (
EXTI_InôSåu˘
->
EXTI_Löe
 & 0x1F));

176 
tmp
 = (
uöt32_t
)
EXTI_BASE
;

179 *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
RTSR
)Ë+ ((
EXTI_InôSåu˘
->
EXTI_Löe
) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));

180 *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
FTSR
)Ë+ ((
EXTI_InôSåu˘
->
EXTI_Löe
) >> 5 ) * 0x20) &= ~(uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));

183 i‡(
EXTI_InôSåu˘
->
EXTI_Triggî
 =
EXTI_Triggî_Risög_FÆlög
)

186 *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
RTSR
)Ë+ ((
EXTI_InôSåu˘
->
EXTI_Löe
) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));

187 *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
FTSR
)Ë+ ((
EXTI_InôSåu˘
->
EXTI_Löe
) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_InitStruct->EXTI_Line & 0x1F));

191 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Triggî
 + (((EXTI_InôSåu˘->
EXTI_Löe
) >> 5 ) * 0x20);

193 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(uöt32_t)(1 << (
EXTI_InôSåu˘
->
EXTI_Löe
 & 0x1F));

199 
tmp
 +
EXTI_InôSåu˘
->
EXTI_Mode
 + (((EXTI_InôSåu˘->
EXTI_Löe
) >> 5 ) * 0x20);

202 *(
__IO
 
uöt32_t
 *Ë
tmp
 &~(uöt32_t)(1 << (
EXTI_InôSåu˘
->
EXTI_Löe
 & 0x1F));

205 
	}
}

213 
	$EXTI_Såu˘Inô
(
EXTI_InôTy≥Def
* 
EXTI_InôSåu˘
)

215 
EXTI_InôSåu˘
->
EXTI_Löe
 = 
EXTI_LINENONE
;

216 
EXTI_InôSåu˘
->
EXTI_Mode
 = 
EXTI_Mode_I¡îru±
;

217 
EXTI_InôSåu˘
->
EXTI_Triggî
 = 
EXTI_Triggî_Risög_FÆlög
;

218 
EXTI_InôSåu˘
->
EXTI_LöeCmd
 = 
DISABLE
;

219 
	}
}

228 
	$EXTI_Gíî©eSWI¡îru±
(
uöt32_t
 
EXTI_Löe
)

231 
	`as£π_∑øm
(
	`IS_EXTI_LINE_EXT
(
EXTI_Löe
));

233 *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
SWIER
)Ë+ ((
EXTI_Löe
) >> 5 ) * 0x20) |= (uint32_t)(1 << (EXTI_Line & 0x1F));

235 
	}
}

262 
FœgSètus
 
	$EXTI_GëFœgSètus
(
uöt32_t
 
EXTI_Löe
)

264 
FœgSètus
 
bô°©us
 = 
RESET
;

267 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

269 i‡((*(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
PR
)Ë+ ((
EXTI_Löe
Ë>> 5 ) * 0x20)& (uöt32_t)(1 << (EXTI_Löê& 0x1F))Ë!(uöt32_t)
RESET
)

271 
bô°©us
 = 
SET
;

275 
bô°©us
 = 
RESET
;

277  
bô°©us
;

278 
	}
}

286 
	$EXTI_CÀ¨Fœg
(
uöt32_t
 
EXTI_Löe
)

289 
	`as£π_∑øm
(
	`IS_EXTI_LINE_EXT
(
EXTI_Löe
));

291 *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
PR
)Ë+ ((
EXTI_Löe
) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));

292 
	}
}

300 
ITSètus
 
	$EXTI_GëITSètus
(
uöt32_t
 
EXTI_Löe
)

302 
ITSètus
 
bô°©us
 = 
RESET
;

303 
uöt32_t
 
íabÀ°©us
 = 0;

306 
	`as£π_∑øm
(
	`IS_GET_EXTI_LINE
(
EXTI_Löe
));

308 
íabÀ°©us
 = *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
IMR
)Ë+ ((
EXTI_Löe
) >> 5 ) * 0x20) & (uint32_t)(1 << (EXTI_Line & 0x1F));

310 i‡–(((*(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
PR
)Ë+ (((
EXTI_Löe
Ë>> 5 ) * 0x20Ë)Ë& (uöt32_t)(1 << (EXTI_Löê& 0x1F))Ë!(uöt32_t)
RESET
Ë&& (
íabÀ°©us
 != (uint32_t)RESET))

312 
bô°©us
 = 
SET
;

316 
bô°©us
 = 
RESET
;

318  
bô°©us
;

320 
	}
}

328 
	$EXTI_CÀ¨ITPídögBô
(
uöt32_t
 
EXTI_Löe
)

331 
	`as£π_∑øm
(
	`IS_EXTI_LINE_EXT
(
EXTI_Löe
));

333 *(
__IO
 
uöt32_t
 *Ë(((uöt32_tË&(
EXTI
->
PR
)Ë+ ((
EXTI_Löe
) >> 5 ) * 0x20) = (1 << (EXTI_Line & 0x1F));

334 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_flash.c

76 
	~"°m32f30x_Êash.h
"

91 
	#RDPRT_MASK
 ((
uöt32_t
)0x00000002)

	)

92 
	#WRP01_MASK
 ((
uöt32_t
)0x0000FFFF)

	)

93 
	#WRP23_MASK
 ((
uöt32_t
)0xFFFF0000)

	)

131 
	$FLASH_SëL©ícy
(
uöt32_t
 
FLASH_L©ícy
)

133 
uöt32_t
 
tm¥eg
 = 0;

136 
	`as£π_∑øm
(
	`IS_FLASH_LATENCY
(
FLASH_L©ícy
));

139 
tm¥eg
 = 
FLASH
->
ACR
;

142 
tm¥eg
 &(
uöt32_t
Ë(~((uöt32_t)
FLASH_ACR_LATENCY
));

143 
tm¥eg
 |
FLASH_L©ícy
;

146 
FLASH
->
ACR
 = 
tm¥eg
;

147 
	}
}

157 
	$FLASH_HÆfCy˛eAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

160 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

162 if(
NewSèã
 !
DISABLE
)

164 
FLASH
->
ACR
 |
FLASH_ACR_HLFCYA
;

168 
FLASH
->
ACR
 &(
uöt32_t
)(~((uöt32_t)
FLASH_ACR_HLFCYA
));

170 
	}
}

178 
	$FLASH_Pª„tchBuf„rCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

181 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

183 if(
NewSèã
 !
DISABLE
)

185 
FLASH
->
ACR
 |
FLASH_ACR_PRFTBE
;

189 
FLASH
->
ACR
 &(
uöt32_t
)(~((uöt32_t)
FLASH_ACR_PRFTBE
));

191 
	}
}

228 
	$FLASH_U∆ock
()

230 if((
FLASH
->
CR
 & 
FLASH_CR_LOCK
Ë!
RESET
)

233 
FLASH
->
KEYR
 = 
FLASH_KEY1
;

234 
FLASH
->
KEYR
 = 
FLASH_KEY2
;

236 
	}
}

243 
	$FLASH_Lock
()

246 
FLASH
->
CR
 |
FLASH_CR_LOCK
;

247 
	}
}

261 
FLASH_Sètus
 
	$FLASH_Eø£Page
(
uöt32_t
 
Page_Addªss
)

263 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

266 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Page_Addªss
));

269 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

271 if(
°©us
 =
FLASH_COMPLETE
)

274 
FLASH
->
CR
 |
FLASH_CR_PER
;

275 
FLASH
->
AR
 = 
Page_Addªss
;

276 
FLASH
->
CR
 |
FLASH_CR_STRT
;

279 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

282 
FLASH
->
CR
 &~
FLASH_CR_PER
;

286  
°©us
;

287 
	}
}

299 
FLASH_Sètus
 
	$FLASH_Eø£AŒPages
()

301 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

304 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

306 if(
°©us
 =
FLASH_COMPLETE
)

309 
FLASH
->
CR
 |
FLASH_CR_MER
;

310 
FLASH
->
CR
 |
FLASH_CR_STRT
;

313 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

316 
FLASH
->
CR
 &~
FLASH_CR_MER
;

320  
°©us
;

321 
	}
}

334 
FLASH_Sètus
 
	$FLASH_ProgømW‹d
(
uöt32_t
 
Addªss
, uöt32_à
D©a
)

336 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

337 
__IO
 
uöt32_t
 
tmp
 = 0;

340 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

343 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

345 if(
°©us
 =
FLASH_COMPLETE
)

349 
FLASH
->
CR
 |
FLASH_CR_PG
;

351 *(
__IO
 
uöt16_t
*)
Addªss
 = (uöt16_t)
D©a
;

354 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

356 if(
°©us
 =
FLASH_COMPLETE
)

360 
tmp
 = 
Addªss
 + 2;

362 *(
__IO
 
uöt16_t
*Ë
tmp
 = 
D©a
 >> 16;

365 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

368 
FLASH
->
CR
 &~
FLASH_CR_PG
;

373 
FLASH
->
CR
 &~
FLASH_CR_PG
;

378  
°©us
;

379 
	}
}

392 
FLASH_Sètus
 
	$FLASH_ProgømHÆfW‹d
(
uöt32_t
 
Addªss
, 
uöt16_t
 
D©a
)

394 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

397 
	`as£π_∑øm
(
	`IS_FLASH_PROGRAM_ADDRESS
(
Addªss
));

400 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

402 if(
°©us
 =
FLASH_COMPLETE
)

405 
FLASH
->
CR
 |
FLASH_CR_PG
;

407 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

410 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

413 
FLASH
->
CR
 &~
FLASH_CR_PG
;

417  
°©us
;

418 
	}
}

483 
	$FLASH_OB_U∆ock
()

485 if((
FLASH
->
CR
 & 
FLASH_CR_OPTWRE
Ë=
RESET
)

488 
FLASH
->
OPTKEYR
 = 
FLASH_OPTKEY1
;

489 
FLASH
->
OPTKEYR
 = 
FLASH_OPTKEY2
;

491 
	}
}

498 
	$FLASH_OB_Lock
()

501 
FLASH
->
CR
 &~
FLASH_CR_OPTWRE
;

502 
	}
}

509 
	$FLASH_OB_Launch
()

512 
FLASH
->
CR
 |
FLASH_CR_OBL_LAUNCH
;

513 
	}
}

522 
FLASH_Sètus
 
	$FLASH_OB_Eø£
()

524 
uöt16_t
 
rd±mp
 = 
OB_RDP_Levñ_0
;

526 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

529 if(
	`FLASH_OB_GëRDP
(Ë!
RESET
)

531 
rd±mp
 = 0x00;

535 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

537 if(
°©us
 =
FLASH_COMPLETE
)

540 
FLASH
->
CR
 |
FLASH_CR_OPTER
;

541 
FLASH
->
CR
 |
FLASH_CR_STRT
;

544 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

546 if(
°©us
 =
FLASH_COMPLETE
)

549 
FLASH
->
CR
 &~
FLASH_CR_OPTER
;

552 
FLASH
->
CR
 |
FLASH_CR_OPTPG
;

555 
OB
->
RDP
 = (
uöt16_t
)
rd±mp
;

558 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

560 if(
°©us
 !
FLASH_TIMEOUT
)

563 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

568 i‡(
°©us
 !
FLASH_TIMEOUT
)

571 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

576  
°©us
;

577 
	}
}

592 
FLASH_Sètus
 
	$FLASH_OB_E«bÀWRP
(
uöt32_t
 
OB_WRP
)

594 
uöt16_t
 
WRP0_D©a
 = 0xFFFF, 
WRP1_D©a
 = 0xFFFF;

596 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

599 
	`as£π_∑øm
(
	`IS_OB_WRP
(
OB_WRP
));

601 
OB_WRP
 = (
uöt32_t
)(~OB_WRP);

602 
WRP0_D©a
 = (
uöt16_t
)(
OB_WRP
 & 
OB_WRP0_WRP0
);

603 
WRP1_D©a
 = (
uöt16_t
)((
OB_WRP
 & 
OB_WRP0_nWRP0
) >> 8);

606 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

608 if(
°©us
 =
FLASH_COMPLETE
)

610 
FLASH
->
CR
 |
FLASH_CR_OPTPG
;

612 if(
WRP0_D©a
 != 0xFF)

614 
OB
->
WRP0
 = 
WRP0_D©a
;

617 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

619 if((
°©us
 =
FLASH_COMPLETE
Ë&& (
WRP1_D©a
 != 0xFF))

621 
OB
->
WRP1
 = 
WRP1_D©a
;

624 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

627 if(
°©us
 !
FLASH_TIMEOUT
)

630 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

634  
°©us
;

635 
	}
}

651 
FLASH_Sètus
 
	$FLASH_OB_RDPC⁄fig
(
uöt8_t
 
OB_RDP
)

653 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

656 
	`as£π_∑øm
(
	`IS_OB_RDP
(
OB_RDP
));

657 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

659 if(
°©us
 =
FLASH_COMPLETE
)

661 
FLASH
->
CR
 |
FLASH_CR_OPTER
;

662 
FLASH
->
CR
 |
FLASH_CR_STRT
;

665 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

667 if(
°©us
 =
FLASH_COMPLETE
)

670 
FLASH
->
CR
 &~
FLASH_CR_OPTER
;

673 
FLASH
->
CR
 |
FLASH_CR_OPTPG
;

675 
OB
->
RDP
 = 
OB_RDP
;

678 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

680 if(
°©us
 !
FLASH_TIMEOUT
)

683 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

688 if(
°©us
 !
FLASH_TIMEOUT
)

691 
FLASH
->
CR
 &~
FLASH_CR_OPTER
;

696  
°©us
;

697 
	}
}

716 
FLASH_Sètus
 
	$FLASH_OB_U£rC⁄fig
(
uöt8_t
 
OB_IWDG
, uöt8_à
OB_STOP
, uöt8_à
OB_STDBY
)

718 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

721 
	`as£π_∑øm
(
	`IS_OB_IWDG_SOURCE
(
OB_IWDG
));

722 
	`as£π_∑øm
(
	`IS_OB_STOP_SOURCE
(
OB_STOP
));

723 
	`as£π_∑øm
(
	`IS_OB_STDBY_SOURCE
(
OB_STDBY
));

726 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

727 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

730 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

732 if(
°©us
 =
FLASH_COMPLETE
)

735 
FLASH
->
CR
 |
FLASH_CR_OPTPG
;

737 
OB
->
USER
 = (
uöt8_t
)((uöt8_t)(
OB_IWDG
 | 
OB_STOP
Ë| (uöt8_t)(
OB_STDBY
 |0xF8));

740 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

742 if(
°©us
 !
FLASH_TIMEOUT
)

745 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

749  
°©us
;

750 
	}
}

760 
FLASH_Sètus
 
	$FLASH_OB_BOOTC⁄fig
(
uöt8_t
 
OB_BOOT1
)

762 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

765 
	`as£π_∑øm
(
	`IS_OB_BOOT1
(
OB_BOOT1
));

768 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

769 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

772 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

774 if(
°©us
 =
FLASH_COMPLETE
)

777 
FLASH
->
CR
 |
FLASH_CR_OPTPG
;

779 
OB
->
USER
 = 
OB_BOOT1
|0xEF;

782 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

784 if(
°©us
 !
FLASH_TIMEOUT
)

787 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

791  
°©us
;

792 
	}
}

802 
FLASH_Sètus
 
	$FLASH_OB_VDDAC⁄fig
(
uöt8_t
 
OB_VDDA_ANALOG
)

804 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

807 
	`as£π_∑øm
(
	`IS_OB_VDDA_ANALOG
(
OB_VDDA_ANALOG
));

810 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

811 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

814 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

816 if(
°©us
 =
FLASH_COMPLETE
)

819 
FLASH
->
CR
 |
FLASH_CR_OPTPG
;

821 
OB
->
USER
 = 
OB_VDDA_ANALOG
 |0xDF;

824 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

826 if(
°©us
 !
FLASH_TIMEOUT
)

829 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

833  
°©us
;

834 
	}
}

844 
FLASH_Sètus
 
	$FLASH_OB_SRAMP¨ôyC⁄fig
(
uöt8_t
 
OB_SRAM_P¨ôy
)

846 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

849 
	`as£π_∑øm
(
	`IS_OB_SRAM_PARITY
(
OB_SRAM_P¨ôy
));

852 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

854 if(
°©us
 =
FLASH_COMPLETE
)

857 
FLASH
->
CR
 |
FLASH_CR_OPTPG
;

859 
OB
->
USER
 = 
OB_SRAM_P¨ôy
 | 0xBF;

862 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

864 if(
°©us
 !
FLASH_TIMEOUT
)

867 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

871  
°©us
;

872 
	}
}

890 
FLASH_Sètus
 
	$FLASH_OB_WrôeU£r
(
uöt8_t
 
OB_USER
)

892 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

895 
FLASH
->
OPTKEYR
 = 
FLASH_KEY1
;

896 
FLASH
->
OPTKEYR
 = 
FLASH_KEY2
;

899 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

901 if(
°©us
 =
FLASH_COMPLETE
)

904 
FLASH
->
CR
 |
FLASH_CR_OPTPG
;

906 
OB
->
USER
 = 
OB_USER
 | 0x88;

909 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

911 if(
°©us
 !
FLASH_TIMEOUT
)

914 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

918  
°©us
;

920 
	}
}

934 
FLASH_Sètus
 
	$FLASH_ProgømO±i⁄ByãD©a
(
uöt32_t
 
Addªss
, 
uöt8_t
 
D©a
)

936 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

938 
	`as£π_∑øm
(
	`IS_OB_DATA_ADDRESS
(
Addªss
));

939 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

941 if(
°©us
 =
FLASH_COMPLETE
)

944 
FLASH
->
CR
 |
FLASH_CR_OPTPG
;

945 *(
__IO
 
uöt16_t
*)
Addªss
 = 
D©a
;

948 
°©us
 = 
	`FLASH_WaôF‹La°O≥øti⁄
(
FLASH_ER_PRG_TIMEOUT
);

950 if(
°©us
 !
FLASH_TIMEOUT
)

953 
FLASH
->
CR
 &~
FLASH_CR_OPTPG
;

957  
°©us
;

958 
	}
}

965 
uöt8_t
 
	$FLASH_OB_GëU£r
()

968  (
uöt8_t
)(
FLASH
->
OBR
 >> 8);

969 
	}
}

976 
uöt32_t
 
	$FLASH_OB_GëWRP
()

979  (
uöt32_t
)(
FLASH
->
WRPR
);

980 
	}
}

987 
FœgSètus
 
	$FLASH_OB_GëRDP
()

989 
FœgSètus
 
ªad°©us
 = 
RESET
;

991 i‡((
uöt8_t
)(
FLASH
->
OBR
 & (
FLASH_OBR_RDPRT1
 | 
FLASH_OBR_RDPRT2
)Ë!
RESET
)

993 
ªad°©us
 = 
SET
;

997 
ªad°©us
 = 
RESET
;

999  
ªad°©us
;

1000 
	}
}

1027 
	$FLASH_ITC⁄fig
(
uöt32_t
 
FLASH_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1030 
	`as£π_∑øm
(
	`IS_FLASH_IT
(
FLASH_IT
));

1031 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1033 if(
NewSèã
 !
DISABLE
)

1036 
FLASH
->
CR
 |
FLASH_IT
;

1041 
FLASH
->
CR
 &~(
uöt32_t
)
FLASH_IT
;

1043 
	}
}

1055 
FœgSètus
 
	$FLASH_GëFœgSètus
(
uöt32_t
 
FLASH_FLAG
)

1057 
FœgSètus
 
bô°©us
 = 
RESET
;

1060 
	`as£π_∑øm
(
	`IS_FLASH_GET_FLAG
(
FLASH_FLAG
));

1062 if((
FLASH
->
SR
 & 
FLASH_FLAG
Ë!(
uöt32_t
)
RESET
)

1064 
bô°©us
 = 
SET
;

1068 
bô°©us
 = 
RESET
;

1071  
bô°©us
;

1072 
	}
}

1083 
	$FLASH_CÀ¨Fœg
(
uöt32_t
 
FLASH_FLAG
)

1086 
	`as£π_∑øm
(
	`IS_FLASH_CLEAR_FLAG
(
FLASH_FLAG
));

1089 
FLASH
->
SR
 = 
FLASH_FLAG
;

1090 
	}
}

1098 
FLASH_Sètus
 
	$FLASH_GëSètus
()

1100 
FLASH_Sètus
 
FLASH°©us
 = 
FLASH_COMPLETE
;

1102 if((
FLASH
->
SR
 & 
FLASH_FLAG_BSY
) == FLASH_FLAG_BSY)

1104 
FLASH°©us
 = 
FLASH_BUSY
;

1108 if((
FLASH
->
SR
 & (
uöt32_t
)
FLASH_FLAG_WRPERR
)!= (uint32_t)0x00)

1110 
FLASH°©us
 = 
FLASH_ERROR_WRP
;

1114 if((
FLASH
->
SR
 & (
uöt32_t
)(
FLASH_SR_PGERR
)) != (uint32_t)0x00)

1116 
FLASH°©us
 = 
FLASH_ERROR_PROGRAM
;

1120 
FLASH°©us
 = 
FLASH_COMPLETE
;

1125  
FLASH°©us
;

1126 
	}
}

1134 
FLASH_Sètus
 
	$FLASH_WaôF‹La°O≥øti⁄
(
uöt32_t
 
Timeout
)

1136 
FLASH_Sètus
 
°©us
 = 
FLASH_COMPLETE
;

1139 
°©us
 = 
	`FLASH_GëSètus
();

1142 (
°©us
 =
FLASH_BUSY
Ë&& (
Timeout
 != 0x00))

1144 
°©us
 = 
	`FLASH_GëSètus
();

1145 
Timeout
--;

1148 if(
Timeout
 == 0x00 )

1150 
°©us
 = 
FLASH_TIMEOUT
;

1153  
°©us
;

1154 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_gpio.c

77 
	~"°m32f30x_gpio.h
"

78 
	~"°m32f30x_rcc.h
"

121 
	$GPIO_DeInô
(
GPIO_Ty≥Def
* 
GPIOx
)

124 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

126 if(
GPIOx
 =
GPIOA
)

128 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOA
, 
ENABLE
);

129 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOA
, 
DISABLE
);

131 if(
GPIOx
 =
GPIOB
)

133 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOB
, 
ENABLE
);

134 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOB
, 
DISABLE
);

136 if(
GPIOx
 =
GPIOC
)

138 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOC
, 
ENABLE
);

139 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOC
, 
DISABLE
);

141 if(
GPIOx
 =
GPIOD
)

143 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOD
, 
ENABLE
);

144 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOD
, 
DISABLE
);

146 if(
GPIOx
 =
GPIOE
)

148 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOE
, 
ENABLE
);

149 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOE
, 
DISABLE
);

153 if(
GPIOx
 =
GPIOF
)

155 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOF
, 
ENABLE
);

156 
	`RCC_AHBPîùhRe£tCmd
(
RCC_AHBPîùh_GPIOF
, 
DISABLE
);

159 
	}
}

174 
	$GPIO_Inô
(
GPIO_Ty≥Def
* 
GPIOx
, 
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

176 
uöt32_t
 
pöpos
 = 0x00, 
pos
 = 0x00 , 
cuºíçö
 = 0x00;

179 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

180 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_InôSåu˘
->
GPIO_Pö
));

181 
	`as£π_∑øm
(
	`IS_GPIO_MODE
(
GPIO_InôSåu˘
->
GPIO_Mode
));

182 
	`as£π_∑øm
(
	`IS_GPIO_PUPD
(
GPIO_InôSåu˘
->
GPIO_PuPd
));

186 
pöpos
 = 0x00;Öinpos < 0x10;Öinpos++)

188 
pos
 = ((
uöt32_t
)0x01Ë<< 
pöpos
;

191 
cuºíçö
 = (
GPIO_InôSåu˘
->
GPIO_Pö
Ë& 
pos
;

193 i‡(
cuºíçö
 =
pos
)

195 i‡((
GPIO_InôSåu˘
->
GPIO_Mode
 =
GPIO_Mode_OUT
Ë|| (GPIO_InôSåu˘->GPIO_Modê=
GPIO_Mode_AF
))

198 
	`as£π_∑øm
(
	`IS_GPIO_SPEED
(
GPIO_InôSåu˘
->
GPIO_S≥ed
));

201 
GPIOx
->
OSPEEDR
 &~(
GPIO_OSPEEDER_OSPEEDR0
 << (
pöpos
 * 2));

202 
GPIOx
->
OSPEEDR
 |((
uöt32_t
)(
GPIO_InôSåu˘
->
GPIO_S≥ed
Ë<< (
pöpos
 * 2));

205 
	`as£π_∑øm
(
	`IS_GPIO_OTYPE
(
GPIO_InôSåu˘
->
GPIO_OTy≥
));

208 
GPIOx
->
OTYPER
 &~((
GPIO_OTYPER_OT_0
Ë<< ((
uöt16_t
)
pöpos
));

209 
GPIOx
->
OTYPER
 |(
uöt16_t
)(((uöt16_t)
GPIO_InôSåu˘
->
GPIO_OTy≥
Ë<< ((uöt16_t)
pöpos
));

212 
GPIOx
->
MODER
 &~(
GPIO_MODER_MODER0
 << (
pöpos
 * 2));

214 
GPIOx
->
MODER
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_Mode
Ë<< (
pöpos
 * 2));

217 
GPIOx
->
PUPDR
 &~(
GPIO_PUPDR_PUPDR0
 << ((
uöt16_t
)
pöpos
 * 2));

218 
GPIOx
->
PUPDR
 |(((
uöt32_t
)
GPIO_InôSåu˘
->
GPIO_PuPd
Ë<< (
pöpos
 * 2));

221 
	}
}

229 
	$GPIO_Såu˘Inô
(
GPIO_InôTy≥Def
* 
GPIO_InôSåu˘
)

232 
GPIO_InôSåu˘
->
GPIO_Pö
 = 
GPIO_Pö_AŒ
;

233 
GPIO_InôSåu˘
->
GPIO_Mode
 = 
GPIO_Mode_IN
;

234 
GPIO_InôSåu˘
->
GPIO_S≥ed
 = 
GPIO_S≥ed_2MHz
;

235 
GPIO_InôSåu˘
->
GPIO_OTy≥
 = 
GPIO_OTy≥_PP
;

236 
GPIO_InôSåu˘
->
GPIO_PuPd
 = 
GPIO_PuPd_NOPULL
;

237 
	}
}

250 
	$GPIO_PöLockC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

252 
uöt32_t
 
tmp
 = 0x00010000;

255 
	`as£π_∑øm
(
	`IS_GPIO_LIST_PERIPH
(
GPIOx
));

256 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

258 
tmp
 |
GPIO_Pö
;

260 
GPIOx
->
LCKR
 = 
tmp
;

262 
GPIOx
->
LCKR
 = 
GPIO_Pö
;

264 
GPIOx
->
LCKR
 = 
tmp
;

266 
tmp
 = 
GPIOx
->
LCKR
;

268 
tmp
 = 
GPIOx
->
LCKR
;

269 
	}
}

296 
uöt8_t
 
	$GPIO_RódI≈utD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

298 
uöt8_t
 
bô°©us
 = 0x00;

301 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

302 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

304 i‡((
GPIOx
->
IDR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

306 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

310 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

312  
bô°©us
;

313 
	}
}

320 
uöt16_t
 
	$GPIO_RódI≈utD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

323 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

325  ((
uöt16_t
)
GPIOx
->
IDR
);

326 
	}
}

337 
uöt8_t
 
	$GPIO_RódOuçutD©aBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

339 
uöt8_t
 
bô°©us
 = 0x00;

342 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

343 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

345 i‡((
GPIOx
->
ODR
 & 
GPIO_Pö
Ë!(
uöt32_t
)
Bô_RESET
)

347 
bô°©us
 = (
uöt8_t
)
Bô_SET
;

351 
bô°©us
 = (
uöt8_t
)
Bô_RESET
;

353  
bô°©us
;

354 
	}
}

361 
uöt16_t
 
	$GPIO_RódOuçutD©a
(
GPIO_Ty≥Def
* 
GPIOx
)

364 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

366  ((
uöt16_t
)
GPIOx
->
ODR
);

367 
	}
}

378 
	$GPIO_SëBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

381 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

382 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

384 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

385 
	}
}

396 
	$GPIO_Re£tBôs
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
)

399 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

400 
	`as£π_∑øm
(
	`IS_GPIO_PIN
(
GPIO_Pö
));

402 
GPIOx
->
BRR
 = 
GPIO_Pö
;

403 
	}
}

418 
	$GPIO_WrôeBô
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_Pö
, 
BôA˘i⁄
 
BôVÆ
)

421 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

422 
	`as£π_∑øm
(
	`IS_GET_GPIO_PIN
(
GPIO_Pö
));

423 
	`as£π_∑øm
(
	`IS_GPIO_BIT_ACTION
(
BôVÆ
));

425 i‡(
BôVÆ
 !
Bô_RESET
)

427 
GPIOx
->
BSRR
 = 
GPIO_Pö
;

431 
GPIOx
->
BRR
 = 
GPIO_Pö
 ;

433 
	}
}

442 
	$GPIO_Wrôe
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
P‹tVÆ
)

445 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

447 
GPIOx
->
ODR
 = 
P‹tVÆ
;

448 
	}
}

498 
	$GPIO_PöAFC⁄fig
(
GPIO_Ty≥Def
* 
GPIOx
, 
uöt16_t
 
GPIO_PöSour˚
, 
uöt8_t
 
GPIO_AF
)

500 
uöt32_t
 
ãmp
 = 0x00;

501 
uöt32_t
 
ãmp_2
 = 0x00;

504 
	`as£π_∑øm
(
	`IS_GPIO_ALL_PERIPH
(
GPIOx
));

505 
	`as£π_∑øm
(
	`IS_GPIO_PIN_SOURCE
(
GPIO_PöSour˚
));

506 
	`as£π_∑øm
(
	`IS_GPIO_AF
(
GPIO_AF
));

508 
ãmp
 = ((
uöt32_t
)(
GPIO_AF
Ë<< ((uöt32_t)((uöt32_t)
GPIO_PöSour˚
 & (uint32_t)0x07) * 4));

509 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] &~((
uöt32_t
)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));

510 
ãmp_2
 = 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] | 
ãmp
;

511 
GPIOx
->
AFR
[
GPIO_PöSour˚
 >> 0x03] = 
ãmp_2
;

512 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_i2c.c

79 
	~"°m32f30x_i2c.h
"

80 
	~"°m32f30x_rcc.h
"

94 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)0x00CFE0FFË

	)

95 
	#CR2_CLEAR_MASK
 ((
uöt32_t
)0x07FF7FFFË

	)

96 
	#TIMING_CLEAR_MASK
 ((
uöt32_t
)0xF0FFFFFFË

	)

97 
	#ERROR_IT_MASK
 ((
uöt32_t
)0x00003F00Ë

	)

98 
	#TC_IT_MASK
 ((
uöt32_t
)0x000000C0Ë

	)

145 
	$I2C_DeInô
(
I2C_Ty≥Def
* 
I2Cx
)

148 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

150 i‡(
I2Cx
 =
I2C1
)

153 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
ENABLE
);

155 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C1
, 
DISABLE
);

160 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
ENABLE
);

162 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_I2C2
, 
DISABLE
);

164 
	}
}

174 
	$I2C_Inô
(
I2C_Ty≥Def
* 
I2Cx
, 
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

176 
uöt32_t
 
tm¥eg
 = 0;

179 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

180 
	`as£π_∑øm
(
	`IS_I2C_ANALOG_FILTER
(
I2C_InôSåu˘
->
I2C_A«logFûãr
));

181 
	`as£π_∑øm
(
	`IS_I2C_DIGITAL_FILTER
(
I2C_InôSåu˘
->
I2C_DigôÆFûãr
));

182 
	`as£π_∑øm
(
	`IS_I2C_MODE
(
I2C_InôSåu˘
->
I2C_Mode
));

183 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS1
(
I2C_InôSåu˘
->
I2C_OwnAddªss1
));

184 
	`as£π_∑øm
(
	`IS_I2C_ACK
(
I2C_InôSåu˘
->
I2C_Ack
));

185 
	`as£π_∑øm
(
	`IS_I2C_ACKNOWLEDGE_ADDRESS
(
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
));

188 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR1_PE
);

192 
tm¥eg
 = 
I2Cx
->
CR1
;

194 
tm¥eg
 &
CR1_CLEAR_MASK
;

198 
tm¥eg
 |(
uöt32_t
)
I2C_InôSåu˘
->
I2C_A«logFûãr
 |(I2C_InôSåu˘->
I2C_DigôÆFûãr
 << 8);

201 
I2Cx
->
CR1
 = 
tm¥eg
;

207 
I2Cx
->
TIMINGR
 = 
I2C_InôSåu˘
->
I2C_Timög
 & 
TIMING_CLEAR_MASK
;

210 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

214 
tm¥eg
 = 0;

216 
I2Cx
->
OAR1
 = (
uöt32_t
)
tm¥eg
;

218 
I2Cx
->
OAR2
 = (
uöt32_t
)
tm¥eg
;

222 
tm¥eg
 = (
uöt32_t
)((uöt32_t)
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 | \

223 (
uöt32_t
)
I2C_InôSåu˘
->
I2C_OwnAddªss1
);

225 
I2Cx
->
OAR1
 = 
tm¥eg
;

227 
I2Cx
->
OAR1
 |
I2C_OAR1_OA1EN
;

232 
tm¥eg
 = 
I2C_InôSåu˘
->
I2C_Mode
;

234 
I2Cx
->
CR1
 |
tm¥eg
;

238 
tm¥eg
 = 
I2Cx
->
CR2
;

240 
tm¥eg
 &
CR2_CLEAR_MASK
;

243 
tm¥eg
 |
I2C_InôSåu˘
->
I2C_Ack
;

245 
I2Cx
->
CR2
 = 
tm¥eg
;

246 
	}
}

253 
	$I2C_Såu˘Inô
(
I2C_InôTy≥Def
* 
I2C_InôSåu˘
)

257 
I2C_InôSåu˘
->
I2C_Timög
 = 0;

259 
I2C_InôSåu˘
->
I2C_A«logFûãr
 = 
I2C_A«logFûãr_E«bÀ
;

261 
I2C_InôSåu˘
->
I2C_DigôÆFûãr
 = 0;

263 
I2C_InôSåu˘
->
I2C_Mode
 = 
I2C_Mode_I2C
;

265 
I2C_InôSåu˘
->
I2C_OwnAddªss1
 = 0;

267 
I2C_InôSåu˘
->
I2C_Ack
 = 
I2C_Ack_DißbÀ
;

269 
I2C_InôSåu˘
->
I2C_AcknowÀdgedAddªss
 = 
I2C_AcknowÀdgedAddªss_7bô
;

270 
	}
}

279 
	$I2C_Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

282 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

283 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

284 i‡(
NewSèã
 !
DISABLE
)

287 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

292 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR1_PE
);

294 
	}
}

302 
	$I2C_So·w¨eRe£tCmd
(
I2C_Ty≥Def
* 
I2Cx
)

305 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

308 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR1_PE
);

312 *(
__IO
 
uöt32_t
 *)(uöt32_t)
I2Cx
;

315 
I2Cx
->
CR1
 |
I2C_CR1_PE
;

316 
	}
}

334 
	$I2C_ITC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

337 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

338 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

339 
	`as£π_∑øm
(
	`IS_I2C_CONFIG_IT
(
I2C_IT
));

341 i‡(
NewSèã
 !
DISABLE
)

344 
I2Cx
->
CR1
 |
I2C_IT
;

349 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_IT
);

351 
	}
}

360 
	$I2C_SåëchClockCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

363 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

364 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

366 i‡(
NewSèã
 !
DISABLE
)

369 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR1_NOSTRETCH
);

374 
I2Cx
->
CR1
 |
I2C_CR1_NOSTRETCH
;

376 
	}
}

385 
	$I2C_St›ModeCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

388 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

389 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

391 i‡(
NewSèã
 !
DISABLE
)

394 
I2Cx
->
CR1
 |
I2C_CR1_WUPEN
;

399 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR1_WUPEN
);

401 
	}
}

410 
	$I2C_DuÆAddªssCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

413 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

414 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

416 i‡(
NewSèã
 !
DISABLE
)

419 
I2Cx
->
OAR2
 |
I2C_OAR2_OA2EN
;

424 
I2Cx
->
OAR2
 &(
uöt32_t
)~((uöt32_t)
I2C_OAR2_OA2EN
);

426 
	}
}

444 
	$I2C_OwnAddªss2C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Addªss
, 
uöt8_t
 
Mask
)

446 
uöt32_t
 
tm¥eg
 = 0;

449 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

450 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS2
(
Addªss
));

451 
	`as£π_∑øm
(
	`IS_I2C_OWN_ADDRESS2_MASK
(
Mask
));

454 
tm¥eg
 = 
I2Cx
->
OAR2
;

457 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
I2C_OAR2_OA2
 | 
I2C_OAR2_OA2MSK
));

460 
tm¥eg
 |(
uöt32_t
)(((uöt32_t)
Addªss
 & 
I2C_OAR2_OA2
) | \

461 (((
uöt32_t
)
Mask
 << 8Ë& 
I2C_OAR2_OA2MSK
)) ;

464 
I2Cx
->
OAR2
 = 
tm¥eg
;

465 
	}
}

474 
	$I2C_GíîÆCÆlCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

477 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

478 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

480 i‡(
NewSèã
 !
DISABLE
)

483 
I2Cx
->
CR1
 |
I2C_CR1_GCEN
;

488 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR1_GCEN
);

490 
	}
}

499 
	$I2C_SœveByãC⁄åﬁCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

502 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

503 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

505 i‡(
NewSèã
 !
DISABLE
)

508 
I2Cx
->
CR1
 |
I2C_CR1_SBC
;

513 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR1_SBC
);

515 
	}
}

524 
	$I2C_SœveAddªssC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Addªss
)

526 
uöt32_t
 
tm¥eg
 = 0;

529 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

530 
	`as£π_∑øm
(
	`IS_I2C_SLAVE_ADDRESS
(
Addªss
));

533 
tm¥eg
 = 
I2Cx
->
CR2
;

536 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_SADD
);

539 
tm¥eg
 |(
uöt32_t
)((uöt32_t)
Addªss
 & 
I2C_CR2_SADD
);

542 
I2Cx
->
CR2
 = 
tm¥eg
;

543 
	}
}

553 
	$I2C_10BôAddªssögModeCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

556 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

557 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

559 i‡(
NewSèã
 !
DISABLE
)

562 
I2Cx
->
CR2
 |
I2C_CR2_ADD10
;

567 
I2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_ADD10
);

569 
	}
}

618 
	$I2C_AutoEndCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

621 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

622 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

624 i‡(
NewSèã
 !
DISABLE
)

627 
I2Cx
->
CR2
 |
I2C_CR2_AUTOEND
;

632 
I2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_AUTOEND
);

634 
	}
}

643 
	$I2C_RñﬂdCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

646 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

647 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

649 i‡(
NewSèã
 !
DISABLE
)

652 
I2Cx
->
CR2
 |
I2C_CR2_RELOAD
;

657 
I2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_RELOAD
);

659 
	}
}

667 
	$I2C_NumbîOfByãsC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
Numbî_Byãs
)

669 
uöt32_t
 
tm¥eg
 = 0;

672 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

675 
tm¥eg
 = 
I2Cx
->
CR2
;

678 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_NBYTES
);

681 
tm¥eg
 |(
uöt32_t
)(((uöt32_t)
Numbî_Byãs
 << 16 ) & 
I2C_CR2_NBYTES
);

684 
I2Cx
->
CR2
 = 
tm¥eg
;

685 
	}
}

696 
	$I2C_Ma°îReque°C⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
I2C_Dúe˘i⁄
)

699 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

700 
	`as£π_∑øm
(
	`IS_I2C_DIRECTION
(
I2C_Dúe˘i⁄
));

703 i‡(
I2C_Dúe˘i⁄
 =
I2C_Dúe˘i⁄_Tønsmôãr
)

706 
I2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_RD_WRN
);

711 
I2Cx
->
CR2
 |
I2C_CR2_RD_WRN
;

713 
	}
}

722 
	$I2C_Gíî©eSTART
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

725 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

726 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

728 i‡(
NewSèã
 !
DISABLE
)

731 
I2Cx
->
CR2
 |
I2C_CR2_START
;

736 
I2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_START
);

738 
	}
}

747 
	$I2C_Gíî©eSTOP
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

750 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

751 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

753 i‡(
NewSèã
 !
DISABLE
)

756 
I2Cx
->
CR2
 |
I2C_CR2_STOP
;

761 
I2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_STOP
);

763 
	}
}

774 
	$I2C_10BôAddªssHódîCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

777 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

778 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

780 i‡(
NewSèã
 !
DISABLE
)

783 
I2Cx
->
CR2
 |
I2C_CR2_HEAD10R
;

788 
I2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_HEAD10R
);

790 
	}
}

799 
	$I2C_AcknowÀdgeC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

802 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

803 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

805 i‡(
NewSèã
 !
DISABLE
)

808 
I2Cx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_NACK
);

813 
I2Cx
->
CR2
 |
I2C_CR2_NACK
;

815 
	}
}

822 
uöt8_t
 
	$I2C_GëAddªssM©ched
(
I2C_Ty≥Def
* 
I2Cx
)

825 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

828  (
uöt8_t
)(((
uöt32_t
)
I2Cx
->
ISR
 & 
I2C_ISR_ADDCODE
) >> 16) ;

829 
	}
}

836 
uöt16_t
 
	$I2C_GëTøns„rDúe˘i⁄
(
I2C_Ty≥Def
* 
I2Cx
)

838 
uöt32_t
 
tm¥eg
 = 0;

839 
uöt16_t
 
dúe˘i⁄
 = 0;

842 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

845 
tm¥eg
 = (
uöt32_t
)(
I2Cx
->
ISR
 & 
I2C_ISR_DIR
);

848 i‡(
tm¥eg
 == 0)

851 
dúe˘i⁄
 = 
I2C_Dúe˘i⁄_Tønsmôãr
;

856 
dúe˘i⁄
 = 
I2C_Dúe˘i⁄_Re˚ivî
;

858  
dúe˘i⁄
;

859 
	}
}

880 
	$I2C_Tøns„rH™dlög
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Addªss
, 
uöt8_t
 
Numbî_Byãs
, 
uöt32_t
 
RñﬂdEndMode
, uöt32_à
SèπSt›Mode
)

882 
uöt32_t
 
tm¥eg
 = 0;

885 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

886 
	`as£π_∑øm
(
	`IS_I2C_SLAVE_ADDRESS
(
Addªss
));

887 
	`as£π_∑øm
(
	`IS_RELOAD_END_MODE
(
RñﬂdEndMode
));

888 
	`as£π_∑øm
(
	`IS_START_STOP_MODE
(
SèπSt›Mode
));

891 
tm¥eg
 = 
I2Cx
->
CR2
;

894 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)(
I2C_CR2_SADD
 | 
I2C_CR2_NBYTES
 | 
I2C_CR2_RELOAD
 | 
I2C_CR2_AUTOEND
 | 
I2C_CR2_RD_WRN
 | 
I2C_CR2_START
 | 
I2C_CR2_STOP
));

897 
tm¥eg
 |(
uöt32_t
)(((uöt32_t)
Addªss
 & 
I2C_CR2_SADD
Ë| (((uöt32_t)
Numbî_Byãs
 << 16 ) & 
I2C_CR2_NBYTES
) | \

898 (
uöt32_t
)
RñﬂdEndMode
 | (uöt32_t)
SèπSt›Mode
);

901 
I2Cx
->
CR2
 = 
tm¥eg
;

902 
	}
}

951 
	$I2C_SMBusAÀπCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

954 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

955 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

957 i‡(
NewSèã
 !
DISABLE
)

960 
I2Cx
->
CR1
 |
I2C_CR1_ALERTEN
;

965 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR1_ALERTEN
);

967 
	}
}

976 
	$I2C_ClockTimeoutCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

979 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

980 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

982 i‡(
NewSèã
 !
DISABLE
)

985 
I2Cx
->
TIMEOUTR
 |
I2C_TIMEOUTR_TIMOUTEN
;

990 
I2Cx
->
TIMEOUTR
 &(
uöt32_t
)~((uöt32_t)
I2C_TIMEOUTR_TIMOUTEN
);

992 
	}
}

1001 
	$I2C_ExãndedClockTimeoutCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1004 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1005 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1007 i‡(
NewSèã
 !
DISABLE
)

1010 
I2Cx
->
TIMEOUTR
 |
I2C_TIMEOUTR_TEXTEN
;

1015 
I2Cx
->
TIMEOUTR
 &(
uöt32_t
)~((uöt32_t)
I2C_TIMEOUTR_TEXTEN
);

1017 
	}
}

1027 
	$I2C_IdÀClockTimeoutCmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1030 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1031 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1033 i‡(
NewSèã
 !
DISABLE
)

1036 
I2Cx
->
TIMEOUTR
 |
I2C_TIMEOUTR_TIDLE
;

1041 
I2Cx
->
TIMEOUTR
 &(
uöt32_t
)~((uöt32_t)
I2C_TIMEOUTR_TIDLE
);

1043 
	}
}

1052 
	$I2C_TimeoutAC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Timeout
)

1054 
uöt32_t
 
tm¥eg
 = 0;

1057 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1058 
	`as£π_∑øm
(
	`IS_I2C_TIMEOUT
(
Timeout
));

1061 
tm¥eg
 = 
I2Cx
->
TIMEOUTR
;

1064 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
I2C_TIMEOUTR_TIMEOUTA
);

1067 
tm¥eg
 |(
uöt32_t
)((uöt32_t)
Timeout
 & 
I2C_TIMEOUTR_TIMEOUTA
) ;

1070 
I2Cx
->
TIMEOUTR
 = 
tm¥eg
;

1071 
	}
}

1079 
	$I2C_TimeoutBC⁄fig
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt16_t
 
Timeout
)

1081 
uöt32_t
 
tm¥eg
 = 0;

1084 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1085 
	`as£π_∑øm
(
	`IS_I2C_TIMEOUT
(
Timeout
));

1088 
tm¥eg
 = 
I2Cx
->
TIMEOUTR
;

1091 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
I2C_TIMEOUTR_TIMEOUTB
);

1094 
tm¥eg
 |(
uöt32_t
)(((uöt32_t)
Timeout
 << 16Ë& 
I2C_TIMEOUTR_TIMEOUTB
) ;

1097 
I2Cx
->
TIMEOUTR
 = 
tm¥eg
;

1098 
	}
}

1107 
	$I2C_CÆcuœãPEC
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1110 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1111 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1113 i‡(
NewSèã
 !
DISABLE
)

1116 
I2Cx
->
CR1
 |
I2C_CR1_PECEN
;

1121 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR1_PECEN
);

1123 
	}
}

1132 
	$I2C_PECReque°Cmd
(
I2C_Ty≥Def
* 
I2Cx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1135 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1136 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1138 i‡(
NewSèã
 !
DISABLE
)

1141 
I2Cx
->
CR1
 |
I2C_CR2_PECBYTE
;

1146 
I2Cx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
I2C_CR2_PECBYTE
);

1148 
	}
}

1155 
uöt8_t
 
	$I2C_GëPEC
(
I2C_Ty≥Def
* 
I2Cx
)

1158 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1161  (
uöt8_t
)((
uöt32_t
)
I2Cx
->
PECR
 & 
I2C_PECR_PEC
);

1162 
	}
}

1201 
uöt32_t
 
	$I2C_RódRegi°î
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
I2C_Regi°î
)

1203 
__IO
 
uöt32_t
 
tmp
 = 0;

1206 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1207 
	`as£π_∑øm
(
	`IS_I2C_REGISTER
(
I2C_Regi°î
));

1209 
tmp
 = (
uöt32_t
)
I2Cx
;

1210 
tmp
 +
I2C_Regi°î
;

1213  (*(
__IO
 
uöt32_t
 *Ë
tmp
);

1214 
	}
}

1244 
	$I2C_SídD©a
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt8_t
 
D©a
)

1247 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1250 
I2Cx
->
TXDR
 = (
uöt8_t
)
D©a
;

1251 
	}
}

1258 
uöt8_t
 
	$I2C_Re˚iveD©a
(
I2C_Ty≥Def
* 
I2Cx
)

1261 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1264  (
uöt8_t
)
I2Cx
->
RXDR
;

1265 
	}
}

1301 
	$I2C_DMACmd
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1304 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1305 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1306 
	`as£π_∑øm
(
	`IS_I2C_DMA_REQ
(
I2C_DMAReq
));

1308 i‡(
NewSèã
 !
DISABLE
)

1311 
I2Cx
->
CR1
 |
I2C_DMAReq
;

1316 
I2Cx
->
CR1
 &(
uöt32_t
)~
I2C_DMAReq
;

1318 
	}
}

1421 
FœgSètus
 
	$I2C_GëFœgSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1423 
uöt32_t
 
tm¥eg
 = 0;

1424 
FœgSètus
 
bô°©us
 = 
RESET
;

1427 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1428 
	`as£π_∑øm
(
	`IS_I2C_GET_FLAG
(
I2C_FLAG
));

1431 
tm¥eg
 = 
I2Cx
->
ISR
;

1434 
tm¥eg
 &
I2C_FLAG
;

1436 if(
tm¥eg
 != 0)

1439 
bô°©us
 = 
SET
;

1444 
bô°©us
 = 
RESET
;

1446  
bô°©us
;

1447 
	}
}

1465 
	$I2C_CÀ¨Fœg
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_FLAG
)

1468 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1469 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_FLAG
(
I2C_FLAG
));

1472 
I2Cx
->
ICR
 = 
I2C_FLAG
;

1473 
	}
}

1495 
ITSètus
 
	$I2C_GëITSètus
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1497 
uöt32_t
 
tm¥eg
 = 0;

1498 
ITSètus
 
bô°©us
 = 
RESET
;

1499 
uöt32_t
 
íabÀ°©us
 = 0;

1502 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1503 
	`as£π_∑øm
(
	`IS_I2C_GET_IT
(
I2C_IT
));

1507 if((
uöt32_t
)(
I2C_IT
 & 
ERROR_IT_MASK
))

1509 
íabÀ°©us
 = (
uöt32_t
)((
I2C_CR1_ERRIE
Ë& (
I2Cx
->
CR1
));

1512 if((
uöt32_t
)(
I2C_IT
 & 
TC_IT_MASK
))

1514 
íabÀ°©us
 = (
uöt32_t
)((
I2C_CR1_TCIE
Ë& (
I2Cx
->
CR1
));

1518 
íabÀ°©us
 = (
uöt32_t
)((
I2C_IT
Ë& (
I2Cx
->
CR1
));

1522 
tm¥eg
 = 
I2Cx
->
ISR
;

1525 
tm¥eg
 &
I2C_IT
;

1528 if((
tm¥eg
 !
RESET
Ë&& 
íabÀ°©us
)

1531 
bô°©us
 = 
SET
;

1536 
bô°©us
 = 
RESET
;

1540  
bô°©us
;

1541 
	}
}

1559 
	$I2C_CÀ¨ITPídögBô
(
I2C_Ty≥Def
* 
I2Cx
, 
uöt32_t
 
I2C_IT
)

1562 
	`as£π_∑øm
(
	`IS_I2C_ALL_PERIPH
(
I2Cx
));

1563 
	`as£π_∑øm
(
	`IS_I2C_CLEAR_IT
(
I2C_IT
));

1566 
I2Cx
->
ICR
 = 
I2C_IT
;

1567 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_iwdg.c

93 
	~"°m32f30x_iwdg.h
"

108 
	#KR_KEY_RELOAD
 ((
uöt16_t
)0xAAAA)

	)

109 
	#KR_KEY_ENABLE
 ((
uöt16_t
)0xCCCC)

	)

140 
	$IWDG_WrôeAc˚ssCmd
(
uöt16_t
 
IWDG_WrôeAc˚ss
)

143 
	`as£π_∑øm
(
	`IS_IWDG_WRITE_ACCESS
(
IWDG_WrôeAc˚ss
));

144 
IWDG
->
KR
 = 
IWDG_WrôeAc˚ss
;

145 
	}
}

160 
	$IWDG_SëPªsˇÀr
(
uöt8_t
 
IWDG_PªsˇÀr
)

163 
	`as£π_∑øm
(
	`IS_IWDG_PRESCALER
(
IWDG_PªsˇÀr
));

164 
IWDG
->
PR
 = 
IWDG_PªsˇÀr
;

165 
	}
}

173 
	$IWDG_SëRñﬂd
(
uöt16_t
 
Rñﬂd
)

176 
	`as£π_∑øm
(
	`IS_IWDG_RELOAD
(
Rñﬂd
));

177 
IWDG
->
RLR
 = 
Rñﬂd
;

178 
	}
}

186 
	$IWDG_RñﬂdCou¡î
()

188 
IWDG
->
KR
 = 
KR_KEY_RELOAD
;

189 
	}
}

197 
	$IWDG_SëWödowVÆue
(
uöt16_t
 
WödowVÆue
)

200 
	`as£π_∑øm
(
	`IS_IWDG_WINDOW_VALUE
(
WödowVÆue
));

201 
IWDG
->
WINR
 = 
WödowVÆue
;

202 
	}
}

225 
	$IWDG_E«bÀ
()

227 
IWDG
->
KR
 = 
KR_KEY_ENABLE
;

228 
	}
}

255 
FœgSètus
 
	$IWDG_GëFœgSètus
(
uöt16_t
 
IWDG_FLAG
)

257 
FœgSètus
 
bô°©us
 = 
RESET
;

259 
	`as£π_∑øm
(
	`IS_IWDG_FLAG
(
IWDG_FLAG
));

260 i‡((
IWDG
->
SR
 & 
IWDG_FLAG
Ë!(
uöt32_t
)
RESET
)

262 
bô°©us
 = 
SET
;

266 
bô°©us
 = 
RESET
;

269  
bô°©us
;

270 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_misc.c

58 
	~"°m32f30x_misc.h
"

71 
	#AIRCR_VECTKEY_MASK
 ((
uöt32_t
)0x05FA0000)

	)

100 
	$NVIC_Pri‹ôyGroupC⁄fig
(
uöt32_t
 
NVIC_Pri‹ôyGroup
)

103 
	`as£π_∑øm
(
	`IS_NVIC_PRIORITY_GROUP
(
NVIC_Pri‹ôyGroup
));

106 
SCB
->
AIRCR
 = 
AIRCR_VECTKEY_MASK
 | 
NVIC_Pri‹ôyGroup
;

107 
	}
}

118 
	$NVIC_Inô
(
NVIC_InôTy≥Def
* 
NVIC_InôSåu˘
)

120 
uöt32_t
 
tmµri‹ôy
 = 0x00, 
tmµª
 = 0x00, 
tmpsub
 = 0x0F;

123 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
));

124 
	`as£π_∑øm
(
	`IS_NVIC_PREEMPTION_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
));

125 
	`as£π_∑øm
(
	`IS_NVIC_SUB_PRIORITY
(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
));

127 i‡(
NVIC_InôSåu˘
->
NVIC_IRQCh™√lCmd
 !
DISABLE
)

130 
tmµri‹ôy
 = (0x700 - ((
SCB
->
AIRCR
Ë& (
uöt32_t
)0x700))>> 0x08;

131 
tmµª
 = (0x4 - 
tmµri‹ôy
);

132 
tmpsub
 =Åmpsub >> 
tmµri‹ôy
;

134 
tmµri‹ôy
 = (
uöt32_t
)
NVIC_InôSåu˘
->
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
 << 
tmµª
;

135 
tmµri‹ôy
 |
NVIC_InôSåu˘
->
NVIC_IRQCh™√lSubPri‹ôy
 & 
tmpsub
;

136 
tmµri‹ôy
 =Åmppriority << 0x04;

138 
NVIC
->
IP
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
] = 
tmµri‹ôy
;

141 
NVIC
->
ISER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

142 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

147 
NVIC
->
ICER
[
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 >> 0x05] =

148 (
uöt32_t
)0x01 << (
NVIC_InôSåu˘
->
NVIC_IRQCh™√l
 & (
uöt8_t
)0x1F);

150 
	}
}

161 
	$NVIC_SëVe˘‹TabÀ
(
uöt32_t
 
NVIC_Ve˘Tab
, uöt32_à
Off£t
)

164 
	`as£π_∑øm
(
	`IS_NVIC_VECTTAB
(
NVIC_Ve˘Tab
));

165 
	`as£π_∑øm
(
	`IS_NVIC_OFFSET
(
Off£t
));

167 
SCB
->
VTOR
 = 
NVIC_Ve˘Tab
 | (
Off£t
 & (
uöt32_t
)0x1FFFFF80);

168 
	}
}

180 
	$NVIC_Sy°emLPC⁄fig
(
uöt8_t
 
LowPowîMode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

183 
	`as£π_∑øm
(
	`IS_NVIC_LP
(
LowPowîMode
));

184 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

186 i‡(
NewSèã
 !
DISABLE
)

188 
SCB
->
SCR
 |
LowPowîMode
;

192 
SCB
->
SCR
 &(
uöt32_t
)(~(uöt32_t)
LowPowîMode
);

194 
	}
}

204 
	$SysTick_CLKSour˚C⁄fig
(
uöt32_t
 
SysTick_CLKSour˚
)

207 
	`as£π_∑øm
(
	`IS_SYSTICK_CLK_SOURCE
(
SysTick_CLKSour˚
));

208 i‡(
SysTick_CLKSour˚
 =
SysTick_CLKSour˚_HCLK
)

210 
SysTick
->
CTRL
 |
SysTick_CLKSour˚_HCLK
;

214 
SysTick
->
CTRL
 &
SysTick_CLKSour˚_HCLK_Div8
;

216 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_opamp.c

96 
	~"°m32f30x_›amp.h
"

109 
	#OPAMP_CSR_DEFAULT_MASK
 ((
uöt32_t
)0xFFFFFF93)

	)

110 
	#OPAMP_CSR_TIMERMUX_MASK
 ((
uöt32_t
)0xFFFFF8FF)

	)

111 
	#OPAMP_CSR_TRIMMING_MASK
 ((
uöt32_t
)0x0000001F)

	)

144 
	$OPAMP_DeInô
(
uöt32_t
 
OPAMP_Sñe˘i⁄
)

147 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
) = ((uint32_t)0x00000000);

148 
	}
}

164 
	$OPAMP_Inô
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
OPAMP_InôTy≥Def
* 
OPAMP_InôSåu˘
)

166 
uöt32_t
 
tm¥eg
 = 0;

169 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

170 
	`as£π_∑øm
(
	`IS_OPAMP_INVERTING_INPUT
(
OPAMP_InôSåu˘
->
OPAMP_InvîtögI≈ut
));

171 
	`as£π_∑øm
(
	`IS_OPAMP_NONINVERTING_INPUT
(
OPAMP_InôSåu˘
->
OPAMP_N⁄InvîtögI≈ut
));

174 
tm¥eg
 = *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
);

177 
tm¥eg
 &(
uöt32_t
Ë(
OPAMP_CSR_DEFAULT_MASK
);

180 
tm¥eg
 |(
uöt32_t
)(
OPAMP_InôSåu˘
->
OPAMP_InvîtögI≈ut
 | OPAMP_InôSåu˘->
OPAMP_N⁄InvîtögI≈ut
);

183 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë
tm¥eg
;

184 
	}
}

192 
	$OPAMP_Såu˘Inô
(
OPAMP_InôTy≥Def
* 
OPAMP_InôSåu˘
)

194 
OPAMP_InôSåu˘
->
OPAMP_N⁄InvîtögI≈ut
 = 
OPAMP_N⁄InvîtögI≈ut_IO1
;

195 
OPAMP_InôSåu˘
->
OPAMP_InvîtögI≈ut
 = 
OPAMP_InvîtögI≈ut_IO1
;

196 
	}
}

209 
	$OPAMP_PGAC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_PGAGaö
, uöt32_à
OPAMP_PGAC⁄√˘
)

212 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

213 
	`as£π_∑øm
(
	`IS_OPAMP_PGAGAIN
(
OPAMP_PGAGaö
));

214 
	`as£π_∑øm
(
	`IS_OPAMP_PGACONNECT
(
OPAMP_PGAC⁄√˘
));

217 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë&(uöt32_t)(~
OPAMP_CSR_PGGAIN
);

220 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë|(uöt32_tË(
OPAMP_PGAGaö
 | 
OPAMP_PGAC⁄√˘
);

221 
	}
}

239 
	$OPAMP_VªfC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_Vªf
)

241 
uöt32_t
 
tm¥eg
 = 0;

244 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

245 
	`as£π_∑øm
(
	`IS_OPAMP_VREF
(
OPAMP_Vªf
));

248 
tm¥eg
 = *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
);

251 
tm¥eg
 &(
uöt32_t
Ë(~
OPAMP_CSR_CALSEL
);

254 
tm¥eg
 |(
uöt32_t
)(
OPAMP_Vªf
);

257 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë
tm¥eg
;

258 
	}
}

271 
	$OPAMP_VªfC⁄√˘N⁄InvîtögI≈ut
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

274 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

275 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

277 i‡(
NewSèã
 !
DISABLE
)

280 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë|(uöt32_tË(
OPAMP_CSR_FORCEVP
);

285 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë&(uöt32_t)(~
OPAMP_CSR_FORCEVP
);

287 
	}
}

297 
	$OPAMP_VªfC⁄√˘ADCCmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

300 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

301 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

303 i‡(
NewSèã
 !
DISABLE
)

306 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë|(uöt32_tË(
OPAMP_CSR_TSTREF
);

311 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë&(uöt32_t)(~
OPAMP_CSR_TSTREF
);

313 
	}
}

331 
	$OPAMP_TimîC⁄åﬁÀdMuxC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
OPAMP_InôTy≥Def
* 
OPAMP_InôSåu˘
)

333 
uöt32_t
 
tm¥eg
 = 0;

336 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

337 
	`as£π_∑øm
(
	`IS_OPAMP_SECONDARY_INVINPUT
(
OPAMP_InôSåu˘
->
OPAMP_InvîtögI≈ut
));

338 
	`as£π_∑øm
(
	`IS_OPAMP_NONINVERTING_INPUT
(
OPAMP_InôSåu˘
->
OPAMP_N⁄InvîtögI≈ut
));

341 
tm¥eg
 = *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
);

344 
tm¥eg
 &(
uöt32_t
Ë(
OPAMP_CSR_TIMERMUX_MASK
);

347 
tm¥eg
 |(
uöt32_t
)((uöt32_t)(
OPAMP_InôSåu˘
->
OPAMP_InvîtögI≈ut
<<3Ë| (uöt32_t)(OPAMP_InôSåu˘->
OPAMP_N⁄InvîtögI≈ut
<<7));

350 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë
tm¥eg
;

351 
	}
}

364 
	$OPAMP_TimîC⁄åﬁÀdMuxCmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

367 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

368 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

370 i‡(
NewSèã
 !
DISABLE
)

373 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë|(uöt32_tË(
OPAMP_CSR_TCMEN
);

378 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë&(uöt32_t)(~
OPAMP_CSR_TCMEN
);

380 
	}
}

393 
	$OPAMP_Cmd
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

396 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

397 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

399 i‡(
NewSèã
 !
DISABLE
)

402 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë|(uöt32_tË(
OPAMP_CSR_OPAMPxEN
);

407 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë&(uöt32_t)(~
OPAMP_CSR_OPAMPxEN
);

409 
	}
}

424 
uöt32_t
 
	$OPAMP_GëOuçutLevñ
(
uöt32_t
 
OPAMP_Sñe˘i⁄
)

426 
uöt32_t
 
›ampout
 = 0x0;

429 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

432 i‡((*(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë& (
OPAMP_CSR_OUTCAL
)) != 0)

434 
›ampout
 = 
OPAMP_OuçutLevñ_High
;

438 
›ampout
 = 
OPAMP_OuçutLevñ_Low
;

442  (
uöt32_t
)(
›ampout
);

443 
	}
}

458 
	$OPAMP_Off£tTrimModeSñe˘
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_Trimmög
)

461 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

462 
	`as£π_∑øm
(
	`IS_OPAMP_TRIMMING
(
OPAMP_Trimmög
));

465 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë&(~(uöt32_tË(
OPAMP_CSR_USERTRIM
));

468 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë|
OPAMP_Trimmög
;

469 
	}
}

484 
	$OPAMP_Off£tTrimC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, uöt32_à
OPAMP_I≈ut
, uöt32_à
OPAMP_TrimVÆue
)

486 
uöt32_t
 
tm¥eg
 = 0;

489 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

490 
	`as£π_∑øm
(
	`IS_OPAMP_INPUT
(
OPAMP_I≈ut
));

491 
	`as£π_∑øm
(
	`IS_OPAMP_TRIMMINGVALUE
(
OPAMP_TrimVÆue
));

494 
tm¥eg
 = *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
);

497 
tm¥eg
 &((
uöt32_t
)~(
OPAMP_CSR_TRIMMING_MASK
<<
OPAMP_I≈ut
));

500 
tm¥eg
 |(
uöt32_t
)(
OPAMP_TrimVÆue
<<
OPAMP_I≈ut
);

503 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë
tm¥eg
;

504 
	}
}

517 
	$OPAMP_SèπCÆibøti⁄
(
uöt32_t
 
OPAMP_Sñe˘i⁄
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

520 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

521 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

523 i‡(
NewSèã
 !
DISABLE
)

526 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë|(uöt32_tË(
OPAMP_CSR_CALON
);

531 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë&(uöt32_t)(~
OPAMP_CSR_CALON
);

533 
	}
}

562 
	$OPAMP_LockC⁄fig
(
uöt32_t
 
OPAMP_Sñe˘i⁄
)

565 
	`as£π_∑øm
(
	`IS_OPAMP_ALL_PERIPH
(
OPAMP_Sñe˘i⁄
));

568 *(
__IO
 
uöt32_t
 *Ë(
OPAMP_BASE
 + 
OPAMP_Sñe˘i⁄
Ë|(uöt32_tË(
OPAMP_CSR_LOCK
);

569 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_pwr.c

36 
	~"°m32f30x_pwr.h
"

37 
	~"°m32f30x_rcc.h
"

51 
	#PWR_OFFSET
 (
PWR_BASE
 - 
PERIPH_BASE
)

	)

56 
	#CR_OFFSET
 (
PWR_OFFSET
 + 0x00)

	)

57 
	#DBP_BôNumbî
 0x08

	)

58 
	#CR_DBP_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
DBP_BôNumbî
 * 4))

	)

61 
	#PVDE_BôNumbî
 0x04

	)

62 
	#CR_PVDE_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PVDE_BôNumbî
 * 4))

	)

67 
	#CR_DS_MASK
 ((
uöt32_t
)0xFFFFFFFC)

	)

68 
	#CR_PLS_MASK
 ((
uöt32_t
)0xFFFFFF1F)

	)

100 
	$PWR_DeInô
()

102 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

103 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_PWR
, 
DISABLE
);

104 
	}
}

114 
	$PWR_BackupAc˚ssCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

117 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

118 *(
__IO
 
uöt32_t
 *Ë
CR_DBP_BB
 = (uöt32_t)
NewSèã
;

119 
	}
}

158 
	$PWR_PVDLevñC⁄fig
(
uöt32_t
 
PWR_PVDLevñ
)

160 
uöt32_t
 
tm¥eg
 = 0;

163 
	`as£π_∑øm
(
	`IS_PWR_PVD_LEVEL
(
PWR_PVDLevñ
));

165 
tm¥eg
 = 
PWR
->
CR
;

168 
tm¥eg
 &
CR_PLS_MASK
;

171 
tm¥eg
 |
PWR_PVDLevñ
;

174 
PWR
->
CR
 = 
tm¥eg
;

175 
	}
}

183 
	$PWR_PVDCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

186 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

187 *(
__IO
 
uöt32_t
 *Ë
CR_PVDE_BB
 = (uöt32_t)
NewSèã
;

188 
	}
}

219 
	$PWR_WakeUpPöCmd
(
uöt32_t
 
PWR_WakeUpPö
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

222 
	`as£π_∑øm
(
	`IS_PWR_WAKEUP_PIN
(
PWR_WakeUpPö
));

223 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

225 i‡(
NewSèã
 !
DISABLE
)

228 
PWR
->
CSR
 |
PWR_WakeUpPö
;

233 
PWR
->
CSR
 &~
PWR_WakeUpPö
;

235 
	}
}

351 
	$PWR_E¡îSÀïMode
(
uöt8_t
 
PWR_SLEEPE¡ry
)

354 
	`as£π_∑øm
(
	`IS_PWR_SLEEP_ENTRY
(
PWR_SLEEPE¡ry
));

357 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

360 if(
PWR_SLEEPE¡ry
 =
PWR_SLEEPE¡ry_WFI
)

363 
	`__WFI
();

368 
	`__WFE
();

370 
	}
}

391 
	$PWR_E¡îSTOPMode
(
uöt32_t
 
PWR_Reguœt‹
, 
uöt8_t
 
PWR_STOPE¡ry
)

393 
uöt32_t
 
tm¥eg
 = 0;

396 
	`as£π_∑øm
(
	`IS_PWR_REGULATOR
(
PWR_Reguœt‹
));

397 
	`as£π_∑øm
(
	`IS_PWR_STOP_ENTRY
(
PWR_STOPE¡ry
));

400 
tm¥eg
 = 
PWR
->
CR
;

402 
tm¥eg
 &
CR_DS_MASK
;

405 
tm¥eg
 |
PWR_Reguœt‹
;

408 
PWR
->
CR
 = 
tm¥eg
;

411 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

414 if(
PWR_STOPE¡ry
 =
PWR_STOPE¡ry_WFI
)

417 
	`__WFI
();

422 
	`__WFE
();

425 
SCB
->
SCR
 &(
uöt32_t
)~((uöt32_t)
SCB_SCR_SLEEPDEEP_Msk
);

426 
	}
}

438 
	$PWR_E¡îSTANDBYMode
()

441 
PWR
->
CR
 |
PWR_CR_CWUF
;

444 
PWR
->
CR
 |
PWR_CR_PDDS
;

447 
SCB
->
SCR
 |
SCB_SCR_SLEEPDEEP_Msk
;

450 #i‡
	`deföed
 ( 
__CC_ARM
 )

451 
	`__f‹˚_°‹es
();

454 
	`__WFI
();

455 
	}
}

488 
FœgSètus
 
	$PWR_GëFœgSètus
(
uöt32_t
 
PWR_FLAG
)

490 
FœgSètus
 
bô°©us
 = 
RESET
;

492 
	`as£π_∑øm
(
	`IS_PWR_GET_FLAG
(
PWR_FLAG
));

494 i‡((
PWR
->
CSR
 & 
PWR_FLAG
Ë!(
uöt32_t
)
RESET
)

496 
bô°©us
 = 
SET
;

500 
bô°©us
 = 
RESET
;

503  
bô°©us
;

504 
	}
}

514 
	$PWR_CÀ¨Fœg
(
uöt32_t
 
PWR_FLAG
)

517 
	`as£π_∑øm
(
	`IS_PWR_CLEAR_FLAG
(
PWR_FLAG
));

519 
PWR
->
CR
 |
PWR_FLAG
 << 2;

520 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_rcc.c

58 
	~"°m32f30x_rcc.h
"

72 
	#RCC_OFFSET
 (
RCC_BASE
 - 
PERIPH_BASE
)

	)

77 
	#CR_OFFSET
 (
RCC_OFFSET
 + 0x00)

	)

78 
	#HSION_BôNumbî
 0x00

	)

79 
	#CR_HSION_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
HSION_BôNumbî
 * 4))

	)

82 
	#PLLON_BôNumbî
 0x18

	)

83 
	#CR_PLLON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
PLLON_BôNumbî
 * 4))

	)

86 
	#CSSON_BôNumbî
 0x13

	)

87 
	#CR_CSSON_BB
 (
PERIPH_BB_BASE
 + (
CR_OFFSET
 * 32Ë+ (
CSSON_BôNumbî
 * 4))

	)

91 
	#CFGR_OFFSET
 (
RCC_OFFSET
 + 0x04)

	)

92 
	#USBPRE_BôNumbî
 0x16

	)

93 
	#CFGR_USBPRE_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
USBPRE_BôNumbî
 * 4))

	)

95 
	#I2SSRC_BôNumbî
 0x17

	)

96 
	#CFGR_I2SSRC_BB
 (
PERIPH_BB_BASE
 + (
CFGR_OFFSET
 * 32Ë+ (
I2SSRC_BôNumbî
 * 4))

	)

101 
	#BDCR_OFFSET
 (
RCC_OFFSET
 + 0x20)

	)

102 
	#RTCEN_BôNumbî
 0x0F

	)

103 
	#BDCR_RTCEN_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
RTCEN_BôNumbî
 * 4))

	)

106 
	#BDRST_BôNumbî
 0x10

	)

107 
	#BDCR_BDRST_BB
 (
PERIPH_BB_BASE
 + (
BDCR_OFFSET
 * 32Ë+ (
BDRST_BôNumbî
 * 4))

	)

112 
	#CSR_OFFSET
 (
RCC_OFFSET
 + 0x24)

	)

113 
	#LSION_BôNumbî
 0x00

	)

114 
	#CSR_LSION_BB
 (
PERIPH_BB_BASE
 + (
CSR_OFFSET
 * 32Ë+ (
LSION_BôNumbî
 * 4))

	)

118 
	#FLAG_MASK
 ((
uöt8_t
)0x1F)

	)

121 
	#CFGR_BYTE3_ADDRESS
 ((
uöt32_t
)0x40021007)

	)

124 
	#CIR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021009)

	)

127 
	#CIR_BYTE3_ADDRESS
 ((
uöt32_t
)0x4002100A)

	)

130 
	#CR_BYTE2_ADDRESS
 ((
uöt32_t
)0x40021002)

	)

134 
__I
 
uöt8_t
 
	gAPBAHBPªscTabÀ
[16] = {0, 0, 0, 0, 1, 2, 3, 4, 1, 2, 3, 4, 6, 7, 8, 9};

135 
__I
 
uöt16_t
 
	gADCPªscTabÀ
[13] = {0, 1, 2, 4, 6, 8, 10, 12, 16, 32, 64, 128, 256};

189 
	$RCC_DeInô
()

192 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

195 
RCC
->
CFGR
 &(
uöt32_t
)0xF8FFC000;

198 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

201 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

204 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

207 
RCC
->
CFGR2
 &(
uöt32_t
)0xFFFFC000;

210 
RCC
->
CFGR3
 &(
uöt32_t
)0xF00FCCC;

213 
RCC
->
CIR
 = 0x00000000;

214 
	}
}

236 
	$RCC_HSEC⁄fig
(
uöt8_t
 
RCC_HSE
)

239 
	`as£π_∑øm
(
	`IS_RCC_HSE
(
RCC_HSE
));

242 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE2_ADDRESS
 = 
RCC_HSE_OFF
;

245 *(
__IO
 
uöt8_t
 *Ë
CR_BYTE2_ADDRESS
 = 
RCC_HSE
;

247 
	}
}

261 
Eº‹Sètus
 
	$RCC_WaôF‹HSESèπUp
()

263 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0;

264 
Eº‹Sètus
 
°©us
 = 
ERROR
;

265 
FœgSètus
 
HSESètus
 = 
RESET
;

270 
HSESètus
 = 
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
);

271 
SèπUpCou¡î
++;

272 } (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
Ë&& (
HSESètus
 =
RESET
));

274 i‡(
	`RCC_GëFœgSètus
(
RCC_FLAG_HSERDY
Ë!
RESET
)

276 
°©us
 = 
SUCCESS
;

280 
°©us
 = 
ERROR
;

282  (
°©us
);

283 
	}
}

295 
	$RCC_Adju°HSICÆibøti⁄VÆue
(
uöt8_t
 
HSICÆibøti⁄VÆue
)

297 
uöt32_t
 
tm¥eg
 = 0;

300 
	`as£π_∑øm
(
	`IS_RCC_HSI_CALIBRATION_VALUE
(
HSICÆibøti⁄VÆue
));

302 
tm¥eg
 = 
RCC
->
CR
;

305 
tm¥eg
 &~
RCC_CR_HSITRIM
;

308 
tm¥eg
 |(
uöt32_t
)
HSICÆibøti⁄VÆue
 << 3;

311 
RCC
->
CR
 = 
tm¥eg
;

312 
	}
}

329 
	$RCC_HSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

332 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

334 *(
__IO
 
uöt32_t
 *Ë
CR_HSION_BB
 = (uöt32_t)
NewSèã
;

335 
	}
}

354 
	$RCC_LSEC⁄fig
(
uöt32_t
 
RCC_LSE
)

357 
	`as£π_∑øm
(
	`IS_RCC_LSE
(
RCC_LSE
));

361 
RCC
->
BDCR
 &~(
RCC_BDCR_LSEON
);

364 
RCC
->
BDCR
 &~(
RCC_BDCR_LSEBYP
);

367 
RCC
->
BDCR
 |
RCC_LSE
;

368 
	}
}

380 
	$RCC_LSEDriveC⁄fig
(
uöt32_t
 
RCC_LSEDrive
)

383 
	`as£π_∑øm
(
	`IS_RCC_LSE_DRIVE
(
RCC_LSEDrive
));

386 
RCC
->
BDCR
 &~(
RCC_BDCR_LSEDRV
);

389 
RCC
->
BDCR
 |
RCC_LSEDrive
;

390 
	}
}

404 
	$RCC_LSICmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

407 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

409 *(
__IO
 
uöt32_t
 *Ë
CSR_LSION_BB
 = (uöt32_t)
NewSèã
;

410 
	}
}

427 
	$RCC_PLLC⁄fig
(
uöt32_t
 
RCC_PLLSour˚
, uöt32_à
RCC_PLLMul
)

430 
	`as£π_∑øm
(
	`IS_RCC_PLL_SOURCE
(
RCC_PLLSour˚
));

431 
	`as£π_∑øm
(
	`IS_RCC_PLL_MUL
(
RCC_PLLMul
));

434 
RCC
->
CFGR
 &~(
RCC_CFGR_PLLMULL
 | 
RCC_CFGR_PLLSRC
);

437 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_PLLSour˚
 | 
RCC_PLLMul
);

438 
	}
}

451 
	$RCC_PLLCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

454 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

456 *(
__IO
 
uöt32_t
 *Ë
CR_PLLON_BB
 = (uöt32_t)
NewSèã
;

457 
	}
}

466 
	$RCC_PREDIV1C⁄fig
(
uöt32_t
 
RCC_PREDIV1_Div
)

468 
uöt32_t
 
tm¥eg
 = 0;

471 
	`as£π_∑øm
(
	`IS_RCC_PREDIV1
(
RCC_PREDIV1_Div
));

473 
tm¥eg
 = 
RCC
->
CFGR2
;

475 
tm¥eg
 &~(
RCC_CFGR2_PREDIV1
);

478 
tm¥eg
 |
RCC_PREDIV1_Div
;

481 
RCC
->
CFGR2
 = 
tm¥eg
;

482 
	}
}

495 
	$RCC_ClockSecurôySy°emCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

498 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

500 *(
__IO
 
uöt32_t
 *Ë
CR_CSSON_BB
 = (uöt32_t)
NewSèã
;

501 
	}
}

518 
	$RCC_MCOC⁄fig
(
uöt8_t
 
RCC_MCOSour˚
)

521 
	`as£π_∑øm
(
	`IS_RCC_MCO_SOURCE
(
RCC_MCOSour˚
));

524 *(
__IO
 
uöt8_t
 *Ë
CFGR_BYTE3_ADDRESS
 = 
RCC_MCOSour˚
;

525 
	}
}

624 
	$RCC_SYSCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLKSour˚
)

626 
uöt32_t
 
tm¥eg
 = 0;

629 
	`as£π_∑øm
(
	`IS_RCC_SYSCLK_SOURCE
(
RCC_SYSCLKSour˚
));

631 
tm¥eg
 = 
RCC
->
CFGR
;

634 
tm¥eg
 &~
RCC_CFGR_SW
;

637 
tm¥eg
 |
RCC_SYSCLKSour˚
;

640 
RCC
->
CFGR
 = 
tm¥eg
;

641 
	}
}

652 
uöt8_t
 
	$RCC_GëSYSCLKSour˚
()

654  ((
uöt8_t
)(
RCC
->
CFGR
 & 
RCC_CFGR_SWS
));

655 
	}
}

677 
	$RCC_HCLKC⁄fig
(
uöt32_t
 
RCC_SYSCLK
)

679 
uöt32_t
 
tm¥eg
 = 0;

682 
	`as£π_∑øm
(
	`IS_RCC_HCLK
(
RCC_SYSCLK
));

684 
tm¥eg
 = 
RCC
->
CFGR
;

687 
tm¥eg
 &~
RCC_CFGR_HPRE
;

690 
tm¥eg
 |
RCC_SYSCLK
;

693 
RCC
->
CFGR
 = 
tm¥eg
;

694 
	}
}

708 
	$RCC_PCLK1C⁄fig
(
uöt32_t
 
RCC_HCLK
)

710 
uöt32_t
 
tm¥eg
 = 0;

713 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

715 
tm¥eg
 = 
RCC
->
CFGR
;

717 
tm¥eg
 &~
RCC_CFGR_PPRE1
;

720 
tm¥eg
 |
RCC_HCLK
;

723 
RCC
->
CFGR
 = 
tm¥eg
;

724 
	}
}

738 
	$RCC_PCLK2C⁄fig
(
uöt32_t
 
RCC_HCLK
)

740 
uöt32_t
 
tm¥eg
 = 0;

743 
	`as£π_∑øm
(
	`IS_RCC_PCLK
(
RCC_HCLK
));

745 
tm¥eg
 = 
RCC
->
CFGR
;

747 
tm¥eg
 &~
RCC_CFGR_PPRE2
;

749 
tm¥eg
 |
RCC_HCLK
 << 3;

751 
RCC
->
CFGR
 = 
tm¥eg
;

752 
	}
}

795 
	$RCC_GëClocksFªq
(
RCC_ClocksTy≥Def
* 
RCC_Clocks
)

797 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥ediv1Á˘‹
 = 0, 
¥esc
 = 0, 
∂l˛k
 = 0;

798 
uöt32_t
 
≠b2¥esc
 = 0, 
ahb¥esc
 = 0;

801 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

803 
tmp
)

806 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

809 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSE_VALUE
;

813 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

814 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

815 
∂lmuŒ
 = (Öllmull >> 18) + 2;

817 i‡(
∂lsour˚
 == 0x00)

820 
∂l˛k
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

824 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

826 
∂l˛k
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

828 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
∂l˛k
;

831 
RCC_Clocks
->
SYSCLK_Fªquícy
 = 
HSI_VALUE
;

836 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
;

837 
tmp
 =Åmp >> 4;

838 
ahb¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

840 
RCC_Clocks
->
HCLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
 >> 
ahb¥esc
;

843 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE1
;

844 
tmp
 =Åmp >> 8;

845 
¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

847 
RCC_Clocks
->
PCLK1_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
¥esc
;

850 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PPRE2
;

851 
tmp
 =Åmp >> 11;

852 
≠b2¥esc
 = 
APBAHBPªscTabÀ
[
tmp
];

854 
RCC_Clocks
->
PCLK2_Fªquícy
 = RCC_Clocks->
HCLK_Fªquícy
 >> 
≠b2¥esc
;

857 
tmp
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_ADCPRE12
;

858 
tmp
 =Åmp >> 4;

859 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

860 i‡((
¥esc
 & 0x10) != 0)

863 
RCC_Clocks
->
ADC12CLK_Fªquícy
 = 
∂l˛k
 / 
¥esc
;

868 
RCC_Clocks
->
ADC12CLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
;

872 
tmp
 = 
RCC
->
CFGR2
 & 
RCC_CFGR2_ADCPRE34
;

873 
tmp
 =Åmp >> 9;

874 
¥esc
 = 
ADCPªscTabÀ
[
tmp
];

875 i‡((
¥esc
 & 0x10) != 0)

878 
RCC_Clocks
->
ADC34CLK_Fªquícy
 = 
∂l˛k
 / 
¥esc
;

883 
RCC_Clocks
->
ADC34CLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
;

887 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_I2C1SW
) != RCC_CFGR3_I2C1SW)

890 
RCC_Clocks
->
I2C1CLK_Fªquícy
 = 
HSI_VALUE
;

895 
RCC_Clocks
->
I2C1CLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
;

899 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_I2C2SW
) != RCC_CFGR3_I2C2SW)

902 
RCC_Clocks
->
I2C2CLK_Fªquícy
 = 
HSI_VALUE
;

907 
RCC_Clocks
->
I2C2CLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
;

911 if(((
RCC
->
CFGR3
 & 
RCC_CFGR3_TIM1SW
Ë=RCC_CFGR3_TIM1SW)&& (
RCC_Clocks
->
SYSCLK_Fªquícy
 =
∂l˛k
) \

912 && (
≠b2¥esc
 =
ahb¥esc
))

915 
RCC_Clocks
->
TIM1CLK_Fªquícy
 = 
∂l˛k
 * 2;

920 
RCC_Clocks
->
TIM1CLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
;

924 if(((
RCC
->
CFGR3
 & 
RCC_CFGR3_TIM8SW
Ë=RCC_CFGR3_TIM8SW)&& (
RCC_Clocks
->
SYSCLK_Fªquícy
 =
∂l˛k
) \

925 && (
≠b2¥esc
 =
ahb¥esc
))

928 
RCC_Clocks
->
TIM8CLK_Fªquícy
 = 
∂l˛k
 * 2;

933 
RCC_Clocks
->
TIM8CLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
;

937 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART1SW
) == 0x0)

940 
RCC_Clocks
->
USART1CLK_Fªquícy
 = RCC_Clocks->
PCLK2_Fªquícy
;

942 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART1SW
Ë=
RCC_CFGR3_USART1SW_0
)

945 
RCC_Clocks
->
USART1CLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
;

947 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART1SW
Ë=
RCC_CFGR3_USART1SW_1
)

950 
RCC_Clocks
->
USART1CLK_Fªquícy
 = 
LSE_VALUE
;

952 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART1SW
) == RCC_CFGR3_USART1SW)

955 
RCC_Clocks
->
USART1CLK_Fªquícy
 = 
HSI_VALUE
;

959 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART2SW
) == 0x0)

962 
RCC_Clocks
->
USART2CLK_Fªquícy
 = RCC_Clocks->
PCLK1_Fªquícy
;

964 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART2SW
Ë=
RCC_CFGR3_USART2SW_0
)

967 
RCC_Clocks
->
USART2CLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
;

969 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART2SW
Ë=
RCC_CFGR3_USART2SW_1
)

972 
RCC_Clocks
->
USART2CLK_Fªquícy
 = 
LSE_VALUE
;

974 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART2SW
) == RCC_CFGR3_USART2SW)

977 
RCC_Clocks
->
USART2CLK_Fªquícy
 = 
HSI_VALUE
;

981 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART3SW
) == 0x0)

984 
RCC_Clocks
->
USART3CLK_Fªquícy
 = RCC_Clocks->
PCLK1_Fªquícy
;

986 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART3SW
Ë=
RCC_CFGR3_USART3SW_0
)

989 
RCC_Clocks
->
USART3CLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
;

991 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART3SW
Ë=
RCC_CFGR3_USART3SW_1
)

994 
RCC_Clocks
->
USART3CLK_Fªquícy
 = 
LSE_VALUE
;

996 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_USART3SW
) == RCC_CFGR3_USART3SW)

999 
RCC_Clocks
->
USART3CLK_Fªquícy
 = 
HSI_VALUE
;

1003 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_UART4SW
) == 0x0)

1006 
RCC_Clocks
->
UART4CLK_Fªquícy
 = RCC_Clocks->
PCLK1_Fªquícy
;

1008 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_UART4SW
Ë=
RCC_CFGR3_UART4SW_0
)

1011 
RCC_Clocks
->
UART4CLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
;

1013 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_UART4SW
Ë=
RCC_CFGR3_UART4SW_1
)

1016 
RCC_Clocks
->
UART4CLK_Fªquícy
 = 
LSE_VALUE
;

1018 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_UART4SW
) == RCC_CFGR3_UART4SW)

1021 
RCC_Clocks
->
UART4CLK_Fªquícy
 = 
HSI_VALUE
;

1025 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_UART5SW
) == 0x0)

1028 
RCC_Clocks
->
UART5CLK_Fªquícy
 = RCC_Clocks->
PCLK1_Fªquícy
;

1030 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_UART5SW
Ë=
RCC_CFGR3_UART5SW_0
)

1033 
RCC_Clocks
->
UART5CLK_Fªquícy
 = RCC_Clocks->
SYSCLK_Fªquícy
;

1035 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_UART5SW
Ë=
RCC_CFGR3_UART5SW_1
)

1038 
RCC_Clocks
->
UART5CLK_Fªquícy
 = 
LSE_VALUE
;

1040 if((
RCC
->
CFGR3
 & 
RCC_CFGR3_UART5SW
) == RCC_CFGR3_UART5SW)

1043 
RCC_Clocks
->
UART5CLK_Fªquícy
 = 
HSI_VALUE
;

1045 
	}
}

1106 
	$RCC_ADCCLKC⁄fig
(
uöt32_t
 
RCC_PLLCLK
)

1108 
uöt32_t
 
tmp
 = 0;

1111 
	`as£π_∑øm
(
	`IS_RCC_ADCCLK
(
RCC_PLLCLK
));

1113 
tmp
 = (
RCC_PLLCLK
 >> 28);

1116 i‡(
tmp
 != 0)

1118 
RCC
->
CFGR2
 &~
RCC_CFGR2_ADCPRE34
;

1123 
RCC
->
CFGR2
 &~
RCC_CFGR2_ADCPRE12
;

1126 
RCC
->
CFGR2
 |
RCC_PLLCLK
;

1127 
	}
}

1139 
	$RCC_I2CCLKC⁄fig
(
uöt32_t
 
RCC_I2CCLK
)

1141 
uöt32_t
 
tmp
 = 0;

1144 
	`as£π_∑øm
(
	`IS_RCC_I2CCLK
(
RCC_I2CCLK
));

1146 
tmp
 = (
RCC_I2CCLK
 >> 28);

1149 i‡(
tmp
 != 0)

1151 
RCC
->
CFGR3
 &~
RCC_CFGR3_I2C2SW
;

1155 
RCC
->
CFGR3
 &~
RCC_CFGR3_I2C1SW
;

1158 
RCC
->
CFGR3
 |
RCC_I2CCLK
;

1159 
	}
}

1175 
	$RCC_TIMCLKC⁄fig
(
uöt32_t
 
RCC_TIMCLK
)

1177 
uöt32_t
 
tmp
 = 0;

1180 
	`as£π_∑øm
(
	`IS_RCC_TIMCLK
(
RCC_TIMCLK
));

1182 
tmp
 = (
RCC_TIMCLK
 >> 28);

1185 i‡(
tmp
 != 0)

1187 
RCC
->
CFGR3
 &~
RCC_CFGR3_TIM8SW
;

1191 
RCC
->
CFGR3
 &~
RCC_CFGR3_TIM1SW
;

1194 
RCC
->
CFGR3
 |
RCC_TIMCLK
;

1195 
	}
}

1209 
	$RCC_USARTCLKC⁄fig
(
uöt32_t
 
RCC_USARTCLK
)

1211 
uöt32_t
 
tmp
 = 0;

1214 
	`as£π_∑øm
(
	`IS_RCC_USARTCLK
(
RCC_USARTCLK
));

1216 
tmp
 = (
RCC_USARTCLK
 >> 28);

1219 
tmp
)

1222 
RCC
->
CFGR3
 &~
RCC_CFGR3_USART1SW
;

1225 
RCC
->
CFGR3
 &~
RCC_CFGR3_USART2SW
;

1228 
RCC
->
CFGR3
 &~
RCC_CFGR3_USART3SW
;

1231 
RCC
->
CFGR3
 &~
RCC_CFGR3_UART4SW
;

1234 
RCC
->
CFGR3
 &~
RCC_CFGR3_UART5SW
;

1241 
RCC
->
CFGR3
 |
RCC_USARTCLK
;

1242 
	}
}

1254 
	$RCC_USBCLKC⁄fig
(
uöt32_t
 
RCC_USBCLKSour˚
)

1257 
	`as£π_∑øm
(
	`IS_RCC_USBCLK_SOURCE
(
RCC_USBCLKSour˚
));

1259 *(
__IO
 
uöt32_t
 *Ë
CFGR_USBPRE_BB
 = 
RCC_USBCLKSour˚
;

1260 
	}
}

1285 
	$RCC_RTCCLKC⁄fig
(
uöt32_t
 
RCC_RTCCLKSour˚
)

1288 
	`as£π_∑øm
(
	`IS_RCC_RTCCLK_SOURCE
(
RCC_RTCCLKSour˚
));

1291 
RCC
->
BDCR
 |
RCC_RTCCLKSour˚
;

1292 
	}
}

1304 
	$RCC_I2SCLKC⁄fig
(
uöt32_t
 
RCC_I2SCLKSour˚
)

1307 
	`as£π_∑øm
(
	`IS_RCC_I2SCLK_SOURCE
(
RCC_I2SCLKSour˚
));

1309 *(
__IO
 
uöt32_t
 *Ë
CFGR_I2SSRC_BB
 = 
RCC_I2SCLKSour˚
;

1310 
	}
}

1320 
	$RCC_RTCCLKCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1323 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1325 *(
__IO
 
uöt32_t
 *Ë
BDCR_RTCEN_BB
 = (uöt32_t)
NewSèã
;

1326 
	}
}

1336 
	$RCC_BackupRe£tCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1339 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1341 *(
__IO
 
uöt32_t
 *Ë
BDCR_BDRST_BB
 = (uöt32_t)
NewSèã
;

1342 
	}
}

1369 
	$RCC_AHBPîùhClockCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1372 
	`as£π_∑øm
(
	`IS_RCC_AHB_PERIPH
(
RCC_AHBPîùh
));

1373 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1375 i‡(
NewSèã
 !
DISABLE
)

1377 
RCC
->
AHBENR
 |
RCC_AHBPîùh
;

1381 
RCC
->
AHBENR
 &~
RCC_AHBPîùh
;

1383 
	}
}

1404 
	$RCC_APB2PîùhClockCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1407 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1408 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1410 i‡(
NewSèã
 !
DISABLE
)

1412 
RCC
->
APB2ENR
 |
RCC_APB2Pîùh
;

1416 
RCC
->
APB2ENR
 &~
RCC_APB2Pîùh
;

1418 
	}
}

1449 
	$RCC_APB1PîùhClockCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1452 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1453 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1455 i‡(
NewSèã
 !
DISABLE
)

1457 
RCC
->
APB1ENR
 |
RCC_APB1Pîùh
;

1461 
RCC
->
APB1ENR
 &~
RCC_APB1Pîùh
;

1463 
	}
}

1482 
	$RCC_AHBPîùhRe£tCmd
(
uöt32_t
 
RCC_AHBPîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1485 
	`as£π_∑øm
(
	`IS_RCC_AHB_RST_PERIPH
(
RCC_AHBPîùh
));

1486 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1488 i‡(
NewSèã
 !
DISABLE
)

1490 
RCC
->
AHBRSTR
 |
RCC_AHBPîùh
;

1494 
RCC
->
AHBRSTR
 &~
RCC_AHBPîùh
;

1496 
	}
}

1514 
	$RCC_APB2PîùhRe£tCmd
(
uöt32_t
 
RCC_APB2Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1517 
	`as£π_∑øm
(
	`IS_RCC_APB2_PERIPH
(
RCC_APB2Pîùh
));

1518 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1520 i‡(
NewSèã
 !
DISABLE
)

1522 
RCC
->
APB2RSTR
 |
RCC_APB2Pîùh
;

1526 
RCC
->
APB2RSTR
 &~
RCC_APB2Pîùh
;

1528 
	}
}

1556 
	$RCC_APB1PîùhRe£tCmd
(
uöt32_t
 
RCC_APB1Pîùh
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1559 
	`as£π_∑øm
(
	`IS_RCC_APB1_PERIPH
(
RCC_APB1Pîùh
));

1560 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1562 i‡(
NewSèã
 !
DISABLE
)

1564 
RCC
->
APB1RSTR
 |
RCC_APB1Pîùh
;

1568 
RCC
->
APB1RSTR
 &~
RCC_APB1Pîùh
;

1570 
	}
}

1607 
	$RCC_ITC⁄fig
(
uöt8_t
 
RCC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1610 
	`as£π_∑øm
(
	`IS_RCC_IT
(
RCC_IT
));

1611 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1613 i‡(
NewSèã
 !
DISABLE
)

1616 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 |
RCC_IT
;

1621 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE2_ADDRESS
 &(uöt8_t)~
RCC_IT
;

1623 
	}
}

1644 
FœgSètus
 
	$RCC_GëFœgSètus
(
uöt8_t
 
RCC_FLAG
)

1646 
uöt32_t
 
tmp
 = 0;

1647 
uöt32_t
 
°©u§eg
 = 0;

1648 
FœgSètus
 
bô°©us
 = 
RESET
;

1651 
	`as£π_∑øm
(
	`IS_RCC_FLAG
(
RCC_FLAG
));

1654 
tmp
 = 
RCC_FLAG
 >> 5;

1656 i‡(
tmp
 == 0)

1658 
°©u§eg
 = 
RCC
->
CR
;

1660 i‡(
tmp
 == 1)

1662 
°©u§eg
 = 
RCC
->
BDCR
;

1664 i‡(
tmp
 == 4)

1666 
°©u§eg
 = 
RCC
->
CFGR
;

1670 
°©u§eg
 = 
RCC
->
CSR
;

1674 
tmp
 = 
RCC_FLAG
 & 
FLAG_MASK
;

1676 i‡((
°©u§eg
 & ((
uöt32_t
)1 << 
tmp
)Ë!(uöt32_t)
RESET
)

1678 
bô°©us
 = 
SET
;

1682 
bô°©us
 = 
RESET
;

1685  
bô°©us
;

1686 
	}
}

1695 
	$RCC_CÀ¨Fœg
()

1698 
RCC
->
CSR
 |
RCC_CSR_RMVF
;

1699 
	}
}

1713 
ITSètus
 
	$RCC_GëITSètus
(
uöt8_t
 
RCC_IT
)

1715 
ITSètus
 
bô°©us
 = 
RESET
;

1718 
	`as£π_∑øm
(
	`IS_RCC_GET_IT
(
RCC_IT
));

1721 i‡((
RCC
->
CIR
 & 
RCC_IT
Ë!(
uöt32_t
)
RESET
)

1723 
bô°©us
 = 
SET
;

1727 
bô°©us
 = 
RESET
;

1730  
bô°©us
;

1731 
	}
}

1745 
	$RCC_CÀ¨ITPídögBô
(
uöt8_t
 
RCC_IT
)

1748 
	`as£π_∑øm
(
	`IS_RCC_CLEAR_IT
(
RCC_IT
));

1752 *(
__IO
 
uöt8_t
 *Ë
CIR_BYTE3_ADDRESS
 = 
RCC_IT
;

1753 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_rtc.c

239 
	~"°m32f30x_πc.h
"

240 
	~"°m32f30x_rcc.h
"

255 
	#RTC_TR_RESERVED_MASK
 ((
uöt32_t
)0x007F7F7F)

	)

256 
	#RTC_DR_RESERVED_MASK
 ((
uöt32_t
)0x00FFFF3F)

	)

257 
	#RTC_INIT_MASK
 ((
uöt32_t
)0xFFFFFFFF)

	)

258 
	#RTC_RSF_MASK
 ((
uöt32_t
)0xFFFFFF5F)

	)

259 
	#RTC_FLAGS_MASK
 ((
uöt32_t
)(
RTC_FLAG_TSOVF
 | 
RTC_FLAG_TSF
 | 
RTC_FLAG_WUTF
 | \

	)

260 
	gRTC_FLAG_ALRBF
 | 
	gRTC_FLAG_ALRAF
 | 
	gRTC_FLAG_INITF
 | \

261 
	gRTC_FLAG_RSF
 | 
	gRTC_FLAG_INITS
 | 
	gRTC_FLAG_WUTWF
 | \

262 
	gRTC_FLAG_ALRBWF
 | 
	gRTC_FLAG_ALRAWF
 | 
	gRTC_FLAG_TAMP1F
 | \

263 
	gRTC_FLAG_TAMP2F
 | 
	gRTC_FLAG_TAMP3F
 | 
	gRTC_FLAG_RECALPF
 | \

264 
	gRTC_FLAG_SHPF
))

266 
	#INITMODE_TIMEOUT
 ((
uöt32_t
Ë0x00002000)

	)

267 
	#SYNCHRO_TIMEOUT
 ((
uöt32_t
Ë0x00008000)

	)

268 
	#RECALPF_TIMEOUT
 ((
uöt32_t
Ë0x00001000)

	)

269 
	#SHPF_TIMEOUT
 ((
uöt32_t
Ë0x00002000)

	)

274 
uöt8_t
 
RTC_ByãToBcd2
(uöt8_à
VÆue
);

275 
uöt8_t
 
RTC_Bcd2ToByã
(uöt8_à
VÆue
);

326 
Eº‹Sètus
 
	$RTC_DeInô
()

328 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

329 
uöt32_t
 
wutwf°©us
 = 0x00;

330 
Eº‹Sètus
 
°©us
 = 
ERROR
;

333 
RTC
->
WPR
 = 0xCA;

334 
RTC
->
WPR
 = 0x53;

337 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

339 
°©us
 = 
ERROR
;

344 
RTC
->
TR
 = (
uöt32_t
)0x00000000;

345 
RTC
->
DR
 = (
uöt32_t
)0x00002101;

348 
RTC
->
CR
 &(
uöt32_t
)0x00000007;

353 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

354 
wutcou¡î
++;

355 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

357 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

359 
°©us
 = 
ERROR
;

364 
RTC
->
CR
 &(
uöt32_t
)0x00000000;

365 
RTC
->
WUTR
 = (
uöt32_t
)0x0000FFFF;

366 
RTC
->
PRER
 = (
uöt32_t
)0x007F00FF;

367 
RTC
->
ALRMAR
 = (
uöt32_t
)0x00000000;

368 
RTC
->
ALRMBR
 = (
uöt32_t
)0x00000000;

369 
RTC
->
SHIFTR
 = (
uöt32_t
)0x00000000;

370 
RTC
->
CALR
 = (
uöt32_t
)0x00000000;

371 
RTC
->
ALRMASSR
 = (
uöt32_t
)0x00000000;

372 
RTC
->
ALRMBSSR
 = (
uöt32_t
)0x00000000;

375 
RTC
->
ISR
 = (
uöt32_t
)0x00000000;

378 
RTC
->
TAFCR
 = 0x00000000;

381 i‡(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

383 
°©us
 = 
ERROR
;

387 
°©us
 = 
SUCCESS
;

393 
RTC
->
WPR
 = 0xFF;

395  
°©us
;

396 
	}
}

409 
Eº‹Sètus
 
	$RTC_Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

411 
Eº‹Sètus
 
°©us
 = 
ERROR
;

414 
	`as£π_∑øm
(
	`IS_RTC_HOUR_FORMAT
(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

415 
	`as£π_∑øm
(
	`IS_RTC_ASYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
));

416 
	`as£π_∑øm
(
	`IS_RTC_SYNCH_PREDIV
(
RTC_InôSåu˘
->
RTC_SynchPªdiv
));

419 
RTC
->
WPR
 = 0xCA;

420 
RTC
->
WPR
 = 0x53;

423 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

425 
°©us
 = 
ERROR
;

430 
RTC
->
CR
 &((
uöt32_t
)~(
RTC_CR_FMT
));

432 
RTC
->
CR
 |((
uöt32_t
)(
RTC_InôSåu˘
->
RTC_HourF‹m©
));

435 
RTC
->
PRER
 = (
uöt32_t
)(
RTC_InôSåu˘
->
RTC_SynchPªdiv
);

436 
RTC
->
PRER
 |(
uöt32_t
)(
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 << 16);

439 
	`RTC_ExôInôMode
();

441 
°©us
 = 
SUCCESS
;

444 
RTC
->
WPR
 = 0xFF;

446  
°©us
;

447 
	}
}

455 
	$RTC_Såu˘Inô
(
RTC_InôTy≥Def
* 
RTC_InôSåu˘
)

458 
RTC_InôSåu˘
->
RTC_HourF‹m©
 = 
RTC_HourF‹m©_24
;

461 
RTC_InôSåu˘
->
RTC_AsynchPªdiv
 = (
uöt32_t
)0x7F;

464 
RTC_InôSåu˘
->
RTC_SynchPªdiv
 = (
uöt32_t
)0xFF;

465 
	}
}

477 
	$RTC_WrôePrŸe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

480 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

482 i‡(
NewSèã
 !
DISABLE
)

485 
RTC
->
WPR
 = 0xFF;

490 
RTC
->
WPR
 = 0xCA;

491 
RTC
->
WPR
 = 0x53;

493 
	}
}

504 
Eº‹Sètus
 
	$RTC_E¡îInôMode
()

506 
__IO
 
uöt32_t
 
öôcou¡î
 = 0x00;

507 
Eº‹Sètus
 
°©us
 = 
ERROR
;

508 
uöt32_t
 
öô°©us
 = 0x00;

511 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë=(
uöt32_t
)
RESET
)

514 
RTC
->
ISR
 = (
uöt32_t
)
RTC_INIT_MASK
;

519 
öô°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_INITF
;

520 
öôcou¡î
++;

521 } (
öôcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
öô°©us
 == 0x00));

523 i‡((
RTC
->
ISR
 & 
RTC_ISR_INITF
Ë!
RESET
)

525 
°©us
 = 
SUCCESS
;

529 
°©us
 = 
ERROR
;

534 
°©us
 = 
SUCCESS
;

537  (
°©us
);

538 
	}
}

549 
	$RTC_ExôInôMode
()

552 
RTC
->
ISR
 &(
uöt32_t
)~
RTC_ISR_INIT
;

553 
	}
}

571 
Eº‹Sètus
 
	$RTC_WaôF‹Synchro
()

573 
__IO
 
uöt32_t
 
synchrocou¡î
 = 0;

574 
Eº‹Sètus
 
°©us
 = 
ERROR
;

575 
uöt32_t
 
synchro°©us
 = 0x00;

577 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë!
RESET
)

580 
°©us
 = 
SUCCESS
;

585 
RTC
->
WPR
 = 0xCA;

586 
RTC
->
WPR
 = 0x53;

589 
RTC
->
ISR
 &(
uöt32_t
)
RTC_RSF_MASK
;

594 
synchro°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_RSF
;

595 
synchrocou¡î
++;

596 } (
synchrocou¡î
 !
SYNCHRO_TIMEOUT
Ë&& (
synchro°©us
 == 0x00));

598 i‡((
RTC
->
ISR
 & 
RTC_ISR_RSF
Ë!
RESET
)

600 
°©us
 = 
SUCCESS
;

604 
°©us
 = 
ERROR
;

608 
RTC
->
WPR
 = 0xFF;

611  (
°©us
);

612 
	}
}

622 
Eº‹Sètus
 
	$RTC_RefClockCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

624 
Eº‹Sètus
 
°©us
 = 
ERROR
;

627 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

630 
RTC
->
WPR
 = 0xCA;

631 
RTC
->
WPR
 = 0x53;

634 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

636 
°©us
 = 
ERROR
;

640 i‡(
NewSèã
 !
DISABLE
)

643 
RTC
->
CR
 |
RTC_CR_REFCKON
;

648 
RTC
->
CR
 &~
RTC_CR_REFCKON
;

651 
	`RTC_ExôInôMode
();

653 
°©us
 = 
SUCCESS
;

657 
RTC
->
WPR
 = 0xFF;

659  
°©us
;

660 
	}
}

670 
	$RTC_By∑ssShadowCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

673 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

676 
RTC
->
WPR
 = 0xCA;

677 
RTC
->
WPR
 = 0x53;

679 i‡(
NewSèã
 !
DISABLE
)

682 
RTC
->
CR
 |(
uöt8_t
)
RTC_CR_BYPSHAD
;

687 
RTC
->
CR
 &(
uöt8_t
)~
RTC_CR_BYPSHAD
;

691 
RTC
->
WPR
 = 0xFF;

692 
	}
}

724 
Eº‹Sètus
 
	$RTC_SëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

726 
uöt32_t
 
tm¥eg
 = 0;

727 
Eº‹Sètus
 
°©us
 = 
ERROR
;

730 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

732 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

734 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

736 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_TimeSåu˘
->
RTC_Hours
));

737 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

741 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

742 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_TimeSåu˘
->
RTC_Hours
));

744 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_TimeSåu˘
->
RTC_Möuãs
));

745 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
));

749 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

751 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
);

752 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

753 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_TimeSåu˘
->
RTC_H12
));

757 
RTC_TimeSåu˘
->
RTC_H12
 = 0x00;

758 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Hours
)));

760 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Möuãs
)));

761 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)));

765 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

767 
tm¥eg
 = (((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

768 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

769 ((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_Sec⁄ds
) | \

770 ((
uöt32_t
)(
RTC_TimeSåu˘
->
RTC_H12
) << 16));

774 
tm¥eg
 = (
uöt32_t
)(((uöt32_t)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Hours
) << 16) | \

775 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Möuãs
) << 8) | \

776 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_TimeSåu˘
->
RTC_Sec⁄ds
)) | \

777 (((
uöt32_t
)
RTC_TimeSåu˘
->
RTC_H12
) << 16));

781 
RTC
->
WPR
 = 0xCA;

782 
RTC
->
WPR
 = 0x53;

785 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

787 
°©us
 = 
ERROR
;

792 
RTC
->
TR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_TR_RESERVED_MASK
);

795 
	`RTC_ExôInôMode
();

798 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

800 i‡(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

802 
°©us
 = 
ERROR
;

806 
°©us
 = 
SUCCESS
;

811 
°©us
 = 
SUCCESS
;

816 
RTC
->
WPR
 = 0xFF;

818  
°©us
;

819 
	}
}

828 
	$RTC_TimeSåu˘Inô
(
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

831 
RTC_TimeSåu˘
->
RTC_H12
 = 
RTC_H12_AM
;

832 
RTC_TimeSåu˘
->
RTC_Hours
 = 0;

833 
RTC_TimeSåu˘
->
RTC_Möuãs
 = 0;

834 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = 0;

835 
	}
}

847 
	$RTC_GëTime
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_TimeSåu˘
)

849 
uöt32_t
 
tm¥eg
 = 0;

852 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

855 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TR
 & 
RTC_TR_RESERVED_MASK
);

858 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

859 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >>8);

860 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

861 
RTC_TimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_TR_PM
)) >> 16);

864 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

867 
RTC_TimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Hours);

868 
RTC_TimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Minutes);

869 
RTC_TimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_TimeStruct->RTC_Seconds);

871 
	}
}

880 
uöt32_t
 
	$RTC_GëSubSec⁄d
()

882 
uöt32_t
 
tm¥eg
 = 0;

885 
tm¥eg
 = (
uöt32_t
)(
RTC
->
SSR
);

888 (Ë(
RTC
->
DR
);

890  (
tm¥eg
);

891 
	}
}

905 
Eº‹Sètus
 
	$RTC_SëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

907 
uöt32_t
 
tm¥eg
 = 0;

908 
Eº‹Sètus
 
°©us
 = 
ERROR
;

911 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

913 i‡((
RTC_F‹m©
 =
RTC_F‹m©_BIN
Ë&& ((
RTC_D©eSåu˘
->
RTC_M⁄th
 & 0x10) == 0x10))

915 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (RTC_D©eSåu˘->RTC_M⁄th & (
uöt32_t
)~(0x10)) + 0x0A;

917 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

919 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
RTC_D©eSåu˘
->
RTC_Yór
));

920 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
RTC_D©eSåu˘
->
RTC_M⁄th
));

921 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
RTC_D©eSåu˘
->
RTC_D©e
));

925 
	`as£π_∑øm
(
	`IS_RTC_YEAR
(
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_Yór
)));

926 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_M⁄th
);

927 
	`as£π_∑øm
(
	`IS_RTC_MONTH
(
tm¥eg
));

928 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_D©eSåu˘
->
RTC_D©e
);

929 
	`as£π_∑øm
(
	`IS_RTC_DATE
(
tm¥eg
));

931 
	`as£π_∑øm
(
	`IS_RTC_WEEKDAY
(
RTC_D©eSåu˘
->
RTC_WìkDay
));

934 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

936 
tm¥eg
 = ((((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

937 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

938 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_D©e
) | \

939 (((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
) << 13));

943 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_Yór
) << 16) | \

944 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_M⁄th
) << 8) | \

945 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_D©eSåu˘
->
RTC_D©e
)) | \

946 ((
uöt32_t
)
RTC_D©eSåu˘
->
RTC_WìkDay
 << 13));

950 
RTC
->
WPR
 = 0xCA;

951 
RTC
->
WPR
 = 0x53;

954 i‡(
	`RTC_E¡îInôMode
(Ë=
ERROR
)

956 
°©us
 = 
ERROR
;

961 
RTC
->
DR
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_DR_RESERVED_MASK
);

964 
	`RTC_ExôInôMode
();

967 i‡((
RTC
->
CR
 & 
RTC_CR_BYPSHAD
Ë=
RESET
)

969 i‡(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

971 
°©us
 = 
ERROR
;

975 
°©us
 = 
SUCCESS
;

980 
°©us
 = 
SUCCESS
;

984 
RTC
->
WPR
 = 0xFF;

986  
°©us
;

987 
	}
}

996 
	$RTC_D©eSåu˘Inô
(
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

999 
RTC_D©eSåu˘
->
RTC_WìkDay
 = 
RTC_Wìkday_M⁄day
;

1000 
RTC_D©eSåu˘
->
RTC_D©e
 = 1;

1001 
RTC_D©eSåu˘
->
RTC_M⁄th
 = 
RTC_M⁄th_J™u¨y
;

1002 
RTC_D©eSåu˘
->
RTC_Yór
 = 0;

1003 
	}
}

1015 
	$RTC_GëD©e
(
uöt32_t
 
RTC_F‹m©
, 
RTC_D©eTy≥Def
* 
RTC_D©eSåu˘
)

1017 
uöt32_t
 
tm¥eg
 = 0;

1020 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1023 
tm¥eg
 = (
uöt32_t
)(
RTC
->
DR
 & 
RTC_DR_RESERVED_MASK
);

1026 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_YT
 | 
RTC_DR_YU
)) >> 16);

1027 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1028 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tm¥eg
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1029 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tm¥eg
 & (
RTC_DR_WDU
)) >> 13);

1032 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1035 
RTC_D©eSåu˘
->
RTC_Yór
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Year);

1036 
RTC_D©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Month);

1037 
RTC_D©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_DateStruct->RTC_Date);

1038 
RTC_D©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)(RTC_DateStruct->RTC_WeekDay);

1040 
	}
}

1075 
	$RTC_SëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1077 
uöt32_t
 
tm¥eg
 = 0;

1080 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1081 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1082 
	`as£π_∑øm
(
	`IS_ALARM_MASK
(
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1083 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_SEL
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
));

1085 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1087 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1089 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1090 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1094 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1095 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
));

1097 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
));

1098 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
));

1100 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1102 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1106 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
));

1111 i‡((
RTC
->
CR
 & 
RTC_CR_FMT
Ë!(
uöt32_t
)
RESET
)

1113 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
);

1114 
	`as£π_∑øm
(
	`IS_RTC_HOUR12
(
tm¥eg
));

1115 
	`as£π_∑øm
(
	`IS_RTC_H12
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
));

1119 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 0x00;

1120 
	`as£π_∑øm
(
	`IS_RTC_HOUR24
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
)));

1123 
	`as£π_∑øm
(
	`IS_RTC_MINUTES
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
)));

1124 
	`as£π_∑øm
(
	`IS_RTC_SECONDS
(
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)));

1126 if(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 =
RTC_AœrmD©eWìkDaySñ_D©e
)

1128 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1129 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_DATE
(
tm¥eg
));

1133 
tm¥eg
 = 
	`RTC_Bcd2ToByã
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
);

1134 
	`as£π_∑øm
(
	`IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY
(
tm¥eg
));

1139 i‡(
RTC_F‹m©
 !
RTC_F‹m©_BIN
)

1141 
tm¥eg
 = (((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1142 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1143 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
) | \

1144 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1145 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1146 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1147 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1151 
tm¥eg
 = (((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
) << 16) | \

1152 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
) << 8) | \

1153 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
)) | \

1154 ((
uöt32_t
)(
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
) << 16) | \

1155 ((
uöt32_t
)
	`RTC_ByãToBcd2
(
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
) << 24) | \

1156 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
) | \

1157 ((
uöt32_t
)
RTC_AœrmSåu˘
->
RTC_AœrmMask
));

1161 
RTC
->
WPR
 = 0xCA;

1162 
RTC
->
WPR
 = 0x53;

1165 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1167 
RTC
->
ALRMAR
 = (
uöt32_t
)
tm¥eg
;

1171 
RTC
->
ALRMBR
 = (
uöt32_t
)
tm¥eg
;

1175 
RTC
->
WPR
 = 0xFF;

1176 
	}
}

1186 
	$RTC_AœrmSåu˘Inô
(
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1189 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = 
RTC_H12_AM
;

1190 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 0;

1191 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 0;

1192 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 0;

1195 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = 
RTC_AœrmD©eWìkDaySñ_D©e
;

1196 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 1;

1199 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = 
RTC_AœrmMask_N⁄e
;

1200 
	}
}

1216 
	$RTC_GëAœrm
(
uöt32_t
 
RTC_F‹m©
, uöt32_à
RTC_Aœrm
, 
RTC_AœrmTy≥Def
* 
RTC_AœrmSåu˘
)

1218 
uöt32_t
 
tm¥eg
 = 0;

1221 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1222 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1225 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1227 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMAR
);

1231 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ALRMBR
);

1235 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_HT
 | \

1236 
RTC_ALRMAR_HU
)) >> 16);

1237 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_MNT
 | \

1238 
RTC_ALRMAR_MNU
)) >> 8);

1239 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = (
uöt32_t
)(
tm¥eg
 & (
RTC_ALRMAR_ST
 | \

1240 
RTC_ALRMAR_SU
));

1241 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_H12
 = (
uöt32_t
)((
tm¥eg
 & 
RTC_ALRMAR_PM
) >> 16);

1242 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = (
uöt32_t
)((
tm¥eg
 & (
RTC_ALRMAR_DT
 | 
RTC_ALRMAR_DU
)) >> 24);

1243 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDaySñ
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_ALRMAR_WDSEL
);

1244 
RTC_AœrmSåu˘
->
RTC_AœrmMask
 = (
uöt32_t
)(
tm¥eg
 & 
RTC_AœrmMask_AŒ
);

1246 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1248 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Hours
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1249 
RTC_AœrmTime
.
RTC_Hours
);

1250 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Möuãs
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1251 
RTC_AœrmTime
.
RTC_Möuãs
);

1252 
RTC_AœrmSåu˘
->
RTC_AœrmTime
.
RTC_Sec⁄ds
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct-> \

1253 
RTC_AœrmTime
.
RTC_Sec⁄ds
);

1254 
RTC_AœrmSåu˘
->
RTC_AœrmD©eWìkDay
 = 
	`RTC_Bcd2ToByã
(RTC_AlarmStruct->RTC_AlarmDateWeekDay);

1256 
	}
}

1270 
Eº‹Sètus
 
	$RTC_AœrmCmd
(
uöt32_t
 
RTC_Aœrm
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1272 
__IO
 
uöt32_t
 
Æ¨mcou¡î
 = 0x00;

1273 
uöt32_t
 
Æ¨m°©us
 = 0x00;

1274 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1277 
	`as£π_∑øm
(
	`IS_RTC_CMD_ALARM
(
RTC_Aœrm
));

1278 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1281 
RTC
->
WPR
 = 0xCA;

1282 
RTC
->
WPR
 = 0x53;

1285 i‡(
NewSèã
 !
DISABLE
)

1287 
RTC
->
CR
 |(
uöt32_t
)
RTC_Aœrm
;

1289 
°©us
 = 
SUCCESS
;

1294 
RTC
->
CR
 &(
uöt32_t
)~
RTC_Aœrm
;

1299 
Æ¨m°©us
 = 
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8);

1300 
Æ¨mcou¡î
++;

1301 } (
Æ¨mcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
Æ¨m°©us
 == 0x00));

1303 i‡((
RTC
->
ISR
 & (
RTC_Aœrm
 >> 8)Ë=
RESET
)

1305 
°©us
 = 
ERROR
;

1309 
°©us
 = 
SUCCESS
;

1314 
RTC
->
WPR
 = 0xFF;

1316  
°©us
;

1317 
	}
}

1364 
	$RTC_AœrmSubSec⁄dC⁄fig
(
uöt32_t
 
RTC_Aœrm
, uöt32_à
RTC_AœrmSubSec⁄dVÆue
, uöt32_à
RTC_AœrmSubSec⁄dMask
)

1366 
uöt32_t
 
tm¥eg
 = 0;

1369 
	`as£π_∑øm
(
	`IS_RTC_ALARM
(
RTC_Aœrm
));

1370 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_VALUE
(
RTC_AœrmSubSec⁄dVÆue
));

1371 
	`as£π_∑øm
(
	`IS_RTC_ALARM_SUB_SECOND_MASK
(
RTC_AœrmSubSec⁄dMask
));

1374 
RTC
->
WPR
 = 0xCA;

1375 
RTC
->
WPR
 = 0x53;

1378 
tm¥eg
 = (
uöt32_t
Ë(uöt32_t)(
RTC_AœrmSubSec⁄dVÆue
Ë| (uöt32_t)(
RTC_AœrmSubSec⁄dMask
);

1380 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1383 
RTC
->
ALRMASSR
 = 
tm¥eg
;

1388 
RTC
->
ALRMBSSR
 = 
tm¥eg
;

1392 
RTC
->
WPR
 = 0xFF;

1394 
	}
}

1405 
uöt32_t
 
	$RTC_GëAœrmSubSec⁄d
(
uöt32_t
 
RTC_Aœrm
)

1407 
uöt32_t
 
tm¥eg
 = 0;

1410 i‡(
RTC_Aœrm
 =
RTC_Aœrm_A
)

1412 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMASSR
Ë& 
RTC_ALRMASSR_SS
);

1416 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ALRMBSSR
Ë& 
RTC_ALRMBSSR_SS
);

1419  (
tm¥eg
);

1420 
	}
}

1453 
	$RTC_WakeUpClockC⁄fig
(
uöt32_t
 
RTC_WakeUpClock
)

1456 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_CLOCK
(
RTC_WakeUpClock
));

1459 
RTC
->
WPR
 = 0xCA;

1460 
RTC
->
WPR
 = 0x53;

1463 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUCKSEL
;

1466 
RTC
->
CR
 |(
uöt32_t
)
RTC_WakeUpClock
;

1469 
RTC
->
WPR
 = 0xFF;

1470 
	}
}

1480 
	$RTC_SëWakeUpCou¡î
(
uöt32_t
 
RTC_WakeUpCou¡î
)

1483 
	`as£π_∑øm
(
	`IS_RTC_WAKEUP_COUNTER
(
RTC_WakeUpCou¡î
));

1486 
RTC
->
WPR
 = 0xCA;

1487 
RTC
->
WPR
 = 0x53;

1490 
RTC
->
WUTR
 = (
uöt32_t
)
RTC_WakeUpCou¡î
;

1493 
RTC
->
WPR
 = 0xFF;

1494 
	}
}

1501 
uöt32_t
 
	$RTC_GëWakeUpCou¡î
()

1504  ((
uöt32_t
)(
RTC
->
WUTR
 & 
RTC_WUTR_WUT
));

1505 
	}
}

1513 
Eº‹Sètus
 
	$RTC_WakeUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1515 
__IO
 
uöt32_t
 
wutcou¡î
 = 0x00;

1516 
uöt32_t
 
wutwf°©us
 = 0x00;

1517 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1520 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1523 
RTC
->
WPR
 = 0xCA;

1524 
RTC
->
WPR
 = 0x53;

1526 i‡(
NewSèã
 !
DISABLE
)

1529 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_WUTE
;

1530 
°©us
 = 
SUCCESS
;

1535 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_WUTE
;

1539 
wutwf°©us
 = 
RTC
->
ISR
 & 
RTC_ISR_WUTWF
;

1540 
wutcou¡î
++;

1541 } (
wutcou¡î
 !
INITMODE_TIMEOUT
Ë&& (
wutwf°©us
 == 0x00));

1543 i‡((
RTC
->
ISR
 & 
RTC_ISR_WUTWF
Ë=
RESET
)

1545 
°©us
 = 
ERROR
;

1549 
°©us
 = 
SUCCESS
;

1554 
RTC
->
WPR
 = 0xFF;

1556  
°©us
;

1557 
	}
}

1589 
	$RTC_DayLightSavögC⁄fig
(
uöt32_t
 
RTC_DayLightSavög
, uöt32_à
RTC_St‹eO≥øti⁄
)

1592 
	`as£π_∑øm
(
	`IS_RTC_DAYLIGHT_SAVING
(
RTC_DayLightSavög
));

1593 
	`as£π_∑øm
(
	`IS_RTC_STORE_OPERATION
(
RTC_St‹eO≥øti⁄
));

1596 
RTC
->
WPR
 = 0xCA;

1597 
RTC
->
WPR
 = 0x53;

1600 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_BCK
);

1603 
RTC
->
CR
 |(
uöt32_t
)(
RTC_DayLightSavög
 | 
RTC_St‹eO≥øti⁄
);

1606 
RTC
->
WPR
 = 0xFF;

1607 
	}
}

1616 
uöt32_t
 
	$RTC_GëSt‹eO≥øti⁄
()

1618  (
RTC
->
CR
 & 
RTC_CR_BCK
);

1619 
	}
}

1654 
	$RTC_OuçutC⁄fig
(
uöt32_t
 
RTC_Ouçut
, uöt32_à
RTC_OuçutPﬁ¨ôy
)

1657 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT
(
RTC_Ouçut
));

1658 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_POL
(
RTC_OuçutPﬁ¨ôy
));

1661 
RTC
->
WPR
 = 0xCA;

1662 
RTC
->
WPR
 = 0x53;

1665 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_OSEL
 | 
RTC_CR_POL
);

1668 
RTC
->
CR
 |(
uöt32_t
)(
RTC_Ouçut
 | 
RTC_OuçutPﬁ¨ôy
);

1671 
RTC
->
WPR
 = 0xFF;

1672 
	}
}

1697 
	$RTC_CÆibOuçutCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

1700 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1703 
RTC
->
WPR
 = 0xCA;

1704 
RTC
->
WPR
 = 0x53;

1706 i‡(
NewSèã
 !
DISABLE
)

1709 
RTC
->
CR
 |(
uöt32_t
)
RTC_CR_COE
;

1714 
RTC
->
CR
 &(
uöt32_t
)~
RTC_CR_COE
;

1718 
RTC
->
WPR
 = 0xFF;

1719 
	}
}

1729 
	$RTC_CÆibOuçutC⁄fig
(
uöt32_t
 
RTC_CÆibOuçut
)

1732 
	`as£π_∑øm
(
	`IS_RTC_CALIB_OUTPUT
(
RTC_CÆibOuçut
));

1735 
RTC
->
WPR
 = 0xCA;

1736 
RTC
->
WPR
 = 0x53;

1739 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_CR_COSEL
);

1742 
RTC
->
CR
 |(
uöt32_t
)
RTC_CÆibOuçut
;

1745 
RTC
->
WPR
 = 0xFF;

1746 
	}
}

1765 
Eº‹Sètus
 
	$RTC_SmoŸhCÆibC⁄fig
(
uöt32_t
 
RTC_SmoŸhCÆibPîiod
,

1766 
uöt32_t
 
RTC_SmoŸhCÆibPlusPul£s
,

1767 
uöt32_t
 
RTC_SmouthCÆibMöusPul£sVÆue
)

1769 
Eº‹Sètus
 
°©us
 = 
ERROR
;

1770 
uöt32_t
 
ªˇÕfcou¡
 = 0;

1773 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PERIOD
(
RTC_SmoŸhCÆibPîiod
));

1774 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_PLUS
(
RTC_SmoŸhCÆibPlusPul£s
));

1775 
	`as£π_∑øm
(
	`IS_RTC_SMOOTH_CALIB_MINUS
(
RTC_SmouthCÆibMöusPul£sVÆue
));

1778 
RTC
->
WPR
 = 0xCA;

1779 
RTC
->
WPR
 = 0x53;

1782 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
)

1785 ((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë!
RESET
Ë&& (
ªˇÕfcou¡
 !
RECALPF_TIMEOUT
))

1787 
ªˇÕfcou¡
++;

1792 i‡((
RTC
->
ISR
 & 
RTC_ISR_RECALPF
Ë=
RESET
)

1795 
RTC
->
CALR
 = (
uöt32_t
)((uöt32_t)
RTC_SmoŸhCÆibPîiod
 | (uöt32_t)
RTC_SmoŸhCÆibPlusPul£s
 | (uöt32_t)
RTC_SmouthCÆibMöusPul£sVÆue
);

1797 
°©us
 = 
SUCCESS
;

1801 
°©us
 = 
ERROR
;

1805 
RTC
->
WPR
 = 0xFF;

1807  (
Eº‹Sètus
)(
°©us
);

1808 
	}
}

1841 
	$RTC_TimeSèmpCmd
(
uöt32_t
 
RTC_TimeSèmpEdge
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1843 
uöt32_t
 
tm¥eg
 = 0;

1846 
	`as£π_∑øm
(
	`IS_RTC_TIMESTAMP_EDGE
(
RTC_TimeSèmpEdge
));

1847 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1850 
tm¥eg
 = (
uöt32_t
)(
RTC
->
CR
 & (uöt32_t)~(
RTC_CR_TSEDGE
 | 
RTC_CR_TSE
));

1853 i‡(
NewSèã
 !
DISABLE
)

1855 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
 | 
RTC_CR_TSE
);

1859 
tm¥eg
 |(
uöt32_t
)(
RTC_TimeSèmpEdge
);

1863 
RTC
->
WPR
 = 0xCA;

1864 
RTC
->
WPR
 = 0x53;

1867 
RTC
->
CR
 = (
uöt32_t
)
tm¥eg
;

1870 
RTC
->
WPR
 = 0xFF;

1871 
	}
}

1885 
	$RTC_GëTimeSèmp
(
uöt32_t
 
RTC_F‹m©
, 
RTC_TimeTy≥Def
* 
RTC_SèmpTimeSåu˘
,

1886 
RTC_D©eTy≥Def
* 
RTC_SèmpD©eSåu˘
)

1888 
uöt32_t
 
tm±ime
 = 0, 
tmpd©e
 = 0;

1891 
	`as£π_∑øm
(
	`IS_RTC_FORMAT
(
RTC_F‹m©
));

1894 
tm±ime
 = (
uöt32_t
)(
RTC
->
TSTR
 & 
RTC_TR_RESERVED_MASK
);

1895 
tmpd©e
 = (
uöt32_t
)(
RTC
->
TSDR
 & 
RTC_DR_RESERVED_MASK
);

1898 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_HT
 | 
RTC_TR_HU
)) >> 16);

1899 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_MNT
 | 
RTC_TR_MNU
)) >> 8);

1900 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)(
tm±ime
 & (
RTC_TR_ST
 | 
RTC_TR_SU
));

1901 
RTC_SèmpTimeSåu˘
->
RTC_H12
 = (
uöt8_t
)((
tm±ime
 & (
RTC_TR_PM
)) >> 16);

1904 
RTC_SèmpD©eSåu˘
->
RTC_Yór
 = 0;

1905 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_MT
 | 
RTC_DR_MU
)) >> 8);

1906 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)(
tmpd©e
 & (
RTC_DR_DT
 | 
RTC_DR_DU
));

1907 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)((
tmpd©e
 & (
RTC_DR_WDU
)) >> 13);

1910 i‡(
RTC_F‹m©
 =
RTC_F‹m©_BIN
)

1913 
RTC_SèmpTimeSåu˘
->
RTC_Hours
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Hours);

1914 
RTC_SèmpTimeSåu˘
->
RTC_Möuãs
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Minutes);

1915 
RTC_SèmpTimeSåu˘
->
RTC_Sec⁄ds
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampTimeStruct->RTC_Seconds);

1918 
RTC_SèmpD©eSåu˘
->
RTC_M⁄th
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Month);

1919 
RTC_SèmpD©eSåu˘
->
RTC_D©e
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_Date);

1920 
RTC_SèmpD©eSåu˘
->
RTC_WìkDay
 = (
uöt8_t
)
	`RTC_Bcd2ToByã
(RTC_StampDateStruct->RTC_WeekDay);

1922 
	}
}

1929 
uöt32_t
 
	$RTC_GëTimeSèmpSubSec⁄d
()

1932  (
uöt32_t
)(
RTC
->
TSSSR
);

1933 
	}
}

1967 
	$RTC_Tam≥rTriggîC⁄fig
(
uöt32_t
 
RTC_Tam≥r
, uöt32_à
RTC_Tam≥rTriggî
)

1970 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

1971 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_TRIGGER
(
RTC_Tam≥rTriggî
));

1974 i‡(
RTC_Tam≥rTriggî
 =
RTC_Tam≥rTriggî_RisögEdge
)

1977 
RTC
->
TAFCR
 &(
uöt32_t
)((uöt32_t)~(
RTC_Tam≥r
 << 1));

1982 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_Tam≥r
 << 1);

1984 
	}
}

1997 
	$RTC_Tam≥rCmd
(
uöt32_t
 
RTC_Tam≥r
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2000 
	`as£π_∑øm
(
	`IS_RTC_TAMPER
(
RTC_Tam≥r
));

2001 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2003 i‡(
NewSèã
 !
DISABLE
)

2006 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥r
;

2011 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_Tam≥r
;

2013 
	}
}

2028 
	$RTC_Tam≥rFûãrC⁄fig
(
uöt32_t
 
RTC_Tam≥rFûãr
)

2031 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_FILTER
(
RTC_Tam≥rFûãr
));

2034 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFLT
);

2037 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rFûãr
;

2038 
	}
}

2062 
	$RTC_Tam≥rSam∂ögFªqC⁄fig
(
uöt32_t
 
RTC_Tam≥rSam∂ögFªq
)

2065 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_SAMPLING_FREQ
(
RTC_Tam≥rSam∂ögFªq
));

2068 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPFREQ
);

2071 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rSam∂ögFªq
;

2072 
	}
}

2085 
	$RTC_Tam≥rPösPªch¨geDuøti⁄
(
uöt32_t
 
RTC_Tam≥rPªch¨geDuøti⁄
)

2088 
	`as£π_∑øm
(
	`IS_RTC_TAMPER_PRECHARGE_DURATION
(
RTC_Tam≥rPªch¨geDuøti⁄
));

2091 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_TAMPPRCH
);

2094 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_Tam≥rPªch¨geDuøti⁄
;

2095 
	}
}

2105 
	$RTC_TimeSèmpOnTam≥rDëe˘i⁄Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2108 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2110 i‡(
NewSèã
 !
DISABLE
)

2113 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPTS
;

2118 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPTS
;

2120 
	}
}

2128 
	$RTC_Tam≥rPuŒUpCmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

2131 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2133 i‡(
NewSèã
 !
DISABLE
)

2136 
RTC
->
TAFCR
 &(
uöt32_t
)~
RTC_TAFCR_TAMPPUDIS
;

2141 
RTC
->
TAFCR
 |(
uöt32_t
)
RTC_TAFCR_TAMPPUDIS
;

2143 
	}
}

2169 
	$RTC_WrôeBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
, uöt32_à
D©a
)

2171 
__IO
 
uöt32_t
 
tmp
 = 0;

2174 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2176 
tmp
 = 
RTC_BASE
 + 0x50;

2177 
tmp
 +(
RTC_BKP_DR
 * 4);

2180 *(
__IO
 
uöt32_t
 *)
tmp
 = (uöt32_t)
D©a
;

2181 
	}
}

2190 
uöt32_t
 
	$RTC_RódBackupRegi°î
(
uöt32_t
 
RTC_BKP_DR
)

2192 
__IO
 
uöt32_t
 
tmp
 = 0;

2195 
	`as£π_∑øm
(
	`IS_RTC_BKP
(
RTC_BKP_DR
));

2197 
tmp
 = 
RTC_BASE
 + 0x50;

2198 
tmp
 +(
RTC_BKP_DR
 * 4);

2201  (*(
__IO
 
uöt32_t
 *)
tmp
);

2202 
	}
}

2230 
	$RTC_OuçutTy≥C⁄fig
(
uöt32_t
 
RTC_OuçutTy≥
)

2233 
	`as£π_∑øm
(
	`IS_RTC_OUTPUT_TYPE
(
RTC_OuçutTy≥
));

2235 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_TAFCR_ALARMOUTTYPE
);

2236 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_OuçutTy≥
);

2237 
	}
}

2268 
Eº‹Sètus
 
	$RTC_SynchroShi·C⁄fig
(
uöt32_t
 
RTC_Shi·Add1S
, uöt32_à
RTC_Shi·SubFS
)

2270 
Eº‹Sètus
 
°©us
 = 
ERROR
;

2271 
uöt32_t
 
shpfcou¡
 = 0;

2274 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_ADD1S
(
RTC_Shi·Add1S
));

2275 
	`as£π_∑øm
(
	`IS_RTC_SHIFT_SUBFS
(
RTC_Shi·SubFS
));

2278 
RTC
->
WPR
 = 0xCA;

2279 
RTC
->
WPR
 = 0x53;

2282 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
)

2285 ((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë!
RESET
Ë&& (
shpfcou¡
 !
SHPF_TIMEOUT
))

2287 
shpfcou¡
++;

2292 i‡((
RTC
->
ISR
 & 
RTC_ISR_SHPF
Ë=
RESET
)

2295 if((
RTC
->
CR
 & 
RTC_CR_REFCKON
Ë=
RESET
)

2298 
RTC
->
SHIFTR
 = (
uöt32_t
)(uöt32_t)(
RTC_Shi·SubFS
Ë| (uöt32_t)(
RTC_Shi·Add1S
);

2300 if(
	`RTC_WaôF‹Synchro
(Ë=
ERROR
)

2302 
°©us
 = 
ERROR
;

2306 
°©us
 = 
SUCCESS
;

2311 
°©us
 = 
ERROR
;

2316 
°©us
 = 
ERROR
;

2320 
RTC
->
WPR
 = 0xFF;

2322  (
Eº‹Sètus
)(
°©us
);

2323 
	}
}

2384 
	$RTC_ITC⁄fig
(
uöt32_t
 
RTC_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2387 
	`as£π_∑øm
(
	`IS_RTC_CONFIG_IT
(
RTC_IT
));

2388 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2391 
RTC
->
WPR
 = 0xCA;

2392 
RTC
->
WPR
 = 0x53;

2394 i‡(
NewSèã
 !
DISABLE
)

2397 
RTC
->
CR
 |(
uöt32_t
)(
RTC_IT
 & ~
RTC_TAFCR_TAMPIE
);

2399 
RTC
->
TAFCR
 |(
uöt32_t
)(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2404 
RTC
->
CR
 &(
uöt32_t
)~(
RTC_IT
 & (uöt32_t)~
RTC_TAFCR_TAMPIE
);

2406 
RTC
->
TAFCR
 &(
uöt32_t
)~(
RTC_IT
 & 
RTC_TAFCR_TAMPIE
);

2409 
RTC
->
WPR
 = 0xFF;

2410 
	}
}

2434 
FœgSètus
 
	$RTC_GëFœgSètus
(
uöt32_t
 
RTC_FLAG
)

2436 
FœgSètus
 
bô°©us
 = 
RESET
;

2437 
uöt32_t
 
tm¥eg
 = 0;

2440 
	`as£π_∑øm
(
	`IS_RTC_GET_FLAG
(
RTC_FLAG
));

2443 
tm¥eg
 = (
uöt32_t
)(
RTC
->
ISR
 & 
RTC_FLAGS_MASK
);

2446 i‡((
tm¥eg
 & 
RTC_FLAG
Ë!(
uöt32_t
)
RESET
)

2448 
bô°©us
 = 
SET
;

2452 
bô°©us
 = 
RESET
;

2454  
bô°©us
;

2455 
	}
}

2472 
	$RTC_CÀ¨Fœg
(
uöt32_t
 
RTC_FLAG
)

2475 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_FLAG
(
RTC_FLAG
));

2478 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
RTC_FLAG
 | 
RTC_ISR_INIT
)& 0x0001FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2479 
	}
}

2494 
ITSètus
 
	$RTC_GëITSètus
(
uöt32_t
 
RTC_IT
)

2496 
ITSètus
 
bô°©us
 = 
RESET
;

2497 
uöt32_t
 
tm¥eg
 = 0, 
íabÀ°©us
 = 0;

2500 
	`as£π_∑øm
(
	`IS_RTC_GET_IT
(
RTC_IT
));

2503 
tm¥eg
 = (
uöt32_t
)(
RTC
->
TAFCR
 & (
RTC_TAFCR_TAMPIE
));

2506 
íabÀ°©us
 = (
uöt32_t
)((
RTC
->
CR
 & 
RTC_IT
Ë| (
tm¥eg
 & ((RTC_IT >> (RTC_IT >> 18)) >> 15)));

2509 
tm¥eg
 = (
uöt32_t
)((
RTC
->
ISR
 & (uöt32_t)(
RTC_IT
 >> 4)));

2512 i‡((
íabÀ°©us
 !(
uöt32_t
)
RESET
Ë&& ((
tm¥eg
 & 0x0000FFFF) != (uint32_t)RESET))

2514 
bô°©us
 = 
SET
;

2518 
bô°©us
 = 
RESET
;

2520  
bô°©us
;

2521 
	}
}

2536 
	$RTC_CÀ¨ITPídögBô
(
uöt32_t
 
RTC_IT
)

2538 
uöt32_t
 
tm¥eg
 = 0;

2541 
	`as£π_∑øm
(
	`IS_RTC_CLEAR_IT
(
RTC_IT
));

2544 
tm¥eg
 = (
uöt32_t
)(
RTC_IT
 >> 4);

2547 
RTC
->
ISR
 = (
uöt32_t
)((uöt32_t)(~((
tm¥eg
 | 
RTC_ISR_INIT
)& 0x0000FFFF) | (uint32_t)(RTC->ISR & RTC_ISR_INIT)));

2548 
	}
}

2559 
uöt8_t
 
	$RTC_ByãToBcd2
(
uöt8_t
 
VÆue
)

2561 
uöt8_t
 
bcdhigh
 = 0;

2563 
VÆue
 >= 10)

2565 
bcdhigh
++;

2566 
VÆue
 -= 10;

2569  ((
uöt8_t
)(
bcdhigh
 << 4Ë| 
VÆue
);

2570 
	}
}

2577 
uöt8_t
 
	$RTC_Bcd2ToByã
(
uöt8_t
 
VÆue
)

2579 
uöt8_t
 
tmp
 = 0;

2580 
tmp
 = ((
uöt8_t
)(
VÆue
 & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;

2581  (
tmp
 + (
VÆue
 & (
uöt8_t
)0x0F));

2582 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_spi.c

123 
	~"°m32f30x_•i.h
"

124 
	~"°m32f30x_rcc.h
"

138 
	#CR1_CLEAR_MASK
 ((
uöt16_t
)0x3040)

	)

139 
	#CR2_LDMA_MASK
 ((
uöt16_t
)0x9FFF)

	)

141 
	#I2SCFGR_CLEAR_MASK
 ((
uöt16_t
)0xF040)

	)

190 
	$SPI_I2S_DeInô
(
SPI_Ty≥Def
* 
SPIx
)

193 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

195 i‡(
SPIx
 =
SPI1
)

198 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
ENABLE
);

200 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_SPI1
, 
DISABLE
);

202 i‡(
SPIx
 =
SPI2
)

205 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
ENABLE
);

207 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI2
, 
DISABLE
);

211 i‡(
SPIx
 =
SPI3
)

214 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
ENABLE
);

216 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_SPI3
, 
DISABLE
);

219 
	}
}

226 
	$SPI_Såu˘Inô
(
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

230 
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 = 
SPI_Dúe˘i⁄_2Löes_FuŒDu∂ex
;

232 
SPI_InôSåu˘
->
SPI_Mode
 = 
SPI_Mode_Sœve
;

234 
SPI_InôSåu˘
->
SPI_D©aSize
 = 
SPI_D©aSize_8b
;

236 
SPI_InôSåu˘
->
SPI_CPOL
 = 
SPI_CPOL_Low
;

238 
SPI_InôSåu˘
->
SPI_CPHA
 = 
SPI_CPHA_1Edge
;

240 
SPI_InôSåu˘
->
SPI_NSS
 = 
SPI_NSS_H¨d
;

242 
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
 = 
SPI_BaudR©ePªsˇÀr_2
;

244 
SPI_InôSåu˘
->
SPI_Fú°Bô
 = 
SPI_Fú°Bô_MSB
;

246 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
 = 7;

247 
	}
}

257 
	$SPI_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
SPI_InôTy≥Def
* 
SPI_InôSåu˘
)

259 
uöt16_t
 
tm¥eg
 = 0;

262 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

265 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION_MODE
(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
));

266 
	`as£π_∑øm
(
	`IS_SPI_MODE
(
SPI_InôSåu˘
->
SPI_Mode
));

267 
	`as£π_∑øm
(
	`IS_SPI_DATA_SIZE
(
SPI_InôSåu˘
->
SPI_D©aSize
));

268 
	`as£π_∑øm
(
	`IS_SPI_CPOL
(
SPI_InôSåu˘
->
SPI_CPOL
));

269 
	`as£π_∑øm
(
	`IS_SPI_CPHA
(
SPI_InôSåu˘
->
SPI_CPHA
));

270 
	`as£π_∑øm
(
	`IS_SPI_NSS
(
SPI_InôSåu˘
->
SPI_NSS
));

271 
	`as£π_∑øm
(
	`IS_SPI_BAUDRATE_PRESCALER
(
SPI_InôSåu˘
->
SPI_BaudR©ePªsˇÀr
));

272 
	`as£π_∑øm
(
	`IS_SPI_FIRST_BIT
(
SPI_InôSåu˘
->
SPI_Fú°Bô
));

273 
	`as£π_∑øm
(
	`IS_SPI_CRC_POLYNOMIAL
(
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
));

276 if(
SPI_InôSåu˘
->
SPI_Mode
 =
SPI_Mode_Ma°î
)

280 
tm¥eg
 = 
SPIx
->
CR1
;

282 
tm¥eg
 &
CR1_CLEAR_MASK
;

291 
tm¥eg
 |(
uöt16_t
)((uöt16_t)(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
) |

292 (
uöt16_t
)((uöt16_t)(
SPI_InôSåu˘
->
SPI_CPOL
 | SPI_InôSåu˘->
SPI_CPHA
) |

293 (
uöt16_t
)((uöt16_t)(
SPI_InôSåu˘
->
SPI_NSS
 | SPI_InôSåu˘->
SPI_BaudR©ePªsˇÀr
) |

294 
SPI_InôSåu˘
->
SPI_Fú°Bô
)));

296 
SPIx
->
CR1
 = 
tm¥eg
;

299 
tm¥eg
 = 
SPIx
->
CR2
;

301 
tm¥eg
 &(
uöt16_t
)~
SPI_CR2_DS
;

303 
tm¥eg
 |(
uöt16_t
)(
SPI_InôSåu˘
->
SPI_D©aSize
);

305 
SPIx
->
CR2
 = 
tm¥eg
;

312 
tm¥eg
 = 
SPIx
->
CR2
;

314 
tm¥eg
 &(
uöt16_t
)~
SPI_CR2_DS
;

316 
tm¥eg
 |(
uöt16_t
)(
SPI_InôSåu˘
->
SPI_D©aSize
);

318 
SPIx
->
CR2
 = 
tm¥eg
;

321 
tm¥eg
 = 
SPIx
->
CR1
;

323 
tm¥eg
 &
CR1_CLEAR_MASK
;

332 
tm¥eg
 |(
uöt16_t
)((uöt16_t)(
SPI_InôSåu˘
->
SPI_Dúe˘i⁄
 | SPI_InôSåu˘->
SPI_Mode
) |

333 (
uöt16_t
)((uöt16_t)(
SPI_InôSåu˘
->
SPI_CPOL
 | SPI_InôSåu˘->
SPI_CPHA
) |

334 (
uöt16_t
)((uöt16_t)(
SPI_InôSåu˘
->
SPI_NSS
 | SPI_InôSåu˘->
SPI_BaudR©ePªsˇÀr
) |

335 
SPI_InôSåu˘
->
SPI_Fú°Bô
)));

338 
SPIx
->
CR1
 = 
tm¥eg
;

342 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SMOD
);

346 
SPIx
->
CRCPR
 = 
SPI_InôSåu˘
->
SPI_CRCPﬁynomül
;

347 
	}
}

354 
	$I2S_Såu˘Inô
(
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

358 
I2S_InôSåu˘
->
I2S_Mode
 = 
I2S_Mode_SœveTx
;

361 
I2S_InôSåu˘
->
I2S_Sènd¨d
 = 
I2S_Sènd¨d_Phûlùs
;

364 
I2S_InôSåu˘
->
I2S_D©aF‹m©
 = 
I2S_D©aF‹m©_16b
;

367 
I2S_InôSåu˘
->
I2S_MCLKOuçut
 = 
I2S_MCLKOuçut_DißbÀ
;

370 
I2S_InôSåu˘
->
I2S_AudioFªq
 = 
I2S_AudioFªq_DeÁu…
;

373 
I2S_InôSåu˘
->
I2S_CPOL
 = 
I2S_CPOL_Low
;

374 
	}
}

391 
	$I2S_Inô
(
SPI_Ty≥Def
* 
SPIx
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

393 
uöt16_t
 
tm¥eg
 = 0, 
i2sdiv
 = 2, 
i2sodd
 = 0, 
∑ckëÀngth
 = 1;

394 
uöt32_t
 
tmp
 = 0;

395 
RCC_ClocksTy≥Def
 
RCC_Clocks
;

396 
uöt32_t
 
sour˚˛ock
 = 0;

399 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH
(
SPIx
));

400 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

401 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

402 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

403 
	`as£π_∑øm
(
	`IS_I2S_MCLK_OUTPUT
(
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

404 
	`as£π_∑øm
(
	`IS_I2S_AUDIO_FREQ
(
I2S_InôSåu˘
->
I2S_AudioFªq
));

405 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

409 
SPIx
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

410 
SPIx
->
I2SPR
 = 0x0002;

413 
tm¥eg
 = 
SPIx
->
I2SCFGR
;

416 if(
I2S_InôSåu˘
->
I2S_AudioFªq
 =
I2S_AudioFªq_DeÁu…
)

418 
i2sodd
 = (
uöt16_t
)0;

419 
i2sdiv
 = (
uöt16_t
)2;

425 if(
I2S_InôSåu˘
->
I2S_D©aF‹m©
 =
I2S_D©aF‹m©_16b
)

428 
∑ckëÀngth
 = 1;

433 
∑ckëÀngth
 = 2;

437 
	`RCC_GëClocksFªq
(&
RCC_Clocks
);

440 
sour˚˛ock
 = 
RCC_Clocks
.
SYSCLK_Fªquícy
;

443 if(
I2S_InôSåu˘
->
I2S_MCLKOuçut
 =
I2S_MCLKOuçut_E«bÀ
)

446 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / 256Ë* 10Ë/ 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

451 
tmp
 = (
uöt16_t
)(((((
sour˚˛ock
 / (32 * 
∑ckëÀngth
)Ë*10 ) / 
I2S_InôSåu˘
->
I2S_AudioFªq
)) + 5);

455 
tmp
 =Åmp / 10;

458 
i2sodd
 = (
uöt16_t
)(
tmp
 & (uint16_t)0x0001);

461 
i2sdiv
 = (
uöt16_t
)((
tmp
 - 
i2sodd
) / 2);

464 
i2sodd
 = (
uöt16_t
) (i2sodd << 8);

468 i‡((
i2sdiv
 < 2) || (i2sdiv > 0xFF))

471 
i2sdiv
 = 2;

472 
i2sodd
 = 0;

476 
SPIx
->
I2SPR
 = (
uöt16_t
)(
i2sdiv
 | (uöt16_t)(
i2sodd
 | (uöt16_t)
I2S_InôSåu˘
->
I2S_MCLKOuçut
));

479 
tm¥eg
 |(
uöt16_t
)((uöt16_t)(
SPI_I2SCFGR_I2SMOD
 | 
I2S_InôSåu˘
->
I2S_Mode
) | \

480 (
uöt16_t
)((uöt16_t)((uöt16_t)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 |I2S_InôSåu˘->
I2S_D©aF‹m©
) |\

481 
I2S_InôSåu˘
->
I2S_CPOL
)));

484 
SPIx
->
I2SCFGR
 = 
tm¥eg
;

485 
	}
}

494 
	$SPI_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

497 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

498 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

500 i‡(
NewSèã
 !
DISABLE
)

503 
SPIx
->
CR1
 |
SPI_CR1_SPE
;

508 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_SPE
);

510 
	}
}

524 
	$SPI_TIModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

527 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

528 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

530 i‡(
NewSèã
 !
DISABLE
)

533 
SPIx
->
CR2
 |
SPI_CR2_FRF
;

538 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_FRF
);

540 
	}
}

550 
	$I2S_Cmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

553 
	`as£π_∑øm
(
	`IS_SPI_23_PERIPH_EXT
(
SPIx
));

554 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

555 i‡(
NewSèã
 !
DISABLE
)

558 
SPIx
->
I2SCFGR
 |
SPI_I2SCFGR_I2SE
;

563 
SPIx
->
I2SCFGR
 &(
uöt16_t
)~((uöt16_t)
SPI_I2SCFGR_I2SE
);

565 
	}
}

587 
	$SPI_D©aSizeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_D©aSize
)

589 
uöt16_t
 
tm¥eg
 = 0;

592 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

593 
	`as£π_∑øm
(
	`IS_SPI_DATA_SIZE
(
SPI_D©aSize
));

595 
tm¥eg
 = 
SPIx
->
CR2
;

597 
tm¥eg
 &(
uöt16_t
)~
SPI_CR2_DS
;

599 
tm¥eg
 |
SPI_D©aSize
;

600 
SPIx
->
CR2
 = 
tm¥eg
;

601 
	}
}

614 
	$SPI_RxFIFOThªshﬁdC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_RxFIFOThªshﬁd
)

617 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

618 
	`as£π_∑øm
(
	`IS_SPI_RX_FIFO_THRESHOLD
(
SPI_RxFIFOThªshﬁd
));

621 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_FRXTH
);

624 
SPIx
->
CR2
 |
SPI_RxFIFOThªshﬁd
;

625 
	}
}

636 
	$SPI_BiDúe˘i⁄ÆLöeC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_Dúe˘i⁄
)

639 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

640 
	`as£π_∑øm
(
	`IS_SPI_DIRECTION
(
SPI_Dúe˘i⁄
));

641 i‡(
SPI_Dúe˘i⁄
 =
SPI_Dúe˘i⁄_Tx
)

644 
SPIx
->
CR1
 |
SPI_Dúe˘i⁄_Tx
;

649 
SPIx
->
CR1
 &
SPI_Dúe˘i⁄_Rx
;

651 
	}
}

664 
	$SPI_NSSI¡î«lSo·w¨eC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_NSSI¡î«lSo·
)

667 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

668 
	`as£π_∑øm
(
	`IS_SPI_NSS_INTERNAL
(
SPI_NSSI¡î«lSo·
));

670 i‡(
SPI_NSSI¡î«lSo·
 !
SPI_NSSI¡î«lSo·_Re£t
)

673 
SPIx
->
CR1
 |
SPI_NSSI¡î«lSo·_Së
;

678 
SPIx
->
CR1
 &
SPI_NSSI¡î«lSo·_Re£t
;

680 
	}
}

701 
	$I2S_FuŒDu∂exC⁄fig
(
SPI_Ty≥Def
* 
I2Sxext
, 
I2S_InôTy≥Def
* 
I2S_InôSåu˘
)

703 
uöt16_t
 
tm¥eg
 = 0, 
tmp
 = 0;

706 
	`as£π_∑øm
(
	`IS_I2S_EXT_PERIPH
(
I2Sxext
));

707 
	`as£π_∑øm
(
	`IS_I2S_MODE
(
I2S_InôSåu˘
->
I2S_Mode
));

708 
	`as£π_∑øm
(
	`IS_I2S_STANDARD
(
I2S_InôSåu˘
->
I2S_Sènd¨d
));

709 
	`as£π_∑øm
(
	`IS_I2S_DATA_FORMAT
(
I2S_InôSåu˘
->
I2S_D©aF‹m©
));

710 
	`as£π_∑øm
(
	`IS_I2S_CPOL
(
I2S_InôSåu˘
->
I2S_CPOL
));

714 
I2Sxext
->
I2SCFGR
 &
I2SCFGR_CLEAR_MASK
;

715 
I2Sxext
->
I2SPR
 = 0x0002;

718 
tm¥eg
 = 
I2Sxext
->
I2SCFGR
;

721 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îTx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveTx
))

723 
tmp
 = 
I2S_Mode_SœveRx
;

727 i‡((
I2S_InôSåu˘
->
I2S_Mode
 =
I2S_Mode_Ma°îRx
Ë|| (I2S_InôSåu˘->I2S_Modê=
I2S_Mode_SœveRx
))

729 
tmp
 = 
I2S_Mode_SœveTx
;

735 
tm¥eg
 |(
uöt16_t
)((uöt16_t)
SPI_I2SCFGR_I2SMOD
 | (uöt16_t)(
tmp
 | \

736 (
uöt16_t
)(
I2S_InôSåu˘
->
I2S_Sènd¨d
 | (uöt16_t)(I2S_InôSåu˘->
I2S_D©aF‹m©
 | \

737 (
uöt16_t
)
I2S_InôSåu˘
->
I2S_CPOL
))));

740 
I2Sxext
->
I2SCFGR
 = 
tm¥eg
;

741 
	}
}

752 
	$SPI_SSOuçutCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

755 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

756 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

757 i‡(
NewSèã
 !
DISABLE
)

760 
SPIx
->
CR2
 |(
uöt16_t
)
SPI_CR2_SSOE
;

765 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_SSOE
);

767 
	}
}

781 
	$SPI_NSSPul£ModeCmd
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

784 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

785 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

787 i‡(
NewSèã
 !
DISABLE
)

790 
SPIx
->
CR2
 |
SPI_CR2_NSSP
;

795 
SPIx
->
CR2
 &(
uöt16_t
)~((uöt16_t)
SPI_CR2_NSSP
);

797 
	}
}

830 
	$SPI_SídD©a8
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
D©a
)

832 
uöt32_t
 
•ixba£
 = 0x00;

835 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

837 
•ixba£
 = (
uöt32_t
)
SPIx
;

838 
•ixba£
 += 0x0C;

840 *(
__IO
 
uöt8_t
 *Ë
•ixba£
 = 
D©a
;

841 
	}
}

850 
	$SPI_I2S_SídD©a16
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
D©a
)

853 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

855 
SPIx
->
DR
 = (
uöt16_t
)
D©a
;

856 
	}
}

863 
uöt8_t
 
	$SPI_Re˚iveD©a8
(
SPI_Ty≥Def
* 
SPIx
)

865 
uöt32_t
 
•ixba£
 = 0x00;

868 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

870 
•ixba£
 = (
uöt32_t
)
SPIx
;

871 
•ixba£
 += 0x0C;

873  *(
__IO
 
uöt8_t
 *Ë
•ixba£
;

874 
	}
}

882 
uöt16_t
 
	$SPI_I2S_Re˚iveD©a16
(
SPI_Ty≥Def
* 
SPIx
)

885 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

887  
SPIx
->
DR
;

888 
	}
}

964 
	$SPI_CRCLígthC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_CRCLígth
)

967 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

968 
	`as£π_∑øm
(
	`IS_SPI_CRC_LENGTH
(
SPI_CRCLígth
));

971 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_CRCL
);

974 
SPIx
->
CR1
 |
SPI_CRCLígth
;

975 
	}
}

984 
	$SPI_CÆcuœãCRC
(
SPI_Ty≥Def
* 
SPIx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

987 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

988 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

990 i‡(
NewSèã
 !
DISABLE
)

993 
SPIx
->
CR1
 |
SPI_CR1_CRCEN
;

998 
SPIx
->
CR1
 &(
uöt16_t
)~((uöt16_t)
SPI_CR1_CRCEN
);

1000 
	}
}

1007 
	$SPI_TønsmôCRC
(
SPI_Ty≥Def
* 
SPIx
)

1010 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

1013 
SPIx
->
CR1
 |
SPI_CR1_CRCNEXT
;

1014 
	}
}

1025 
uöt16_t
 
	$SPI_GëCRC
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_CRC
)

1027 
uöt16_t
 
¸¸eg
 = 0;

1029 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

1030 
	`as£π_∑øm
(
	`IS_SPI_CRC
(
SPI_CRC
));

1032 i‡(
SPI_CRC
 !
SPI_CRC_Rx
)

1035 
¸¸eg
 = 
SPIx
->
TXCRCR
;

1040 
¸¸eg
 = 
SPIx
->
RXCRCR
;

1043  
¸¸eg
;

1044 
	}
}

1051 
uöt16_t
 
	$SPI_GëCRCPﬁynomül
(
SPI_Ty≥Def
* 
SPIx
)

1054 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

1057  
SPIx
->
CRCPR
;

1058 
	}
}

1088 
	$SPI_I2S_DMACmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1091 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1092 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1093 
	`as£π_∑øm
(
	`IS_SPI_I2S_DMA_REQ
(
SPI_I2S_DMAReq
));

1095 i‡(
NewSèã
 !
DISABLE
)

1098 
SPIx
->
CR2
 |
SPI_I2S_DMAReq
;

1103 
SPIx
->
CR2
 &(
uöt16_t
)~
SPI_I2S_DMAReq
;

1105 
	}
}

1125 
	$SPI_La°DMATøns„rCmd
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_La°DMATøns„r
)

1128 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH
(
SPIx
));

1129 
	`as£π_∑øm
(
	`IS_SPI_LAST_DMA_TRANSFER
(
SPI_La°DMATøns„r
));

1132 
SPIx
->
CR2
 &
CR2_LDMA_MASK
;

1135 
SPIx
->
CR2
 |
SPI_La°DMATøns„r
;

1136 
	}
}

1224 
	$SPI_I2S_ITC⁄fig
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1226 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0 ;

1229 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1230 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1231 
	`as£π_∑øm
(
	`IS_SPI_I2S_CONFIG_IT
(
SPI_I2S_IT
));

1234 
ôpos
 = 
SPI_I2S_IT
 >> 4;

1237 
ômask
 = (
uöt16_t
)1 << (uöt16_t)
ôpos
;

1239 i‡(
NewSèã
 !
DISABLE
)

1242 
SPIx
->
CR2
 |
ômask
;

1247 
SPIx
->
CR2
 &(
uöt16_t
)~
ômask
;

1249 
	}
}

1260 
uöt16_t
 
	$SPI_GëTønsmissi⁄FIFOSètus
(
SPI_Ty≥Def
* 
SPIx
)

1263  (
uöt16_t
)((
SPIx
->
SR
 & 
SPI_SR_FTLVL
));

1264 
	}
}

1275 
uöt16_t
 
	$SPI_GëRe˚±i⁄FIFOSètus
(
SPI_Ty≥Def
* 
SPIx
)

1278  (
uöt16_t
)((
SPIx
->
SR
 & 
SPI_SR_FRLVL
));

1279 
	}
}

1298 
FœgSètus
 
	$SPI_I2S_GëFœgSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1300 
FœgSètus
 
bô°©us
 = 
RESET
;

1302 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1303 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_FLAG
(
SPI_I2S_FLAG
));

1306 i‡((
SPIx
->
SR
 & 
SPI_I2S_FLAG
Ë!(
uöt16_t
)
RESET
)

1309 
bô°©us
 = 
SET
;

1314 
bô°©us
 = 
RESET
;

1317  
bô°©us
;

1318 
	}
}

1334 
	$SPI_I2S_CÀ¨Fœg
(
SPI_Ty≥Def
* 
SPIx
, 
uöt16_t
 
SPI_I2S_FLAG
)

1337 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1338 
	`as£π_∑øm
(
	`IS_SPI_CLEAR_FLAG
(
SPI_I2S_FLAG
));

1341 
SPIx
->
SR
 = (
uöt16_t
)~
SPI_I2S_FLAG
;

1342 
	}
}

1358 
ITSètus
 
	$SPI_I2S_GëITSètus
(
SPI_Ty≥Def
* 
SPIx
, 
uöt8_t
 
SPI_I2S_IT
)

1360 
ITSètus
 
bô°©us
 = 
RESET
;

1361 
uöt16_t
 
ôpos
 = 0, 
ômask
 = 0, 
íabÀ°©us
 = 0;

1364 
	`as£π_∑øm
(
	`IS_SPI_ALL_PERIPH_EXT
(
SPIx
));

1365 
	`as£π_∑øm
(
	`IS_SPI_I2S_GET_IT
(
SPI_I2S_IT
));

1368 
ôpos
 = 0x01 << (
SPI_I2S_IT
 & 0x0F);

1371 
ômask
 = 
SPI_I2S_IT
 >> 4;

1374 
ômask
 = 0x01 << itmask;

1377 
íabÀ°©us
 = (
SPIx
->
CR2
 & 
ômask
) ;

1380 i‡(((
SPIx
->
SR
 & 
ôpos
Ë!(
uöt16_t
)
RESET
Ë&& 
íabÀ°©us
)

1383 
bô°©us
 = 
SET
;

1388 
bô°©us
 = 
RESET
;

1391  
bô°©us
;

1392 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_syscfg.c

49 
	~"°m32f30x_syscfg.h
"

63 
	#CFGR1_CLEAR_MASK
 ((
uöt32_t
)0x7C000000)

	)

66 
	#SYSCFG_OFFSET
 (
SYSCFG_BASE
 - 
PERIPH_BASE
)

	)

70 
	#CFGR1_OFFSET
 (
SYSCFG_OFFSET
 + 0x00)

	)

71 
	#USBITRMP_BôNumbî
 0x05

	)

72 
	#CFGR1_USBITRMP_BB
 (
PERIPH_BB_BASE
 + (
CFGR1_OFFSET
 * 32Ë+ (
USBITRMP_BôNumbî
 * 4))

	)

76 
	#CFGR2_OFFSET
 (
SYSCFG_OFFSET
 + 0x18)

	)

77 
	#BYPADDRPAR_BôNumbî
 0x04

	)

78 
	#CFGR1_BYPADDRPAR_BB
 (
PERIPH_BB_BASE
 + (
CFGR2_OFFSET
 * 32Ë+ (
BYPADDRPAR_BôNumbî
 * 4))

	)

108 
	$SYSCFG_DeInô
()

111 
SYSCFG
->
CFGR1
 &
SYSCFG_CFGR1_MEM_MODE
;

113 
SYSCFG
->
CFGR1
 |= 0x7C000000;

115 
SYSCFG
->
RCR
 = 0x00000000;

117 
SYSCFG
->
EXTICR
[0] = 0;

118 
SYSCFG
->
EXTICR
[1] = 0;

119 
SYSCFG
->
EXTICR
[2] = 0;

120 
SYSCFG
->
EXTICR
[3] = 0;

122 
SYSCFG
->
CFGR2
 = 0;

123 
	}
}

134 
	$SYSCFG_Mem‹yRem≠C⁄fig
(
uöt32_t
 
SYSCFG_Mem‹yRem≠
)

136 
uöt32_t
 
tmpcfgr1
 = 0;

139 
	`as£π_∑øm
(
	`IS_SYSCFG_MEMORY_REMAP
(
SYSCFG_Mem‹yRem≠
));

142 
tmpcfgr1
 = 
SYSCFG
->
CFGR1
;

145 
tmpcfgr1
 &(
uöt32_t
Ë(~
SYSCFG_CFGR1_MEM_MODE
);

148 
tmpcfgr1
 |(
uöt32_t
Ë
SYSCFG_Mem‹yRem≠
;

151 
SYSCFG
->
CFGR1
 = 
tmpcfgr1
;

152 
	}
}

175 
	$SYSCFG_DMACh™√lRem≠C⁄fig
(
uöt32_t
 
SYSCFG_DMARem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

178 
	`as£π_∑øm
(
	`IS_SYSCFG_DMA_REMAP
(
SYSCFG_DMARem≠
));

179 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

181 i‡(
NewSèã
 !
DISABLE
)

184 
SYSCFG
->
CFGR1
 |(
uöt32_t
)
SYSCFG_DMARem≠
;

189 
SYSCFG
->
CFGR1
 &(
uöt32_t
)(~
SYSCFG_DMARem≠
);

191 
	}
}

205 
	$SYSCFG_TriggîRem≠C⁄fig
(
uöt32_t
 
SYSCFG_TriggîRem≠
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

208 
	`as£π_∑øm
(
	`IS_SYSCFG_TRIGGER_REMAP
(
SYSCFG_TriggîRem≠
));

209 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

211 i‡(
NewSèã
 !
DISABLE
)

214 
SYSCFG
->
CFGR1
 |(
uöt32_t
)
SYSCFG_TriggîRem≠
;

219 
SYSCFG
->
CFGR1
 &(
uöt32_t
)(~
SYSCFG_TriggîRem≠
);

221 
	}
}

235 
	$SYSCFG_EncodîRem≠C⁄fig
(
uöt32_t
 
SYSCFG_EncodîRem≠
)

238 
	`as£π_∑øm
(
	`IS_SYSCFG_ENCODER_REMAP
(
SYSCFG_EncodîRem≠
));

241 
SYSCFG
->
CFGR1
 &(
uöt32_t
)(~
SYSCFG_CFGR1_ENCODER_MODE
);

244 
SYSCFG
->
CFGR1
 |(
uöt32_t
)(
SYSCFG_EncodîRem≠
);

245 
	}
}

261 
	$SYSCFG_USBI¡îru±LöeRem≠Cmd
(
Fun˘i⁄ÆSèã
 
NewSèã
)

264 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

267 *(
__IO
 
uöt32_t
 *Ë
CFGR1_USBITRMP_BB
 = (uöt32_t)
NewSèã
;

268 
	}
}

293 
	$SYSCFG_I2CFa°ModePlusC⁄fig
(
uöt32_t
 
SYSCFG_I2CFa°ModePlus
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

296 
	`as£π_∑øm
(
	`IS_SYSCFG_I2C_FMP
(
SYSCFG_I2CFa°ModePlus
));

297 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

299 i‡(
NewSèã
 !
DISABLE
)

302 
SYSCFG
->
CFGR1
 |(
uöt32_t
)
SYSCFG_I2CFa°ModePlus
;

307 
SYSCFG
->
CFGR1
 &(
uöt32_t
)(~
SYSCFG_I2CFa°ModePlus
);

309 
	}
}

325 
	$SYSCFG_ITC⁄fig
(
uöt32_t
 
SYSCFG_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

328 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

329 
	`as£π_∑øm
(
	`IS_SYSCFG_IT
(
SYSCFG_IT
));

331 i‡(
NewSèã
 !
DISABLE
)

334 
SYSCFG
->
CFGR1
 |
SYSCFG_IT
;

339 
SYSCFG
->
CFGR1
 &((
uöt32_t
)~
SYSCFG_IT
);

341 
	}
}

351 
	$SYSCFG_EXTILöeC⁄fig
(
uöt8_t
 
EXTI_P‹tSour˚GPIOx
, uöt8_à
EXTI_PöSour˚x
)

353 
uöt32_t
 
tmp
 = 0x00;

356 
	`as£π_∑øm
(
	`IS_EXTI_PORT_SOURCE
(
EXTI_P‹tSour˚GPIOx
));

357 
	`as£π_∑øm
(
	`IS_EXTI_PIN_SOURCE
(
EXTI_PöSour˚x
));

359 
tmp
 = ((
uöt32_t
)0x0FË<< (0x04 * (
EXTI_PöSour˚x
 & (
uöt8_t
)0x03));

360 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] &~
tmp
;

361 
SYSCFG
->
EXTICR
[
EXTI_PöSour˚x
 >> 0x02] |(((
uöt32_t
)
EXTI_P‹tSour˚GPIOx
Ë<< (0x04 * (EXTI_PöSour˚x & (
uöt8_t
)0x03)));

362 
	}
}

375 
	$SYSCFG_BªakC⁄fig
(
uöt32_t
 
SYSCFG_Bªak
)

378 
	`as£π_∑øm
(
	`IS_SYSCFG_LOCK_CONFIG
(
SYSCFG_Bªak
));

380 
SYSCFG
->
CFGR2
 |(
uöt32_t
Ë
SYSCFG_Bªak
;

381 
	}
}

390 
	$SYSCFG_By∑ssP¨ôyCheckDißbÀ
()

393 *(
__IO
 
uöt32_t
 *Ë
CFGR1_BYPADDRPAR_BB
 = (uint32_t)0x00000001;

394 
	}
}

403 
	$SYSCFG_SRAMWRPE«bÀ
(
uöt32_t
 
SYSCFG_SRAMWRP
)

406 
	`as£π_∑øm
(
	`IS_SYSCFG_PAGE
(
SYSCFG_SRAMWRP
));

409 
SYSCFG
->
RCR
 |(
uöt32_t
)
SYSCFG_SRAMWRP
;

410 
	}
}

419 
FœgSètus
 
	$SYSCFG_GëFœgSètus
(
uöt32_t
 
SYSCFG_Fœg
)

421 
FœgSètus
 
bô°©us
 = 
RESET
;

424 
	`as£π_∑øm
(
	`IS_SYSCFG_FLAG
(
SYSCFG_Fœg
));

427 i‡((
SYSCFG
->
CFGR2
 & 
SYSCFG_CFGR2_SRAM_PE
Ë!(
uöt32_t
)
RESET
)

430 
bô°©us
 = 
SET
;

435 
bô°©us
 = 
RESET
;

438  
bô°©us
;

439 
	}
}

448 
	$SYSCFG_CÀ¨Fœg
(
uöt32_t
 
SYSCFG_Fœg
)

451 
	`as£π_∑øm
(
	`IS_SYSCFG_FLAG
(
SYSCFG_Fœg
));

453 
SYSCFG
->
CFGR2
 |(
uöt32_t
Ë
SYSCFG_Fœg
;

454 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_tim.c

120 
	~"°m32f30x_tim.h
"

121 
	~"°m32f30x_rcc.h
"

136 
	#SMCR_ETR_MASK
 ((
uöt16_t
)0x00FF)

	)

137 
	#CCMR_OFFSET
 ((
uöt16_t
)0x0018)

	)

138 
	#CCER_CCE_SET
 ((
uöt16_t
)0x0001)

	)

139 
	#CCER_CCNE_SET
 ((
uöt16_t
)0x0004)

	)

140 
	#CCMR_OC13M_MASK
 ((
uöt32_t
)0xFFFEFF8F)

	)

141 
	#CCMR_OC24M_MASK
 ((
uöt32_t
)0xFEFF8FFF)

	)

146 
TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

147 
uöt16_t
 
TIM_ICFûãr
);

148 
TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

149 
uöt16_t
 
TIM_ICFûãr
);

150 
TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

151 
uöt16_t
 
TIM_ICFûãr
);

152 
TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

153 
uöt16_t
 
TIM_ICFûãr
);

199 
	$TIM_DeInô
(
TIM_Ty≥Def
* 
TIMx
)

202 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

204 i‡(
TIMx
 =
TIM1
)

206 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
ENABLE
);

207 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM1
, 
DISABLE
);

209 i‡(
TIMx
 =
TIM2
)

211 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
ENABLE
);

212 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM2
, 
DISABLE
);

214 i‡(
TIMx
 =
TIM3
)

216 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
ENABLE
);

217 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM3
, 
DISABLE
);

219 i‡(
TIMx
 =
TIM4
)

221 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
ENABLE
);

222 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM4
, 
DISABLE
);

224 i‡(
TIMx
 =
TIM6
)

226 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
ENABLE
);

227 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM6
, 
DISABLE
);

229 i‡(
TIMx
 =
TIM7
)

231 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
ENABLE
);

232 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_TIM7
, 
DISABLE
);

234 i‡(
TIMx
 =
TIM8
)

236 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
ENABLE
);

237 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM8
, 
DISABLE
);

239 i‡(
TIMx
 =
TIM15
)

241 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
ENABLE
);

242 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM15
, 
DISABLE
);

244 i‡(
TIMx
 =
TIM16
)

246 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
ENABLE
);

247 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM16
, 
DISABLE
);

251 i‡(
TIMx
 =
TIM17
)

253 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
ENABLE
);

254 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_TIM17
, 
DISABLE
);

257 
	}
}

267 
	$TIM_TimeBa£Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

269 
uöt16_t
 
tmp¸1
 = 0;

272 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

273 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
));

274 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
));

276 
tmp¸1
 = 
TIMx
->
CR1
;

278 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM2
) ||

279 (
TIMx
 =
TIM3
)|| (TIMx =
TIM4
))

282 
tmp¸1
 &(
uöt16_t
)(~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
));

283 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
;

286 if((
TIMx
 !
TIM6
Ë&& (TIMx !
TIM7
))

289 
tmp¸1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

290 
tmp¸1
 |(
uöt32_t
)
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
;

293 
TIMx
->
CR1
 = 
tmp¸1
;

296 
TIMx
->
ARR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 ;

299 
TIMx
->
PSC
 = 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
;

301 i‡((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
)|| (TIMx =
TIM15
) ||

302 (
TIMx
 =
TIM16
Ë|| (TIMx =
TIM17
))

305 
TIMx
->
RCR
 = 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
;

310 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode_Immedüã
;

311 
	}
}

319 
	$TIM_TimeBa£Såu˘Inô
(
TIM_TimeBa£InôTy≥Def
* 
TIM_TimeBa£InôSåu˘
)

322 
TIM_TimeBa£InôSåu˘
->
TIM_Pîiod
 = 0xFFFFFFFF;

323 
TIM_TimeBa£InôSåu˘
->
TIM_PªsˇÀr
 = 0x0000;

324 
TIM_TimeBa£InôSåu˘
->
TIM_ClockDivisi⁄
 = 
TIM_CKD_DIV1
;

325 
TIM_TimeBa£InôSåu˘
->
TIM_Cou¡îMode
 = 
TIM_Cou¡îMode_Up
;

326 
TIM_TimeBa£InôSåu˘
->
TIM_Rïëôi⁄Cou¡î
 = 0x0000;

327 
	}
}

339 
	$TIM_PªsˇÀrC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
PªsˇÀr
, uöt16_à
TIM_PSCRñﬂdMode
)

342 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

343 
	`as£π_∑øm
(
	`IS_TIM_PRESCALER_RELOAD
(
TIM_PSCRñﬂdMode
));

345 
TIMx
->
PSC
 = 
PªsˇÀr
;

347 
TIMx
->
EGR
 = 
TIM_PSCRñﬂdMode
;

348 
	}
}

362 
	$TIM_Cou¡îModeC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Cou¡îMode
)

364 
uöt16_t
 
tmp¸1
 = 0;

367 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

368 
	`as£π_∑øm
(
	`IS_TIM_COUNTER_MODE
(
TIM_Cou¡îMode
));

370 
tmp¸1
 = 
TIMx
->
CR1
;

373 
tmp¸1
 &(
uöt16_t
)~(
TIM_CR1_DIR
 | 
TIM_CR1_CMS
);

376 
tmp¸1
 |
TIM_Cou¡îMode
;

379 
TIMx
->
CR1
 = 
tmp¸1
;

380 
	}
}

388 
	$TIM_SëCou¡î
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Cou¡î
)

391 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

394 
TIMx
->
CNT
 = 
Cou¡î
;

395 
	}
}

403 
	$TIM_SëAut‹ñﬂd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Aut‹ñﬂd
)

406 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

409 
TIMx
->
ARR
 = 
Aut‹ñﬂd
;

410 
	}
}

417 
uöt32_t
 
	$TIM_GëCou¡î
(
TIM_Ty≥Def
* 
TIMx
)

420 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

423  
TIMx
->
CNT
;

424 
	}
}

431 
uöt16_t
 
	$TIM_GëPªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
)

434 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

437  
TIMx
->
PSC
;

438 
	}
}

447 
	$TIM_Upd©eDißbÀC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

450 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

451 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

453 i‡(
NewSèã
 !
DISABLE
)

456 
TIMx
->
CR1
 |
TIM_CR1_UDIS
;

461 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_UDIS
;

463 
	}
}

476 
	$TIM_Upd©eReque°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Upd©eSour˚
)

479 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

480 
	`as£π_∑øm
(
	`IS_TIM_UPDATE_SOURCE
(
TIM_Upd©eSour˚
));

482 i‡(
TIM_Upd©eSour˚
 !
TIM_Upd©eSour˚_GlobÆ
)

485 
TIMx
->
CR1
 |
TIM_CR1_URS
;

490 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_URS
;

492 
	}
}

502 
	$TIM_UIFRem≠
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

505 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

506 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

508 i‡(
NewSèã
 !
DISABLE
)

511 
TIMx
->
CR1
 |
TIM_CR1_UIFREMAP
;

516 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_UIFREMAP
;

518 
	}
}

527 
	$TIM_ARRPªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

530 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

531 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

533 i‡(
NewSèã
 !
DISABLE
)

536 
TIMx
->
CR1
 |
TIM_CR1_ARPE
;

541 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_ARPE
;

543 
	}
}

554 
	$TIM_Sñe˘O√Pul£Mode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OPMode
)

557 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

558 
	`as£π_∑øm
(
	`IS_TIM_OPM_MODE
(
TIM_OPMode
));

561 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_OPM
;

564 
TIMx
->
CR1
 |
TIM_OPMode
;

565 
	}
}

577 
	$TIM_SëClockDivisi⁄
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_CKD
)

580 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

581 
	`as£π_∑øm
(
	`IS_TIM_CKD_DIV
(
TIM_CKD
));

584 
TIMx
->
CR1
 &(
uöt16_t
)(~
TIM_CR1_CKD
);

587 
TIMx
->
CR1
 |
TIM_CKD
;

588 
	}
}

598 
	$TIM_Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

601 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

602 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

604 i‡(
NewSèã
 !
DISABLE
)

607 
TIMx
->
CR1
 |
TIM_CR1_CEN
;

612 
TIMx
->
CR1
 &(
uöt16_t
)~
TIM_CR1_CEN
;

614 
	}
}

676 
	$TIM_OC1Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

678 
uöt32_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

681 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

682 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

683 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

684 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

687 
TIMx
->
CCER
 &(
uöt32_t
)~
TIM_CCER_CC1E
;

690 
tmpc˚r
 = 
TIMx
->
CCER
;

692 
tmp¸2
 = 
TIMx
->
CR2
;

695 
tmpccmrx
 = 
TIMx
->
CCMR1
;

698 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR1_OC1M
;

699 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR1_CC1S
;

701 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

704 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC1P
;

706 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
;

709 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutSèã
;

711 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
Ë|| (TIMx =
TIM15
Ë|| (TIMx =
TIM16
Ë|| (TIMx =
TIM17
))

713 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

714 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

715 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

716 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

719 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC1NP
;

721 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
;

723 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC1NE
;

726 
tmpc˚r
 |
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
;

728 
tmp¸2
 &(
uöt32_t
)~
TIM_CR2_OIS1
;

729 
tmp¸2
 &(
uöt32_t
)~
TIM_CR2_OIS1N
;

731 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
;

733 
tmp¸2
 |
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
;

736 
TIMx
->
CR2
 = 
tmp¸2
;

739 
TIMx
->
CCMR1
 = 
tmpccmrx
;

742 
TIMx
->
CCR1
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

745 
TIMx
->
CCER
 = 
tmpc˚r
;

746 
	}
}

756 
	$TIM_OC2Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

758 
uöt32_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

761 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

762 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

763 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

764 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

767 
TIMx
->
CCER
 &(
uöt32_t
)~
TIM_CCER_CC2E
;

770 
tmpc˚r
 = 
TIMx
->
CCER
;

772 
tmp¸2
 = 
TIMx
->
CR2
;

775 
tmpccmrx
 = 
TIMx
->
CCMR1
;

778 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR1_OC2M
;

779 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR1_CC2S
;

782 
tmpccmrx
 |(
uöt32_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

785 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC2P
;

787 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 4);

790 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 4);

792 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

794 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

795 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

796 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

797 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

800 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC2NP
;

802 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 4);

804 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC2NE
;

807 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 4);

809 
tmp¸2
 &(
uöt32_t
)~
TIM_CR2_OIS2
;

810 
tmp¸2
 &(
uöt32_t
)~
TIM_CR2_OIS2N
;

812 
tmp¸2
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 2);

814 
tmp¸2
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 2);

817 
TIMx
->
CR2
 = 
tmp¸2
;

820 
TIMx
->
CCMR1
 = 
tmpccmrx
;

823 
TIMx
->
CCR2
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

826 
TIMx
->
CCER
 = 
tmpc˚r
;

827 
	}
}

837 
	$TIM_OC3Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

839 
uöt32_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

842 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

843 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

844 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

845 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

848 
TIMx
->
CCER
 &(
uöt32_t
)~
TIM_CCER_CC3E
;

851 
tmpc˚r
 = 
TIMx
->
CCER
;

853 
tmp¸2
 = 
TIMx
->
CR2
;

856 
tmpccmrx
 = 
TIMx
->
CCMR2
;

859 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR2_OC3M
;

860 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR2_CC3S
;

862 
tmpccmrx
 |
TIM_OCInôSåu˘
->
TIM_OCMode
;

865 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC3P
;

867 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 8);

870 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 8);

872 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

874 
	`as£π_∑øm
(
	`IS_TIM_OUTPUTN_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
));

875 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
));

876 
	`as£π_∑øm
(
	`IS_TIM_OCNIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
));

877 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

880 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC3NP
;

882 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 << 8);

884 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC3NE
;

887 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 << 8);

889 
tmp¸2
 &(
uöt32_t
)~
TIM_CR2_OIS3
;

890 
tmp¸2
 &(
uöt32_t
)~
TIM_CR2_OIS3N
;

892 
tmp¸2
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 4);

894 
tmp¸2
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 << 4);

897 
TIMx
->
CR2
 = 
tmp¸2
;

900 
TIMx
->
CCMR2
 = 
tmpccmrx
;

903 
TIMx
->
CCR3
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

906 
TIMx
->
CCER
 = 
tmpc˚r
;

907 
	}
}

917 
	$TIM_OC4Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

919 
uöt32_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

922 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

923 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

924 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

925 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

928 
TIMx
->
CCER
 &(
uöt32_t
)~
TIM_CCER_CC4E
;

931 
tmpc˚r
 = 
TIMx
->
CCER
;

933 
tmp¸2
 = 
TIMx
->
CR2
;

936 
tmpccmrx
 = 
TIMx
->
CCMR2
;

939 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR2_OC4M
;

940 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR2_CC4S
;

943 
tmpccmrx
 |(
uöt32_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

946 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC4P
;

948 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 12);

951 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 12);

953 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

955 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

957 
tmp¸2
 &=(
uöt32_t
Ë~
TIM_CR2_OIS4
;

959 
tmp¸2
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 6);

962 
TIMx
->
CR2
 = 
tmp¸2
;

965 
TIMx
->
CCMR2
 = 
tmpccmrx
;

968 
TIMx
->
CCR4
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

971 
TIMx
->
CCER
 = 
tmpc˚r
;

972 
	}
}

982 
	$TIM_OC5Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

984 
uöt32_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

987 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

988 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

989 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

990 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

993 
TIMx
->
CCER
 &(
uöt32_t
)~
TIM_CCER_CC5E
;

996 
tmpc˚r
 = 
TIMx
->
CCER
;

998 
tmp¸2
 = 
TIMx
->
CR2
;

1001 
tmpccmrx
 = 
TIMx
->
CCMR3
;

1004 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR3_OC5M
;

1007 
tmpccmrx
 |(
uöt32_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
);

1010 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC5P
;

1012 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 16);

1015 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 16);

1017 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

1019 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

1021 
tmp¸2
 &=(
uöt32_t
Ë~
TIM_CR2_OIS5
;

1023 
tmp¸2
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 16);

1026 
TIMx
->
CR2
 = 
tmp¸2
;

1029 
TIMx
->
CCMR3
 = 
tmpccmrx
;

1032 
TIMx
->
CCR5
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

1035 
TIMx
->
CCER
 = 
tmpc˚r
;

1036 
	}
}

1046 
	$TIM_OC6Inô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

1048 
uöt32_t
 
tmpccmrx
 = 0, 
tmpc˚r
 = 0, 
tmp¸2
 = 0;

1051 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1052 
	`as£π_∑øm
(
	`IS_TIM_OC_MODE
(
TIM_OCInôSåu˘
->
TIM_OCMode
));

1053 
	`as£π_∑øm
(
	`IS_TIM_OUTPUT_STATE
(
TIM_OCInôSåu˘
->
TIM_OuçutSèã
));

1054 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
));

1057 
TIMx
->
CCER
 &(
uöt32_t
)~
TIM_CCER_CC6E
;

1060 
tmpc˚r
 = 
TIMx
->
CCER
;

1062 
tmp¸2
 = 
TIMx
->
CR2
;

1065 
tmpccmrx
 = 
TIMx
->
CCMR3
;

1068 
tmpccmrx
 &(
uöt32_t
)~
TIM_CCMR3_OC6M
;

1071 
tmpccmrx
 |(
uöt32_t
)(
TIM_OCInôSåu˘
->
TIM_OCMode
 << 8);

1074 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC6P
;

1076 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 << 20);

1079 
tmpc˚r
 |(
uöt32_t
)((uöt32_t)
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 << 20);

1081 if((
TIMx
 =
TIM1
Ë|| (TIMx =
TIM8
))

1083 
	`as£π_∑øm
(
	`IS_TIM_OCIDLE_STATE
(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
));

1085 
tmp¸2
 &=(
uöt32_t
Ë~
TIM_CR2_OIS6
;

1087 
tmp¸2
 |(
uöt16_t
)(
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 << 18);

1090 
TIMx
->
CR2
 = 
tmp¸2
;

1093 
TIMx
->
CCMR3
 = 
tmpccmrx
;

1096 
TIMx
->
CCR6
 = 
TIM_OCInôSåu˘
->
TIM_Pul£
;

1099 
TIMx
->
CCER
 = 
tmpc˚r
;

1100 
	}
}

1110 
	$TIM_Sñe˘GC5C1
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1113 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1114 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1116 i‡(
NewSèã
 !
DISABLE
)

1119 
TIMx
->
CCR5
 |
TIM_CCR5_GC5C1
;

1124 
TIMx
->
CCR5
 &(
uöt32_t
)~
TIM_CCR5_GC5C1
;

1126 
	}
}

1136 
	$TIM_Sñe˘GC5C2
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1139 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1140 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1142 i‡(
NewSèã
 !
DISABLE
)

1145 
TIMx
->
CCR5
 |
TIM_CCR5_GC5C2
;

1150 
TIMx
->
CCR5
 &(
uöt32_t
)~
TIM_CCR5_GC5C2
;

1152 
	}
}

1163 
	$TIM_Sñe˘GC5C3
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1166 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1167 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1169 i‡(
NewSèã
 !
DISABLE
)

1172 
TIMx
->
CCR5
 |
TIM_CCR5_GC5C3
;

1177 
TIMx
->
CCR5
 &(
uöt32_t
)~
TIM_CCR5_GC5C3
;

1179 
	}
}

1187 
	$TIM_OCSåu˘Inô
(
TIM_OCInôTy≥Def
* 
TIM_OCInôSåu˘
)

1190 
TIM_OCInôSåu˘
->
TIM_OCMode
 = 
TIM_OCMode_Timög
;

1191 
TIM_OCInôSåu˘
->
TIM_OuçutSèã
 = 
TIM_OuçutSèã_DißbÀ
;

1192 
TIM_OCInôSåu˘
->
TIM_OuçutNSèã
 = 
TIM_OuçutNSèã_DißbÀ
;

1193 
TIM_OCInôSåu˘
->
TIM_Pul£
 = 0x00000000;

1194 
TIM_OCInôSåu˘
->
TIM_OCPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

1195 
TIM_OCInôSåu˘
->
TIM_OCNPﬁ¨ôy
 = 
TIM_OCPﬁ¨ôy_High
;

1196 
TIM_OCInôSåu˘
->
TIM_OCIdÀSèã
 = 
TIM_OCIdÀSèã_Re£t
;

1197 
TIM_OCInôSåu˘
->
TIM_OCNIdÀSèã
 = 
TIM_OCNIdÀSèã_Re£t
;

1198 
	}
}

1229 
	$TIM_Sñe˘OCxM
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, 
uöt32_t
 
TIM_OCMode
)

1231 
uöt32_t
 
tmp
 = 0;

1232 
uöt16_t
 
tmp1
 = 0;

1235 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1236 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

1237 
	`as£π_∑øm
(
	`IS_TIM_OCM
(
TIM_OCMode
));

1239 
tmp
 = (
uöt32_t
Ë
TIMx
;

1240 
tmp
 +
CCMR_OFFSET
;

1242 
tmp1
 = 
CCER_CCE_SET
 << (
uöt16_t
)
TIM_Ch™√l
;

1245 
TIMx
->
CCER
 &(
uöt16_t
Ë~
tmp1
;

1247 if((
TIM_Ch™√l
 =
TIM_Ch™√l_1
Ë||(TIM_Ch™√»=
TIM_Ch™√l_3
))

1249 
tmp
 +(
TIM_Ch™√l
>>1);

1252 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC13M_MASK
;

1255 *(
__IO
 
uöt32_t
 *Ë
tmp
 |
TIM_OCMode
;

1259 
tmp
 +(
uöt32_t
)(
TIM_Ch™√l
 - (uint32_t)4)>> (uint32_t)1;

1262 *(
__IO
 
uöt32_t
 *Ë
tmp
 &
CCMR_OC24M_MASK
;

1265 *(
__IO
 
uöt32_t
 *Ë
tmp
 |(
uöt16_t
)(
TIM_OCMode
 << 8);

1267 
	}
}

1275 
	$TIM_SëCom∑ª1
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª1
)

1278 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1281 
TIMx
->
CCR1
 = 
Com∑ª1
;

1282 
	}
}

1291 
	$TIM_SëCom∑ª2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª2
)

1294 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1297 
TIMx
->
CCR2
 = 
Com∑ª2
;

1298 
	}
}

1306 
	$TIM_SëCom∑ª3
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª3
)

1309 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1312 
TIMx
->
CCR3
 = 
Com∑ª3
;

1313 
	}
}

1321 
	$TIM_SëCom∑ª4
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª4
)

1324 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1327 
TIMx
->
CCR4
 = 
Com∑ª4
;

1328 
	}
}

1336 
	$TIM_SëCom∑ª5
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª5
)

1339 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1342 
TIMx
->
CCR5
 = 
Com∑ª5
;

1343 
	}
}

1351 
	$TIM_SëCom∑ª6
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
Com∑ª6
)

1354 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1357 
TIMx
->
CCR6
 = 
Com∑ª6
;

1358 
	}
}

1369 
	$TIM_F‹˚dOC1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1371 
uöt32_t
 
tmpccmr1
 = 0;

1374 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1375 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1376 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1379 
tmpccmr1
 &(
uöt32_t
)~
TIM_CCMR1_OC1M
;

1382 
tmpccmr1
 |
TIM_F‹˚dA˘i⁄
;

1385 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1386 
	}
}

1398 
	$TIM_F‹˚dOC2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1400 
uöt32_t
 
tmpccmr1
 = 0;

1403 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1404 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1405 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1408 
tmpccmr1
 &(
uöt32_t
)~
TIM_CCMR1_OC2M
;

1411 
tmpccmr1
 |(
uöt32_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1414 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1415 
	}
}

1426 
	$TIM_F‹˚dOC3C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1428 
uöt32_t
 
tmpccmr2
 = 0;

1431 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1432 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1434 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1437 
tmpccmr2
 &(
uöt32_t
)~
TIM_CCMR2_OC3M
;

1440 
tmpccmr2
 |
TIM_F‹˚dA˘i⁄
;

1443 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1444 
	}
}

1455 
	$TIM_F‹˚dOC4C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1457 
uöt32_t
 
tmpccmr2
 = 0;

1460 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1461 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1462 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1465 
tmpccmr2
 &(
uöt32_t
)~
TIM_CCMR2_OC4M
;

1468 
tmpccmr2
 |(
uöt32_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1471 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1472 
	}
}

1483 
	$TIM_F‹˚dOC5C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1485 
uöt32_t
 
tmpccmr3
 = 0;

1488 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1489 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1490 
tmpccmr3
 = 
TIMx
->
CCMR3
;

1493 
tmpccmr3
 &(
uöt32_t
)~
TIM_CCMR3_OC5M
;

1496 
tmpccmr3
 |(
uöt32_t
)(
TIM_F‹˚dA˘i⁄
);

1499 
TIMx
->
CCMR3
 = 
tmpccmr3
;

1500 
	}
}

1511 
	$TIM_F‹˚dOC6C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_F‹˚dA˘i⁄
)

1513 
uöt32_t
 
tmpccmr3
 = 0;

1516 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1517 
	`as£π_∑øm
(
	`IS_TIM_FORCED_ACTION
(
TIM_F‹˚dA˘i⁄
));

1518 
tmpccmr3
 = 
TIMx
->
CCMR3
;

1521 
tmpccmr3
 &(
uöt32_t
)~
TIM_CCMR3_OC6M
;

1524 
tmpccmr3
 |(
uöt32_t
)(
TIM_F‹˚dA˘i⁄
 << 8);

1527 
TIMx
->
CCMR3
 = 
tmpccmr3
;

1528 
	}
}

1539 
	$TIM_OC1PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1541 
uöt32_t
 
tmpccmr1
 = 0;

1544 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1545 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1547 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1550 
tmpccmr1
 &(
uöt32_t
)(~
TIM_CCMR1_OC1PE
);

1553 
tmpccmr1
 |
TIM_OCPªlﬂd
;

1556 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1557 
	}
}

1569 
	$TIM_OC2PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1571 
uöt32_t
 
tmpccmr1
 = 0;

1574 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1575 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1577 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1580 
tmpccmr1
 &(
uöt32_t
)(~
TIM_CCMR1_OC2PE
);

1583 
tmpccmr1
 |(
uöt32_t
)(
TIM_OCPªlﬂd
 << 8);

1586 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1587 
	}
}

1598 
	$TIM_OC3PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1600 
uöt32_t
 
tmpccmr2
 = 0;

1603 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1604 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1606 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1609 
tmpccmr2
 &(
uöt32_t
)(~
TIM_CCMR2_OC3PE
);

1612 
tmpccmr2
 |
TIM_OCPªlﬂd
;

1615 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1616 
	}
}

1627 
	$TIM_OC4PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1629 
uöt32_t
 
tmpccmr2
 = 0;

1632 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1633 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1635 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1638 
tmpccmr2
 &(
uöt32_t
)(~
TIM_CCMR2_OC4PE
);

1641 
tmpccmr2
 |(
uöt32_t
)(
TIM_OCPªlﬂd
 << 8);

1644 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1645 
	}
}

1656 
	$TIM_OC5PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1658 
uöt32_t
 
tmpccmr3
 = 0;

1661 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1662 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1664 
tmpccmr3
 = 
TIMx
->
CCMR3
;

1667 
tmpccmr3
 &(
uöt32_t
)(~
TIM_CCMR3_OC5PE
);

1670 
tmpccmr3
 |(
uöt32_t
)(
TIM_OCPªlﬂd
);

1673 
TIMx
->
CCMR3
 = 
tmpccmr3
;

1674 
	}
}

1685 
	$TIM_OC6PªlﬂdC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPªlﬂd
)

1687 
uöt32_t
 
tmpccmr3
 = 0;

1690 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1691 
	`as£π_∑øm
(
	`IS_TIM_OCPRELOAD_STATE
(
TIM_OCPªlﬂd
));

1693 
tmpccmr3
 = 
TIMx
->
CCMR3
;

1696 
tmpccmr3
 &(
uöt32_t
)(~
TIM_CCMR3_OC6PE
);

1699 
tmpccmr3
 |(
uöt32_t
)(
TIM_OCPªlﬂd
 << 8);

1702 
TIMx
->
CCMR3
 = 
tmpccmr3
;

1703 
	}
}

1714 
	$TIM_OC1Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1716 
uöt32_t
 
tmpccmr1
 = 0;

1719 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1720 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1723 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1726 
tmpccmr1
 &(
uöt32_t
)~
TIM_CCMR1_OC1FE
;

1729 
tmpccmr1
 |
TIM_OCFa°
;

1732 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1733 
	}
}

1745 
	$TIM_OC2Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1747 
uöt32_t
 
tmpccmr1
 = 0;

1750 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1751 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1754 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1757 
tmpccmr1
 &(
uöt32_t
)(~
TIM_CCMR1_OC2FE
);

1760 
tmpccmr1
 |(
uöt32_t
)(
TIM_OCFa°
 << 8);

1763 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1764 
	}
}

1775 
	$TIM_OC3Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1777 
uöt32_t
 
tmpccmr2
 = 0;

1780 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1781 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1784 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1787 
tmpccmr2
 &(
uöt32_t
)~
TIM_CCMR2_OC3FE
;

1790 
tmpccmr2
 |
TIM_OCFa°
;

1793 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1794 
	}
}

1805 
	$TIM_OC4Fa°C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCFa°
)

1807 
uöt32_t
 
tmpccmr2
 = 0;

1810 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1811 
	`as£π_∑øm
(
	`IS_TIM_OCFAST_STATE
(
TIM_OCFa°
));

1814 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1817 
tmpccmr2
 &(
uöt32_t
)(~
TIM_CCMR2_OC4FE
);

1820 
tmpccmr2
 |(
uöt32_t
)(
TIM_OCFa°
 << 8);

1823 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1824 
	}
}

1835 
	$TIM_CÀ¨OC1Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1837 
uöt32_t
 
tmpccmr1
 = 0;

1840 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

1841 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1843 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1846 
tmpccmr1
 &(
uöt32_t
)~
TIM_CCMR1_OC1CE
;

1849 
tmpccmr1
 |
TIM_OCCÀ¨
;

1852 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1853 
	}
}

1865 
	$TIM_CÀ¨OC2Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1867 
uöt32_t
 
tmpccmr1
 = 0;

1870 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

1871 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1873 
tmpccmr1
 = 
TIMx
->
CCMR1
;

1876 
tmpccmr1
 &(
uöt32_t
)~
TIM_CCMR1_OC2CE
;

1879 
tmpccmr1
 |(
uöt32_t
)(
TIM_OCCÀ¨
 << 8);

1882 
TIMx
->
CCMR1
 = 
tmpccmr1
;

1883 
	}
}

1894 
	$TIM_CÀ¨OC3Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1896 
uöt32_t
 
tmpccmr2
 = 0;

1899 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1900 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1902 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1905 
tmpccmr2
 &(
uöt32_t
)~
TIM_CCMR2_OC3CE
;

1908 
tmpccmr2
 |
TIM_OCCÀ¨
;

1911 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1912 
	}
}

1923 
	$TIM_CÀ¨OC4Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1925 
uöt32_t
 
tmpccmr2
 = 0;

1928 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

1929 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1931 
tmpccmr2
 = 
TIMx
->
CCMR2
;

1934 
tmpccmr2
 &(
uöt32_t
)~
TIM_CCMR2_OC4CE
;

1937 
tmpccmr2
 |(
uöt32_t
)(
TIM_OCCÀ¨
 << 8);

1940 
TIMx
->
CCMR2
 = 
tmpccmr2
;

1941 
	}
}

1952 
	$TIM_CÀ¨OC5Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1954 
uöt32_t
 
tmpccmr3
 = 0;

1957 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1958 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1960 
tmpccmr3
 = 
TIMx
->
CCMR3
;

1963 
tmpccmr3
 &(
uöt32_t
)~
TIM_CCMR3_OC5CE
;

1966 
tmpccmr3
 |(
uöt32_t
)(
TIM_OCCÀ¨
);

1969 
TIMx
->
CCMR3
 = 
tmpccmr3
;

1970 
	}
}

1981 
	$TIM_CÀ¨OC6Ref
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCCÀ¨
)

1983 
uöt32_t
 
tmpccmr3
 = 0;

1986 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

1987 
	`as£π_∑øm
(
	`IS_TIM_OCCLEAR_STATE
(
TIM_OCCÀ¨
));

1989 
tmpccmr3
 = 
TIMx
->
CCMR3
;

1992 
tmpccmr3
 &(
uöt32_t
)~
TIM_CCMR3_OC6CE
;

1995 
tmpccmr3
 |(
uöt32_t
)(
TIM_OCCÀ¨
 << 8);

1998 
TIMx
->
CCMR3
 = 
tmpccmr3
;

1999 
	}
}

2010 
	$TIM_Sñe˘OCREFCÀ¨
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCRe„ªn˚CÀ¨
)

2013 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2014 
	`as£π_∑øm
(
	`TIM_OCREFERENCECECLEAR_SOURCE
(
TIM_OCRe„ªn˚CÀ¨
));

2017 
TIMx
->
SMCR
 &(
uöt16_t
)~((uöt16_t)
TIM_SMCR_OCCS
);

2018 
TIMx
->
SMCR
 |
TIM_OCRe„ªn˚CÀ¨
;

2019 
	}
}

2030 
	$TIM_OC1Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

2032 
uöt32_t
 
tmpc˚r
 = 0;

2035 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2036 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

2038 
tmpc˚r
 = 
TIMx
->
CCER
;

2041 
tmpc˚r
 &(
uöt32_t
)(~
TIM_CCER_CC1P
);

2042 
tmpc˚r
 |
TIM_OCPﬁ¨ôy
;

2045 
TIMx
->
CCER
 = 
tmpc˚r
;

2046 
	}
}

2057 
	$TIM_OC1NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

2059 
uöt32_t
 
tmpc˚r
 = 0;

2061 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2062 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

2064 
tmpc˚r
 = 
TIMx
->
CCER
;

2067 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC1NP
;

2068 
tmpc˚r
 |
TIM_OCNPﬁ¨ôy
;

2071 
TIMx
->
CCER
 = 
tmpc˚r
;

2072 
	}
}

2084 
	$TIM_OC2Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

2086 
uöt32_t
 
tmpc˚r
 = 0;

2089 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2090 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

2092 
tmpc˚r
 = 
TIMx
->
CCER
;

2095 
tmpc˚r
 &(
uöt32_t
)(~
TIM_CCER_CC2P
);

2096 
tmpc˚r
 |(
uöt32_t
)(
TIM_OCPﬁ¨ôy
 << 4);

2099 
TIMx
->
CCER
 = 
tmpc˚r
;

2100 
	}
}

2111 
	$TIM_OC2NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

2113 
uöt32_t
 
tmpc˚r
 = 0;

2116 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2117 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

2119 
tmpc˚r
 = 
TIMx
->
CCER
;

2122 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC2NP
;

2123 
tmpc˚r
 |(
uöt32_t
)(
TIM_OCNPﬁ¨ôy
 << 4);

2126 
TIMx
->
CCER
 = 
tmpc˚r
;

2127 
	}
}

2138 
	$TIM_OC3Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

2140 
uöt32_t
 
tmpc˚r
 = 0;

2143 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2144 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

2146 
tmpc˚r
 = 
TIMx
->
CCER
;

2149 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC3P
;

2150 
tmpc˚r
 |(
uöt32_t
)(
TIM_OCPﬁ¨ôy
 << 8);

2153 
TIMx
->
CCER
 = 
tmpc˚r
;

2154 
	}
}

2165 
	$TIM_OC3NPﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCNPﬁ¨ôy
)

2167 
uöt32_t
 
tmpc˚r
 = 0;

2170 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2171 
	`as£π_∑øm
(
	`IS_TIM_OCN_POLARITY
(
TIM_OCNPﬁ¨ôy
));

2173 
tmpc˚r
 = 
TIMx
->
CCER
;

2176 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC3NP
;

2177 
tmpc˚r
 |(
uöt32_t
)(
TIM_OCNPﬁ¨ôy
 << 8);

2180 
TIMx
->
CCER
 = 
tmpc˚r
;

2181 
	}
}

2192 
	$TIM_OC4Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

2194 
uöt32_t
 
tmpc˚r
 = 0;

2197 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2198 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

2200 
tmpc˚r
 = 
TIMx
->
CCER
;

2203 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC4P
;

2204 
tmpc˚r
 |(
uöt32_t
)(
TIM_OCPﬁ¨ôy
 << 12);

2207 
TIMx
->
CCER
 = 
tmpc˚r
;

2208 
	}
}

2219 
	$TIM_OC5Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

2221 
uöt32_t
 
tmpc˚r
 = 0;

2224 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2225 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

2227 
tmpc˚r
 = 
TIMx
->
CCER
;

2230 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC5P
;

2231 
tmpc˚r
 |(
uöt32_t
)(
TIM_OCPﬁ¨ôy
 << 16);

2234 
TIMx
->
CCER
 = 
tmpc˚r
;

2235 
	}
}

2246 
	$TIM_OC6Pﬁ¨ôyC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_OCPﬁ¨ôy
)

2248 
uöt32_t
 
tmpc˚r
 = 0;

2251 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2252 
	`as£π_∑øm
(
	`IS_TIM_OC_POLARITY
(
TIM_OCPﬁ¨ôy
));

2254 
tmpc˚r
 = 
TIMx
->
CCER
;

2257 
tmpc˚r
 &(
uöt32_t
)~
TIM_CCER_CC6P
;

2258 
tmpc˚r
 |(
uöt32_t
)(
TIM_OCPﬁ¨ôy
 << 20);

2261 
TIMx
->
CCER
 = 
tmpc˚r
;

2262 
	}
}

2279 
	$TIM_CCxCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCx
)

2281 
uöt32_t
 
tmp
 = 0;

2284 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2285 
	`as£π_∑øm
(
	`IS_TIM_CHANNEL
(
TIM_Ch™√l
));

2286 
	`as£π_∑øm
(
	`IS_TIM_CCX
(
TIM_CCx
));

2288 
tmp
 = 
CCER_CCE_SET
 << 
TIM_Ch™√l
;

2291 
TIMx
->
CCER
 &(
uöt32_t
)~ 
tmp
;

2294 
TIMx
->
CCER
 |(
uöt32_t
)(
TIM_CCx
 << 
TIM_Ch™√l
);

2295 
	}
}

2309 
	$TIM_CCxNCmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ch™√l
, uöt16_à
TIM_CCxN
)

2311 
uöt32_t
 
tmp
 = 0;

2314 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2315 
	`as£π_∑øm
(
	`IS_TIM_COMPLEMENTARY_CHANNEL
(
TIM_Ch™√l
));

2316 
	`as£π_∑øm
(
	`IS_TIM_CCXN
(
TIM_CCxN
));

2318 
tmp
 = 
CCER_CCNE_SET
 << 
TIM_Ch™√l
;

2321 
TIMx
->
CCER
 &(
uöt32_t
Ë~
tmp
;

2324 
TIMx
->
CCER
 |(
uöt32_t
)(
TIM_CCxN
 << 
TIM_Ch™√l
);

2325 
	}
}

2391 
	$TIM_ICInô
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

2394 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2395 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
));

2396 
	`as£π_∑øm
(
	`IS_TIM_IC_SELECTION
(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
));

2397 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
));

2398 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
TIM_ICInôSåu˘
->
TIM_ICFûãr
));

2400 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

2403 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

2404 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

2405 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2407 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2409 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_2
)

2412 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

2413 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

2414 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2416 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2418 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_3
)

2421 
	`TI3_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

2422 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

2423 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2425 
	`TIM_SëIC3PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2430 
	`TI4_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
,

2431 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
,

2432 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2434 
	`TIM_SëIC4PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2436 
	}
}

2444 
	$TIM_ICSåu˘Inô
(
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

2447 
TIM_ICInôSåu˘
->
TIM_Ch™√l
 = 
TIM_Ch™√l_1
;

2448 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

2449 
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

2450 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
 = 
TIM_ICPSC_DIV1
;

2451 
TIM_ICInôSåu˘
->
TIM_ICFûãr
 = 0x00;

2452 
	}
}

2463 
	$TIM_PWMIC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_ICInôTy≥Def
* 
TIM_ICInôSåu˘
)

2465 
uöt16_t
 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

2466 
uöt16_t
 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

2469 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2472 i‡(
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
 =
TIM_ICPﬁ¨ôy_Risög
)

2474 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_FÆlög
;

2478 
ic›posôïﬁ¨ôy
 = 
TIM_ICPﬁ¨ôy_Risög
;

2481 i‡(
TIM_ICInôSåu˘
->
TIM_ICSñe˘i⁄
 =
TIM_ICSñe˘i⁄_Dúe˘TI
)

2483 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Indúe˘TI
;

2487 
ic›posôe£À˘i⁄
 = 
TIM_ICSñe˘i⁄_Dúe˘TI
;

2489 i‡(
TIM_ICInôSåu˘
->
TIM_Ch™√l
 =
TIM_Ch™√l_1
)

2492 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2493 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2495 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2497 
	`TI2_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2499 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2504 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPﬁ¨ôy
, TIM_ICInôSåu˘->
TIM_ICSñe˘i⁄
,

2505 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2507 
	`TIM_SëIC2PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2509 
	`TI1_C⁄fig
(
TIMx
, 
ic›posôïﬁ¨ôy
, 
ic›posôe£À˘i⁄
, 
TIM_ICInôSåu˘
->
TIM_ICFûãr
);

2511 
	`TIM_SëIC1PªsˇÀr
(
TIMx
, 
TIM_ICInôSåu˘
->
TIM_ICPªsˇÀr
);

2513 
	}
}

2520 
uöt32_t
 
	$TIM_GëC≠tuª1
(
TIM_Ty≥Def
* 
TIMx
)

2523 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2526  
TIMx
->
CCR1
;

2527 
	}
}

2535 
uöt32_t
 
	$TIM_GëC≠tuª2
(
TIM_Ty≥Def
* 
TIMx
)

2538 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2541  
TIMx
->
CCR2
;

2542 
	}
}

2549 
uöt32_t
 
	$TIM_GëC≠tuª3
(
TIM_Ty≥Def
* 
TIMx
)

2552 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2555  
TIMx
->
CCR3
;

2556 
	}
}

2563 
uöt32_t
 
	$TIM_GëC≠tuª4
(
TIM_Ty≥Def
* 
TIMx
)

2566 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2569  
TIMx
->
CCR4
;

2570 
	}
}

2583 
	$TIM_SëIC1PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2586 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

2587 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2590 
TIMx
->
CCMR1
 &(
uöt32_t
)~
TIM_CCMR1_IC1PSC
;

2593 
TIMx
->
CCMR1
 |
TIM_ICPSC
;

2594 
	}
}

2608 
	$TIM_SëIC2PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2611 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

2612 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2615 
TIMx
->
CCMR1
 &(
uöt32_t
)~
TIM_CCMR1_IC2PSC
;

2618 
TIMx
->
CCMR1
 |(
uöt32_t
)((uöt32_t)
TIM_ICPSC
 << 8);

2619 
	}
}

2632 
	$TIM_SëIC3PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2635 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2636 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2639 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC3PSC
;

2642 
TIMx
->
CCMR2
 |
TIM_ICPSC
;

2643 
	}
}

2656 
	$TIM_SëIC4PªsˇÀr
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPSC
)

2659 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

2660 
	`as£π_∑øm
(
	`IS_TIM_IC_PRESCALER
(
TIM_ICPSC
));

2663 
TIMx
->
CCMR2
 &(
uöt16_t
)~
TIM_CCMR2_IC4PSC
;

2666 
TIMx
->
CCMR2
 |(
uöt16_t
)(
TIM_ICPSC
 << 8);

2667 
	}
}

2709 
	$TIM_BDTRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
TIM_BDTRInôTy≥Def
 *
TIM_BDTRInôSåu˘
)

2712 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2713 
	`as£π_∑øm
(
	`IS_TIM_OSSR_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
));

2714 
	`as£π_∑øm
(
	`IS_TIM_OSSI_STATE
(
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
));

2715 
	`as£π_∑øm
(
	`IS_TIM_LOCK_LEVEL
(
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
));

2716 
	`as£π_∑øm
(
	`IS_TIM_BREAK_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Bªak
));

2717 
	`as£π_∑øm
(
	`IS_TIM_BREAK_POLARITY
(
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
));

2718 
	`as£π_∑øm
(
	`IS_TIM_AUTOMATIC_OUTPUT_STATE
(
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
));

2722 
TIMx
->
BDTR
 = (
uöt32_t
)
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 | TIM_BDTRInôSåu˘->
TIM_OSSISèã
 |

2723 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 | TIM_BDTRInôSåu˘->
TIM_DódTime
 |

2724 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 | TIM_BDTRInôSåu˘->
TIM_BªakPﬁ¨ôy
 |

2725 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
;

2726 
	}
}

2739 
	$TIM_Bªak1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_Bªak1Pﬁ¨ôy
, 
uöt8_t
 
TIM_Bªak1Fûãr
)

2741 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2742 
	`as£π_∑øm
(
	`IS_TIM_BREAK1_FILTER
(
TIM_Bªak1Fûãr
));

2745 
TIMx
->
BDTR
 &(
uöt32_t
)~ (
TIM_BDTR_BKP
 | 
TIM_BDTR_BKF
);

2747 
TIMx
->
BDTR
 |
TIM_Bªak1Pﬁ¨ôy
 |((
uöt32_t
)
TIM_Bªak1Fûãr
 << 16);

2748 
	}
}

2761 
	$TIM_Bªak2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_Bªak2Pﬁ¨ôy
, 
uöt8_t
 
TIM_Bªak2Fûãr
)

2764 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2765 
	`as£π_∑øm
(
	`IS_TIM_BREAK2_FILTER
(
TIM_Bªak2Fûãr
));

2768 
TIMx
->
BDTR
 &(
uöt32_t
)~ (
TIM_BDTR_BK2P
 | 
TIM_BDTR_BK2F
);

2771 
TIMx
->
BDTR
 |
TIM_Bªak2Pﬁ¨ôy
 |((
uöt32_t
)
TIM_Bªak2Fûãr
 << 20);

2772 
	}
}

2781 
	$TIM_Bªak1Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2784 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2785 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2787 i‡(
NewSèã
 !
DISABLE
)

2790 
TIMx
->
BDTR
 |
TIM_BDTR_BKE
;

2795 
TIMx
->
BDTR
 &(
uöt32_t
)~
TIM_BDTR_BKE
;

2797 
	}
}

2806 
	$TIM_Bªak2Cmd
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2809 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

2810 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2812 i‡(
NewSèã
 !
DISABLE
)

2815 
TIMx
->
BDTR
 |
TIM_BDTR_BK2E
;

2820 
TIMx
->
BDTR
 &(
uöt32_t
)~
TIM_BDTR_BK2E
;

2822 
	}
}

2830 
	$TIM_BDTRSåu˘Inô
(
TIM_BDTRInôTy≥Def
* 
TIM_BDTRInôSåu˘
)

2833 
TIM_BDTRInôSåu˘
->
TIM_OSSRSèã
 = 
TIM_OSSRSèã_DißbÀ
;

2834 
TIM_BDTRInôSåu˘
->
TIM_OSSISèã
 = 
TIM_OSSISèã_DißbÀ
;

2835 
TIM_BDTRInôSåu˘
->
TIM_LOCKLevñ
 = 
TIM_LOCKLevñ_OFF
;

2836 
TIM_BDTRInôSåu˘
->
TIM_DódTime
 = 0x00;

2837 
TIM_BDTRInôSåu˘
->
TIM_Bªak
 = 
TIM_Bªak_DißbÀ
;

2838 
TIM_BDTRInôSåu˘
->
TIM_BªakPﬁ¨ôy
 = 
TIM_BªakPﬁ¨ôy_Low
;

2839 
TIM_BDTRInôSåu˘
->
TIM_Autom©icOuçut
 = 
TIM_Autom©icOuçut_DißbÀ
;

2840 
	}
}

2849 
	$TIM_CålPWMOuçuts
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2852 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2853 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2855 i‡(
NewSèã
 !
DISABLE
)

2858 
TIMx
->
BDTR
 |
TIM_BDTR_MOE
;

2863 
TIMx
->
BDTR
 &(
uöt16_t
)~
TIM_BDTR_MOE
;

2865 
	}
}

2874 
	$TIM_Sñe˘COM
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2877 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2878 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2880 i‡(
NewSèã
 !
DISABLE
)

2883 
TIMx
->
CR2
 |
TIM_CR2_CCUS
;

2888 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCUS
;

2890 
	}
}

2899 
	$TIM_CCPªlﬂdC⁄åﬁ
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2902 
	`as£π_∑øm
(
	`IS_TIM_LIST6_PERIPH
(
TIMx
));

2903 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2904 i‡(
NewSèã
 !
DISABLE
)

2907 
TIMx
->
CR2
 |
TIM_CR2_CCPC
;

2912 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCPC
;

2914 
	}
}

2956 
	$TIM_ITC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

2959 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2960 
	`as£π_∑øm
(
	`IS_TIM_IT
(
TIM_IT
));

2961 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

2963 i‡(
NewSèã
 !
DISABLE
)

2966 
TIMx
->
DIER
 |
TIM_IT
;

2971 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_IT
;

2973 
	}
}

2994 
	$TIM_Gíî©eEvít
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EvítSour˚
)

2997 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

2998 
	`as£π_∑øm
(
	`IS_TIM_EVENT_SOURCE
(
TIM_EvítSour˚
));

3001 
TIMx
->
EGR
 = 
TIM_EvítSour˚
;

3002 
	}
}

3029 
FœgSètus
 
	$TIM_GëFœgSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_FLAG
)

3031 
ITSètus
 
bô°©us
 = 
RESET
;

3033 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

3034 
	`as£π_∑øm
(
	`IS_TIM_GET_FLAG
(
TIM_FLAG
));

3037 i‡((
TIMx
->
SR
 & 
TIM_FLAG
Ë!
RESET
)

3039 
bô°©us
 = 
SET
;

3043 
bô°©us
 = 
RESET
;

3045  
bô°©us
;

3046 
	}
}

3073 
	$TIM_CÀ¨Fœg
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_FLAG
)

3076 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

3079 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_FLAG
;

3080 
	}
}

3101 
ITSètus
 
	$TIM_GëITSètus
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

3103 
ITSètus
 
bô°©us
 = 
RESET
;

3104 
uöt16_t
 
ô°©us
 = 0x0, 
ôíabÀ
 = 0x0;

3106 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

3107 
	`as£π_∑øm
(
	`IS_TIM_GET_IT
(
TIM_IT
));

3109 
ô°©us
 = 
TIMx
->
SR
 & 
TIM_IT
;

3111 
ôíabÀ
 = 
TIMx
->
DIER
 & 
TIM_IT
;

3112 i‡((
ô°©us
 !(
uöt16_t
)
RESET
Ë&& (
ôíabÀ
 != (uint16_t)RESET))

3114 
bô°©us
 = 
SET
;

3118 
bô°©us
 = 
RESET
;

3120  
bô°©us
;

3121 
	}
}

3142 
	$TIM_CÀ¨ITPídögBô
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_IT
)

3145 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

3148 
TIMx
->
SR
 = (
uöt16_t
)~
TIM_IT
;

3149 
	}
}

3179 
	$TIM_DMAC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMABa£
, uöt16_à
TIM_DMABur°Lígth
)

3182 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

3183 
	`as£π_∑øm
(
	`IS_TIM_DMA_BASE
(
TIM_DMABa£
));

3184 
	`as£π_∑øm
(
	`IS_TIM_DMA_LENGTH
(
TIM_DMABur°Lígth
));

3187 
TIMx
->
DCR
 = 
TIM_DMABa£
 | 
TIM_DMABur°Lígth
;

3188 
	}
}

3206 
	$TIM_DMACmd
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_DMASour˚
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3209 
	`as£π_∑øm
(
	`IS_TIM_ALL_PERIPH
(
TIMx
));

3210 
	`as£π_∑øm
(
	`IS_TIM_DMA_SOURCE
(
TIM_DMASour˚
));

3211 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3213 i‡(
NewSèã
 !
DISABLE
)

3216 
TIMx
->
DIER
 |
TIM_DMASour˚
;

3221 
TIMx
->
DIER
 &(
uöt16_t
)~
TIM_DMASour˚
;

3223 
	}
}

3232 
	$TIM_Sñe˘CCDMA
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3235 
	`as£π_∑øm
(
	`IS_TIM_LIST1_PERIPH
(
TIMx
));

3236 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3238 i‡(
NewSèã
 !
DISABLE
)

3241 
TIMx
->
CR2
 |
TIM_CR2_CCDS
;

3246 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_CCDS
;

3248 
	}
}

3271 
	$TIM_I¡î«lClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
)

3274 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3277 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

3278 
	}
}

3292 
	$TIM_ITRxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

3295 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3296 
	`as£π_∑øm
(
	`IS_TIM_INTERNAL_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

3299 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_I≈utTriggîSour˚
);

3302 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

3303 
	}
}

3322 
	$TIM_TIxExã∫ÆClockC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TIxExã∫ÆCLKSour˚
,

3323 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
ICFûãr
)

3326 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3327 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_ICPﬁ¨ôy
));

3328 
	`as£π_∑øm
(
	`IS_TIM_IC_FILTER
(
ICFûãr
));

3331 i‡(
TIM_TIxExã∫ÆCLKSour˚
 =
TIM_TIxExã∫ÆCLK1Sour˚_TI2
)

3333 
	`TI2_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

3337 
	`TI1_C⁄fig
(
TIMx
, 
TIM_ICPﬁ¨ôy
, 
TIM_ICSñe˘i⁄_Dúe˘TI
, 
ICFûãr
);

3340 
	`TIM_Sñe˘I≈utTriggî
(
TIMx
, 
TIM_TIxExã∫ÆCLKSour˚
);

3342 
TIMx
->
SMCR
 |
TIM_SœveMode_Exã∫Æ1
;

3343 
	}
}

3362 
	$TIM_ETRClockMode1C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

3363 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

3365 
uöt16_t
 
tmpsm¸
 = 0;

3368 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3369 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

3370 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

3371 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

3373 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

3376 
tmpsm¸
 = 
TIMx
->
SMCR
;

3379 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

3382 
tmpsm¸
 |
TIM_SœveMode_Exã∫Æ1
;

3385 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

3386 
tmpsm¸
 |
TIM_TS_ETRF
;

3389 
TIMx
->
SMCR
 = 
tmpsm¸
;

3390 
	}
}

3409 
	$TIM_ETRClockMode2C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

3410 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

3413 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3414 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

3415 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

3416 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

3419 
	`TIM_ETRC⁄fig
(
TIMx
, 
TIM_ExtTRGPªsˇÀr
, 
TIM_ExtTRGPﬁ¨ôy
, 
ExtTRGFûãr
);

3422 
TIMx
->
SMCR
 |
TIM_SMCR_ECE
;

3423 
	}
}

3476 
	$TIM_Sñe˘I≈utTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_I≈utTriggîSour˚
)

3478 
uöt16_t
 
tmpsm¸
 = 0;

3481 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3482 
	`as£π_∑øm
(
	`IS_TIM_TRIGGER_SELECTION
(
TIM_I≈utTriggîSour˚
));

3485 
tmpsm¸
 = 
TIMx
->
SMCR
;

3488 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_TS
;

3491 
tmpsm¸
 |
TIM_I≈utTriggîSour˚
;

3494 
TIMx
->
SMCR
 = 
tmpsm¸
;

3495 
	}
}

3519 
	$TIM_Sñe˘OuçutTriggî
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_TRGOSour˚
)

3522 
	`as£π_∑øm
(
	`IS_TIM_LIST7_PERIPH
(
TIMx
));

3523 
	`as£π_∑øm
(
	`IS_TIM_TRGO_SOURCE
(
TIM_TRGOSour˚
));

3526 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_MMS
;

3528 
TIMx
->
CR2
 |
TIM_TRGOSour˚
;

3529 
	}
}

3557 
	$TIM_Sñe˘OuçutTriggî2
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_TRGO2Sour˚
)

3560 
	`as£π_∑øm
(
	`IS_TIM_LIST4_PERIPH
(
TIMx
));

3561 
	`as£π_∑øm
(
	`IS_TIM_TRGO2_SOURCE
(
TIM_TRGO2Sour˚
));

3564 
TIMx
->
CR2
 &(
uöt32_t
)~
TIM_CR2_MMS2
;

3566 
TIMx
->
CR2
 |
TIM_TRGO2Sour˚
;

3567 
	}
}

3584 
	$TIM_Sñe˘SœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt32_t
 
TIM_SœveMode
)

3587 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3588 
	`as£π_∑øm
(
	`IS_TIM_SLAVE_MODE
(
TIM_SœveMode
));

3591 
TIMx
->
SMCR
 &(
uöt32_t
)~
TIM_SMCR_SMS
;

3594 
TIMx
->
SMCR
 |(
uöt32_t
)
TIM_SœveMode
;

3595 
	}
}

3607 
	$TIM_Sñe˘Ma°îSœveMode
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Ma°îSœveMode
)

3610 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3611 
	`as£π_∑øm
(
	`IS_TIM_MSM_STATE
(
TIM_Ma°îSœveMode
));

3614 
TIMx
->
SMCR
 &(
uöt16_t
)~
TIM_SMCR_MSM
;

3617 
TIMx
->
SMCR
 |
TIM_Ma°îSœveMode
;

3618 
	}
}

3637 
	$TIM_ETRC⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ExtTRGPªsˇÀr
,

3638 
uöt16_t
 
TIM_ExtTRGPﬁ¨ôy
, uöt16_à
ExtTRGFûãr
)

3640 
uöt16_t
 
tmpsm¸
 = 0;

3643 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3644 
	`as£π_∑øm
(
	`IS_TIM_EXT_PRESCALER
(
TIM_ExtTRGPªsˇÀr
));

3645 
	`as£π_∑øm
(
	`IS_TIM_EXT_POLARITY
(
TIM_ExtTRGPﬁ¨ôy
));

3646 
	`as£π_∑øm
(
	`IS_TIM_EXT_FILTER
(
ExtTRGFûãr
));

3648 
tmpsm¸
 = 
TIMx
->
SMCR
;

3651 
tmpsm¸
 &
SMCR_ETR_MASK
;

3654 
tmpsm¸
 |(
uöt16_t
)(
TIM_ExtTRGPªsˇÀr
 | (uöt16_t)(
TIM_ExtTRGPﬁ¨ôy
 | (uöt16_t)(
ExtTRGFûãr
 << (uint16_t)8)));

3657 
TIMx
->
SMCR
 = 
tmpsm¸
;

3658 
	}
}

3695 
	$TIM_EncodîI¡îÁ˚C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_EncodîMode
,

3696 
uöt16_t
 
TIM_IC1Pﬁ¨ôy
, uöt16_à
TIM_IC2Pﬁ¨ôy
)

3698 
uöt16_t
 
tmpsm¸
 = 0;

3699 
uöt16_t
 
tmpccmr1
 = 0;

3700 
uöt16_t
 
tmpc˚r
 = 0;

3703 
	`as£π_∑øm
(
	`IS_TIM_LIST3_PERIPH
(
TIMx
));

3704 
	`as£π_∑øm
(
	`IS_TIM_ENCODER_MODE
(
TIM_EncodîMode
));

3705 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC1Pﬁ¨ôy
));

3706 
	`as£π_∑øm
(
	`IS_TIM_IC_POLARITY
(
TIM_IC2Pﬁ¨ôy
));

3709 
tmpsm¸
 = 
TIMx
->
SMCR
;

3712 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3715 
tmpc˚r
 = 
TIMx
->
CCER
;

3718 
tmpsm¸
 &(
uöt16_t
)~
TIM_SMCR_SMS
;

3719 
tmpsm¸
 |
TIM_EncodîMode
;

3722 
tmpccmr1
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR1_CC2S
);

3723 
tmpccmr1
 |
TIM_CCMR1_CC1S_0
 | 
TIM_CCMR1_CC2S_0
;

3726 
tmpc˚r
 &((
uöt16_t
)~
TIM_CCER_CC1P
Ë& ((uöt16_t)~
TIM_CCER_CC2P
);

3727 
tmpc˚r
 |(
uöt16_t
)(
TIM_IC1Pﬁ¨ôy
 | (uöt16_t)(
TIM_IC2Pﬁ¨ôy
 << (uint16_t)4));

3730 
TIMx
->
SMCR
 = 
tmpsm¸
;

3733 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3736 
TIMx
->
CCER
 = 
tmpc˚r
;

3737 
	}
}

3747 
	$TIM_Sñe˘HÆlSís‹
(
TIM_Ty≥Def
* 
TIMx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

3750 
	`as£π_∑øm
(
	`IS_TIM_LIST2_PERIPH
(
TIMx
));

3751 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

3753 i‡(
NewSèã
 !
DISABLE
)

3756 
TIMx
->
CR2
 |
TIM_CR2_TI1S
;

3761 
TIMx
->
CR2
 &(
uöt16_t
)~
TIM_CR2_TI1S
;

3763 
	}
}

3803 
	$TIM_Rem≠C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_Rem≠
)

3806 
	`as£π_∑øm
(
	`IS_TIM_LIST8_PERIPH
(
TIMx
));

3807 
	`as£π_∑øm
(
	`IS_TIM_REMAP
(
TIM_Rem≠
));

3810 
TIMx
->
OR
 = 
TIM_Rem≠
;

3811 
	}
}

3834 
	$TI1_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3835 
uöt16_t
 
TIM_ICFûãr
)

3837 
uöt32_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0;

3840 
TIMx
->
CCER
 &(
uöt32_t
)~
TIM_CCER_CC1E
;

3841 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3842 
tmpc˚r
 = 
TIMx
->
CCER
;

3845 
tmpccmr1
 &((
uöt32_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt32_t)~
TIM_CCMR1_IC1F
);

3846 
tmpccmr1
 |(
uöt32_t
)(
TIM_ICSñe˘i⁄
 | (uöt32_t)((uöt32_t)
TIM_ICFûãr
 << 4));

3849 
tmpc˚r
 &(
uöt32_t
)~(
TIM_CCER_CC1P
 | 
TIM_CCER_CC1NP
);

3850 
tmpc˚r
 |(
uöt32_t
)(
TIM_ICPﬁ¨ôy
 | (uöt32_t)
TIM_CCER_CC1E
);

3853 
TIMx
->
CCMR1
 = 
tmpccmr1
;

3854 
TIMx
->
CCER
 = 
tmpc˚r
;

3855 
	}
}

3875 
	$TI2_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3876 
uöt16_t
 
TIM_ICFûãr
)

3878 
uöt32_t
 
tmpccmr1
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3881 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC2E
;

3882 
tmpccmr1
 = 
TIMx
->
CCMR1
;

3883 
tmpc˚r
 = 
TIMx
->
CCER
;

3884 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 4);

3887 
tmpccmr1
 &((
uöt32_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt32_t)~
TIM_CCMR1_IC2F
);

3888 
tmpccmr1
 |(
uöt32_t
)((uöt32_t)
TIM_ICFûãr
 << 12);

3889 
tmpccmr1
 |(
uöt32_t
)((uöt32_t)
TIM_ICSñe˘i⁄
 << 8);

3892 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC2P
 | 
TIM_CCER_CC2NP
);

3893 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC2E
);

3896 
TIMx
->
CCMR1
 = 
tmpccmr1
 ;

3897 
TIMx
->
CCER
 = 
tmpc˚r
;

3898 
	}
}

3917 
	$TI3_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3918 
uöt16_t
 
TIM_ICFûãr
)

3920 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3923 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC3E
;

3924 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3925 
tmpc˚r
 = 
TIMx
->
CCER
;

3926 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 8);

3929 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC1S
Ë& ((uöt16_t)~
TIM_CCMR2_IC3F
);

3930 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 | (uöt16_t)(
TIM_ICFûãr
 << (uint16_t)4));

3933 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC3P
 | 
TIM_CCER_CC3NP
);

3934 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC3E
);

3937 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3938 
TIMx
->
CCER
 = 
tmpc˚r
;

3939 
	}
}

3958 
	$TI4_C⁄fig
(
TIM_Ty≥Def
* 
TIMx
, 
uöt16_t
 
TIM_ICPﬁ¨ôy
, uöt16_à
TIM_ICSñe˘i⁄
,

3959 
uöt16_t
 
TIM_ICFûãr
)

3961 
uöt16_t
 
tmpccmr2
 = 0, 
tmpc˚r
 = 0, 
tmp
 = 0;

3964 
TIMx
->
CCER
 &(
uöt16_t
)~
TIM_CCER_CC4E
;

3965 
tmpccmr2
 = 
TIMx
->
CCMR2
;

3966 
tmpc˚r
 = 
TIMx
->
CCER
;

3967 
tmp
 = (
uöt16_t
)(
TIM_ICPﬁ¨ôy
 << 12);

3970 
tmpccmr2
 &((
uöt16_t
)~
TIM_CCMR1_CC2S
Ë& ((uöt16_t)~
TIM_CCMR1_IC2F
);

3971 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICSñe˘i⁄
 << 8);

3972 
tmpccmr2
 |(
uöt16_t
)(
TIM_ICFûãr
 << 12);

3975 
tmpc˚r
 &(
uöt16_t
)~(
TIM_CCER_CC4P
 | 
TIM_CCER_CC4NP
);

3976 
tmpc˚r
 |(
uöt16_t
)(
tmp
 | (uöt16_t)
TIM_CCER_CC4E
);

3979 
TIMx
->
CCMR2
 = 
tmpccmr2
;

3980 
TIMx
->
CCER
 = 
tmpc˚r
 ;

3981 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_usart.c

81 
	~"°m32f30x_ußπ.h
"

82 
	~"°m32f30x_rcc.h
"

97 
	#CR1_CLEAR_MASK
 ((
uöt32_t
)(
USART_CR1_M
 | 
USART_CR1_PCE
 | \

	)

98 
	gUSART_CR1_PS
 | 
	gUSART_CR1_TE
 | \

99 
	gUSART_CR1_RE
))

102 
	#CR2_CLOCK_CLEAR_MASK
 ((
uöt32_t
)(
USART_CR2_CLKEN
 | 
USART_CR2_CPOL
 | \

	)

103 
	gUSART_CR2_CPHA
 | 
	gUSART_CR2_LBCL
))

106 
	#CR3_CLEAR_MASK
 ((
uöt32_t
)(
USART_CR3_RTSE
 | 
USART_CR3_CTSE
))

	)

109 
	#IT_MASK
 ((
uöt32_t
)0x000000FF)

	)

173 
	$USART_DeInô
(
USART_Ty≥Def
* 
USARTx
)

176 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

178 i‡(
USARTx
 =
USART1
)

180 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
ENABLE
);

181 
	`RCC_APB2PîùhRe£tCmd
(
RCC_APB2Pîùh_USART1
, 
DISABLE
);

183 i‡(
USARTx
 =
USART2
)

185 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
ENABLE
);

186 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART2
, 
DISABLE
);

188 i‡(
USARTx
 =
USART3
)

190 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
ENABLE
);

191 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_USART3
, 
DISABLE
);

193 i‡(
USARTx
 =
UART4
)

195 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
ENABLE
);

196 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART4
, 
DISABLE
);

200 i‡(
USARTx
 =
UART5
)

202 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
ENABLE
);

203 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_UART5
, 
DISABLE
);

206 
	}
}

217 
	$USART_Inô
(
USART_Ty≥Def
* 
USARTx
, 
USART_InôTy≥Def
* 
USART_InôSåu˘
)

219 
uöt32_t
 
dividî
 = 0, 
≠b˛ock
 = 0, 
tm¥eg
 = 0;

220 
RCC_ClocksTy≥Def
 
RCC_ClocksSètus
;

223 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

224 
	`as£π_∑øm
(
	`IS_USART_BAUDRATE
(
USART_InôSåu˘
->
USART_BaudR©e
));

225 
	`as£π_∑øm
(
	`IS_USART_WORD_LENGTH
(
USART_InôSåu˘
->
USART_W‹dLígth
));

226 
	`as£π_∑øm
(
	`IS_USART_STOPBITS
(
USART_InôSåu˘
->
USART_St›Bôs
));

227 
	`as£π_∑øm
(
	`IS_USART_PARITY
(
USART_InôSåu˘
->
USART_P¨ôy
));

228 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_InôSåu˘
->
USART_Mode
));

229 
	`as£π_∑øm
(
	`IS_USART_HARDWARE_FLOW_CONTROL
(
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
));

232 
USARTx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
USART_CR1_UE
);

235 
tm¥eg
 = 
USARTx
->
CR2
;

237 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_STOP
);

241 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_St›Bôs
;

244 
USARTx
->
CR2
 = 
tm¥eg
;

247 
tm¥eg
 = 
USARTx
->
CR1
;

249 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR1_CLEAR_MASK
);

255 
tm¥eg
 |(
uöt32_t
)
USART_InôSåu˘
->
USART_W‹dLígth
 | USART_InôSåu˘->
USART_P¨ôy
 |

256 
USART_InôSåu˘
->
USART_Mode
;

259 
USARTx
->
CR1
 = 
tm¥eg
;

262 
tm¥eg
 = 
USARTx
->
CR3
;

264 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR3_CLEAR_MASK
);

268 
tm¥eg
 |
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
;

271 
USARTx
->
CR3
 = 
tm¥eg
;

275 
	`RCC_GëClocksFªq
(&
RCC_ClocksSètus
);

277 i‡(
USARTx
 =
USART1
)

279 
≠b˛ock
 = 
RCC_ClocksSètus
.
USART1CLK_Fªquícy
;

281 i‡(
USARTx
 =
USART2
)

283 
≠b˛ock
 = 
RCC_ClocksSètus
.
USART2CLK_Fªquícy
;

285 i‡(
USARTx
 =
USART3
)

287 
≠b˛ock
 = 
RCC_ClocksSètus
.
USART3CLK_Fªquícy
;

289 i‡(
USARTx
 =
UART4
)

291 
≠b˛ock
 = 
RCC_ClocksSètus
.
UART4CLK_Fªquícy
;

295 
≠b˛ock
 = 
RCC_ClocksSètus
.
UART5CLK_Fªquícy
;

299 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

302 
dividî
 = (
uöt32_t
)((2 * 
≠b˛ock
Ë/ (
USART_InôSåu˘
->
USART_BaudR©e
));

303 
tm¥eg
 = (
uöt32_t
)((2 * 
≠b˛ock
Ë% (
USART_InôSåu˘
->
USART_BaudR©e
));

308 
dividî
 = (
uöt32_t
)((
≠b˛ock
Ë/ (
USART_InôSåu˘
->
USART_BaudR©e
));

309 
tm¥eg
 = (
uöt32_t
)((
≠b˛ock
Ë% (
USART_InôSåu˘
->
USART_BaudR©e
));

313 i‡(
tm¥eg
 >(
USART_InôSåu˘
->
USART_BaudR©e
) / 2)

315 
dividî
++;

319 i‡((
USARTx
->
CR1
 & 
USART_CR1_OVER8
) != 0)

322 
tm¥eg
 = (
dividî
 & (
uöt16_t
)0x000F) >> 1;

325 
dividî
 = (dividî & (
uöt16_t
)0xFFF0Ë| 
tm¥eg
;

329 
USARTx
->
BRR
 = (
uöt16_t
)
dividî
;

330 
	}
}

338 
	$USART_Såu˘Inô
(
USART_InôTy≥Def
* 
USART_InôSåu˘
)

341 
USART_InôSåu˘
->
USART_BaudR©e
 = 9600;

342 
USART_InôSåu˘
->
USART_W‹dLígth
 = 
USART_W‹dLígth_8b
;

343 
USART_InôSåu˘
->
USART_St›Bôs
 = 
USART_St›Bôs_1
;

344 
USART_InôSåu˘
->
USART_P¨ôy
 = 
USART_P¨ôy_No
 ;

345 
USART_InôSåu˘
->
USART_Mode
 = 
USART_Mode_Rx
 | 
USART_Mode_Tx
;

346 
USART_InôSåu˘
->
USART_H¨dw¨eFlowC⁄åﬁ
 = 
USART_H¨dw¨eFlowC⁄åﬁ_N⁄e
;

347 
	}
}

359 
	$USART_ClockInô
(
USART_Ty≥Def
* 
USARTx
, 
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

361 
uöt32_t
 
tm¥eg
 = 0;

363 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

364 
	`as£π_∑øm
(
	`IS_USART_CLOCK
(
USART_ClockInôSåu˘
->
USART_Clock
));

365 
	`as£π_∑øm
(
	`IS_USART_CPOL
(
USART_ClockInôSåu˘
->
USART_CPOL
));

366 
	`as£π_∑øm
(
	`IS_USART_CPHA
(
USART_ClockInôSåu˘
->
USART_CPHA
));

367 
	`as£π_∑øm
(
	`IS_USART_LASTBIT
(
USART_ClockInôSåu˘
->
USART_La°Bô
));

369 
tm¥eg
 = 
USARTx
->
CR2
;

371 
tm¥eg
 &(
uöt32_t
)~((uöt32_t)
CR2_CLOCK_CLEAR_MASK
);

377 
tm¥eg
 |(
uöt32_t
)(
USART_ClockInôSåu˘
->
USART_Clock
 | USART_ClockInôSåu˘->
USART_CPOL
 |

378 
USART_ClockInôSåu˘
->
USART_CPHA
 | USART_ClockInôSåu˘->
USART_La°Bô
);

380 
USARTx
->
CR2
 = 
tm¥eg
;

381 
	}
}

389 
	$USART_ClockSåu˘Inô
(
USART_ClockInôTy≥Def
* 
USART_ClockInôSåu˘
)

392 
USART_ClockInôSåu˘
->
USART_Clock
 = 
USART_Clock_DißbÀ
;

393 
USART_ClockInôSåu˘
->
USART_CPOL
 = 
USART_CPOL_Low
;

394 
USART_ClockInôSåu˘
->
USART_CPHA
 = 
USART_CPHA_1Edge
;

395 
USART_ClockInôSåu˘
->
USART_La°Bô
 = 
USART_La°Bô_DißbÀ
;

396 
	}
}

406 
	$USART_Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

409 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

410 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

412 i‡(
NewSèã
 !
DISABLE
)

415 
USARTx
->
CR1
 |
USART_CR1_UE
;

420 
USARTx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
USART_CR1_UE
);

422 
	}
}

436 
	$USART_Dúe˘i⁄ModeCmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_Dúe˘i⁄Mode
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

439 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

440 
	`as£π_∑øm
(
	`IS_USART_MODE
(
USART_Dúe˘i⁄Mode
));

441 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

443 i‡(
NewSèã
 !
DISABLE
)

447 
USARTx
->
CR1
 |
USART_Dúe˘i⁄Mode
;

453 
USARTx
->
CR1
 &(
uöt32_t
)~
USART_Dúe˘i⁄Mode
;

455 
	}
}

468 
	$USART_OvîSam∂ög8Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

471 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

472 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

474 i‡(
NewSèã
 !
DISABLE
)

477 
USARTx
->
CR1
 |
USART_CR1_OVER8
;

482 
USARTx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
USART_CR1_OVER8
);

484 
	}
}

496 
	$USART_O√BôMëhodCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

499 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

500 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

502 i‡(
NewSèã
 !
DISABLE
)

505 
USARTx
->
CR3
 |
USART_CR3_ONEBIT
;

510 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_ONEBIT
);

512 
	}
}

526 
	$USART_MSBFú°Cmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

529 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

530 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

532 i‡(
NewSèã
 !
DISABLE
)

536 
USARTx
->
CR2
 |
USART_CR2_MSBFIRST
;

542 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_MSBFIRST
);

544 
	}
}

560 
	$USART_D©aInvCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

563 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

564 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

566 i‡(
NewSèã
 !
DISABLE
)

570 
USARTx
->
CR2
 |
USART_CR2_DATAINV
;

576 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_DATAINV
);

578 
	}
}

596 
	$USART_InvPöCmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_InvPö
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

599 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

600 
	`as£π_∑øm
(
	`IS_USART_INVERSTION_PIN
(
USART_InvPö
));

601 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

603 i‡(
NewSèã
 !
DISABLE
)

607 
USARTx
->
CR2
 |
USART_InvPö
;

613 
USARTx
->
CR2
 &(
uöt32_t
)~
USART_InvPö
;

615 
	}
}

629 
	$USART_SWAPPöCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

632 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

633 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

635 i‡(
NewSèã
 !
DISABLE
)

638 
USARTx
->
CR2
 |
USART_CR2_SWAP
;

643 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_SWAP
);

645 
	}
}

655 
	$USART_Re˚ivîTimeOutCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

658 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

659 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

661 i‡(
NewSèã
 !
DISABLE
)

665 
USARTx
->
CR2
 |
USART_CR2_RTOEN
;

671 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_RTOEN
);

673 
	}
}

682 
	$USART_SëRe˚ivîTimeOut
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_Re˚ivîTimeOut
)

685 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

686 
	`as£π_∑øm
(
	`IS_USART_TIMEOUT
(
USART_Re˚ivîTimeOut
));

690 
USARTx
->
RTOR
 &(
uöt32_t
)~((uöt32_t)
USART_RTOR_RTO
);

693 
USARTx
->
RTOR
 |
USART_Re˚ivîTimeOut
;

694 
	}
}

705 
	$USART_SëPªsˇÀr
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_PªsˇÀr
)

708 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

711 
USARTx
->
GTPR
 &
USART_GTPR_GT
;

713 
USARTx
->
GTPR
 |
USART_PªsˇÀr
;

714 
	}
}

754 
	$USART_STOPModeCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

757 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

758 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

760 i‡(
NewSèã
 !
DISABLE
)

764 
USARTx
->
CR1
 |
USART_CR1_UESM
;

770 
USARTx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
USART_CR1_UESM
);

772 
	}
}

787 
	$USART_St›ModeWakeUpSour˚C⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_WakeUpSour˚
)

790 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

791 
	`as£π_∑øm
(
	`IS_USART_STOPMODE_WAKEUPSOURCE
(
USART_WakeUpSour˚
));

793 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_WUS
);

794 
USARTx
->
CR3
 |
USART_WakeUpSour˚
;

795 
	}
}

838 
	$USART_AutoBaudR©eCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

841 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

842 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

844 i‡(
NewSèã
 !
DISABLE
)

848 
USARTx
->
CR2
 |
USART_CR2_ABREN
;

854 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_ABREN
);

856 
	}
}

872 
	$USART_AutoBaudR©eC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_AutoBaudR©e
)

875 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

876 
	`as£π_∑øm
(
	`IS_USART_AUTOBAUDRATE_MODE
(
USART_AutoBaudR©e
));

878 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_ABRMODE
);

879 
USARTx
->
CR2
 |
USART_AutoBaudR©e
;

880 
	}
}

915 
	$USART_SídD©a
(
USART_Ty≥Def
* 
USARTx
, 
uöt16_t
 
D©a
)

918 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

919 
	`as£π_∑øm
(
	`IS_USART_DATA
(
D©a
));

922 
USARTx
->
TDR
 = (
D©a
 & (
uöt16_t
)0x01FF);

923 
	}
}

931 
uöt16_t
 
	$USART_Re˚iveD©a
(
USART_Ty≥Def
* 
USARTx
)

934 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

937  (
uöt16_t
)(
USARTx
->
RDR
 & (uint16_t)0x01FF);

938 
	}
}

981 
	$USART_SëAddªss
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Addªss
)

984 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

987 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_ADD
);

989 
USARTx
->
CR2
 |=((
uöt32_t
)
USART_Addªss
 << (uint32_t)0x18);

990 
	}
}

1000 
	$USART_MuãModeCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1003 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1004 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1006 i‡(
NewSèã
 !
DISABLE
)

1009 
USARTx
->
CR1
 |
USART_CR1_MME
;

1014 
USARTx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
USART_CR1_MME
);

1016 
	}
}

1028 
	$USART_MuãModeWakeUpC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_WakeUp
)

1031 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1032 
	`as£π_∑øm
(
	`IS_USART_MUTEMODE_WAKEUP
(
USART_WakeUp
));

1034 
USARTx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
USART_CR1_WAKE
);

1035 
USARTx
->
CR1
 |
USART_WakeUp
;

1036 
	}
}

1048 
	$USART_AddªssDëe˘i⁄C⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_AddªssLígth
)

1051 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1052 
	`as£π_∑øm
(
	`IS_USART_ADDRESS_DETECTION
(
USART_AddªssLígth
));

1054 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_ADDM7
);

1055 
USARTx
->
CR2
 |
USART_AddªssLígth
;

1056 
	}
}

1113 
	$USART_LINBªakDëe˘LígthC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_LINBªakDëe˘Lígth
)

1116 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1117 
	`as£π_∑øm
(
	`IS_USART_LIN_BREAK_DETECT_LENGTH
(
USART_LINBªakDëe˘Lígth
));

1119 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_LBDL
);

1120 
USARTx
->
CR2
 |
USART_LINBªakDëe˘Lígth
;

1121 
	}
}

1131 
	$USART_LINCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1134 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1135 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1137 i‡(
NewSèã
 !
DISABLE
)

1140 
USARTx
->
CR2
 |
USART_CR2_LINEN
;

1145 
USARTx
->
CR2
 &(
uöt32_t
)~((uöt32_t)
USART_CR2_LINEN
);

1147 
	}
}

1189 
	$USART_HÆfDu∂exCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1192 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1193 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1195 i‡(
NewSèã
 !
DISABLE
)

1198 
USARTx
->
CR3
 |
USART_CR3_HDSEL
;

1203 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_HDSEL
);

1205 
	}
}

1270 
	$USART_SëGu¨dTime
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_Gu¨dTime
)

1273 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1276 
USARTx
->
GTPR
 &
USART_GTPR_PSC
;

1278 
USARTx
->
GTPR
 |(
uöt16_t
)((uöt16_t)
USART_Gu¨dTime
 << 0x08);

1279 
	}
}

1289 
	$USART_Sm¨tC¨dCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1292 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1293 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1294 i‡(
NewSèã
 !
DISABLE
)

1297 
USARTx
->
CR3
 |
USART_CR3_SCEN
;

1302 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_SCEN
);

1304 
	}
}

1314 
	$USART_Sm¨tC¨dNACKCmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1317 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1318 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1319 i‡(
NewSèã
 !
DISABLE
)

1322 
USARTx
->
CR3
 |
USART_CR3_NACK
;

1327 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_NACK
);

1329 
	}
}

1338 
	$USART_SëAutoRëryCou¡
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_AutoCou¡
)

1341 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1342 
	`as£π_∑øm
(
	`IS_USART_AUTO_RETRY_COUNTER
(
USART_AutoCou¡
));

1344 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_SCARCNT
);

1346 
USARTx
->
CR3
 |(
uöt32_t
)((uöt32_t)
USART_AutoCou¡
 << 0x11);

1347 
	}
}

1356 
	$USART_SëBlockLígth
(
USART_Ty≥Def
* 
USARTx
, 
uöt8_t
 
USART_BlockLígth
)

1359 
	`as£π_∑øm
(
	`IS_USART_123_PERIPH
(
USARTx
));

1362 
USARTx
->
RTOR
 &(
uöt32_t
)~((uöt32_t)
USART_RTOR_BLEN
);

1364 
USARTx
->
RTOR
 |(
uöt32_t
)((uöt32_t)
USART_BlockLígth
 << 0x18);

1365 
	}
}

1419 
	$USART_IrDAC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_IrDAMode
)

1422 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1423 
	`as£π_∑øm
(
	`IS_USART_IRDA_MODE
(
USART_IrDAMode
));

1425 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_IRLP
);

1426 
USARTx
->
CR3
 |
USART_IrDAMode
;

1427 
	}
}

1437 
	$USART_IrDACmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1440 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1441 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1443 i‡(
NewSèã
 !
DISABLE
)

1446 
USARTx
->
CR3
 |
USART_CR3_IREN
;

1451 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_IREN
);

1453 
	}
}

1495 
	$USART_DECmd
(
USART_Ty≥Def
* 
USARTx
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1498 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1499 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1500 i‡(
NewSèã
 !
DISABLE
)

1503 
USARTx
->
CR3
 |
USART_CR3_DEM
;

1508 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_DEM
);

1510 
	}
}

1522 
	$USART_DEPﬁ¨ôyC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DEPﬁ¨ôy
)

1525 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1526 
	`as£π_∑øm
(
	`IS_USART_DE_POLARITY
(
USART_DEPﬁ¨ôy
));

1528 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_DEP
);

1529 
USARTx
->
CR3
 |
USART_DEPﬁ¨ôy
;

1530 
	}
}

1540 
	$USART_SëDEAs£πi⁄Time
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DEAs£πi⁄Time
)

1543 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1544 
	`as£π_∑øm
(
	`IS_USART_DE_ASSERTION_DEASSERTION_TIME
(
USART_DEAs£πi⁄Time
));

1547 
USARTx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
USART_CR1_DEAT
);

1549 
USARTx
->
CR1
 |=((
uöt32_t
)
USART_DEAs£πi⁄Time
 << (uint32_t)0x15);

1550 
	}
}

1560 
	$USART_SëDEDós£πi⁄Time
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DEDós£πi⁄Time
)

1563 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1564 
	`as£π_∑øm
(
	`IS_USART_DE_ASSERTION_DEASSERTION_TIME
(
USART_DEDós£πi⁄Time
));

1567 
USARTx
->
CR1
 &(
uöt32_t
)~((uöt32_t)
USART_CR1_DEDT
);

1569 
USARTx
->
CR1
 |=((
uöt32_t
)
USART_DEDós£πi⁄Time
 << (uint32_t)0x10);

1570 
	}
}

1607 
	$USART_DMACmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DMAReq
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1610 
	`as£π_∑øm
(
	`IS_USART_1234_PERIPH
(
USARTx
));

1611 
	`as£π_∑øm
(
	`IS_USART_DMAREQ
(
USART_DMAReq
));

1612 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1614 i‡(
NewSèã
 !
DISABLE
)

1618 
USARTx
->
CR3
 |
USART_DMAReq
;

1624 
USARTx
->
CR3
 &(
uöt32_t
)~
USART_DMAReq
;

1626 
	}
}

1640 
	$USART_DMARe˚±i⁄Eº‹C⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_DMAOnEº‹
)

1643 
	`as£π_∑øm
(
	`IS_USART_1234_PERIPH
(
USARTx
));

1644 
	`as£π_∑øm
(
	`IS_USART_DMAONERROR
(
USART_DMAOnEº‹
));

1647 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_DDRE
);

1649 
USARTx
->
CR3
 |
USART_DMAOnEº‹
;

1650 
	}
}

1773 
	$USART_ITC⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_IT
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1775 
uöt32_t
 
ußπªg
 = 0, 
ôpos
 = 0, 
ômask
 = 0;

1776 
uöt32_t
 
ußπxba£
 = 0;

1778 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1779 
	`as£π_∑øm
(
	`IS_USART_CONFIG_IT
(
USART_IT
));

1780 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1782 
ußπxba£
 = (
uöt32_t
)
USARTx
;

1785 
ußπªg
 = (((
uöt16_t
)
USART_IT
) >> 0x08);

1788 
ôpos
 = 
USART_IT
 & 
IT_MASK
;

1789 
ômask
 = (((
uöt32_t
)0x01Ë<< 
ôpos
);

1791 i‡(
ußπªg
 == 0x02)

1793 
ußπxba£
 += 0x04;

1795 i‡(
ußπªg
 == 0x03)

1797 
ußπxba£
 += 0x08;

1802 i‡(
NewSèã
 !
DISABLE
)

1804 *(
__IO
 
uöt32_t
*)
ußπxba£
 |
ômask
;

1808 *(
__IO
 
uöt32_t
*)
ußπxba£
 &~
ômask
;

1810 
	}
}

1827 
	$USART_Reque°Cmd
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_Reque°
, 
Fun˘i⁄ÆSèã
 
NewSèã
)

1830 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1831 
	`as£π_∑øm
(
	`IS_USART_REQUEST
(
USART_Reque°
));

1832 
	`as£π_∑øm
(
	`IS_FUNCTIONAL_STATE
(
NewSèã
));

1834 i‡(
NewSèã
 !
DISABLE
)

1838 
USARTx
->
RQR
 |
USART_Reque°
;

1844 
USARTx
->
RQR
 &(
uöt32_t
)~
USART_Reque°
;

1846 
	}
}

1860 
	$USART_OvîrunDëe˘i⁄C⁄fig
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_OVRDëe˘i⁄
)

1863 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1864 
	`as£π_∑øm
(
	`IS_USART_OVRDETECTION
(
USART_OVRDëe˘i⁄
));

1867 
USARTx
->
CR3
 &(
uöt32_t
)~((uöt32_t)
USART_CR3_OVRDIS
);

1869 
USARTx
->
CR3
 |
USART_OVRDëe˘i⁄
;

1870 
	}
}

1902 
FœgSètus
 
	$USART_GëFœgSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_FLAG
)

1904 
FœgSètus
 
bô°©us
 = 
RESET
;

1906 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1907 
	`as£π_∑øm
(
	`IS_USART_FLAG
(
USART_FLAG
));

1909 i‡((
USARTx
->
ISR
 & 
USART_FLAG
Ë!(
uöt16_t
)
RESET
)

1911 
bô°©us
 = 
SET
;

1915 
bô°©us
 = 
RESET
;

1917  
bô°©us
;

1918 
	}
}

1953 
	$USART_CÀ¨Fœg
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_FLAG
)

1956 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1957 
	`as£π_∑øm
(
	`IS_USART_CLEAR_FLAG
(
USART_FLAG
));

1959 
USARTx
->
ICR
 = 
USART_FLAG
;

1960 
	}
}

1984 
ITSètus
 
	$USART_GëITSètus
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_IT
)

1986 
uöt32_t
 
bôpos
 = 0, 
ômask
 = 0, 
ußπªg
 = 0;

1987 
ITSètus
 
bô°©us
 = 
RESET
;

1989 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

1990 
	`as£π_∑øm
(
	`IS_USART_GET_IT
(
USART_IT
));

1993 
ußπªg
 = (((
uöt16_t
)
USART_IT
) >> 0x08);

1995 
ômask
 = 
USART_IT
 & 
IT_MASK
;

1996 
ômask
 = (
uöt32_t
)0x01 << itmask;

1998 i‡(
ußπªg
 == 0x01)

2000 
ômask
 &
USARTx
->
CR1
;

2002 i‡(
ußπªg
 == 0x02)

2004 
ômask
 &
USARTx
->
CR2
;

2008 
ômask
 &
USARTx
->
CR3
;

2011 
bôpos
 = 
USART_IT
 >> 0x10;

2012 
bôpos
 = (
uöt32_t
)0x01 << bitpos;

2013 
bôpos
 &
USARTx
->
ISR
;

2014 i‡((
ômask
 !(
uöt16_t
)
RESET
)&&(
bôpos
 != (uint16_t)RESET))

2016 
bô°©us
 = 
SET
;

2020 
bô°©us
 = 
RESET
;

2023  
bô°©us
;

2024 
	}
}

2056 
	$USART_CÀ¨ITPídögBô
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
USART_IT
)

2058 
uöt32_t
 
bôpos
 = 0, 
ômask
 = 0;

2060 
	`as£π_∑øm
(
	`IS_USART_ALL_PERIPH
(
USARTx
));

2061 
	`as£π_∑øm
(
	`IS_USART_CLEAR_IT
(
USART_IT
));

2063 
bôpos
 = 
USART_IT
 >> 0x10;

2064 
ômask
 = ((
uöt32_t
)0x01 << (uöt32_t)
bôpos
);

2065 
USARTx
->
ICR
 = (
uöt32_t
)
ômask
;

2066 
	}
}

	@resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_wwdg.c

87 
	~"°m32f30x_wwdg.h
"

88 
	~"°m32f30x_rcc.h
"

103 
	#CFR_WDGTB_MASK
 ((
uöt32_t
)0xFFFFFE7F)

	)

104 
	#CFR_W_MASK
 ((
uöt32_t
)0xFFFFFF80)

	)

105 
	#BIT_MASK
 ((
uöt8_t
)0x7F)

	)

133 
	$WWDG_DeInô
()

135 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
ENABLE
);

136 
	`RCC_APB1PîùhRe£tCmd
(
RCC_APB1Pîùh_WWDG
, 
DISABLE
);

137 
	}
}

149 
	$WWDG_SëPªsˇÀr
(
uöt32_t
 
WWDG_PªsˇÀr
)

151 
uöt32_t
 
tm¥eg
 = 0;

153 
	`as£π_∑øm
(
	`IS_WWDG_PRESCALER
(
WWDG_PªsˇÀr
));

155 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_WDGTB_MASK
;

157 
tm¥eg
 |
WWDG_PªsˇÀr
;

159 
WWDG
->
CFR
 = 
tm¥eg
;

160 
	}
}

168 
	$WWDG_SëWödowVÆue
(
uöt8_t
 
WödowVÆue
)

170 
__IO
 
uöt32_t
 
tm¥eg
 = 0;

173 
	`as£π_∑øm
(
	`IS_WWDG_WINDOW_VALUE
(
WödowVÆue
));

176 
tm¥eg
 = 
WWDG
->
CFR
 & 
CFR_W_MASK
;

179 
tm¥eg
 |
WödowVÆue
 & (
uöt32_t
Ë
BIT_MASK
;

182 
WWDG
->
CFR
 = 
tm¥eg
;

183 
	}
}

191 
	$WWDG_E«bÀIT
()

193 
WWDG
->
CFR
 |
WWDG_CFR_EWI
;

194 
	}
}

203 
	$WWDG_SëCou¡î
(
uöt8_t
 
Cou¡î
)

206 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

209 
WWDG
->
CR
 = 
Cou¡î
 & 
BIT_MASK
;

210 
	}
}

235 
	$WWDG_E«bÀ
(
uöt8_t
 
Cou¡î
)

238 
	`as£π_∑øm
(
	`IS_WWDG_COUNTER
(
Cou¡î
));

239 
WWDG
->
CR
 = 
WWDG_CR_WDGA
 | 
Cou¡î
;

240 
	}
}

263 
FœgSètus
 
	$WWDG_GëFœgSètus
()

265 
FœgSètus
 
bô°©us
 = 
RESET
;

267 i‡((
WWDG
->
SR
Ë!(
uöt32_t
)
RESET
)

269 
bô°©us
 = 
SET
;

273 
bô°©us
 = 
RESET
;

275  
bô°©us
;

276 
	}
}

283 
	$WWDG_CÀ¨Fœg
()

285 
WWDG
->
SR
 = (
uöt32_t
)
RESET
;

286 
	}
}

	@resources/STM32_USB-FS-Device_Driver/inc/usb_core.h

30 #i‚de‡
__USB_CORE_H


31 
	#__USB_CORE_H


	)

35 
	e_CONTROL_STATE


37 
	mWAIT_SETUP
,

38 
	mSETTING_UP
,

39 
	mIN_DATA
,

40 
	mOUT_DATA
,

41 
	mLAST_IN_DATA
,

42 
	mLAST_OUT_DATA
,

43 
	mWAIT_STATUS_IN
,

44 
	mWAIT_STATUS_OUT
,

45 
	mSTALLED
,

46 
	mPAUSE


47 } 
	tCONTROL_STATE
;

49 
	sO√Des¸ùt‹


51 
uöt8_t
 *
	mDes¸ùt‹
;

52 
uöt16_t
 
	mDes¸ùt‹_Size
;

54 
	tONE_DESCRIPTOR
, *
	tPONE_DESCRIPTOR
;

58 
	e_RESULT


60 
	mUSB_SUCCESS
 = 0,

61 
	mUSB_ERROR
,

62 
	mUSB_UNSUPPORT
,

63 
	mUSB_NOT_READY


65 } 
	tRESULT
;

69 
	s_ENDPOINT_INFO


93 
uöt16_t
 
	mUsb_wLígth
;

94 
uöt16_t
 
	mUsb_wOff£t
;

95 
uöt16_t
 
	mPackëSize
;

96 
	muöt8_t
 *(*
	mC›yD©a
)(
uöt16_t
 
	mLígth
);

97 }
	tENDPOINT_INFO
;

101 
	s_DEVICE


103 
uöt8_t
 
	mTŸÆ_Endpoöt
;

104 
uöt8_t
 
	mTŸÆ_C⁄figuøti⁄
;

106 
	tDEVICE
;

110 
uöt16_t
 
	mw
;

111 
	sBW


113 
uöt8_t
 
	mbb1
;

114 
uöt8_t
 
	mbb0
;

116 
	mbw
;

117 } 
	tuöt16_t_uöt8_t
;

119 
	s_DEVICE_INFO


121 
uöt8_t
 
	mUSBbmReque°Ty≥
;

122 
uöt8_t
 
	mUSBbReque°
;

123 
uöt16_t_uöt8_t
 
	mUSBwVÆues
;

124 
uöt16_t_uöt8_t
 
	mUSBwIndexs
;

125 
uöt16_t_uöt8_t
 
	mUSBwLígths
;

127 
uöt8_t
 
	mC⁄åﬁSèã
;

128 
uöt8_t
 
	mCuºít_Fótuª
;

129 
uöt8_t
 
	mCuºít_C⁄figuøti⁄
;

130 
uöt8_t
 
	mCuºít_I¡îÁ˚
;

131 
uöt8_t
 
	mCuºít_A…î«ãSëtög
;

134 
ENDPOINT_INFO
 
	mCål_Info
;

135 }
	tDEVICE_INFO
;

137 
	s_DEVICE_PROP


139 (*
	mInô
)();

140 (*
	mRe£t
)();

143 (*
	mPro˚ss_Sètus_IN
)();

144 (*
	mPro˚ss_Sètus_OUT
)();

162 
RESULT
 (*
Cœss_D©a_Sëup
)(
uöt8_t
 
	mReque°No
);

173 
RESULT
 (*
Cœss_NoD©a_Sëup
)(
uöt8_t
 
	mReque°No
);

183 
RESULT
 (*
Cœss_Gë_I¡îÁ˚_Sëtög
)(
uöt8_t
 
	mI¡îÁ˚
, uöt8_à
	mA…î«ãSëtög
);

185 
	muöt8_t
* (*
	mGëDevi˚Des¸ùt‹
)(
uöt16_t
 
	mLígth
);

186 
	muöt8_t
* (*
	mGëC⁄figDes¸ùt‹
)(
uöt16_t
 
	mLígth
);

187 
	muöt8_t
* (*
	mGëSåögDes¸ùt‹
)(
uöt16_t
 
	mLígth
);

191 * 
	mRxEP_buf„r
;

193 
uöt8_t
 
	mMaxPackëSize
;

195 }
	tDEVICE_PROP
;

197 
	s_USER_STANDARD_REQUESTS


199 (*
	mU£r_GëC⁄figuøti⁄
)();

200 (*
	mU£r_SëC⁄figuøti⁄
)();

201 (*
	mU£r_GëI¡îÁ˚
)();

202 (*
	mU£r_SëI¡îÁ˚
)();

203 (*
	mU£r_GëSètus
)();

204 (*
	mU£r_CÀ¨Fótuª
)();

205 (*
	mU£r_SëEndPoötFótuª
)();

206 (*
	mU£r_SëDevi˚Fótuª
)();

207 (*
	mU£r_SëDevi˚Addªss
)();

209 
	tUSER_STANDARD_REQUESTS
;

212 
	#Ty≥_Recùõ¡
 (
pInf‹m©i⁄
->
USBbmReque°Ty≥
 & (
REQUEST_TYPE
 | 
RECIPIENT
))

	)

214 
	#Usb_rLígth
 
Usb_wLígth


	)

215 
	#Usb_rOff£t
 
Usb_wOff£t


	)

217 
	#USBwVÆue
 
USBwVÆues
.
w


	)

218 
	#USBwVÆue0
 
USBwVÆues
.
bw
.
bb0


	)

219 
	#USBwVÆue1
 
USBwVÆues
.
bw
.
bb1


	)

220 
	#USBwIndex
 
USBwIndexs
.
w


	)

221 
	#USBwIndex0
 
USBwIndexs
.
bw
.
bb0


	)

222 
	#USBwIndex1
 
USBwIndexs
.
bw
.
bb1


	)

223 
	#USBwLígth
 
USBwLígths
.
w


	)

224 
	#USBwLígth0
 
USBwLígths
.
bw
.
bb0


	)

225 
	#USBwLígth1
 
USBwLígths
.
bw
.
bb1


	)

229 
uöt8_t
 
Sëup0_Pro˚ss
();

230 
uöt8_t
 
Po°0_Pro˚ss
();

231 
uöt8_t
 
Out0_Pro˚ss
();

232 
uöt8_t
 
In0_Pro˚ss
();

234 
RESULT
 
Sènd¨d_SëEndPoötFótuª
();

235 
RESULT
 
Sènd¨d_SëDevi˚Fótuª
();

237 
uöt8_t
 *
Sènd¨d_GëC⁄figuøti⁄
(
uöt16_t
 
Lígth
);

238 
RESULT
 
Sènd¨d_SëC⁄figuøti⁄
();

239 
uöt8_t
 *
Sènd¨d_GëI¡îÁ˚
(
uöt16_t
 
Lígth
);

240 
RESULT
 
Sènd¨d_SëI¡îÁ˚
();

241 
uöt8_t
 *
Sènd¨d_GëDes¸ùt‹D©a
(
uöt16_t
 
Lígth
, 
PONE_DESCRIPTOR
 
pDesc
);

243 
uöt8_t
 *
Sènd¨d_GëSètus
(
uöt16_t
 
Lígth
);

244 
RESULT
 
Sènd¨d_CÀ¨Fótuª
();

245 
SëDevi˚Addªss
(
uöt8_t
);

246 
NOP_Pro˚ss
();

248 
DEVICE_PROP
 
Devi˚_Pr›îty
;

249 
USER_STANDARD_REQUESTS
 
U£r_Sènd¨d_Reque°s
;

250 
DEVICE
 
Devi˚_TabÀ
;

251 
DEVICE_INFO
 
Devi˚_Info
;

254 
__IO
 
uöt16_t
 
SaveRSèã
;

255 
__IO
 
uöt16_t
 
SaveTSèã
;

	@resources/STM32_USB-FS-Device_Driver/inc/usb_def.h

29 #i‚de‡
__USB_DEF_H


30 
	#__USB_DEF_H


	)

34 
	e_RECIPIENT_TYPE


36 
	mDEVICE_RECIPIENT
,

37 
	mINTERFACE_RECIPIENT
,

38 
	mENDPOINT_RECIPIENT
,

39 
	mOTHER_RECIPIENT


40 } 
	tRECIPIENT_TYPE
;

43 
	e_STANDARD_REQUESTS


45 
	mGET_STATUS
 = 0,

46 
	mCLEAR_FEATURE
,

47 
	mRESERVED1
,

48 
	mSET_FEATURE
,

49 
	mRESERVED2
,

50 
	mSET_ADDRESS
,

51 
	mGET_DESCRIPTOR
,

52 
	mSET_DESCRIPTOR
,

53 
	mGET_CONFIGURATION
,

54 
	mSET_CONFIGURATION
,

55 
	mGET_INTERFACE
,

56 
	mSET_INTERFACE
,

57 
	mTOTAL_sREQUEST
,

58 
	mSYNCH_FRAME
 = 12

59 } 
	tSTANDARD_REQUESTS
;

62 
	e_DESCRIPTOR_TYPE


64 
	mDEVICE_DESCRIPTOR
 = 1,

65 
	mCONFIG_DESCRIPTOR
,

66 
	mSTRING_DESCRIPTOR
,

67 
	mINTERFACE_DESCRIPTOR
,

68 
	mENDPOINT_DESCRIPTOR


69 } 
	tDESCRIPTOR_TYPE
;

72 
	e_FEATURE_SELECTOR


74 
	mENDPOINT_STALL
,

75 
	mDEVICE_REMOTE_WAKEUP


76 } 
	tFEATURE_SELECTOR
;

80 
	#REQUEST_TYPE
 0x60

	)

81 
	#STANDARD_REQUEST
 0x00

	)

82 
	#CLASS_REQUEST
 0x20

	)

83 
	#VENDOR_REQUEST
 0x40

	)

85 
	#RECIPIENT
 0x1F

	)

	@resources/STM32_USB-FS-Device_Driver/inc/usb_init.h

30 #i‚de‡
__USB_INIT_H


31 
	#__USB_INIT_H


	)

38 
USB_Inô
();

42 
uöt8_t
 
EPödex
;

47 
DEVICE_INFO
* 
pInf‹m©i⁄
;

50 
DEVICE_PROP
* 
pPr›îty
;

55 
USER_STANDARD_REQUESTS
 *
pU£r_Sènd¨d_Reque°s
;

57 
uöt16_t
 
SaveSèã
 ;

58 
uöt16_t
 
wI¡îru±_Mask
;

	@resources/STM32_USB-FS-Device_Driver/inc/usb_int.h

30 #i‚de‡
__USB_INT_H


31 
	#__USB_INT_H


	)

38 
CTR_LP
();

39 
CTR_HP
();

	@resources/STM32_USB-FS-Device_Driver/inc/usb_lib.h

30 #i‚de‡
__USB_LIB_H


31 
	#__USB_LIB_H


	)

34 
	~"hw_c⁄fig.h
"

35 
	~"usb_ty≥.h
"

36 
	~"usb_ªgs.h
"

37 
	~"usb_def.h
"

38 
	~"usb_c‹e.h
"

39 
	~"usb_öô.h
"

40 
	~"usb_sû.h
"

41 
	~"usb_mem.h
"

42 
	~"usb_öt.h
"

	@resources/STM32_USB-FS-Device_Driver/inc/usb_mem.h

30 #i‚de‡
__USB_MEM_H


31 
	#__USB_MEM_H


	)

38 
U£rToPMABuf„rC›y
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
);

39 
PMAToU£rBuf„rC›y
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
);

	@resources/STM32_USB-FS-Device_Driver/inc/usb_regs.h

30 #i‚de‡
__USB_REGS_H


31 
	#__USB_REGS_H


	)

35 
	e_EP_DBUF_DIR


38 
	mEP_DBUF_ERR
,

39 
	mEP_DBUF_OUT
,

40 
	mEP_DBUF_IN


41 }
	tEP_DBUF_DIR
;

44 
	eEP_BUF_NUM


46 
	mEP_NOBUF
,

47 
	mEP_BUF0
,

48 
	mEP_BUF1


52 
	#RegBa£
 (0x40005C00LË

	)

53 
	#PMAAddr
 (0x40006000LË

	)

60 
	#CNTR
 ((
__IO
 *)(
RegBa£
 + 0x40))

	)

62 
	#ISTR
 ((
__IO
 *)(
RegBa£
 + 0x44))

	)

64 
	#FNR
 ((
__IO
 *)(
RegBa£
 + 0x48))

	)

66 
	#DADDR
 ((
__IO
 *)(
RegBa£
 + 0x4C))

	)

68 
	#BTABLE
 ((
__IO
 *)(
RegBa£
 + 0x50))

	)

72 
	#EP0REG
 ((
__IO
 *)(
RegBa£
)Ë

	)

75 
	#EP0_OUT
 ((
uöt8_t
)0x00)

	)

76 
	#EP0_IN
 ((
uöt8_t
)0x80)

	)

77 
	#EP1_OUT
 ((
uöt8_t
)0x01)

	)

78 
	#EP1_IN
 ((
uöt8_t
)0x81)

	)

79 
	#EP2_OUT
 ((
uöt8_t
)0x02)

	)

80 
	#EP2_IN
 ((
uöt8_t
)0x82)

	)

81 
	#EP3_OUT
 ((
uöt8_t
)0x03)

	)

82 
	#EP3_IN
 ((
uöt8_t
)0x83)

	)

83 
	#EP4_OUT
 ((
uöt8_t
)0x04)

	)

84 
	#EP4_IN
 ((
uöt8_t
)0x84)

	)

85 
	#EP5_OUT
 ((
uöt8_t
)0x05)

	)

86 
	#EP5_IN
 ((
uöt8_t
)0x85)

	)

87 
	#EP6_OUT
 ((
uöt8_t
)0x06)

	)

88 
	#EP6_IN
 ((
uöt8_t
)0x86)

	)

89 
	#EP7_OUT
 ((
uöt8_t
)0x07)

	)

90 
	#EP7_IN
 ((
uöt8_t
)0x87)

	)

93 
	#ENDP0
 ((
uöt8_t
)0)

	)

94 
	#ENDP1
 ((
uöt8_t
)1)

	)

95 
	#ENDP2
 ((
uöt8_t
)2)

	)

96 
	#ENDP3
 ((
uöt8_t
)3)

	)

97 
	#ENDP4
 ((
uöt8_t
)4)

	)

98 
	#ENDP5
 ((
uöt8_t
)5)

	)

99 
	#ENDP6
 ((
uöt8_t
)6)

	)

100 
	#ENDP7
 ((
uöt8_t
)7)

	)

105 
	#ISTR_CTR
 (0x8000Ë

	)

106 
	#ISTR_DOVR
 (0x4000Ë

	)

107 
	#ISTR_ERR
 (0x2000Ë

	)

108 
	#ISTR_WKUP
 (0x1000Ë

	)

109 
	#ISTR_SUSP
 (0x0800Ë

	)

110 
	#ISTR_RESET
 (0x0400Ë

	)

111 
	#ISTR_SOF
 (0x0200Ë

	)

112 
	#ISTR_ESOF
 (0x0100Ë

	)

115 
	#ISTR_DIR
 (0x0010Ë

	)

116 
	#ISTR_EP_ID
 (0x000FË

	)

118 
	#CLR_CTR
 (~
ISTR_CTR
Ë

	)

119 
	#CLR_DOVR
 (~
ISTR_DOVR
Ë

	)

120 
	#CLR_ERR
 (~
ISTR_ERR
Ë

	)

121 
	#CLR_WKUP
 (~
ISTR_WKUP
Ë

	)

122 
	#CLR_SUSP
 (~
ISTR_SUSP
Ë

	)

123 
	#CLR_RESET
 (~
ISTR_RESET
Ë

	)

124 
	#CLR_SOF
 (~
ISTR_SOF
Ë

	)

125 
	#CLR_ESOF
 (~
ISTR_ESOF
Ë

	)

130 
	#CNTR_CTRM
 (0x8000Ë

	)

131 
	#CNTR_DOVRM
 (0x4000Ë

	)

132 
	#CNTR_ERRM
 (0x2000Ë

	)

133 
	#CNTR_WKUPM
 (0x1000Ë

	)

134 
	#CNTR_SUSPM
 (0x0800Ë

	)

135 
	#CNTR_RESETM
 (0x0400Ë

	)

136 
	#CNTR_SOFM
 (0x0200Ë

	)

137 
	#CNTR_ESOFM
 (0x0100Ë

	)

140 
	#CNTR_RESUME
 (0x0010Ë

	)

141 
	#CNTR_FSUSP
 (0x0008Ë

	)

142 
	#CNTR_LPMODE
 (0x0004Ë

	)

143 
	#CNTR_PDWN
 (0x0002Ë

	)

144 
	#CNTR_FRES
 (0x0001Ë

	)

149 
	#FNR_RXDP
 (0x8000Ë

	)

150 
	#FNR_RXDM
 (0x4000Ë

	)

151 
	#FNR_LCK
 (0x2000Ë

	)

152 
	#FNR_LSOF
 (0x1800Ë

	)

153 
	#FNR_FN
 (0x07FFË

	)

157 
	#DADDR_EF
 (0x80)

	)

158 
	#DADDR_ADD
 (0x7F)

	)

163 
	#EP_CTR_RX
 (0x8000Ë

	)

164 
	#EP_DTOG_RX
 (0x4000Ë

	)

165 
	#EPRX_STAT
 (0x3000Ë

	)

166 
	#EP_SETUP
 (0x0800Ë

	)

167 
	#EP_T_FIELD
 (0x0600Ë

	)

168 
	#EP_KIND
 (0x0100Ë

	)

169 
	#EP_CTR_TX
 (0x0080Ë

	)

170 
	#EP_DTOG_TX
 (0x0040Ë

	)

171 
	#EPTX_STAT
 (0x0030Ë

	)

172 
	#EPADDR_FIELD
 (0x000FË

	)

175 
	#EPREG_MASK
 (
EP_CTR_RX
|
EP_SETUP
|
EP_T_FIELD
|
EP_KIND
|
EP_CTR_TX
|
EPADDR_FIELD
)

	)

178 
	#EP_TYPE_MASK
 (0x0600Ë

	)

179 
	#EP_BULK
 (0x0000Ë

	)

180 
	#EP_CONTROL
 (0x0200Ë

	)

181 
	#EP_ISOCHRONOUS
 (0x0400Ë

	)

182 
	#EP_INTERRUPT
 (0x0600Ë

	)

183 
	#EP_T_MASK
 (~
EP_T_FIELD
 & 
EPREG_MASK
)

	)

187 
	#EPKIND_MASK
 (~
EP_KIND
 & 
EPREG_MASK
)

	)

190 
	#EP_TX_DIS
 (0x0000Ë

	)

191 
	#EP_TX_STALL
 (0x0010Ë

	)

192 
	#EP_TX_NAK
 (0x0020Ë

	)

193 
	#EP_TX_VALID
 (0x0030Ë

	)

194 
	#EPTX_DTOG1
 (0x0010Ë

	)

195 
	#EPTX_DTOG2
 (0x0020Ë

	)

196 
	#EPTX_DTOGMASK
 (
EPTX_STAT
|
EPREG_MASK
)

	)

199 
	#EP_RX_DIS
 (0x0000Ë

	)

200 
	#EP_RX_STALL
 (0x1000Ë

	)

201 
	#EP_RX_NAK
 (0x2000Ë

	)

202 
	#EP_RX_VALID
 (0x3000Ë

	)

203 
	#EPRX_DTOG1
 (0x1000Ë

	)

204 
	#EPRX_DTOG2
 (0x2000Ë

	)

205 
	#EPRX_DTOGMASK
 (
EPRX_STAT
|
EPREG_MASK
)

	)

208 
	#_SëCNTR
(
wRegVÆue
Ë(*
CNTR
 = (
uöt16_t
)wRegVÆue)

	)

211 
	#_SëISTR
(
wRegVÆue
Ë(*
ISTR
 = (
uöt16_t
)wRegVÆue)

	)

214 
	#_SëDADDR
(
wRegVÆue
Ë(*
DADDR
 = (
uöt16_t
)wRegVÆue)

	)

217 
	#_SëBTABLE
(
wRegVÆue
)(*
BTABLE
 = (
uöt16_t
)(wRegVÆuê& 0xFFF8))

	)

220 
	#_GëCNTR
(Ë((
uöt16_t
Ë*
CNTR
)

	)

223 
	#_GëISTR
(Ë((
uöt16_t
Ë*
ISTR
)

	)

226 
	#_GëFNR
(Ë((
uöt16_t
Ë*
FNR
)

	)

229 
	#_GëDADDR
(Ë((
uöt16_t
Ë*
DADDR
)

	)

232 
	#_GëBTABLE
(Ë((
uöt16_t
Ë*
BTABLE
)

	)

235 
	#_SëENDPOINT
(
bEpNum
,
wRegVÆue
Ë(*(
EP0REG
 + bEpNum)\

	)

236 (
	guöt16_t
)
	gwRegVÆue
)

239 
	#_GëENDPOINT
(
bEpNum
Ë((
uöt16_t
)(*(
EP0REG
 + bEpNum)))

	)

249 
	#_SëEPTy≥
(
bEpNum
,
wTy≥
Ë(
	`_SëENDPOINT
(bEpNum,\

	)

250 ((
_GëENDPOINT
(
bEpNum
Ë& 
	gEP_T_MASK
Ë| 
	gwTy≥
 )))

259 
	#_GëEPTy≥
(
bEpNum
Ë(
	`_GëENDPOINT
(bEpNumË& 
EP_T_FIELD
)

	)

269 
	#_SëEPTxSètus
(
bEpNum
,
wSèã
Ë{\

	)

270 
uöt16_t
 
	g_wRegVÆ
; \

271 
	g_wRegVÆ
 = 
_GëENDPOINT
(
bEpNum
Ë& 
EPTX_DTOGMASK
;\

273 if((
	gEPTX_DTOG1
 & 
	gwSèã
)!= 0) \

274 
_wRegVÆ
 ^
EPTX_DTOG1
; \

276 if((
	gEPTX_DTOG2
 & 
	gwSèã
)!= 0) \

277 
_wRegVÆ
 ^
EPTX_DTOG2
; \

278 
_SëENDPOINT
(
bEpNum
, (
_wRegVÆ
 | 
EP_CTR_RX
|
EP_CTR_TX
)); \

289 
	#_SëEPRxSètus
(
bEpNum
,
wSèã
Ë{\

	)

290 
uöt16_t
 
	g_wRegVÆ
; \

292 
	g_wRegVÆ
 = 
_GëENDPOINT
(
bEpNum
Ë& 
EPRX_DTOGMASK
;\

294 if((
	gEPRX_DTOG1
 & 
	gwSèã
)!= 0) \

295 
_wRegVÆ
 ^
EPRX_DTOG1
; \

297 if((
	gEPRX_DTOG2
 & 
	gwSèã
)!= 0) \

298 
_wRegVÆ
 ^
EPRX_DTOG2
; \

299 
_SëENDPOINT
(
bEpNum
, (
_wRegVÆ
 | 
EP_CTR_RX
|
EP_CTR_TX
)); \

311 
	#_SëEPRxTxSètus
(
bEpNum
,
wSèãrx
,
wSèãtx
Ë{\

	)

312 
uöt32_t
 
	g_wRegVÆ
; \

314 
	g_wRegVÆ
 = 
_GëENDPOINT
(
bEpNum
Ë& (
EPRX_DTOGMASK
 |
EPTX_STAT
) ;\

316 if((
	gEPRX_DTOG1
 & 
	gwSèãrx
)!= 0) \

317 
_wRegVÆ
 ^
EPRX_DTOG1
; \

319 if((
	gEPRX_DTOG2
 & 
	gwSèãrx
)!= 0) \

320 
_wRegVÆ
 ^
EPRX_DTOG2
; \

322 if((
	gEPTX_DTOG1
 & 
	gwSèãtx
)!= 0) \

323 
_wRegVÆ
 ^
EPTX_DTOG1
; \

325 if((
	gEPTX_DTOG2
 & 
	gwSèãtx
)!= 0) \

326 
_wRegVÆ
 ^
EPTX_DTOG2
; \

327 
_SëENDPOINT
(
bEpNum
, 
_wRegVÆ
 | 
EP_CTR_RX
|
EP_CTR_TX
); \

337 
	#_GëEPTxSètus
(
bEpNum
Ë((
uöt16_t
)
	`_GëENDPOINT
(bEpNumË& 
EPTX_STAT
)

	)

339 
	#_GëEPRxSètus
(
bEpNum
Ë((
uöt16_t
)
	`_GëENDPOINT
(bEpNumË& 
EPRX_STAT
)

	)

348 
	#_SëEPTxVÆid
(
bEpNum
Ë(
	`_SëEPTxSètus
(bEpNum, 
EP_TX_VALID
))

	)

350 
	#_SëEPRxVÆid
(
bEpNum
Ë(
	`_SëEPRxSètus
(bEpNum, 
EP_RX_VALID
))

	)

359 
	#_GëTxSèŒSètus
(
bEpNum
Ë(
	`_GëEPTxSètus
(bEpNumË\

	)

360 =
EP_TX_STALL
)

361 
	#_GëRxSèŒSètus
(
bEpNum
Ë(
	`_GëEPRxSètus
(bEpNumË\

	)

362 =
EP_RX_STALL
)

371 
	#_SëEP_KIND
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

	)

372 (
	gEP_CTR_RX
|
	gEP_CTR_TX
|((
_GëENDPOINT
(
bEpNum
Ë| 
	gEP_KIND
Ë& 
	gEPREG_MASK
))))

373 
	#_CÀ¨EP_KIND
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

	)

374 (
	gEP_CTR_RX
|
	gEP_CTR_TX
|(
_GëENDPOINT
(
bEpNum
Ë& 
	gEPKIND_MASK
))))

383 
	#_Së_Sètus_Out
(
bEpNum
Ë
	`_SëEP_KIND
(bEpNum)

	)

384 
	#_CÀ¨_Sètus_Out
(
bEpNum
Ë
	`_CÀ¨EP_KIND
(bEpNum)

	)

393 
	#_SëEPDoubÀBuff
(
bEpNum
Ë
	`_SëEP_KIND
(bEpNum)

	)

394 
	#_CÀ¨EPDoubÀBuff
(
bEpNum
Ë
	`_CÀ¨EP_KIND
(bEpNum)

	)

403 
	#_CÀ¨EP_CTR_RX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum,\

	)

404 
_GëENDPOINT
(
bEpNum
Ë& 0x7FFF & 
	gEPREG_MASK
))

405 
	#_CÀ¨EP_CTR_TX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum,\

	)

406 
_GëENDPOINT
(
bEpNum
Ë& 0xFF7F & 
	gEPREG_MASK
))

415 
	#_ToggÀDTOG_RX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

	)

416 
	gEP_CTR_RX
|
	gEP_CTR_TX
|
	gEP_DTOG_RX
 | (
_GëENDPOINT
(
bEpNum
Ë& 
	gEPREG_MASK
)))

417 
	#_ToggÀDTOG_TX
(
bEpNum
Ë(
	`_SëENDPOINT
(bEpNum, \

	)

418 
	gEP_CTR_RX
|
	gEP_CTR_TX
|
	gEP_DTOG_TX
 | (
_GëENDPOINT
(
bEpNum
Ë& 
	gEPREG_MASK
)))

427 
	#_CÀ¨DTOG_RX
(
bEpNum
Ëif((
	`_GëENDPOINT
(bEpNumË& 
EP_DTOG_RX
Ë!0)\

	)

428 
	$_ToggÀDTOG_RX
(
bEpNum
)

429 
	#_CÀ¨DTOG_TX
(
bEpNum
Ëif((
	`_GëENDPOINT
(bEpNumË& 
EP_DTOG_TX
Ë!0)\

	)

430 
	$_ToggÀDTOG_TX
(
bEpNum
)

439 
	#_SëEPAddªss
(
bEpNum
,
bAddr
Ë
	`_SëENDPOINT
(bEpNum,\

	)

440 
EP_CTR_RX
|
EP_CTR_TX
|(
	`_GëENDPOINT
(
bEpNum
Ë& 
EPREG_MASK
Ë| 
bAddr
)

449 
	#_GëEPAddªss
(
bEpNum
Ë((
uöt8_t
)(
	`_GëENDPOINT
(bEpNumË& 
EPADDR_FIELD
))

	)

451 
	#_pEPTxAddr
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8 )*2 + 
PMAAddr
))

	)

452 
	#_pEPTxCou¡
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8+2)*2 + 
PMAAddr
))

	)

453 
	#_pEPRxAddr
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8+4)*2 + 
PMAAddr
))

	)

454 
	#_pEPRxCou¡
(
bEpNum
Ë((
uöt32_t
 *)((
	`_GëBTABLE
()+bEpNum*8+6)*2 + 
PMAAddr
))

	)

464 
	#_SëEPTxAddr
(
bEpNum
,
wAddr
Ë(*
	`_pEPTxAddr
(bEpNumË((wAdd∏>> 1Ë<< 1))

	)

465 
	#_SëEPRxAddr
(
bEpNum
,
wAddr
Ë(*
	`_pEPRxAddr
(bEpNumË((wAdd∏>> 1Ë<< 1))

	)

474 
	#_GëEPTxAddr
(
bEpNum
Ë((
uöt16_t
)*
	`_pEPTxAddr
(bEpNum))

	)

475 
	#_GëEPRxAddr
(
bEpNum
Ë((
uöt16_t
)*
	`_pEPRxAddr
(bEpNum))

	)

485 
	#_BlocksOf32
(
dwReg
,
wCou¡
,
wNBlocks
Ë{\

	)

486 
wNBlocks
 = 
wCou¡
 >> 5;\

487 if((
wCou¡
 & 0x1f) == 0)\

488 
wNBlocks
--;\

489 *
pdwReg
 = (
uöt32_t
)((
wNBlocks
 << 10) | 0x8000);\

490 
	}
}

492 
	#_BlocksOf2
(
dwReg
,
wCou¡
,
wNBlocks
Ë{\

	)

493 
	gwNBlocks
 = 
wCou¡
 >> 1;\

494 if((
	gwCou¡
 & 0x1) != 0)\

495 
wNBlocks
++;\

496 *
	gpdwReg
 = (
uöt32_t
)(
wNBlocks
 << 10);\

499 
	#_SëEPCou¡RxReg
(
dwReg
,
wCou¡
Ë{\

	)

500 
uöt16_t
 
	gwNBlocks
;\

501 if(
	gwCou¡
 > 62){
_BlocksOf32
(
dwReg
,
wCou¡
,
wNBlocks
);}\

502 {
_BlocksOf2
(
dwReg
,
wCou¡
,
wNBlocks
);}\

507 
	#_SëEPRxDblBuf0Cou¡
(
bEpNum
,
wCou¡
Ë{\

	)

508 
uöt32_t
 *
	gpdwReg
 = 
_pEPTxCou¡
(
bEpNum
); \

509 
_SëEPCou¡RxReg
(
pdwReg
, 
wCou¡
);\

519 
	#_SëEPTxCou¡
(
bEpNum
,
wCou¡
Ë(*
	`_pEPTxCou¡
(bEpNumËwCou¡)

	)

520 
	#_SëEPRxCou¡
(
bEpNum
,
wCou¡
Ë{\

	)

521 
uöt32_t
 *
	gpdwReg
 = 
_pEPRxCou¡
(
bEpNum
); \

522 
_SëEPCou¡RxReg
(
pdwReg
, 
wCou¡
);\

531 
	#_GëEPTxCou¡
(
bEpNum
)((
uöt16_t
)(*
	`_pEPTxCou¡
(bEpNum)Ë& 0x3ff)

	)

532 
	#_GëEPRxCou¡
(
bEpNum
)((
uöt16_t
)(*
	`_pEPRxCou¡
(bEpNum)Ë& 0x3ff)

	)

542 
	#_SëEPDblBuf0Addr
(
bEpNum
,
wBuf0Addr
Ë{
	`_SëEPTxAddr
(bEpNum, wBuf0Addr);}

	)

543 
	#_SëEPDblBuf1Addr
(
bEpNum
,
wBuf1Addr
Ë{
	`_SëEPRxAddr
(bEpNum, wBuf1Addr);}

	)

554 
	#_SëEPDblBuffAddr
(
bEpNum
,
wBuf0Addr
,
wBuf1Addr
Ë{ \

	)

555 
_SëEPDblBuf0Addr
(
bEpNum
, 
wBuf0Addr
);\

556 
_SëEPDblBuf1Addr
(
bEpNum
, 
wBuf1Addr
);\

566 
	#_GëEPDblBuf0Addr
(
bEpNum
Ë(
	`_GëEPTxAddr
(bEpNum))

	)

567 
	#_GëEPDblBuf1Addr
(
bEpNum
Ë(
	`_GëEPRxAddr
(bEpNum))

	)

579 
	#_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
Ë{ \

	)

580 if(
	gbDú
 =
EP_DBUF_OUT
)\

582 {
_SëEPRxDblBuf0Cou¡
(
bEpNum
,
wCou¡
);} \

583 if(
	gbDú
 =
EP_DBUF_IN
)\

585 *
_pEPTxCou¡
(
bEpNum
Ë(
uöt32_t
)
wCou¡
; \

588 
	#_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
Ë{ \

	)

589 if(
	gbDú
 =
EP_DBUF_OUT
)\

591 {
_SëEPRxCou¡
(
bEpNum
,
wCou¡
);}\

592 if(
	gbDú
 =
EP_DBUF_IN
)\

594 *
_pEPRxCou¡
(
bEpNum
Ë(
uöt32_t
)
wCou¡
; \

597 
	#_SëEPDblBuffCou¡
(
bEpNum
, 
bDú
, 
wCou¡
Ë{\

	)

598 
_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
); \

599 
_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
); \

609 
	#_GëEPDblBuf0Cou¡
(
bEpNum
Ë(
	`_GëEPTxCou¡
(bEpNum))

	)

610 
	#_GëEPDblBuf1Cou¡
(
bEpNum
Ë(
	`_GëEPRxCou¡
(bEpNum))

	)

614 
__IO
 
uöt16_t
 
wI°r
;

617 
SëCNTR
(
uöt16_t
 );

618 
SëISTR
(
uöt16_t
 );

619 
SëDADDR
(
uöt16_t
 );

620 
SëBTABLE
(
uöt16_t
 );

621 
SëBTABLE
(
uöt16_t
 );

622 
uöt16_t
 
GëCNTR
();

623 
uöt16_t
 
GëISTR
();

624 
uöt16_t
 
GëFNR
();

625 
uöt16_t
 
GëDADDR
();

626 
uöt16_t
 
GëBTABLE
();

627 
SëENDPOINT
(
uöt8_t
 , 
uöt16_t
 );

628 
uöt16_t
 
GëENDPOINT
(
uöt8_t
 );

629 
SëEPTy≥
(
uöt8_t
 , 
uöt16_t
 );

630 
uöt16_t
 
GëEPTy≥
(
uöt8_t
 );

631 
SëEPTxSètus
(
uöt8_t
 , 
uöt16_t
 );

632 
SëEPRxSètus
(
uöt8_t
 , 
uöt16_t
 );

633 
SëDouBÀBuffEPSèŒ
(
uöt8_t
 , uöt8_à
bDú
);

634 
uöt16_t
 
GëEPTxSètus
(
uöt8_t
 );

635 
uöt16_t
 
GëEPRxSètus
(
uöt8_t
 );

636 
SëEPTxVÆid
(
uöt8_t
 );

637 
SëEPRxVÆid
(
uöt8_t
 );

638 
uöt16_t
 
GëTxSèŒSètus
(
uöt8_t
 );

639 
uöt16_t
 
GëRxSèŒSètus
(
uöt8_t
 );

640 
SëEP_KIND
(
uöt8_t
 );

641 
CÀ¨EP_KIND
(
uöt8_t
 );

642 
Së_Sètus_Out
(
uöt8_t
 );

643 
CÀ¨_Sètus_Out
(
uöt8_t
 );

644 
SëEPDoubÀBuff
(
uöt8_t
 );

645 
CÀ¨EPDoubÀBuff
(
uöt8_t
 );

646 
CÀ¨EP_CTR_RX
(
uöt8_t
 );

647 
CÀ¨EP_CTR_TX
(
uöt8_t
 );

648 
ToggÀDTOG_RX
(
uöt8_t
 );

649 
ToggÀDTOG_TX
(
uöt8_t
 );

650 
CÀ¨DTOG_RX
(
uöt8_t
 );

651 
CÀ¨DTOG_TX
(
uöt8_t
 );

652 
SëEPAddªss
(
uöt8_t
 , uint8_t );

653 
uöt8_t
 
GëEPAddªss
(uint8_t );

654 
SëEPTxAddr
(
uöt8_t
 , 
uöt16_t
 );

655 
SëEPRxAddr
(
uöt8_t
 , 
uöt16_t
 );

656 
uöt16_t
 
GëEPTxAddr
(
uöt8_t
 );

657 
uöt16_t
 
GëEPRxAddr
(
uöt8_t
 );

658 
SëEPCou¡RxReg
(
uöt32_t
 * , 
uöt16_t
 );

659 
SëEPTxCou¡
(
uöt8_t
 , 
uöt16_t
 );

660 
SëEPRxCou¡
(
uöt8_t
 , 
uöt16_t
 );

661 
uöt16_t
 
GëEPTxCou¡
(
uöt8_t
 );

662 
uöt16_t
 
GëEPRxCou¡
(
uöt8_t
 );

663 
SëEPDblBuf0Addr
(
uöt8_t
 , 
uöt16_t
 );

664 
SëEPDblBuf1Addr
(
uöt8_t
 , 
uöt16_t
 );

665 
SëEPDblBuffAddr
(
uöt8_t
 , 
uöt16_t
 , uint16_t );

666 
uöt16_t
 
GëEPDblBuf0Addr
(
uöt8_t
 );

667 
uöt16_t
 
GëEPDblBuf1Addr
(
uöt8_t
 );

668 
SëEPDblBuffCou¡
(
uöt8_t
 , uöt8_à , 
uöt16_t
 );

669 
SëEPDblBuf0Cou¡
(
uöt8_t
 , uöt8_à , 
uöt16_t
 );

670 
SëEPDblBuf1Cou¡
(
uöt8_t
 , uöt8_à , 
uöt16_t
 );

671 
uöt16_t
 
GëEPDblBuf0Cou¡
(
uöt8_t
 );

672 
uöt16_t
 
GëEPDblBuf1Cou¡
(
uöt8_t
 );

673 
EP_DBUF_DIR
 
GëEPDblBufDú
(
uöt8_t
 );

674 
FªeU£rBuf„r
(
uöt8_t
 
bEpNum
 , uöt8_à
bDú
);

675 
uöt16_t
 
ToW‹d
(
uöt8_t
, uint8_t);

676 
uöt16_t
 
ByãSw≠
(uint16_t);

	@resources/STM32_USB-FS-Device_Driver/inc/usb_sil.h

30 #i‚de‡
__USB_SIL_H


31 
	#__USB_SIL_H


	)

39 
uöt32_t
 
USB_SIL_Inô
();

40 
uöt32_t
 
USB_SIL_Wrôe
(
uöt8_t
 
bEpAddr
, uöt8_t* 
pBuf„rPoöãr
, uöt32_à
wBuf„rSize
);

41 
uöt32_t
 
USB_SIL_Ród
(
uöt8_t
 
bEpAddr
, uöt8_t* 
pBuf„rPoöãr
);

	@resources/STM32_USB-FS-Device_Driver/inc/usb_type.h

30 #i‚de‡
__USB_TYPE_H


31 
	#__USB_TYPE_H


	)

34 
	~"usb_c⁄f.h
"

38 #i‚de‡
NULL


39 
	#NULL
 ((*)0)

	)

44 
	mFALSE
 = 0, 
	mTRUE
 = !
FALSE


46 
	tboﬁ
;

	@resources/STM32_USB-FS-Device_Driver/src/usb_core.c

30 
	~"usb_lib.h
"

33 
	#VÆBô
(
VAR
,
Pœ˚
Ë(VAR & (1 << Pœ˚))

	)

34 
	#SëBô
(
VAR
,
Pœ˚
Ë(VAR |(1 << Pœ˚))

	)

35 
	#CÃBô
(
VAR
,
Pœ˚
Ë(VAR &((1 << Pœ˚Ë^ 255))

	)

36 
	#Síd0LígthD©a
(Ë{ 
	`_SëEPTxCou¡
(
ENDP0
, 0); \

	)

37 
vSëEPTxSètus
(
EP_TX_VALID
); \

40 
	#vSëEPRxSètus
(
°
Ë(
SaveRSèã
 = st)

	)

41 
	#vSëEPTxSètus
(
°
Ë(
SaveTSèã
 = st)

	)

43 
	#USB_SètusIn
(Ë
	`Síd0LígthD©a
()

	)

44 
	#USB_SètusOut
(Ë
	`vSëEPRxSètus
(
EP_RX_VALID
)

	)

46 
	#SètusInfo0
 
SètusInfo
.
bw
.
bb1


	)

47 
	#SètusInfo1
 
SètusInfo
.
bw
.
bb0


	)

51 
uöt16_t_uöt8_t
 
	gSètusInfo
;

53 
boﬁ
 
	gD©a_Mul_MaxPackëSize
 = 
FALSE
;

55 
D©aSègeOut
();

56 
D©aSègeIn
();

57 
NoD©a_Sëup0
();

58 
D©a_Sëup0
();

69 
uöt8_t
 *
	$Sènd¨d_GëC⁄figuøti⁄
(
uöt16_t
 
Lígth
)

71 i‡(
Lígth
 == 0)

73 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 =

74 (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
);

77 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëC⁄figuøti⁄
();

78  (
uöt8_t
 *)&
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
;

79 
	}
}

90 
RESULT
 
	$Sènd¨d_SëC⁄figuøti⁄
()

93 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 <=

94 
Devi˚_TabÀ
.
TŸÆ_C⁄figuøti⁄
Ë&& (
pInf‹m©i⁄
->
USBwVÆue1
 == 0)

95 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

97 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 =ÖInf‹m©i⁄->
USBwVÆue0
;

98 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëC⁄figuøti⁄
();

99  
USB_SUCCESS
;

103  
USB_UNSUPPORT
;

105 
	}
}

115 
uöt8_t
 *
	$Sènd¨d_GëI¡îÁ˚
(
uöt16_t
 
Lígth
)

117 i‡(
Lígth
 == 0)

119 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 =

120 (
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
);

123 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëI¡îÁ˚
();

124  (
uöt8_t
 *)&
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
;

125 
	}
}

136 
RESULT
 
	$Sènd¨d_SëI¡îÁ˚
()

138 
RESULT
 
Re
;

141 
Re
 = (*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
,ÖInf‹m©i⁄->
USBwVÆue0
);

143 i‡(
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0)

145 i‡((
Re
 !
USB_SUCCESS
Ë|| (
pInf‹m©i⁄
->
USBwIndex1
 != 0)

146 || (
pInf‹m©i⁄
->
USBwVÆue1
 != 0))

148  
USB_UNSUPPORT
;

150 i‡(
Re
 =
USB_SUCCESS
)

152 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëI¡îÁ˚
();

153 
pInf‹m©i⁄
->
Cuºít_I¡îÁ˚
 =ÖInf‹m©i⁄->
USBwIndex0
;

154 
pInf‹m©i⁄
->
Cuºít_A…î«ãSëtög
 =ÖInf‹m©i⁄->
USBwVÆue0
;

155  
USB_SUCCESS
;

160  
USB_UNSUPPORT
;

161 
	}
}

171 
uöt8_t
 *
	$Sènd¨d_GëSètus
(
uöt16_t
 
Lígth
)

173 i‡(
Lígth
 == 0)

175 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 2;

180 
SètusInfo
.
w
 = 0;

182 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

185 
uöt8_t
 
Fótuª
 = 
pInf‹m©i⁄
->
Cuºít_Fótuª
;

188 i‡(
	`VÆBô
(
Fótuª
, 5))

190 
	`SëBô
(
SètusInfo0
, 1);

194 
	`CÃBô
(
SètusInfo0
, 1);

198 i‡(
	`VÆBô
(
Fótuª
, 6))

200 
	`SëBô
(
SètusInfo0
, 0);

204 
	`CÃBô
(
SètusInfo0
, 0);

208 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

210  (
uöt8_t
 *)&
SètusInfo
;

213 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

215 
uöt8_t
 
Rñ©ed_Endpoöt
;

216 
uöt8_t
 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

218 
Rñ©ed_Endpoöt
 = (
wIndex0
 & 0x0f);

219 i‡(
	`VÆBô
(
wIndex0
, 7))

222 i‡(
	`_GëTxSèŒSètus
(
Rñ©ed_Endpoöt
))

224 
	`SëBô
(
SètusInfo0
, 0);

230 i‡(
	`_GëRxSèŒSètus
(
Rñ©ed_Endpoöt
))

232 
	`SëBô
(
SètusInfo0
, 0);

239  
NULL
;

241 
pU£r_Sènd¨d_Reque°s
->
	`U£r_GëSètus
();

242  (
uöt8_t
 *)&
SètusInfo
;

243 
	}
}

253 
RESULT
 
	$Sènd¨d_CÀ¨Fótuª
()

255 
uöt32_t
 
Ty≥_Rec
 = 
Ty≥_Recùõ¡
;

256 
uöt32_t
 
Sètus
;

259 i‡(
Ty≥_Rec
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

261 
	`CÃBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5);

262  
USB_SUCCESS
;

264 i‡(
Ty≥_Rec
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

266 
DEVICE
* 
pDev
;

267 
uöt32_t
 
Rñ©ed_Endpoöt
;

268 
uöt32_t
 
wIndex0
;

269 
uöt32_t
 
rEP
;

271 i‡((
pInf‹m©i⁄
->
USBwVÆue
 !
ENDPOINT_STALL
)

272 || (
pInf‹m©i⁄
->
USBwIndex1
 != 0))

274  
USB_UNSUPPORT
;

277 
pDev
 = &
Devi˚_TabÀ
;

278 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

279 
rEP
 = 
wIndex0
 & ~0x80;

280 
Rñ©ed_Endpoöt
 = 
ENDP0
 + 
rEP
;

282 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

286 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

290 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

293 i‡((
rEP
 >
pDev
->
TŸÆ_Endpoöt
Ë|| (
Sètus
 == 0)

294 || (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 == 0))

296  
USB_UNSUPPORT
;

300 i‡(
wIndex0
 & 0x80)

303 i‡(
	`_GëTxSèŒSètus
(
Rñ©ed_Endpoöt
 ))

305 
	`CÀ¨DTOG_TX
(
Rñ©ed_Endpoöt
);

306 
	`SëEPTxSètus
(
Rñ©ed_Endpoöt
, 
EP_TX_VALID
);

312 i‡(
	`_GëRxSèŒSètus
(
Rñ©ed_Endpoöt
))

314 i‡(
Rñ©ed_Endpoöt
 =
ENDP0
)

317 
	`SëEPRxCou¡
(
Rñ©ed_Endpoöt
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

318 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_VALID
);

322 
	`CÀ¨DTOG_RX
(
Rñ©ed_Endpoöt
);

323 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_VALID
);

327 
pU£r_Sènd¨d_Reque°s
->
	`U£r_CÀ¨Fótuª
();

328  
USB_SUCCESS
;

331  
USB_UNSUPPORT
;

332 
	}
}

342 
RESULT
 
	$Sènd¨d_SëEndPoötFótuª
()

344 
uöt32_t
 
wIndex0
;

345 
uöt32_t
 
Rñ©ed_Endpoöt
;

346 
uöt32_t
 
rEP
;

347 
uöt32_t
 
Sètus
;

349 
wIndex0
 = 
pInf‹m©i⁄
->
USBwIndex0
;

350 
rEP
 = 
wIndex0
 & ~0x80;

351 
Rñ©ed_Endpoöt
 = 
ENDP0
 + 
rEP
;

353 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

357 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

361 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

364 i‡(
Rñ©ed_Endpoöt
 >
Devi˚_TabÀ
.
TŸÆ_Endpoöt


365 || 
pInf‹m©i⁄
->
USBwVÆue
 !0 || 
Sètus
 == 0

366 || 
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 == 0)

368  
USB_UNSUPPORT
;

372 i‡(
wIndex0
 & 0x80)

375 
	`_SëEPTxSètus
(
Rñ©ed_Endpoöt
, 
EP_TX_STALL
);

381 
	`_SëEPRxSètus
(
Rñ©ed_Endpoöt
, 
EP_RX_STALL
);

384 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëEndPoötFótuª
();

385  
USB_SUCCESS
;

386 
	}
}

396 
RESULT
 
	$Sènd¨d_SëDevi˚Fótuª
()

398 
	`SëBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5);

399 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëDevi˚Fótuª
();

400  
USB_SUCCESS
;

401 
	}
}

422 
uöt8_t
 *
	$Sènd¨d_GëDes¸ùt‹D©a
(
uöt16_t
 
Lígth
, 
ONE_DESCRIPTOR
 *
pDesc
)

424 
uöt32_t
 
wOff£t
;

426 
wOff£t
 = 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
;

427 i‡(
Lígth
 == 0)

429 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 
pDesc
->
Des¸ùt‹_Size
 - 
wOff£t
;

433  
pDesc
->
Des¸ùt‹
 + 
wOff£t
;

434 
	}
}

443 
	$D©aSègeOut
()

445 
ENDPOINT_INFO
 *
pEPöfo
 = &
pInf‹m©i⁄
->
Cål_Info
;

446 
uöt32_t
 
ßve_rLígth
;

448 
ßve_rLígth
 = 
pEPöfo
->
Usb_rLígth
;

450 i‡(
pEPöfo
->
C›yD©a
 && 
ßve_rLígth
)

452 
uöt8_t
 *
Buf„r
;

453 
uöt32_t
 
Lígth
;

455 
Lígth
 = 
pEPöfo
->
PackëSize
;

456 i‡(
Lígth
 > 
ßve_rLígth
)

458 
Lígth
 = 
ßve_rLígth
;

461 
Buf„r
 = (*
pEPöfo
->
C›yD©a
)(
Lígth
);

462 
pEPöfo
->
Usb_rLígth
 -
Lígth
;

463 
pEPöfo
->
Usb_rOff£t
 +
Lígth
;

464 
	`PMAToU£rBuf„rC›y
(
Buf„r
, 
	`GëEPRxAddr
(
ENDP0
), 
Lígth
);

468 i‡(
pEPöfo
->
Usb_rLígth
 != 0)

470 
	`vSëEPRxSètus
(
EP_RX_VALID
);

471 
	`SëEPTxCou¡
(
ENDP0
, 0);

472 
	`vSëEPTxSètus
(
EP_TX_VALID
);

475 i‡(
pEPöfo
->
Usb_rLígth
 >pEPöfo->
PackëSize
)

477 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
OUT_DATA
;

481 i‡(
pEPöfo
->
Usb_rLígth
 > 0)

483 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
LAST_OUT_DATA
;

485 i‡(
pEPöfo
->
Usb_rLígth
 == 0)

487 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
WAIT_STATUS_IN
;

488 
	`USB_SètusIn
();

491 
	}
}

500 
	$D©aSègeIn
()

502 
ENDPOINT_INFO
 *
pEPöfo
 = &
pInf‹m©i⁄
->
Cål_Info
;

503 
uöt32_t
 
ßve_wLígth
 = 
pEPöfo
->
Usb_wLígth
;

504 
uöt32_t
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

506 
uöt8_t
 *
D©aBuf„r
;

507 
uöt32_t
 
Lígth
;

509 i‡((
ßve_wLígth
 =0Ë&& (
C⁄åﬁSèã
 =
LAST_IN_DATA
))

511 if(
D©a_Mul_MaxPackëSize
 =
TRUE
)

514 
	`Síd0LígthD©a
();

515 
C⁄åﬁSèã
 = 
LAST_IN_DATA
;

516 
D©a_Mul_MaxPackëSize
 = 
FALSE
;

521 
C⁄åﬁSèã
 = 
WAIT_STATUS_OUT
;

522 
	`vSëEPTxSètus
(
EP_TX_STALL
);

526 
Ex≥˘_Sètus_Out
;

529 
Lígth
 = 
pEPöfo
->
PackëSize
;

530 
C⁄åﬁSèã
 = (
ßve_wLígth
 <
Lígth
Ë? 
LAST_IN_DATA
 : 
IN_DATA
;

532 i‡(
Lígth
 > 
ßve_wLígth
)

534 
Lígth
 = 
ßve_wLígth
;

537 
D©aBuf„r
 = (*
pEPöfo
->
C›yD©a
)(
Lígth
);

539 
	`U£rToPMABuf„rC›y
(
D©aBuf„r
, 
	`GëEPTxAddr
(
ENDP0
), 
Lígth
);

541 
	`SëEPTxCou¡
(
ENDP0
, 
Lígth
);

543 
pEPöfo
->
Usb_wLígth
 -
Lígth
;

544 
pEPöfo
->
Usb_wOff£t
 +
Lígth
;

545 
	`vSëEPTxSètus
(
EP_TX_VALID
);

547 
	`USB_SètusOut
();

549 
Ex≥˘_Sètus_Out
:

550 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

551 
	}
}

560 
	$NoD©a_Sëup0
()

562 
RESULT
 
Resu…
 = 
USB_UNSUPPORT
;

563 
uöt32_t
 
Reque°No
 = 
pInf‹m©i⁄
->
USBbReque°
;

564 
uöt32_t
 
C⁄åﬁSèã
;

566 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

570 i‡(
Reque°No
 =
SET_CONFIGURATION
)

572 
Resu…
 = 
	`Sènd¨d_SëC⁄figuøti⁄
();

576 i‡(
Reque°No
 =
SET_ADDRESS
)

578 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 > 127Ë|| (pInf‹m©i⁄->
USBwVÆue1
 != 0)

579 || (
pInf‹m©i⁄
->
USBwIndex
 != 0)

580 || (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0))

583 
C⁄åﬁSèã
 = 
STALLED
;

584 
exô_NoD©a_Sëup0
;

588 
Resu…
 = 
USB_SUCCESS
;

592 i‡(
Reque°No
 =
SET_FEATURE
)

594 i‡((
pInf‹m©i⁄
->
USBwVÆue0
 =
DEVICE_REMOTE_WAKEUP
) \

595 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

597 
Resu…
 = 
	`Sènd¨d_SëDevi˚Fótuª
();

601 
Resu…
 = 
USB_UNSUPPORT
;

605 i‡(
Reque°No
 =
CLEAR_FEATURE
)

607 i‡(
pInf‹m©i⁄
->
USBwVÆue0
 =
DEVICE_REMOTE_WAKEUP


608 && 
pInf‹m©i⁄
->
USBwIndex
 == 0

609 && 
	`VÆBô
(
pInf‹m©i⁄
->
Cuºít_Fótuª
, 5))

611 
Resu…
 = 
	`Sènd¨d_CÀ¨Fótuª
();

615 
Resu…
 = 
USB_UNSUPPORT
;

622 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

625 i‡(
Reque°No
 =
SET_INTERFACE
)

627 
Resu…
 = 
	`Sènd¨d_SëI¡îÁ˚
();

632 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

635 i‡(
Reque°No
 =
CLEAR_FEATURE
)

637 
Resu…
 = 
	`Sènd¨d_CÀ¨Fótuª
();

640 i‡(
Reque°No
 =
SET_FEATURE
)

642 
Resu…
 = 
	`Sènd¨d_SëEndPoötFótuª
();

647 
Resu…
 = 
USB_UNSUPPORT
;

651 i‡(
Resu…
 !
USB_SUCCESS
)

653 
Resu…
 = (*
pPr›îty
->
Cœss_NoD©a_Sëup
)(
Reque°No
);

654 i‡(
Resu…
 =
USB_NOT_READY
)

656 
C⁄åﬁSèã
 = 
PAUSE
;

657 
exô_NoD©a_Sëup0
;

661 i‡(
Resu…
 !
USB_SUCCESS
)

663 
C⁄åﬁSèã
 = 
STALLED
;

664 
exô_NoD©a_Sëup0
;

667 
C⁄åﬁSèã
 = 
WAIT_STATUS_IN
;

669 
	`USB_SètusIn
();

671 
exô_NoD©a_Sëup0
:

672 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

674 
	}
}

683 
	$D©a_Sëup0
()

685 
uöt8_t
 *(*
C›yRoutöe
)(
uöt16_t
);

686 
RESULT
 
Resu…
;

687 
uöt32_t
 
Reque°_No
 = 
pInf‹m©i⁄
->
USBbReque°
;

689 
uöt32_t
 
Rñ©ed_Endpoöt
, 
Re£rved
;

690 
uöt32_t
 
wOff£t
, 
Sètus
;

694 
C›yRoutöe
 = 
NULL
;

695 
wOff£t
 = 0;

698 i‡(
Reque°_No
 =
GET_DESCRIPTOR
)

700 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

702 
uöt8_t
 
wVÆue1
 = 
pInf‹m©i⁄
->
USBwVÆue1
;

703 i‡(
wVÆue1
 =
DEVICE_DESCRIPTOR
)

705 
C›yRoutöe
 = 
pPr›îty
->
GëDevi˚Des¸ùt‹
;

707 i‡(
wVÆue1
 =
CONFIG_DESCRIPTOR
)

709 
C›yRoutöe
 = 
pPr›îty
->
GëC⁄figDes¸ùt‹
;

711 i‡(
wVÆue1
 =
STRING_DESCRIPTOR
)

713 
C›yRoutöe
 = 
pPr›îty
->
GëSåögDes¸ùt‹
;

719 i‡((
Reque°_No
 =
GET_STATUS
Ë&& (
pInf‹m©i⁄
->
USBwVÆue
 == 0)

720 && (
pInf‹m©i⁄
->
USBwLígth
 == 0x0002)

721 && (
pInf‹m©i⁄
->
USBwIndex1
 == 0))

724 i‡((
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

725 && (
pInf‹m©i⁄
->
USBwIndex
 == 0))

727 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

731 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

733 i‡(((*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
, 0Ë=
USB_SUCCESS
)

734 && (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 != 0))

736 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

741 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
ENDPOINT_RECIPIENT
))

743 
Rñ©ed_Endpoöt
 = (
pInf‹m©i⁄
->
USBwIndex0
 & 0x0f);

744 
Re£rved
 = 
pInf‹m©i⁄
->
USBwIndex0
 & 0x70;

746 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBwIndex0
, 7))

750 
Sètus
 = 
	`_GëEPTxSètus
(
Rñ©ed_Endpoöt
);

754 
Sètus
 = 
	`_GëEPRxSètus
(
Rñ©ed_Endpoöt
);

757 i‡((
Rñ©ed_Endpoöt
 < 
Devi˚_TabÀ
.
TŸÆ_Endpoöt
Ë&& (
Re£rved
 == 0)

758 && (
Sètus
 != 0))

760 
C›yRoutöe
 = 
Sènd¨d_GëSètus
;

767 i‡(
Reque°_No
 =
GET_CONFIGURATION
)

769 i‡(
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
))

771 
C›yRoutöe
 = 
Sènd¨d_GëC⁄figuøti⁄
;

775 i‡(
Reque°_No
 =
GET_INTERFACE
)

777 i‡((
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
INTERFACE_RECIPIENT
))

778 && (
pInf‹m©i⁄
->
Cuºít_C⁄figuøti⁄
 !0Ë&& (pInf‹m©i⁄->
USBwVÆue
 == 0)

779 && (
pInf‹m©i⁄
->
USBwIndex1
 =0Ë&& (pInf‹m©i⁄->
USBwLígth
 == 0x0001)

780 && ((*
pPr›îty
->
Cœss_Gë_I¡îÁ˚_Sëtög
)(
pInf‹m©i⁄
->
USBwIndex0
, 0Ë=
USB_SUCCESS
))

782 
C›yRoutöe
 = 
Sènd¨d_GëI¡îÁ˚
;

787 i‡(
C›yRoutöe
)

789 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wOff£t
 = 
wOff£t
;

790 
pInf‹m©i⁄
->
Cål_Info
.
C›yD©a
 = 
C›yRoutöe
;

793 (*
C›yRoutöe
)(0);

794 
Resu…
 = 
USB_SUCCESS
;

798 
Resu…
 = (*
pPr›îty
->
Cœss_D©a_Sëup
)(
pInf‹m©i⁄
->
USBbReque°
);

799 i‡(
Resu…
 =
USB_NOT_READY
)

801 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
PAUSE
;

806 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 == 0xFFFF)

809 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
PAUSE
;

812 i‡((
Resu…
 =
USB_UNSUPPORT
Ë|| (
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 == 0))

815 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
STALLED
;

820 i‡(
	`VÆBô
(
pInf‹m©i⁄
->
USBbmReque°Ty≥
, 7))

823 
__IO
 
uöt32_t
 
wLígth
 = 
pInf‹m©i⁄
->
USBwLígth
;

826 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 > 
wLígth
)

828 
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 = 
wLígth
;

831 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 <ÖInf‹m©i⁄->
USBwLígth
)

833 i‡(
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 < 
pPr›îty
->
MaxPackëSize
)

835 
D©a_Mul_MaxPackëSize
 = 
FALSE
;

837 i‡((
pInf‹m©i⁄
->
Cål_Info
.
Usb_wLígth
 % 
pPr›îty
->
MaxPackëSize
) == 0)

839 
D©a_Mul_MaxPackëSize
 = 
TRUE
;

843 
pInf‹m©i⁄
->
Cål_Info
.
PackëSize
 = 
pPr›îty
->
MaxPackëSize
;

844 
	`D©aSègeIn
();

848 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
OUT_DATA
;

849 
	`vSëEPRxSètus
(
EP_RX_VALID
);

853 
	}
}

862 
uöt8_t
 
	$Sëup0_Pro˚ss
()

867 
uöt8_t
* 
b
;

868 
uöt16_t
* 
w
;

869 } 
pBuf
;

870 
uöt16_t
 
off£t
 = 1;

872 
pBuf
.
b
 = 
PMAAddr
 + (
uöt8_t
 *)(
	`_GëEPRxAddr
(
ENDP0
) * 2);

874 i‡(
pInf‹m©i⁄
->
C⁄åﬁSèã
 !
PAUSE
)

876 
pInf‹m©i⁄
->
USBbmReque°Ty≥
 = *
pBuf
.
b
++;

877 
pInf‹m©i⁄
->
USBbReque°
 = *
pBuf
.
b
++;

878 
pBuf
.
w
 +
off£t
;

879 
pInf‹m©i⁄
->
USBwVÆue
 = 
	`ByãSw≠
(*
pBuf
.
w
++);

880 
pBuf
.
w
 +
off£t
;

881 
pInf‹m©i⁄
->
USBwIndex
 = 
	`ByãSw≠
(*
pBuf
.
w
++);

882 
pBuf
.
w
 +
off£t
;

883 
pInf‹m©i⁄
->
USBwLígth
 = *
pBuf
.
w
;

886 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 
SETTING_UP
;

887 i‡(
pInf‹m©i⁄
->
USBwLígth
 == 0)

890 
	`NoD©a_Sëup0
();

895 
	`D©a_Sëup0
();

897  
	`Po°0_Pro˚ss
();

898 
	}
}

907 
uöt8_t
 
	$In0_Pro˚ss
()

909 
uöt32_t
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

911 i‡((
C⁄åﬁSèã
 =
IN_DATA
Ë|| (C⁄åﬁSèã =
LAST_IN_DATA
))

913 
	`D©aSègeIn
();

915 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

918 i‡(
C⁄åﬁSèã
 =
WAIT_STATUS_IN
)

920 i‡((
pInf‹m©i⁄
->
USBbReque°
 =
SET_ADDRESS
) &&

921 (
Ty≥_Recùõ¡
 =(
STANDARD_REQUEST
 | 
DEVICE_RECIPIENT
)))

923 
	`SëDevi˚Addªss
(
pInf‹m©i⁄
->
USBwVÆue0
);

924 
pU£r_Sènd¨d_Reque°s
->
	`U£r_SëDevi˚Addªss
();

926 (*
pPr›îty
->
Pro˚ss_Sètus_IN
)();

927 
C⁄åﬁSèã
 = 
STALLED
;

932 
C⁄åﬁSèã
 = 
STALLED
;

935 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

937  
	`Po°0_Pro˚ss
();

938 
	}
}

947 
uöt8_t
 
	$Out0_Pro˚ss
()

949 
uöt32_t
 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

951 i‡((
C⁄åﬁSèã
 =
IN_DATA
Ë|| (C⁄åﬁSèã =
LAST_IN_DATA
))

954 
C⁄åﬁSèã
 = 
STALLED
;

956 i‡((
C⁄åﬁSèã
 =
OUT_DATA
Ë|| (C⁄åﬁSèã =
LAST_OUT_DATA
))

958 
	`D©aSègeOut
();

959 
C⁄åﬁSèã
 = 
pInf‹m©i⁄
->ControlState;

962 i‡(
C⁄åﬁSèã
 =
WAIT_STATUS_OUT
)

964 (*
pPr›îty
->
Pro˚ss_Sètus_OUT
)();

965 
C⁄åﬁSèã
 = 
STALLED
;

972 
C⁄åﬁSèã
 = 
STALLED
;

975 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = ControlState;

977  
	`Po°0_Pro˚ss
();

978 
	}
}

988 
uöt8_t
 
	$Po°0_Pro˚ss
()

991 
	`SëEPRxCou¡
(
ENDP0
, 
Devi˚_Pr›îty
.
MaxPackëSize
);

993 i‡(
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
STALLED
)

995 
	`vSëEPRxSètus
(
EP_RX_STALL
);

996 
	`vSëEPTxSètus
(
EP_TX_STALL
);

999  (
pInf‹m©i⁄
->
C⁄åﬁSèã
 =
PAUSE
);

1000 
	}
}

1009 
	$SëDevi˚Addªss
(
uöt8_t
 
VÆ
)

1011 
uöt32_t
 
i
;

1012 
uöt32_t
 
nEP
 = 
Devi˚_TabÀ
.
TŸÆ_Endpoöt
;

1015 
i
 = 0; i < 
nEP
; i++)

1017 
	`_SëEPAddªss
((
uöt8_t
)
i
, (uint8_t)i);

1019 
	`_SëDADDR
(
VÆ
 | 
DADDR_EF
);

1020 
	}
}

1029 
	$NOP_Pro˚ss
()

1031 
	}
}

	@resources/STM32_USB-FS-Device_Driver/src/usb_init.c

30 
	~"usb_lib.h
"

37 
uöt8_t
 
	gEPödex
;

42 
DEVICE_INFO
 *
	gpInf‹m©i⁄
;

45 
DEVICE_PROP
 *
	gpPr›îty
;

50 
uöt16_t
 
	gSaveSèã
 ;

51 
uöt16_t
 
	gwI¡îru±_Mask
;

52 
DEVICE_INFO
 
	gDevi˚_Info
;

53 
USER_STANDARD_REQUESTS
 *
	gpU£r_Sènd¨d_Reque°s
;

66 
	$USB_Inô
()

68 
pInf‹m©i⁄
 = &
Devi˚_Info
;

69 
pInf‹m©i⁄
->
C⁄åﬁSèã
 = 2;

70 
pPr›îty
 = &
Devi˚_Pr›îty
;

71 
pU£r_Sènd¨d_Reque°s
 = &
U£r_Sènd¨d_Reque°s
;

73 
pPr›îty
->
	`Inô
();

74 
	}
}

	@resources/STM32_USB-FS-Device_Driver/src/usb_int.c

29 
	~"usb_lib.h
"

35 
__IO
 
uöt16_t
 
	gSaveRSèã
;

36 
__IO
 
uöt16_t
 
	gSaveTSèã
;

39 (*
pEpI¡_IN
[7])();

40 (*
pEpI¡_OUT
[7])();

53 
	$CTR_LP
()

55 
__IO
 
uöt16_t
 
wEPVÆ
 = 0;

57 ((
wI°r
 = 
	`_GëISTR
()Ë& 
ISTR_CTR
) != 0)

60 
EPödex
 = (
uöt8_t
)(
wI°r
 & 
ISTR_EP_ID
);

61 i‡(
EPödex
 == 0)

70 
SaveRSèã
 = 
	`_GëENDPOINT
(
ENDP0
);

71 
SaveTSèã
 = 
SaveRSèã
 & 
EPTX_STAT
;

72 
SaveRSèã
 &
EPRX_STAT
;

74 
	`_SëEPRxTxSètus
(
ENDP0
,
EP_RX_NAK
,
EP_TX_NAK
);

78 i‡((
wI°r
 & 
ISTR_DIR
) == 0)

85 
	`_CÀ¨EP_CTR_TX
(
ENDP0
);

86 
	`In0_Pro˚ss
();

90 
	`_SëEPRxTxSètus
(
ENDP0
,
SaveRSèã
,
SaveTSèã
);

100 
wEPVÆ
 = 
	`_GëENDPOINT
(
ENDP0
);

102 i‡((
wEPVÆ
 &
EP_SETUP
) != 0)

104 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

105 
	`Sëup0_Pro˚ss
();

108 
	`_SëEPRxTxSètus
(
ENDP0
,
SaveRSèã
,
SaveTSèã
);

112 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

114 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

115 
	`Out0_Pro˚ss
();

118 
	`_SëEPRxTxSètus
(
ENDP0
,
SaveRSèã
,
SaveTSèã
);

128 
wEPVÆ
 = 
	`_GëENDPOINT
(
EPödex
);

129 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

132 
	`_CÀ¨EP_CTR_RX
(
EPödex
);

135 (*
pEpI¡_OUT
[
EPödex
-1])();

139 i‡((
wEPVÆ
 & 
EP_CTR_TX
) != 0)

142 
	`_CÀ¨EP_CTR_TX
(
EPödex
);

145 (*
pEpI¡_IN
[
EPödex
-1])();

151 
	}
}

161 
	$CTR_HP
()

163 
uöt32_t
 
wEPVÆ
 = 0;

165 ((
wI°r
 = 
	`_GëISTR
()Ë& 
ISTR_CTR
) != 0)

167 
	`_SëISTR
((
uöt16_t
)
CLR_CTR
);

169 
EPödex
 = (
uöt8_t
)(
wI°r
 & 
ISTR_EP_ID
);

171 
wEPVÆ
 = 
	`_GëENDPOINT
(
EPödex
);

172 i‡((
wEPVÆ
 & 
EP_CTR_RX
) != 0)

175 
	`_CÀ¨EP_CTR_RX
(
EPödex
);

178 (*
pEpI¡_OUT
[
EPödex
-1])();

181 i‡((
wEPVÆ
 & 
EP_CTR_TX
) != 0)

184 
	`_CÀ¨EP_CTR_TX
(
EPödex
);

187 (*
pEpI¡_IN
[
EPödex
-1])();

193 
	}
}

	@resources/STM32_USB-FS-Device_Driver/src/usb_mem.c

29 
	~"usb_ªgs.h
"

48 
	$U£rToPMABuf„rC›y
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
)

50 
uöt32_t
 
n
 = (
wNByãs
 + 1) >> 1;

51 
uöt32_t
 
i
, 
ãmp1
, 
ãmp2
;

52 
uöt16_t
 *
pdwVÆ
;

53 
pdwVÆ
 = (
uöt16_t
 *)(
wPMABufAddr
 * 2 + 
PMAAddr
);

54 
i
 = 
n
; i != 0; i--)

56 
ãmp1
 = (
uöt16_t
Ë* 
pbU§Buf
;

57 
pbU§Buf
++;

58 
ãmp2
 = 
ãmp1
 | (
uöt16_t
Ë* 
pbU§Buf
 << 8;

59 *
pdwVÆ
++ = 
ãmp2
;

60 
pdwVÆ
++;

61 
pbU§Buf
++;

63 
	}
}

74 
	$PMAToU£rBuf„rC›y
(
uöt8_t
 *
pbU§Buf
, 
uöt16_t
 
wPMABufAddr
, uöt16_à
wNByãs
)

76 
uöt32_t
 
n
 = (
wNByãs
 + 1) >> 1;

77 
uöt32_t
 
i
;

78 
uöt32_t
 *
pdwVÆ
;

79 
pdwVÆ
 = (
uöt32_t
 *)(
wPMABufAddr
 * 2 + 
PMAAddr
);

80 
i
 = 
n
; i != 0; i--)

82 *(
uöt16_t
*)
pbU§Buf
++ = *
pdwVÆ
++;

83 
pbU§Buf
++;

85 
	}
}

	@resources/STM32_USB-FS-Device_Driver/src/usb_regs.c

30 
	~"usb_ªgs.h
"

46 
	$SëCNTR
(
uöt16_t
 
wRegVÆue
)

48 
	`_SëCNTR
(
wRegVÆue
);

49 
	}
}

58 
uöt16_t
 
	$GëCNTR
()

60 (
	`_GëCNTR
());

61 
	}
}

70 
	$SëISTR
(
uöt16_t
 
wRegVÆue
)

72 
	`_SëISTR
(
wRegVÆue
);

73 
	}
}

82 
uöt16_t
 
	$GëISTR
()

84 (
	`_GëISTR
());

85 
	}
}

94 
uöt16_t
 
	$GëFNR
()

96 (
	`_GëFNR
());

97 
	}
}

106 
	$SëDADDR
(
uöt16_t
 
wRegVÆue
)

108 
	`_SëDADDR
(
wRegVÆue
);

109 
	}
}

118 
uöt16_t
 
	$GëDADDR
()

120 (
	`_GëDADDR
());

121 
	}
}

130 
	$SëBTABLE
(
uöt16_t
 
wRegVÆue
)

132 
	`_SëBTABLE
(
wRegVÆue
);

133 
	}
}

142 
uöt16_t
 
	$GëBTABLE
()

144 (
	`_GëBTABLE
());

145 
	}
}

155 
	$SëENDPOINT
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wRegVÆue
)

157 
	`_SëENDPOINT
(
bEpNum
, 
wRegVÆue
);

158 
	}
}

167 
uöt16_t
 
	$GëENDPOINT
(
uöt8_t
 
bEpNum
)

169 (
	`_GëENDPOINT
(
bEpNum
));

170 
	}
}

180 
	$SëEPTy≥
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wTy≥
)

182 
	`_SëEPTy≥
(
bEpNum
, 
wTy≥
);

183 
	}
}

192 
uöt16_t
 
	$GëEPTy≥
(
uöt8_t
 
bEpNum
)

194 (
	`_GëEPTy≥
(
bEpNum
));

195 
	}
}

205 
	$SëEPTxSètus
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wSèã
)

207 
	`_SëEPTxSètus
(
bEpNum
, 
wSèã
);

208 
	}
}

218 
	$SëEPRxSètus
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wSèã
)

220 
	`_SëEPRxSètus
(
bEpNum
, 
wSèã
);

221 
	}
}

231 
	$SëDouBÀBuffEPSèŒ
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
)

233 
uöt16_t
 
Endpoöt_DTOG_Sètus
;

234 
Endpoöt_DTOG_Sètus
 = 
	`GëENDPOINT
(
bEpNum
);

235 i‡(
bDú
 =
EP_DBUF_OUT
)

237 
	`_SëENDPOINT
(
bEpNum
, 
Endpoöt_DTOG_Sètus
 & ~
EPRX_DTOG1
);

239 i‡(
bDú
 =
EP_DBUF_IN
)

241 
	`_SëENDPOINT
(
bEpNum
, 
Endpoöt_DTOG_Sètus
 & ~
EPTX_DTOG1
);

243 
	}
}

252 
uöt16_t
 
	$GëEPTxSètus
(
uöt8_t
 
bEpNum
)

254 (
	`_GëEPTxSètus
(
bEpNum
));

255 
	}
}

264 
uöt16_t
 
	$GëEPRxSètus
(
uöt8_t
 
bEpNum
)

266 (
	`_GëEPRxSètus
(
bEpNum
));

267 
	}
}

276 
	$SëEPTxVÆid
(
uöt8_t
 
bEpNum
)

278 
	`_SëEPTxSètus
(
bEpNum
, 
EP_TX_VALID
);

279 
	}
}

288 
	$SëEPRxVÆid
(
uöt8_t
 
bEpNum
)

290 
	`_SëEPRxSètus
(
bEpNum
, 
EP_RX_VALID
);

291 
	}
}

300 
	$SëEP_KIND
(
uöt8_t
 
bEpNum
)

302 
	`_SëEP_KIND
(
bEpNum
);

303 
	}
}

312 
	$CÀ¨EP_KIND
(
uöt8_t
 
bEpNum
)

314 
	`_CÀ¨EP_KIND
(
bEpNum
);

315 
	}
}

323 
	$CÀ¨_Sètus_Out
(
uöt8_t
 
bEpNum
)

325 
	`_CÀ¨EP_KIND
(
bEpNum
);

326 
	}
}

334 
	$Së_Sètus_Out
(
uöt8_t
 
bEpNum
)

336 
	`_SëEP_KIND
(
bEpNum
);

337 
	}
}

345 
	$SëEPDoubÀBuff
(
uöt8_t
 
bEpNum
)

347 
	`_SëEP_KIND
(
bEpNum
);

348 
	}
}

356 
	$CÀ¨EPDoubÀBuff
(
uöt8_t
 
bEpNum
)

358 
	`_CÀ¨EP_KIND
(
bEpNum
);

359 
	}
}

367 
uöt16_t
 
	$GëTxSèŒSètus
(
uöt8_t
 
bEpNum
)

369 (
	`_GëTxSèŒSètus
(
bEpNum
));

370 
	}
}

378 
uöt16_t
 
	$GëRxSèŒSètus
(
uöt8_t
 
bEpNum
)

380 (
	`_GëRxSèŒSètus
(
bEpNum
));

381 
	}
}

389 
	$CÀ¨EP_CTR_RX
(
uöt8_t
 
bEpNum
)

391 
	`_CÀ¨EP_CTR_RX
(
bEpNum
);

392 
	}
}

400 
	$CÀ¨EP_CTR_TX
(
uöt8_t
 
bEpNum
)

402 
	`_CÀ¨EP_CTR_TX
(
bEpNum
);

403 
	}
}

411 
	$ToggÀDTOG_RX
(
uöt8_t
 
bEpNum
)

413 
	`_ToggÀDTOG_RX
(
bEpNum
);

414 
	}
}

422 
	$ToggÀDTOG_TX
(
uöt8_t
 
bEpNum
)

424 
	`_ToggÀDTOG_TX
(
bEpNum
);

425 
	}
}

433 
	$CÀ¨DTOG_RX
(
uöt8_t
 
bEpNum
)

435 
	`_CÀ¨DTOG_RX
(
bEpNum
);

436 
	}
}

444 
	$CÀ¨DTOG_TX
(
uöt8_t
 
bEpNum
)

446 
	`_CÀ¨DTOG_TX
(
bEpNum
);

447 
	}
}

456 
	$SëEPAddªss
(
uöt8_t
 
bEpNum
, uöt8_à
bAddr
)

458 
	`_SëEPAddªss
(
bEpNum
, 
bAddr
);

459 
	}
}

467 
uöt8_t
 
	$GëEPAddªss
(
uöt8_t
 
bEpNum
)

469 (
	`_GëEPAddªss
(
bEpNum
));

470 
	}
}

479 
	$SëEPTxAddr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wAddr
)

481 
	`_SëEPTxAddr
(
bEpNum
, 
wAddr
);

482 
	}
}

491 
	$SëEPRxAddr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wAddr
)

493 
	`_SëEPRxAddr
(
bEpNum
, 
wAddr
);

494 
	}
}

502 
uöt16_t
 
	$GëEPTxAddr
(
uöt8_t
 
bEpNum
)

504 (
	`_GëEPTxAddr
(
bEpNum
));

505 
	}
}

513 
uöt16_t
 
	$GëEPRxAddr
(
uöt8_t
 
bEpNum
)

515 (
	`_GëEPRxAddr
(
bEpNum
));

516 
	}
}

525 
	$SëEPTxCou¡
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wCou¡
)

527 
	`_SëEPTxCou¡
(
bEpNum
, 
wCou¡
);

528 
	}
}

537 
	$SëEPCou¡RxReg
(
uöt32_t
 *
pdwReg
, 
uöt16_t
 
wCou¡
)

539 
	`_SëEPCou¡RxReg
(
dwReg
, 
wCou¡
);

540 
	}
}

549 
	$SëEPRxCou¡
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wCou¡
)

551 
	`_SëEPRxCou¡
(
bEpNum
, 
wCou¡
);

552 
	}
}

560 
uöt16_t
 
	$GëEPTxCou¡
(
uöt8_t
 
bEpNum
)

562 (
	`_GëEPTxCou¡
(
bEpNum
));

563 
	}
}

571 
uöt16_t
 
	$GëEPRxCou¡
(
uöt8_t
 
bEpNum
)

573 (
	`_GëEPRxCou¡
(
bEpNum
));

574 
	}
}

584 
	$SëEPDblBuffAddr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wBuf0Addr
, uöt16_à
wBuf1Addr
)

586 
	`_SëEPDblBuffAddr
(
bEpNum
, 
wBuf0Addr
, 
wBuf1Addr
);

587 
	}
}

596 
	$SëEPDblBuf0Addr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wBuf0Addr
)

598 
	`_SëEPDblBuf0Addr
(
bEpNum
, 
wBuf0Addr
);

599 
	}
}

608 
	$SëEPDblBuf1Addr
(
uöt8_t
 
bEpNum
, 
uöt16_t
 
wBuf1Addr
)

610 
	`_SëEPDblBuf1Addr
(
bEpNum
, 
wBuf1Addr
);

611 
	}
}

619 
uöt16_t
 
	$GëEPDblBuf0Addr
(
uöt8_t
 
bEpNum
)

621 (
	`_GëEPDblBuf0Addr
(
bEpNum
));

622 
	}
}

630 
uöt16_t
 
	$GëEPDblBuf1Addr
(
uöt8_t
 
bEpNum
)

632 (
	`_GëEPDblBuf1Addr
(
bEpNum
));

633 
	}
}

642 
	$SëEPDblBuffCou¡
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
, 
uöt16_t
 
wCou¡
)

644 
	`_SëEPDblBuffCou¡
(
bEpNum
, 
bDú
, 
wCou¡
);

645 
	}
}

654 
	$SëEPDblBuf0Cou¡
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
, 
uöt16_t
 
wCou¡
)

656 
	`_SëEPDblBuf0Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
);

657 
	}
}

666 
	$SëEPDblBuf1Cou¡
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
, 
uöt16_t
 
wCou¡
)

668 
	`_SëEPDblBuf1Cou¡
(
bEpNum
, 
bDú
, 
wCou¡
);

669 
	}
}

678 
uöt16_t
 
	$GëEPDblBuf0Cou¡
(
uöt8_t
 
bEpNum
)

680 (
	`_GëEPDblBuf0Cou¡
(
bEpNum
));

681 
	}
}

690 
uöt16_t
 
	$GëEPDblBuf1Cou¡
(
uöt8_t
 
bEpNum
)

692 (
	`_GëEPDblBuf1Cou¡
(
bEpNum
));

693 
	}
}

702 
EP_DBUF_DIR
 
	$GëEPDblBufDú
(
uöt8_t
 
bEpNum
)

704 i‡((
uöt16_t
)(*
	`_pEPRxCou¡
(
bEpNum
) & 0xFC00) != 0)

705 (
EP_DBUF_OUT
);

706 i‡(((
uöt16_t
)(*
	`_pEPTxCou¡
(
bEpNum
)) & 0x03FF) != 0)

707 (
EP_DBUF_IN
);

709 (
EP_DBUF_ERR
);

710 
	}
}

719 
	$FªeU£rBuf„r
(
uöt8_t
 
bEpNum
, uöt8_à
bDú
)

721 i‡(
bDú
 =
EP_DBUF_OUT
)

723 
	`_ToggÀDTOG_TX
(
bEpNum
);

725 i‡(
bDú
 =
EP_DBUF_IN
)

727 
	`_ToggÀDTOG_RX
(
bEpNum
);

729 
	}
}

738 
uöt16_t
 
	$ToW‹d
(
uöt8_t
 
bh
, uöt8_à
bl
)

740 
uöt16_t
 
wRë
;

741 
wRë
 = (
uöt16_t
)
bl
 | ((uöt16_t)
bh
 << 8);

742 (
wRë
);

743 
	}
}

751 
uöt16_t
 
	$ByãSw≠
(
uöt16_t
 
wSwW
)

753 
uöt8_t
 
bTemp
;

754 
uöt16_t
 
wRë
;

755 
bTemp
 = (
uöt8_t
)(
wSwW
 & 0xff);

756 
wRë
 = (
wSwW
 >> 8Ë| ((
uöt16_t
)
bTemp
 << 8);

757 (
wRë
);

758 
	}
}

	@resources/STM32_USB-FS-Device_Driver/src/usb_sil.c

31 
	~"usb_lib.h
"

48 
uöt32_t
 
	$USB_SIL_Inô
()

52 
	`_SëISTR
(0);

53 
wI¡îru±_Mask
 = 
IMR_MSK
;

55 
	`_SëCNTR
(
wI¡îru±_Mask
);

57 
	}
}

69 
uöt32_t
 
	$USB_SIL_Wrôe
(
uöt8_t
 
bEpAddr
, uöt8_t* 
pBuf„rPoöãr
, 
uöt32_t
 
wBuf„rSize
)

72 
	`U£rToPMABuf„rC›y
(
pBuf„rPoöãr
, 
	`GëEPTxAddr
(
bEpAddr
 & 0x7F), 
wBuf„rSize
);

75 
	`SëEPTxCou¡
((
bEpAddr
 & 0x7F), 
wBuf„rSize
);

78 
	}
}

89 
uöt32_t
 
	$USB_SIL_Ród
(
uöt8_t
 
bEpAddr
, uöt8_t* 
pBuf„rPoöãr
)

91 
uöt32_t
 
D©aLígth
 = 0;

94 
D©aLígth
 = 
	`GëEPRxCou¡
(
bEpAddr
 & 0x7F);

97 
	`PMAToU£rBuf„rC›y
(
pBuf„rPoöãr
, 
	`GëEPRxAddr
(
bEpAddr
 & 0x7F), 
D©aLígth
);

100  
D©aLígth
;

101 
	}
}

	@resources/startup/startup_stm32f30x.s

37 .
sy¡ax
 
	gunifõd


38 .
˝u
 
	gc‹ãx
-
	gm4


39 .
Âu
 
	gso·vÂ


40 .
	gthumb


42 .
globÆ
 
	gg_p‚Ve˘‹s


43 .
globÆ
 
	gDeÁu…_H™dÀr


47 .
w‹d
 
	g_sid©a


49 .
w‹d
 
	g_sd©a


51 .
w‹d
 
	g_ed©a


53 .
w‹d
 
	g_sbss


55 .
w‹d
 
	g_ebss


57 .
equ
 
	gBoŸRAM
, 0xF1E0F85F

67 .
	g£˘i⁄
 .
	gãxt
.
	gRe£t_H™dÀr


68 .
wók
 
	gRe£t_H™dÀr


69 .
ty≥
 
	gRe£t_H™dÀr
, %
fun˘i⁄


70 
	gRe£t_H™dÀr
:

73 
movs
 
r1
, #0

74 
b
 
Lo›C›yD©aInô


76 
	gC›yD©aInô
:

77 
ldr
 
r3
, =
_sid©a


78 
ldr
 
r3
, [r3, 
r1
]

79 
°r
 
	gr3
, [
r0
, 
r1
]

80 
adds
 
	gr1
,Ñ1, #4

82 
	gLo›C›yD©aInô
:

83 
ldr
 
r0
, =
_sd©a


84 
ldr
 
r3
, =
_ed©a


85 
adds
 
r2
, 
	gr0
, 
r1


86 
cmp
 
	gr2
, 
r3


87 
bcc
 
C›yD©aInô


88 
ldr
 
	gr2
, =
_sbss


89 
b
 
Lo›FûlZîobss


91 
FûlZîobss
:

92 
movs
 
r3
, #0

93 
°r
 
	gr3
, [
r2
], #4

95 
	gLo›FûlZîobss
:

96 
ldr
 
r3
, = 
_ebss


97 
cmp
 
r2
, 
r3


98 
bcc
 
FûlZîobss


101 
bl
 
Sy°emInô


103 
bl
 
__libc_öô_¨øy


105 
bl
 
maö


107 
	gLo›F‹evî
:

108 
b
 
Lo›F‹evî


110 .
size
 
Re£t_H™dÀr
, .-
	gRe£t_H™dÀr


120 .
	g£˘i⁄
 .
	gãxt
.
	gDeÁu…_H™dÀr
,"ax",%
¥ogbôs


121 
	gDeÁu…_H™dÀr
:

122 
Inföôe_Lo›
:

123 
b
 
Inföôe_Lo›


124 .
size
 
DeÁu…_H™dÀr
, .-
	gDeÁu…_H™dÀr


132 .
	g£˘i⁄
 .
	gi§_ve˘‹
,"a",%
	g¥ogbôs


133 .
ty≥
 
	gg_p‚Ve˘‹s
, %
	gobje˘


134 .
size
 
	gg_p‚Ve˘‹s
, .-
g_p‚Ve˘‹s


137 
	gg_p‚Ve˘‹s
:

138 .
w‹d
 
_e°ack


139 .
w‹d
 
Re£t_H™dÀr


140 .
w‹d
 
NMI_H™dÀr


141 .
w‹d
 
H¨dFau…_H™dÀr


142 .
w‹d
 
MemM™age_H™dÀr


143 .
w‹d
 
BusFau…_H™dÀr


144 .
w‹d
 
UßgeFau…_H™dÀr


145 .
w‹d
 0

146 .
w‹d
 0

147 .
w‹d
 0

148 .
w‹d
 0

149 .
w‹d
 
SVC_H™dÀr


150 .
w‹d
 
DebugM⁄_H™dÀr


151 .
w‹d
 0

152 .
w‹d
 
PídSV_H™dÀr


153 .
w‹d
 
SysTick_H™dÀr


154 .
w‹d
 
WWDG_IRQH™dÀr


155 .
w‹d
 
PVD_IRQH™dÀr


156 .
w‹d
 
TAMPER_STAMP_IRQH™dÀr


157 .
w‹d
 
RTC_WKUP_IRQH™dÀr


158 .
w‹d
 
FLASH_IRQH™dÀr


159 .
w‹d
 
RCC_IRQH™dÀr


160 .
w‹d
 
EXTI0_IRQH™dÀr


161 .
w‹d
 
EXTI1_IRQH™dÀr


162 .
w‹d
 
EXTI2_TS_IRQH™dÀr


163 .
w‹d
 
EXTI3_IRQH™dÀr


164 .
w‹d
 
EXTI4_IRQH™dÀr


165 .
w‹d
 
DMA1_Ch™√l1_IRQH™dÀr


166 .
w‹d
 
DMA1_Ch™√l2_IRQH™dÀr


167 .
w‹d
 
DMA1_Ch™√l3_IRQH™dÀr


168 .
w‹d
 
DMA1_Ch™√l4_IRQH™dÀr


169 .
w‹d
 
DMA1_Ch™√l5_IRQH™dÀr


170 .
w‹d
 
DMA1_Ch™√l6_IRQH™dÀr


171 .
w‹d
 
DMA1_Ch™√l7_IRQH™dÀr


172 .
w‹d
 
ADC1_2_IRQH™dÀr


173 .
w‹d
 
USB_HP_CAN1_TX_IRQH™dÀr


174 .
w‹d
 
USB_LP_CAN1_RX0_IRQH™dÀr


175 .
w‹d
 
CAN1_RX1_IRQH™dÀr


176 .
w‹d
 
CAN1_SCE_IRQH™dÀr


177 .
w‹d
 
EXTI9_5_IRQH™dÀr


178 .
w‹d
 
TIM1_BRK_TIM15_IRQH™dÀr


179 .
w‹d
 
TIM1_UP_TIM16_IRQH™dÀr


180 .
w‹d
 
TIM1_TRG_COM_TIM17_IRQH™dÀr


181 .
w‹d
 
TIM1_CC_IRQH™dÀr


182 .
w‹d
 
TIM2_IRQH™dÀr


183 .
w‹d
 
TIM3_IRQH™dÀr


184 .
w‹d
 
TIM4_IRQH™dÀr


185 .
w‹d
 
I2C1_EV_IRQH™dÀr


186 .
w‹d
 
I2C1_ER_IRQH™dÀr


187 .
w‹d
 
I2C2_EV_IRQH™dÀr


188 .
w‹d
 
I2C2_ER_IRQH™dÀr


189 .
w‹d
 
SPI1_IRQH™dÀr


190 .
w‹d
 
SPI2_IRQH™dÀr


191 .
w‹d
 
USART1_IRQH™dÀr


192 .
w‹d
 
USART2_IRQH™dÀr


193 .
w‹d
 
USART3_IRQH™dÀr


194 .
w‹d
 
EXTI15_10_IRQH™dÀr


195 .
w‹d
 
RTC_Aœrm_IRQH™dÀr


196 .
w‹d
 
USBWakeUp_IRQH™dÀr


197 .
w‹d
 
TIM8_BRK_IRQH™dÀr


198 .
w‹d
 
TIM8_UP_IRQH™dÀr


199 .
w‹d
 
TIM8_TRG_COM_IRQH™dÀr


200 .
w‹d
 
TIM8_CC_IRQH™dÀr


201 .
w‹d
 
ADC3_IRQH™dÀr


202 .
w‹d
 0

203 .
w‹d
 0

204 .
w‹d
 0

205 .
w‹d
 
SPI3_IRQH™dÀr


206 .
w‹d
 
UART4_IRQH™dÀr


207 .
w‹d
 
UART5_IRQH™dÀr


208 .
w‹d
 
TIM6_DAC_IRQH™dÀr


209 .
w‹d
 
TIM7_IRQH™dÀr


210 .
w‹d
 
DMA2_Ch™√l1_IRQH™dÀr


211 .
w‹d
 
DMA2_Ch™√l2_IRQH™dÀr


212 .
w‹d
 
DMA2_Ch™√l3_IRQH™dÀr


213 .
w‹d
 
DMA2_Ch™√l4_IRQH™dÀr


214 .
w‹d
 
DMA2_Ch™√l5_IRQH™dÀr


215 .
w‹d
 
ADC4_IRQH™dÀr


216 .
w‹d
 0

217 .
w‹d
 0

218 .
w‹d
 
COMP1_2_3_IRQH™dÀr


219 .
w‹d
 
COMP4_5_6_IRQH™dÀr


220 .
w‹d
 
COMP7_IRQH™dÀr


221 .
w‹d
 0

222 .
w‹d
 0

223 .
w‹d
 0

224 .
w‹d
 0

225 .
w‹d
 0

226 .
w‹d
 0

227 .
w‹d
 0

228 .
w‹d
 
USB_HP_IRQH™dÀr


229 .
w‹d
 
USB_LP_IRQH™dÀr


230 .
w‹d
 
USBWakeUp_RMP_IRQH™dÀr


231 .
w‹d
 0

232 .
w‹d
 0

233 .
w‹d
 0

234 .
w‹d
 0

235 .
w‹d
 
FPU_IRQH™dÀr


245 .
wók
 
NMI_H™dÀr


246 .
thumb_£t
 
NMI_H™dÀr
,
	gDeÁu…_H™dÀr


248 .
wók
 
	gH¨dFau…_H™dÀr


249 .
thumb_£t
 
	gH¨dFau…_H™dÀr
,
	gDeÁu…_H™dÀr


251 .
wók
 
	gMemM™age_H™dÀr


252 .
thumb_£t
 
	gMemM™age_H™dÀr
,
	gDeÁu…_H™dÀr


254 .
wók
 
	gBusFau…_H™dÀr


255 .
thumb_£t
 
	gBusFau…_H™dÀr
,
	gDeÁu…_H™dÀr


257 .
wók
 
	gUßgeFau…_H™dÀr


258 .
thumb_£t
 
	gUßgeFau…_H™dÀr
,
	gDeÁu…_H™dÀr


260 .
wók
 
	gSVC_H™dÀr


261 .
thumb_£t
 
	gSVC_H™dÀr
,
	gDeÁu…_H™dÀr


263 .
wók
 
	gDebugM⁄_H™dÀr


264 .
thumb_£t
 
	gDebugM⁄_H™dÀr
,
	gDeÁu…_H™dÀr


266 .
wók
 
	gPídSV_H™dÀr


267 .
thumb_£t
 
	gPídSV_H™dÀr
,
	gDeÁu…_H™dÀr


269 .
wók
 
	gSysTick_H™dÀr


270 .
thumb_£t
 
	gSysTick_H™dÀr
,
	gDeÁu…_H™dÀr


272 .
wók
 
	gWWDG_IRQH™dÀr


273 .
thumb_£t
 
	gWWDG_IRQH™dÀr
,
	gDeÁu…_H™dÀr


275 .
wók
 
	gPVD_IRQH™dÀr


276 .
thumb_£t
 
	gPVD_IRQH™dÀr
,
	gDeÁu…_H™dÀr


278 .
wók
 
	gTAMPER_STAMP_IRQH™dÀr


279 .
thumb_£t
 
	gTAMPER_STAMP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


281 .
wók
 
	gRTC_WKUP_IRQH™dÀr


282 .
thumb_£t
 
	gRTC_WKUP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


284 .
wók
 
	gFLASH_IRQH™dÀr


285 .
thumb_£t
 
	gFLASH_IRQH™dÀr
,
	gDeÁu…_H™dÀr


287 .
wók
 
	gRCC_IRQH™dÀr


288 .
thumb_£t
 
	gRCC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


290 .
wók
 
	gEXTI0_IRQH™dÀr


291 .
thumb_£t
 
	gEXTI0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


293 .
wók
 
	gEXTI1_IRQH™dÀr


294 .
thumb_£t
 
	gEXTI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


296 .
wók
 
	gEXTI2_TS_IRQH™dÀr


297 .
thumb_£t
 
	gEXTI2_TS_IRQH™dÀr
,
	gDeÁu…_H™dÀr


299 .
wók
 
	gEXTI3_IRQH™dÀr


300 .
thumb_£t
 
	gEXTI3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


302 .
wók
 
	gEXTI4_IRQH™dÀr


303 .
thumb_£t
 
	gEXTI4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


305 .
wók
 
	gDMA1_Ch™√l1_IRQH™dÀr


306 .
thumb_£t
 
	gDMA1_Ch™√l1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


308 .
wók
 
	gDMA1_Ch™√l2_IRQH™dÀr


309 .
thumb_£t
 
	gDMA1_Ch™√l2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


311 .
wók
 
	gDMA1_Ch™√l3_IRQH™dÀr


312 .
thumb_£t
 
	gDMA1_Ch™√l3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


314 .
wók
 
	gDMA1_Ch™√l4_IRQH™dÀr


315 .
thumb_£t
 
	gDMA1_Ch™√l4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


317 .
wók
 
	gDMA1_Ch™√l5_IRQH™dÀr


318 .
thumb_£t
 
	gDMA1_Ch™√l5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


320 .
wók
 
	gDMA1_Ch™√l6_IRQH™dÀr


321 .
thumb_£t
 
	gDMA1_Ch™√l6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


323 .
wók
 
	gDMA1_Ch™√l7_IRQH™dÀr


324 .
thumb_£t
 
	gDMA1_Ch™√l7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


326 .
wók
 
	gADC1_2_IRQH™dÀr


327 .
thumb_£t
 
	gADC1_2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


329 .
wók
 
	gUSB_HP_CAN1_TX_IRQH™dÀr


330 .
thumb_£t
 
	gUSB_HP_CAN1_TX_IRQH™dÀr
,
	gDeÁu…_H™dÀr


332 .
wók
 
	gUSB_LP_CAN1_RX0_IRQH™dÀr


333 .
thumb_£t
 
	gUSB_LP_CAN1_RX0_IRQH™dÀr
,
	gDeÁu…_H™dÀr


335 .
wók
 
	gCAN1_RX1_IRQH™dÀr


336 .
thumb_£t
 
	gCAN1_RX1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


338 .
wók
 
	gCAN1_SCE_IRQH™dÀr


339 .
thumb_£t
 
	gCAN1_SCE_IRQH™dÀr
,
	gDeÁu…_H™dÀr


341 .
wók
 
	gEXTI9_5_IRQH™dÀr


342 .
thumb_£t
 
	gEXTI9_5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


344 .
wók
 
	gTIM1_BRK_TIM15_IRQH™dÀr


345 .
thumb_£t
 
	gTIM1_BRK_TIM15_IRQH™dÀr
,
	gDeÁu…_H™dÀr


347 .
wók
 
	gTIM1_UP_TIM16_IRQH™dÀr


348 .
thumb_£t
 
	gTIM1_UP_TIM16_IRQH™dÀr
,
	gDeÁu…_H™dÀr


350 .
wók
 
	gTIM1_TRG_COM_TIM17_IRQH™dÀr


351 .
thumb_£t
 
	gTIM1_TRG_COM_TIM17_IRQH™dÀr
,
	gDeÁu…_H™dÀr


353 .
wók
 
	gTIM1_CC_IRQH™dÀr


354 .
thumb_£t
 
	gTIM1_CC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


356 .
wók
 
	gTIM2_IRQH™dÀr


357 .
thumb_£t
 
	gTIM2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


359 .
wók
 
	gTIM3_IRQH™dÀr


360 .
thumb_£t
 
	gTIM3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


362 .
wók
 
	gTIM4_IRQH™dÀr


363 .
thumb_£t
 
	gTIM4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


365 .
wók
 
	gI2C1_EV_IRQH™dÀr


366 .
thumb_£t
 
	gI2C1_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


368 .
wók
 
	gI2C1_ER_IRQH™dÀr


369 .
thumb_£t
 
	gI2C1_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


371 .
wók
 
	gI2C2_EV_IRQH™dÀr


372 .
thumb_£t
 
	gI2C2_EV_IRQH™dÀr
,
	gDeÁu…_H™dÀr


374 .
wók
 
	gI2C2_ER_IRQH™dÀr


375 .
thumb_£t
 
	gI2C2_ER_IRQH™dÀr
,
	gDeÁu…_H™dÀr


377 .
wók
 
	gSPI1_IRQH™dÀr


378 .
thumb_£t
 
	gSPI1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


380 .
wók
 
	gSPI2_IRQH™dÀr


381 .
thumb_£t
 
	gSPI2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


383 .
wók
 
	gUSART1_IRQH™dÀr


384 .
thumb_£t
 
	gUSART1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


386 .
wók
 
	gUSART2_IRQH™dÀr


387 .
thumb_£t
 
	gUSART2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


389 .
wók
 
	gUSART3_IRQH™dÀr


390 .
thumb_£t
 
	gUSART3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


392 .
wók
 
	gEXTI15_10_IRQH™dÀr


393 .
thumb_£t
 
	gEXTI15_10_IRQH™dÀr
,
	gDeÁu…_H™dÀr


395 .
wók
 
	gRTC_Aœrm_IRQH™dÀr


396 .
thumb_£t
 
	gRTC_Aœrm_IRQH™dÀr
,
	gDeÁu…_H™dÀr


398 .
wók
 
	gUSBWakeUp_IRQH™dÀr


399 .
thumb_£t
 
	gUSBWakeUp_IRQH™dÀr
,
	gDeÁu…_H™dÀr


401 .
wók
 
	gTIM8_BRK_IRQH™dÀr


402 .
thumb_£t
 
	gTIM8_BRK_IRQH™dÀr
,
	gDeÁu…_H™dÀr


404 .
wók
 
	gTIM8_UP_IRQH™dÀr


405 .
thumb_£t
 
	gTIM8_UP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


407 .
wók
 
	gTIM8_TRG_COM_IRQH™dÀr


408 .
thumb_£t
 
	gTIM8_TRG_COM_IRQH™dÀr
,
	gDeÁu…_H™dÀr


410 .
wók
 
	gTIM8_CC_IRQH™dÀr


411 .
thumb_£t
 
	gTIM8_CC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


413 .
wók
 
	gADC3_IRQH™dÀr


414 .
thumb_£t
 
	gADC3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


416 .
wók
 
	gSPI3_IRQH™dÀr


417 .
thumb_£t
 
	gSPI3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


419 .
wók
 
	gUART4_IRQH™dÀr


420 .
thumb_£t
 
	gUART4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


422 .
wók
 
	gUART5_IRQH™dÀr


423 .
thumb_£t
 
	gUART5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


425 .
wók
 
	gTIM6_DAC_IRQH™dÀr


426 .
thumb_£t
 
	gTIM6_DAC_IRQH™dÀr
,
	gDeÁu…_H™dÀr


428 .
wók
 
	gTIM7_IRQH™dÀr


429 .
thumb_£t
 
	gTIM7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


431 .
wók
 
	gDMA2_Ch™√l1_IRQH™dÀr


432 .
thumb_£t
 
	gDMA2_Ch™√l1_IRQH™dÀr
,
	gDeÁu…_H™dÀr


434 .
wók
 
	gDMA2_Ch™√l2_IRQH™dÀr


435 .
thumb_£t
 
	gDMA2_Ch™√l2_IRQH™dÀr
,
	gDeÁu…_H™dÀr


437 .
wók
 
	gDMA2_Ch™√l3_IRQH™dÀr


438 .
thumb_£t
 
	gDMA2_Ch™√l3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


440 .
wók
 
	gDMA2_Ch™√l4_IRQH™dÀr


441 .
thumb_£t
 
	gDMA2_Ch™√l4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


443 .
wók
 
	gDMA2_Ch™√l5_IRQH™dÀr


444 .
thumb_£t
 
	gDMA2_Ch™√l5_IRQH™dÀr
,
	gDeÁu…_H™dÀr


446 .
wók
 
	gADC4_IRQH™dÀr


447 .
thumb_£t
 
	gADC4_IRQH™dÀr
,
	gDeÁu…_H™dÀr


449 .
wók
 
	gCOMP1_2_3_IRQH™dÀr


450 .
thumb_£t
 
	gCOMP1_2_3_IRQH™dÀr
,
	gDeÁu…_H™dÀr


452 .
wók
 
	gCOMP4_5_6_IRQH™dÀr


453 .
thumb_£t
 
	gCOMP4_5_6_IRQH™dÀr
,
	gDeÁu…_H™dÀr


455 .
wók
 
	gCOMP7_IRQH™dÀr


456 .
thumb_£t
 
	gCOMP7_IRQH™dÀr
,
	gDeÁu…_H™dÀr


458 .
wók
 
	gUSB_HP_IRQH™dÀr


459 .
thumb_£t
 
	gUSB_HP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


461 .
wók
 
	gUSB_LP_IRQH™dÀr


462 .
thumb_£t
 
	gUSB_LP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


464 .
wók
 
	gUSBWakeUp_RMP_IRQH™dÀr


465 .
thumb_£t
 
	gUSBWakeUp_RMP_IRQH™dÀr
,
	gDeÁu…_H™dÀr


467 .
wók
 
	gFPU_IRQH™dÀr


468 .
thumb_£t
 
	gFPU_IRQH™dÀr
,
	gDeÁu…_H™dÀr


	@resources/startup/stm32f30x.h

53 #i‚de‡
__STM32F30x_H


54 
	#__STM32F30x_H


	)

56 #ifde‡
__˝lu•lus


68 #i‡!
deföed
 (
STM32F30X
)

69 
	#STM32F30X


	)

76 #i‡!
deföed
 (
STM32F30X
)

80 #i‡!
deföed
 (
USE_STDPERIPH_DRIVER
)

96 #i‡!
deföed
 (
HSE_VALUE
)

97 
	#HSE_VALUE
 ((
uöt32_t
)8000000Ë

	)

104 #i‡!
deföed
 (
HSE_STARTUP_TIMEOUT
)

105 
	#HSE_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

112 #i‡!
deföed
 (
HSI_STARTUP_TIMEOUT
)

113 
	#HSI_STARTUP_TIMEOUT
 ((
uöt16_t
)0x0500Ë

	)

116 #i‡!
deföed
 (
HSI_VALUE
)

117 
	#HSI_VALUE
 ((
uöt32_t
)8000000)

	)

119 
The
 
ªÆ
 
vÆue
 
may
 
v¨y
 
dïídög
 
⁄
 
the
 
v¨üti⁄s


120 
ö
 
vﬁège
 
™d
 
ãm≥øtuª
. */

121 #i‡!
deföed
 (
LSI_VALUE
)

122 
	#LSI_VALUE
 ((
uöt32_t
)40000)

	)

124 
The
 
ªÆ
 
vÆue
 
may
 
v¨y
 
dïídög
 
⁄
 
the
 
v¨üti⁄s


125 
ö
 
vﬁège
 
™d
 
ãm≥øtuª
. */

126 #i‡!
deföed
 (
LSE_VALUE
)

127 
	#LSE_VALUE
 ((
uöt32_t
)32768Ë

	)

134 
	#__STM32F30X_STDPERIPH_VERSION_MAIN
 (0x01Ë

	)

135 
	#__STM32F30X_STDPERIPH_VERSION_SUB1
 (0x00Ë

	)

136 
	#__STM32F30X_STDPERIPH_VERSION_SUB2
 (0x00Ë

	)

137 
	#__STM32F30X_STDPERIPH_VERSION_RC
 (0x00Ë

	)

138 
	#__STM32F30X_STDPERIPH_VERSION
 ( (
__STM32F30X_STDPERIPH_VERSION_MAIN
 << 24)\

	)

139 |(
__STM32F30X_STDPERIPH_VERSION_SUB1
 << 16)\

140 |(
__STM32F30X_STDPERIPH_VERSION_SUB2
 << 8)\

141 |(
__STM32F30X_STDPERIPH_VERSION_RC
))

154 
	#__CM4_REV
 0x0001

	)

155 
	#__MPU_PRESENT
 1

	)

156 
	#__NVIC_PRIO_BITS
 4

	)

157 
	#__Víd‹_SysTickC⁄fig
 0

	)

158 
	#__FPU_PRESENT
 1

	)

165 
	eIRQn


168 
N⁄MaskabÀI¡_IRQn
 = -14,

169 
Mem‹yM™agemít_IRQn
 = -12,

170 
BusFau…_IRQn
 = -11,

171 
UßgeFau…_IRQn
 = -10,

172 
SVCÆl_IRQn
 = -5,

173 
DebugM⁄ô‹_IRQn
 = -4,

174 
PídSV_IRQn
 = -2,

175 
SysTick_IRQn
 = -1,

177 
WWDG_IRQn
 = 0,

178 
PVD_IRQn
 = 1,

179 
TAMPER_STAMP_IRQn
 = 2,

180 
RTC_WKUP_IRQn
 = 3,

181 
FLASH_IRQn
 = 4,

182 
RCC_IRQn
 = 5,

183 
EXTI0_IRQn
 = 6,

184 
EXTI1_IRQn
 = 7,

185 
EXTI2_TS_IRQn
 = 8,

186 
EXTI3_IRQn
 = 9,

187 
EXTI4_IRQn
 = 10,

188 
DMA1_Ch™√l1_IRQn
 = 11,

189 
DMA1_Ch™√l2_IRQn
 = 12,

190 
DMA1_Ch™√l3_IRQn
 = 13,

191 
DMA1_Ch™√l4_IRQn
 = 14,

192 
DMA1_Ch™√l5_IRQn
 = 15,

193 
DMA1_Ch™√l6_IRQn
 = 16,

194 
DMA1_Ch™√l7_IRQn
 = 17,

195 
ADC1_2_IRQn
 = 18,

196 
USB_HP_CAN1_TX_IRQn
 = 19,

197 
USB_LP_CAN1_RX0_IRQn
 = 20,

198 
CAN1_RX1_IRQn
 = 21,

199 
CAN1_SCE_IRQn
 = 22,

200 
EXTI9_5_IRQn
 = 23,

201 
TIM1_BRK_TIM15_IRQn
 = 24,

202 
TIM1_UP_TIM16_IRQn
 = 25,

203 
TIM1_TRG_COM_TIM17_IRQn
 = 26,

204 
TIM1_CC_IRQn
 = 27,

205 
TIM2_IRQn
 = 28,

206 
TIM3_IRQn
 = 29,

207 
TIM4_IRQn
 = 30,

208 
I2C1_EV_IRQn
 = 31,

209 
I2C1_ER_IRQn
 = 32,

210 
I2C2_EV_IRQn
 = 33,

211 
I2C2_ER_IRQn
 = 34,

212 
SPI1_IRQn
 = 35,

213 
SPI2_IRQn
 = 36,

214 
USART1_IRQn
 = 37,

215 
USART2_IRQn
 = 38,

216 
USART3_IRQn
 = 39,

217 
EXTI15_10_IRQn
 = 40,

218 
RTC_Aœrm_IRQn
 = 41,

219 
USBWakeUp_IRQn
 = 42,

220 
TIM8_BRK_IRQn
 = 43,

221 
TIM8_UP_IRQn
 = 44,

222 
TIM8_TRG_COM_IRQn
 = 45,

223 
TIM8_CC_IRQn
 = 46,

224 
ADC3_IRQn
 = 47,

225 
SPI3_IRQn
 = 51,

226 
UART4_IRQn
 = 52,

227 
UART5_IRQn
 = 53,

228 
TIM6_DAC_IRQn
 = 54,

229 
TIM7_IRQn
 = 55,

230 
DMA2_Ch™√l1_IRQn
 = 56,

231 
DMA2_Ch™√l2_IRQn
 = 57,

232 
DMA2_Ch™√l3_IRQn
 = 58,

233 
DMA2_Ch™√l4_IRQn
 = 59,

234 
DMA2_Ch™√l5_IRQn
 = 60,

235 
ADC4_IRQn
 = 61,

236 
COMP1_2_3_IRQn
 = 64,

237 
COMP4_5_6_IRQn
 = 65,

238 
COMP7_IRQn
 = 66,

239 
USB_HP_IRQn
 = 74,

240 
USB_LP_IRQn
 = 75,

241 
USBWakeUp_RMP_IRQn
 = 76,

242 
FPU_IRQn
 = 81

243 } 
	tIRQn_Ty≥
;

249 
	~"c‹e_cm4.h
"

250 
	~"sy°em_°m32f30x.h
"

251 
	~<°döt.h
>

257 
öt32_t
 
	ts32
;

258 
öt16_t
 
	ts16
;

259 
öt8_t
 
	ts8
;

261 c⁄° 
	töt32_t
 
	tsc32
;

262 c⁄° 
	töt16_t
 
	tsc16
;

263 c⁄° 
	töt8_t
 
	tsc8
;

265 
__IO
 
	töt32_t
 
	tvs32
;

266 
__IO
 
	töt16_t
 
	tvs16
;

267 
__IO
 
	töt8_t
 
	tvs8
;

269 
__I
 
	töt32_t
 
	tvsc32
;

270 
__I
 
	töt16_t
 
	tvsc16
;

271 
__I
 
	töt8_t
 
	tvsc8
;

273 
uöt32_t
 
	tu32
;

274 
uöt16_t
 
	tu16
;

275 
uöt8_t
 
	tu8
;

277 c⁄° 
	tuöt32_t
 
	tuc32
;

278 c⁄° 
	tuöt16_t
 
	tuc16
;

279 c⁄° 
	tuöt8_t
 
	tuc8
;

281 
__IO
 
	tuöt32_t
 
	tvu32
;

282 
__IO
 
	tuöt16_t
 
	tvu16
;

283 
__IO
 
	tuöt8_t
 
	tvu8
;

285 
__I
 
	tuöt32_t
 
	tvuc32
;

286 
__I
 
	tuöt16_t
 
	tvuc16
;

287 
__I
 
	tuöt8_t
 
	tvuc8
;

289 íum {
RESET
 = 0, 
SET
 = !RESET} 
	tFœgSètus
, 
	tITSètus
;

291 íum {
DISABLE
 = 0, 
ENABLE
 = !DISABLE} 
	tFun˘i⁄ÆSèã
;

292 
	#IS_FUNCTIONAL_STATE
(
STATE
Ë(((STATEË=
DISABLE
Ë|| ((STATEË=
ENABLE
))

	)

294 íum {
ERROR
 = 0, 
SUCCESS
 = !ERROR} 
	tEº‹Sètus
;

310 
__IO
 
uöt32_t
 
ISR
;

311 
__IO
 
uöt32_t
 
IER
;

312 
__IO
 
uöt32_t
 
CR
;

313 
__IO
 
uöt32_t
 
CFGR
;

314 
uöt32_t
 
RESERVED0
;

315 
__IO
 
uöt32_t
 
SMPR1
;

316 
__IO
 
uöt32_t
 
SMPR2
;

317 
uöt32_t
 
RESERVED1
;

318 
__IO
 
uöt32_t
 
TR1
;

319 
__IO
 
uöt32_t
 
TR2
;

320 
__IO
 
uöt32_t
 
TR3
;

321 
uöt32_t
 
RESERVED2
;

322 
__IO
 
uöt32_t
 
SQR1
;

323 
__IO
 
uöt32_t
 
SQR2
;

324 
__IO
 
uöt32_t
 
SQR3
;

325 
__IO
 
uöt32_t
 
SQR4
;

326 
__IO
 
uöt32_t
 
DR
;

327 
uöt32_t
 
RESERVED3
;

328 
uöt32_t
 
RESERVED4
;

329 
__IO
 
uöt32_t
 
JSQR
;

330 
uöt32_t
 
RESERVED5
[4];

331 
__IO
 
uöt32_t
 
OFR1
;

332 
__IO
 
uöt32_t
 
OFR2
;

333 
__IO
 
uöt32_t
 
OFR3
;

334 
__IO
 
uöt32_t
 
OFR4
;

335 
uöt32_t
 
RESERVED6
[4];

336 
__IO
 
uöt32_t
 
JDR1
;

337 
__IO
 
uöt32_t
 
JDR2
;

338 
__IO
 
uöt32_t
 
JDR3
;

339 
__IO
 
uöt32_t
 
JDR4
;

340 
uöt32_t
 
RESERVED7
[4];

341 
__IO
 
uöt32_t
 
AWD2CR
;

342 
__IO
 
uöt32_t
 
AWD3CR
;

343 
uöt32_t
 
RESERVED8
;

344 
uöt32_t
 
RESERVED9
;

345 
__IO
 
uöt32_t
 
DIFSEL
;

346 
__IO
 
uöt32_t
 
CALFACT
;

348 } 
	tADC_Ty≥Def
;

352 
__IO
 
uöt32_t
 
CSR
;

353 
uöt32_t
 
RESERVED
;

354 
__IO
 
uöt32_t
 
CCR
;

355 
__IO
 
uöt32_t
 
CDR
;

357 } 
	tADC_Comm⁄_Ty≥Def
;

365 
__IO
 
uöt32_t
 
TIR
;

366 
__IO
 
uöt32_t
 
TDTR
;

367 
__IO
 
uöt32_t
 
TDLR
;

368 
__IO
 
uöt32_t
 
TDHR
;

369 } 
	tCAN_TxMaûBox_Ty≥Def
;

376 
__IO
 
uöt32_t
 
RIR
;

377 
__IO
 
uöt32_t
 
RDTR
;

378 
__IO
 
uöt32_t
 
RDLR
;

379 
__IO
 
uöt32_t
 
RDHR
;

380 } 
	tCAN_FIFOMaûBox_Ty≥Def
;

387 
__IO
 
uöt32_t
 
FR1
;

388 
__IO
 
uöt32_t
 
FR2
;

389 } 
	tCAN_FûãrRegi°î_Ty≥Def
;

396 
__IO
 
uöt32_t
 
MCR
;

397 
__IO
 
uöt32_t
 
MSR
;

398 
__IO
 
uöt32_t
 
TSR
;

399 
__IO
 
uöt32_t
 
RF0R
;

400 
__IO
 
uöt32_t
 
RF1R
;

401 
__IO
 
uöt32_t
 
IER
;

402 
__IO
 
uöt32_t
 
ESR
;

403 
__IO
 
uöt32_t
 
BTR
;

404 
uöt32_t
 
RESERVED0
[88];

405 
CAN_TxMaûBox_Ty≥Def
 
sTxMaûBox
[3];

406 
CAN_FIFOMaûBox_Ty≥Def
 
sFIFOMaûBox
[2];

407 
uöt32_t
 
RESERVED1
[12];

408 
__IO
 
uöt32_t
 
FMR
;

409 
__IO
 
uöt32_t
 
FM1R
;

410 
uöt32_t
 
RESERVED2
;

411 
__IO
 
uöt32_t
 
FS1R
;

412 
uöt32_t
 
RESERVED3
;

413 
__IO
 
uöt32_t
 
FFA1R
;

414 
uöt32_t
 
RESERVED4
;

415 
__IO
 
uöt32_t
 
FA1R
;

416 
uöt32_t
 
RESERVED5
[8];

417 
CAN_FûãrRegi°î_Ty≥Def
 
sFûãrRegi°î
[28];

418 } 
	tCAN_Ty≥Def
;

427 
__IO
 
uöt32_t
 
CSR
;

428 } 
	tCOMP_Ty≥Def
;

436 
__IO
 
uöt32_t
 
DR
;

437 
__IO
 
uöt8_t
 
IDR
;

438 
uöt8_t
 
RESERVED0
;

439 
uöt16_t
 
RESERVED1
;

440 
__IO
 
uöt32_t
 
CR
;

441 
uöt32_t
 
RESERVED2
;

442 
__IO
 
uöt32_t
 
INIT
;

443 
__IO
 
uöt32_t
 
POL
;

444 } 
	tCRC_Ty≥Def
;

452 
__IO
 
uöt32_t
 
CR
;

453 
__IO
 
uöt32_t
 
SWTRIGR
;

454 
__IO
 
uöt32_t
 
DHR12R1
;

455 
__IO
 
uöt32_t
 
DHR12L1
;

456 
__IO
 
uöt32_t
 
DHR8R1
;

457 
__IO
 
uöt32_t
 
DHR12R2
;

458 
__IO
 
uöt32_t
 
DHR12L2
;

459 
__IO
 
uöt32_t
 
DHR8R2
;

460 
__IO
 
uöt32_t
 
DHR12RD
;

461 
__IO
 
uöt32_t
 
DHR12LD
;

462 
__IO
 
uöt32_t
 
DHR8RD
;

463 
__IO
 
uöt32_t
 
DOR1
;

464 
__IO
 
uöt32_t
 
DOR2
;

465 
__IO
 
uöt32_t
 
SR
;

466 } 
	tDAC_Ty≥Def
;

474 
__IO
 
uöt32_t
 
IDCODE
;

475 
__IO
 
uöt32_t
 
CR
;

476 
__IO
 
uöt32_t
 
APB1FZ
;

477 
__IO
 
uöt32_t
 
APB2FZ
;

478 }
	tDBGMCU_Ty≥Def
;

486 
__IO
 
uöt32_t
 
CCR
;

487 
__IO
 
uöt32_t
 
CNDTR
;

488 
__IO
 
uöt32_t
 
CPAR
;

489 
__IO
 
uöt32_t
 
CMAR
;

490 } 
	tDMA_Ch™√l_Ty≥Def
;

494 
__IO
 
uöt32_t
 
ISR
;

495 
__IO
 
uöt32_t
 
IFCR
;

496 } 
	tDMA_Ty≥Def
;

504 
__IO
 
uöt32_t
 
IMR
;

505 
__IO
 
uöt32_t
 
EMR
;

506 
__IO
 
uöt32_t
 
RTSR
;

507 
__IO
 
uöt32_t
 
FTSR
;

508 
__IO
 
uöt32_t
 
SWIER
;

509 
__IO
 
uöt32_t
 
PR
;

510 
uöt32_t
 
RESERVED1
;

511 
uöt32_t
 
RESERVED2
;

512 
__IO
 
uöt32_t
 
IMR2
;

513 
__IO
 
uöt32_t
 
EMR2
;

514 
__IO
 
uöt32_t
 
RTSR2
;

515 
__IO
 
uöt32_t
 
FTSR2
;

516 
__IO
 
uöt32_t
 
SWIER2
;

517 
__IO
 
uöt32_t
 
PR2
;

518 }
	tEXTI_Ty≥Def
;

526 
__IO
 
uöt32_t
 
ACR
;

527 
__IO
 
uöt32_t
 
KEYR
;

528 
__IO
 
uöt32_t
 
OPTKEYR
;

529 
__IO
 
uöt32_t
 
SR
;

530 
__IO
 
uöt32_t
 
CR
;

531 
__IO
 
uöt32_t
 
AR
;

532 
uöt32_t
 
RESERVED
;

533 
__IO
 
uöt32_t
 
OBR
;

534 
__IO
 
uöt32_t
 
WRPR
;

536 } 
	tFLASH_Ty≥Def
;

543 
__IO
 
uöt16_t
 
RDP
;

544 
__IO
 
uöt16_t
 
USER
;

545 
uöt16_t
 
RESERVED0
;

546 
uöt16_t
 
RESERVED1
;

547 
__IO
 
uöt16_t
 
WRP0
;

548 
__IO
 
uöt16_t
 
WRP1
;

549 
__IO
 
uöt16_t
 
WRP2
;

550 
__IO
 
uöt16_t
 
WRP3
;

551 } 
	tOB_Ty≥Def
;

559 
__IO
 
uöt32_t
 
MODER
;

560 
__IO
 
uöt16_t
 
OTYPER
;

561 
uöt16_t
 
RESERVED0
;

562 
__IO
 
uöt32_t
 
OSPEEDR
;

563 
__IO
 
uöt32_t
 
PUPDR
;

564 
__IO
 
uöt16_t
 
IDR
;

565 
uöt16_t
 
RESERVED1
;

566 
__IO
 
uöt16_t
 
ODR
;

567 
uöt16_t
 
RESERVED2
;

568 
__IO
 
uöt32_t
 
BSRR
;

569 
__IO
 
uöt32_t
 
LCKR
;

570 
__IO
 
uöt32_t
 
AFR
[2];

571 
__IO
 
uöt16_t
 
BRR
;

572 
uöt16_t
 
RESERVED3
;

573 }
	tGPIO_Ty≥Def
;

581 
__IO
 
uöt32_t
 
CSR
;

582 } 
	tOPAMP_Ty≥Def
;

591 
__IO
 
uöt32_t
 
CFGR1
;

592 
__IO
 
uöt32_t
 
RCR
;

593 
__IO
 
uöt32_t
 
EXTICR
[4];

594 
__IO
 
uöt32_t
 
CFGR2
;

595 } 
	tSYSCFG_Ty≥Def
;

603 
__IO
 
uöt32_t
 
CR1
;

604 
__IO
 
uöt32_t
 
CR2
;

605 
__IO
 
uöt32_t
 
OAR1
;

606 
__IO
 
uöt32_t
 
OAR2
;

607 
__IO
 
uöt32_t
 
TIMINGR
;

608 
__IO
 
uöt32_t
 
TIMEOUTR
;

609 
__IO
 
uöt32_t
 
ISR
;

610 
__IO
 
uöt32_t
 
ICR
;

611 
__IO
 
uöt32_t
 
PECR
;

612 
__IO
 
uöt32_t
 
RXDR
;

613 
__IO
 
uöt32_t
 
TXDR
;

614 }
	tI2C_Ty≥Def
;

622 
__IO
 
uöt32_t
 
KR
;

623 
__IO
 
uöt32_t
 
PR
;

624 
__IO
 
uöt32_t
 
RLR
;

625 
__IO
 
uöt32_t
 
SR
;

626 
__IO
 
uöt32_t
 
WINR
;

627 } 
	tIWDG_Ty≥Def
;

635 
__IO
 
uöt32_t
 
CR
;

636 
__IO
 
uöt32_t
 
CSR
;

637 } 
	tPWR_Ty≥Def
;

644 
__IO
 
uöt32_t
 
CR
;

645 
__IO
 
uöt32_t
 
CFGR
;

646 
__IO
 
uöt32_t
 
CIR
;

647 
__IO
 
uöt32_t
 
APB2RSTR
;

648 
__IO
 
uöt32_t
 
APB1RSTR
;

649 
__IO
 
uöt32_t
 
AHBENR
;

650 
__IO
 
uöt32_t
 
APB2ENR
;

651 
__IO
 
uöt32_t
 
APB1ENR
;

652 
__IO
 
uöt32_t
 
BDCR
;

653 
__IO
 
uöt32_t
 
CSR
;

654 
__IO
 
uöt32_t
 
AHBRSTR
;

655 
__IO
 
uöt32_t
 
CFGR2
;

656 
__IO
 
uöt32_t
 
CFGR3
;

657 } 
	tRCC_Ty≥Def
;

665 
__IO
 
uöt32_t
 
TR
;

666 
__IO
 
uöt32_t
 
DR
;

667 
__IO
 
uöt32_t
 
CR
;

668 
__IO
 
uöt32_t
 
ISR
;

669 
__IO
 
uöt32_t
 
PRER
;

670 
__IO
 
uöt32_t
 
WUTR
;

671 
uöt32_t
 
RESERVED0
;

672 
__IO
 
uöt32_t
 
ALRMAR
;

673 
__IO
 
uöt32_t
 
ALRMBR
;

674 
__IO
 
uöt32_t
 
WPR
;

675 
__IO
 
uöt32_t
 
SSR
;

676 
__IO
 
uöt32_t
 
SHIFTR
;

677 
__IO
 
uöt32_t
 
TSTR
;

678 
__IO
 
uöt32_t
 
TSDR
;

679 
__IO
 
uöt32_t
 
TSSSR
;

680 
__IO
 
uöt32_t
 
CALR
;

681 
__IO
 
uöt32_t
 
TAFCR
;

682 
__IO
 
uöt32_t
 
ALRMASSR
;

683 
__IO
 
uöt32_t
 
ALRMBSSR
;

684 
uöt32_t
 
RESERVED7
;

685 
__IO
 
uöt32_t
 
BKP0R
;

686 
__IO
 
uöt32_t
 
BKP1R
;

687 
__IO
 
uöt32_t
 
BKP2R
;

688 
__IO
 
uöt32_t
 
BKP3R
;

689 
__IO
 
uöt32_t
 
BKP4R
;

690 
__IO
 
uöt32_t
 
BKP5R
;

691 
__IO
 
uöt32_t
 
BKP6R
;

692 
__IO
 
uöt32_t
 
BKP7R
;

693 
__IO
 
uöt32_t
 
BKP8R
;

694 
__IO
 
uöt32_t
 
BKP9R
;

695 
__IO
 
uöt32_t
 
BKP10R
;

696 
__IO
 
uöt32_t
 
BKP11R
;

697 
__IO
 
uöt32_t
 
BKP12R
;

698 
__IO
 
uöt32_t
 
BKP13R
;

699 
__IO
 
uöt32_t
 
BKP14R
;

700 
__IO
 
uöt32_t
 
BKP15R
;

701 } 
	tRTC_Ty≥Def
;

710 
__IO
 
uöt16_t
 
CR1
;

711 
uöt16_t
 
RESERVED0
;

712 
__IO
 
uöt16_t
 
CR2
;

713 
uöt16_t
 
RESERVED1
;

714 
__IO
 
uöt16_t
 
SR
;

715 
uöt16_t
 
RESERVED2
;

716 
__IO
 
uöt16_t
 
DR
;

717 
uöt16_t
 
RESERVED3
;

718 
__IO
 
uöt16_t
 
CRCPR
;

719 
uöt16_t
 
RESERVED4
;

720 
__IO
 
uöt16_t
 
RXCRCR
;

721 
uöt16_t
 
RESERVED5
;

722 
__IO
 
uöt16_t
 
TXCRCR
;

723 
uöt16_t
 
RESERVED6
;

724 
__IO
 
uöt16_t
 
I2SCFGR
;

725 
uöt16_t
 
RESERVED7
;

726 
__IO
 
uöt16_t
 
I2SPR
;

727 
uöt16_t
 
RESERVED8
;

728 } 
	tSPI_Ty≥Def
;

735 
__IO
 
uöt16_t
 
CR1
;

736 
uöt16_t
 
RESERVED0
;

737 
__IO
 
uöt32_t
 
CR2
;

738 
__IO
 
uöt32_t
 
SMCR
;

739 
__IO
 
uöt32_t
 
DIER
;

740 
__IO
 
uöt32_t
 
SR
;

741 
__IO
 
uöt32_t
 
EGR
;

742 
__IO
 
uöt32_t
 
CCMR1
;

743 
__IO
 
uöt32_t
 
CCMR2
;

744 
__IO
 
uöt32_t
 
CCER
;

745 
__IO
 
uöt32_t
 
CNT
;

746 
__IO
 
uöt16_t
 
PSC
;

747 
uöt16_t
 
RESERVED9
;

748 
__IO
 
uöt32_t
 
ARR
;

749 
__IO
 
uöt16_t
 
RCR
;

750 
uöt16_t
 
RESERVED10
;

751 
__IO
 
uöt32_t
 
CCR1
;

752 
__IO
 
uöt32_t
 
CCR2
;

753 
__IO
 
uöt32_t
 
CCR3
;

754 
__IO
 
uöt32_t
 
CCR4
;

755 
__IO
 
uöt32_t
 
BDTR
;

756 
__IO
 
uöt16_t
 
DCR
;

757 
uöt16_t
 
RESERVED12
;

758 
__IO
 
uöt16_t
 
DMAR
;

759 
uöt16_t
 
RESERVED13
;

760 
__IO
 
uöt16_t
 
OR
;

761 
__IO
 
uöt32_t
 
CCMR3
;

762 
__IO
 
uöt32_t
 
CCR5
;

763 
__IO
 
uöt32_t
 
CCR6
;

764 } 
	tTIM_Ty≥Def
;

772 
__IO
 
uöt32_t
 
CR
;

773 
__IO
 
uöt32_t
 
IER
;

774 
__IO
 
uöt32_t
 
ICR
;

775 
__IO
 
uöt32_t
 
ISR
;

776 
__IO
 
uöt32_t
 
IOHCR
;

777 
uöt32_t
 
RESERVED1
;

778 
__IO
 
uöt32_t
 
IOASCR
;

779 
uöt32_t
 
RESERVED2
;

780 
__IO
 
uöt32_t
 
IOSCR
;

781 
uöt32_t
 
RESERVED3
;

782 
__IO
 
uöt32_t
 
IOCCR
;

783 
uöt32_t
 
RESERVED4
;

784 
__IO
 
uöt32_t
 
IOGCSR
;

785 
__IO
 
uöt32_t
 
IOGXCR
[8];

786 } 
	tTSC_Ty≥Def
;

794 
__IO
 
uöt32_t
 
CR1
;

795 
__IO
 
uöt32_t
 
CR2
;

796 
__IO
 
uöt32_t
 
CR3
;

797 
__IO
 
uöt16_t
 
BRR
;

798 
uöt16_t
 
RESERVED1
;

799 
__IO
 
uöt16_t
 
GTPR
;

800 
uöt16_t
 
RESERVED2
;

801 
__IO
 
uöt32_t
 
RTOR
;

802 
__IO
 
uöt16_t
 
RQR
;

803 
uöt16_t
 
RESERVED3
;

804 
__IO
 
uöt32_t
 
ISR
;

805 
__IO
 
uöt32_t
 
ICR
;

806 
__IO
 
uöt16_t
 
RDR
;

807 
uöt16_t
 
RESERVED4
;

808 
__IO
 
uöt16_t
 
TDR
;

809 
uöt16_t
 
RESERVED5
;

810 } 
	tUSART_Ty≥Def
;

817 
__IO
 
uöt32_t
 
CR
;

818 
__IO
 
uöt32_t
 
CFR
;

819 
__IO
 
uöt32_t
 
SR
;

820 } 
	tWWDG_Ty≥Def
;

827 
	#FLASH_BASE
 ((
uöt32_t
)0x08000000Ë

	)

828 
	#SRAM_BASE
 ((
uöt32_t
)0x20000000Ë

	)

829 
	#PERIPH_BASE
 ((
uöt32_t
)0x40000000Ë

	)

831 
	#SRAM_BB_BASE
 ((
uöt32_t
)0x22000000Ë

	)

832 
	#PERIPH_BB_BASE
 ((
uöt32_t
)0x42000000Ë

	)

836 
	#APB1PERIPH_BASE
 
PERIPH_BASE


	)

837 
	#APB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x00010000)

	)

838 
	#AHB1PERIPH_BASE
 (
PERIPH_BASE
 + 0x00020000)

	)

839 
	#AHB2PERIPH_BASE
 (
PERIPH_BASE
 + 0x08000000)

	)

840 
	#AHB3PERIPH_BASE
 (
PERIPH_BASE
 + 0x10000000)

	)

843 
	#TIM2_BASE
 (
APB1PERIPH_BASE
 + 0x00000000)

	)

844 
	#TIM3_BASE
 (
APB1PERIPH_BASE
 + 0x00000400)

	)

845 
	#TIM4_BASE
 (
APB1PERIPH_BASE
 + 0x00000800)

	)

846 
	#TIM6_BASE
 (
APB1PERIPH_BASE
 + 0x00001000)

	)

847 
	#TIM7_BASE
 (
APB1PERIPH_BASE
 + 0x00001400)

	)

848 
	#RTC_BASE
 (
APB1PERIPH_BASE
 + 0x00002800)

	)

849 
	#WWDG_BASE
 (
APB1PERIPH_BASE
 + 0x00002C00)

	)

850 
	#IWDG_BASE
 (
APB1PERIPH_BASE
 + 0x00003000)

	)

851 
	#I2S2ext_BASE
 (
APB1PERIPH_BASE
 + 0x00003400)

	)

852 
	#SPI2_BASE
 (
APB1PERIPH_BASE
 + 0x00003800)

	)

853 
	#SPI3_BASE
 (
APB1PERIPH_BASE
 + 0x00003C00)

	)

854 
	#I2S3ext_BASE
 (
APB1PERIPH_BASE
 + 0x00004000)

	)

855 
	#USART2_BASE
 (
APB1PERIPH_BASE
 + 0x00004400)

	)

856 
	#USART3_BASE
 (
APB1PERIPH_BASE
 + 0x00004800)

	)

857 
	#UART4_BASE
 (
APB1PERIPH_BASE
 + 0x00004C00)

	)

858 
	#UART5_BASE
 (
APB1PERIPH_BASE
 + 0x00005000)

	)

859 
	#I2C1_BASE
 (
APB1PERIPH_BASE
 + 0x00005400)

	)

860 
	#I2C2_BASE
 (
APB1PERIPH_BASE
 + 0x00005800)

	)

861 
	#CAN1_BASE
 (
APB1PERIPH_BASE
 + 0x00006400)

	)

862 
	#PWR_BASE
 (
APB1PERIPH_BASE
 + 0x00007000)

	)

863 
	#DAC_BASE
 (
APB1PERIPH_BASE
 + 0x00007400)

	)

866 
	#SYSCFG_BASE
 (
APB2PERIPH_BASE
 + 0x00000000)

	)

867 
	#COMP_BASE
 (
APB2PERIPH_BASE
 + 0x0000001C)

	)

868 
	#COMP1_BASE
 (
APB2PERIPH_BASE
 + 0x0000001C)

	)

869 
	#COMP2_BASE
 (
APB2PERIPH_BASE
 + 0x00000020)

	)

870 
	#COMP3_BASE
 (
APB2PERIPH_BASE
 + 0x00000024)

	)

871 
	#COMP4_BASE
 (
APB2PERIPH_BASE
 + 0x00000028)

	)

872 
	#COMP5_BASE
 (
APB2PERIPH_BASE
 + 0x0000002C)

	)

873 
	#COMP6_BASE
 (
APB2PERIPH_BASE
 + 0x00000030)

	)

874 
	#COMP7_BASE
 (
APB2PERIPH_BASE
 + 0x00000034)

	)

875 
	#OPAMP_BASE
 (
APB2PERIPH_BASE
 + 0x00000038)

	)

876 
	#OPAMP1_BASE
 (
APB2PERIPH_BASE
 + 0x00000038)

	)

877 
	#OPAMP2_BASE
 (
APB2PERIPH_BASE
 + 0x0000003C)

	)

878 
	#OPAMP3_BASE
 (
APB2PERIPH_BASE
 + 0x00000040)

	)

879 
	#OPAMP4_BASE
 (
APB2PERIPH_BASE
 + 0x00000044)

	)

880 
	#EXTI_BASE
 (
APB2PERIPH_BASE
 + 0x00000400)

	)

881 
	#TIM1_BASE
 (
APB2PERIPH_BASE
 + 0x00002C00)

	)

882 
	#SPI1_BASE
 (
APB2PERIPH_BASE
 + 0x00003000)

	)

883 
	#TIM8_BASE
 (
APB2PERIPH_BASE
 + 0x00003400)

	)

884 
	#USART1_BASE
 (
APB2PERIPH_BASE
 + 0x00003800)

	)

885 
	#TIM15_BASE
 (
APB2PERIPH_BASE
 + 0x00004000)

	)

886 
	#TIM16_BASE
 (
APB2PERIPH_BASE
 + 0x00004400)

	)

887 
	#TIM17_BASE
 (
APB2PERIPH_BASE
 + 0x00004800)

	)

890 
	#DMA1_BASE
 (
AHB1PERIPH_BASE
 + 0x00000000)

	)

891 
	#DMA1_Ch™√l1_BASE
 (
AHB1PERIPH_BASE
 + 0x00000008)

	)

892 
	#DMA1_Ch™√l2_BASE
 (
AHB1PERIPH_BASE
 + 0x0000001C)

	)

893 
	#DMA1_Ch™√l3_BASE
 (
AHB1PERIPH_BASE
 + 0x00000030)

	)

894 
	#DMA1_Ch™√l4_BASE
 (
AHB1PERIPH_BASE
 + 0x00000044)

	)

895 
	#DMA1_Ch™√l5_BASE
 (
AHB1PERIPH_BASE
 + 0x00000058)

	)

896 
	#DMA1_Ch™√l6_BASE
 (
AHB1PERIPH_BASE
 + 0x0000006C)

	)

897 
	#DMA1_Ch™√l7_BASE
 (
AHB1PERIPH_BASE
 + 0x00000080)

	)

898 
	#DMA2_BASE
 (
AHB1PERIPH_BASE
 + 0x00000400)

	)

899 
	#DMA2_Ch™√l1_BASE
 (
AHB1PERIPH_BASE
 + 0x00000408)

	)

900 
	#DMA2_Ch™√l2_BASE
 (
AHB1PERIPH_BASE
 + 0x0000041C)

	)

901 
	#DMA2_Ch™√l3_BASE
 (
AHB1PERIPH_BASE
 + 0x00000430)

	)

902 
	#DMA2_Ch™√l4_BASE
 (
AHB1PERIPH_BASE
 + 0x00000444)

	)

903 
	#DMA2_Ch™√l5_BASE
 (
AHB1PERIPH_BASE
 + 0x00000458)

	)

904 
	#RCC_BASE
 (
AHB1PERIPH_BASE
 + 0x00001000)

	)

905 
	#FLASH_R_BASE
 (
AHB1PERIPH_BASE
 + 0x00002000Ë

	)

906 
	#OB_BASE
 ((
uöt32_t
)0x1FFFF800Ë

	)

907 
	#CRC_BASE
 (
AHB1PERIPH_BASE
 + 0x00003000)

	)

908 
	#TSC_BASE
 (
AHB1PERIPH_BASE
 + 0x00004000)

	)

911 
	#GPIOA_BASE
 (
AHB2PERIPH_BASE
 + 0x0000)

	)

912 
	#GPIOB_BASE
 (
AHB2PERIPH_BASE
 + 0x0400)

	)

913 
	#GPIOC_BASE
 (
AHB2PERIPH_BASE
 + 0x0800)

	)

914 
	#GPIOD_BASE
 (
AHB2PERIPH_BASE
 + 0x0C00)

	)

915 
	#GPIOE_BASE
 (
AHB2PERIPH_BASE
 + 0x1000)

	)

916 
	#GPIOF_BASE
 (
AHB2PERIPH_BASE
 + 0x1400)

	)

919 
	#ADC1_BASE
 (
AHB3PERIPH_BASE
 + 0x0000)

	)

920 
	#ADC2_BASE
 (
AHB3PERIPH_BASE
 + 0x0100)

	)

921 
	#ADC1_2_BASE
 (
AHB3PERIPH_BASE
 + 0x0300)

	)

922 
	#ADC3_BASE
 (
AHB3PERIPH_BASE
 + 0x0400)

	)

923 
	#ADC4_BASE
 (
AHB3PERIPH_BASE
 + 0x0500)

	)

924 
	#ADC3_4_BASE
 (
AHB3PERIPH_BASE
 + 0x0700)

	)

926 
	#DBGMCU_BASE
 ((
uöt32_t
)0xE0042000Ë

	)

934 
	#TIM2
 ((
TIM_Ty≥Def
 *Ë
TIM2_BASE
)

	)

935 
	#TIM3
 ((
TIM_Ty≥Def
 *Ë
TIM3_BASE
)

	)

936 
	#TIM4
 ((
TIM_Ty≥Def
 *Ë
TIM4_BASE
)

	)

937 
	#TIM6
 ((
TIM_Ty≥Def
 *Ë
TIM6_BASE
)

	)

938 
	#TIM7
 ((
TIM_Ty≥Def
 *Ë
TIM7_BASE
)

	)

939 
	#RTC
 ((
RTC_Ty≥Def
 *Ë
RTC_BASE
)

	)

940 
	#WWDG
 ((
WWDG_Ty≥Def
 *Ë
WWDG_BASE
)

	)

941 
	#IWDG
 ((
IWDG_Ty≥Def
 *Ë
IWDG_BASE
)

	)

942 
	#I2S2ext
 ((
SPI_Ty≥Def
 *Ë
I2S2ext_BASE
)

	)

943 
	#SPI2
 ((
SPI_Ty≥Def
 *Ë
SPI2_BASE
)

	)

944 
	#SPI3
 ((
SPI_Ty≥Def
 *Ë
SPI3_BASE
)

	)

945 
	#I2S3ext
 ((
SPI_Ty≥Def
 *Ë
I2S3ext_BASE
)

	)

946 
	#USART2
 ((
USART_Ty≥Def
 *Ë
USART2_BASE
)

	)

947 
	#USART3
 ((
USART_Ty≥Def
 *Ë
USART3_BASE
)

	)

948 
	#UART4
 ((
USART_Ty≥Def
 *Ë
UART4_BASE
)

	)

949 
	#UART5
 ((
USART_Ty≥Def
 *Ë
UART5_BASE
)

	)

950 
	#I2C1
 ((
I2C_Ty≥Def
 *Ë
I2C1_BASE
)

	)

951 
	#I2C2
 ((
I2C_Ty≥Def
 *Ë
I2C2_BASE
)

	)

952 
	#CAN1
 ((
CAN_Ty≥Def
 *Ë
CAN1_BASE
)

	)

953 
	#PWR
 ((
PWR_Ty≥Def
 *Ë
PWR_BASE
)

	)

954 
	#DAC
 ((
DAC_Ty≥Def
 *Ë
DAC_BASE
)

	)

955 
	#SYSCFG
 ((
SYSCFG_Ty≥Def
 *Ë
SYSCFG_BASE
)

	)

956 
	#COMP
 ((
COMP_Ty≥Def
 *Ë
COMP_BASE
)

	)

957 
	#COMP1
 ((
COMP_Ty≥Def
 *Ë
COMP1_BASE
)

	)

958 
	#COMP2
 ((
COMP_Ty≥Def
 *Ë
COMP2_BASE
)

	)

959 
	#COMP3
 ((
COMP_Ty≥Def
 *Ë
COMP3_BASE
)

	)

960 
	#COMP4
 ((
COMP_Ty≥Def
 *Ë
COMP4_BASE
)

	)

961 
	#COMP5
 ((
COMP_Ty≥Def
 *Ë
COMP5_BASE
)

	)

962 
	#COMP6
 ((
COMP_Ty≥Def
 *Ë
COMP6_BASE
)

	)

963 
	#COMP7
 ((
COMP_Ty≥Def
 *Ë
COMP7_BASE
)

	)

964 
	#OPAMP
 ((
OPAMP_Ty≥Def
 *Ë
OPAMP_BASE
)

	)

965 
	#OPAMP1
 ((
OPAMP_Ty≥Def
 *Ë
OPAMP1_BASE
)

	)

966 
	#OPAMP2
 ((
OPAMP_Ty≥Def
 *Ë
OPAMP2_BASE
)

	)

967 
	#OPAMP3
 ((
OPAMP_Ty≥Def
 *Ë
OPAMP3_BASE
)

	)

968 
	#OPAMP4
 ((
OPAMP_Ty≥Def
 *Ë
OPAMP4_BASE
)

	)

969 
	#EXTI
 ((
EXTI_Ty≥Def
 *Ë
EXTI_BASE
)

	)

970 
	#TIM1
 ((
TIM_Ty≥Def
 *Ë
TIM1_BASE
)

	)

971 
	#SPI1
 ((
SPI_Ty≥Def
 *Ë
SPI1_BASE
)

	)

972 
	#TIM8
 ((
TIM_Ty≥Def
 *Ë
TIM8_BASE
)

	)

973 
	#USART1
 ((
USART_Ty≥Def
 *Ë
USART1_BASE
)

	)

974 
	#TIM15
 ((
TIM_Ty≥Def
 *Ë
TIM15_BASE
)

	)

975 
	#TIM16
 ((
TIM_Ty≥Def
 *Ë
TIM16_BASE
)

	)

976 
	#TIM17
 ((
TIM_Ty≥Def
 *Ë
TIM17_BASE
)

	)

977 
	#DBGMCU
 ((
DBGMCU_Ty≥Def
 *Ë
DBGMCU_BASE
)

	)

978 
	#DMA1
 ((
DMA_Ty≥Def
 *Ë
DMA1_BASE
)

	)

979 
	#DMA1_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l1_BASE
)

	)

980 
	#DMA1_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l2_BASE
)

	)

981 
	#DMA1_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l3_BASE
)

	)

982 
	#DMA1_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l4_BASE
)

	)

983 
	#DMA1_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l5_BASE
)

	)

984 
	#DMA1_Ch™√l6
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l6_BASE
)

	)

985 
	#DMA1_Ch™√l7
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA1_Ch™√l7_BASE
)

	)

986 
	#DMA2
 ((
DMA_Ty≥Def
 *Ë
DMA2_BASE
)

	)

987 
	#DMA2_Ch™√l1
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l1_BASE
)

	)

988 
	#DMA2_Ch™√l2
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l2_BASE
)

	)

989 
	#DMA2_Ch™√l3
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l3_BASE
)

	)

990 
	#DMA2_Ch™√l4
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l4_BASE
)

	)

991 
	#DMA2_Ch™√l5
 ((
DMA_Ch™√l_Ty≥Def
 *Ë
DMA2_Ch™√l5_BASE
)

	)

992 
	#RCC
 ((
RCC_Ty≥Def
 *Ë
RCC_BASE
)

	)

993 
	#FLASH
 ((
FLASH_Ty≥Def
 *Ë
FLASH_R_BASE
)

	)

994 
	#OB
 ((
OB_Ty≥Def
 *Ë
OB_BASE
)

	)

995 
	#CRC
 ((
CRC_Ty≥Def
 *Ë
CRC_BASE
)

	)

996 
	#TSC
 ((
TSC_Ty≥Def
 *Ë
TSC_BASE
)

	)

997 
	#GPIOA
 ((
GPIO_Ty≥Def
 *Ë
GPIOA_BASE
)

	)

998 
	#GPIOB
 ((
GPIO_Ty≥Def
 *Ë
GPIOB_BASE
)

	)

999 
	#GPIOC
 ((
GPIO_Ty≥Def
 *Ë
GPIOC_BASE
)

	)

1000 
	#GPIOD
 ((
GPIO_Ty≥Def
 *Ë
GPIOD_BASE
)

	)

1001 
	#GPIOE
 ((
GPIO_Ty≥Def
 *Ë
GPIOE_BASE
)

	)

1002 
	#GPIOF
 ((
GPIO_Ty≥Def
 *Ë
GPIOF_BASE
)

	)

1003 
	#ADC1
 ((
ADC_Ty≥Def
 *Ë
ADC1_BASE
)

	)

1004 
	#ADC2
 ((
ADC_Ty≥Def
 *Ë
ADC2_BASE
)

	)

1005 
	#ADC3
 ((
ADC_Ty≥Def
 *Ë
ADC3_BASE
)

	)

1006 
	#ADC4
 ((
ADC_Ty≥Def
 *Ë
ADC4_BASE
)

	)

1007 
	#ADC1_2
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC1_2_BASE
)

	)

1008 
	#ADC3_4
 ((
ADC_Comm⁄_Ty≥Def
 *Ë
ADC3_4_BASE
)

	)

1031 
	#ADC_ISR_ADRD
 ((
uöt32_t
)0x00000001Ë

	)

1032 
	#ADC_ISR_EOSMP
 ((
uöt32_t
)0x00000002Ë

	)

1033 
	#ADC_ISR_EOC
 ((
uöt32_t
)0x00000004Ë

	)

1034 
	#ADC_ISR_EOS
 ((
uöt32_t
)0x00000008Ë

	)

1035 
	#ADC_ISR_OVR
 ((
uöt32_t
)0x00000010Ë

	)

1036 
	#ADC_ISR_JEOC
 ((
uöt32_t
)0x00000020Ë

	)

1037 
	#ADC_ISR_JEOS
 ((
uöt32_t
)0x00000040Ë

	)

1038 
	#ADC_ISR_AWD1
 ((
uöt32_t
)0x00000080Ë

	)

1039 
	#ADC_ISR_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

1040 
	#ADC_ISR_AWD3
 ((
uöt32_t
)0x00000200Ë

	)

1041 
	#ADC_ISR_JQOVF
 ((
uöt32_t
)0x00000400Ë

	)

1044 
	#ADC_IER_RDY
 ((
uöt32_t
)0x00000001Ë

	)

1045 
	#ADC_IER_EOSMP
 ((
uöt32_t
)0x00000002Ë

	)

1046 
	#ADC_IER_EOC
 ((
uöt32_t
)0x00000004Ë

	)

1047 
	#ADC_IER_EOS
 ((
uöt32_t
)0x00000008Ë

	)

1048 
	#ADC_IER_OVR
 ((
uöt32_t
)0x00000010Ë

	)

1049 
	#ADC_IER_JEOC
 ((
uöt32_t
)0x00000020Ë

	)

1050 
	#ADC_IER_JEOS
 ((
uöt32_t
)0x00000040Ë

	)

1051 
	#ADC_IER_AWD1
 ((
uöt32_t
)0x00000080Ë

	)

1052 
	#ADC_IER_AWD2
 ((
uöt32_t
)0x00000100Ë

	)

1053 
	#ADC_IER_AWD3
 ((
uöt32_t
)0x00000200Ë

	)

1054 
	#ADC_IER_JQOVF
 ((
uöt32_t
)0x00000400Ë

	)

1057 
	#ADC_CR_ADEN
 ((
uöt32_t
)0x00000001Ë

	)

1058 
	#ADC_CR_ADDIS
 ((
uöt32_t
)0x00000002Ë

	)

1059 
	#ADC_CR_ADSTART
 ((
uöt32_t
)0x00000004Ë

	)

1060 
	#ADC_CR_JADSTART
 ((
uöt32_t
)0x00000008Ë

	)

1061 
	#ADC_CR_ADSTP
 ((
uöt32_t
)0x00000010Ë

	)

1062 
	#ADC_CR_JADSTP
 ((
uöt32_t
)0x00000020Ë

	)

1063 
	#ADC_CR_ADVREGEN
 ((
uöt32_t
)0x30000000Ë

	)

1064 
	#ADC_CR_ADVREGEN_0
 ((
uöt32_t
)0x10000000Ë

	)

1065 
	#ADC_CR_ADVREGEN_1
 ((
uöt32_t
)0x20000000Ë

	)

1066 
	#ADC_CR_ADCALDIF
 ((
uöt32_t
)0x40000000Ë

	)

1067 
	#ADC_CR_ADCAL
 ((
uöt32_t
)0x80000000Ë

	)

1070 
	#ADC_CFGR_DMAEN
 ((
uöt32_t
)0x00000001Ë

	)

1071 
	#ADC_CFGR_DMACFG
 ((
uöt32_t
)0x00000002Ë

	)

1073 
	#ADC_CFGR_RES
 ((
uöt32_t
)0x00000018Ë

	)

1074 
	#ADC_CFGR_RES_0
 ((
uöt32_t
)0x00000008Ë

	)

1075 
	#ADC_CFGR_RES_1
 ((
uöt32_t
)0x00000010Ë

	)

1077 
	#ADC_CFGR_ALIGN
 ((
uöt32_t
)0x00000020Ë

	)

1079 
	#ADC_CFGR_EXTSEL
 ((
uöt32_t
)0x000003C0Ë

	)

1080 
	#ADC_CFGR_EXTSEL_0
 ((
uöt32_t
)0x00000040Ë

	)

1081 
	#ADC_CFGR_EXTSEL_1
 ((
uöt32_t
)0x00000080Ë

	)

1082 
	#ADC_CFGR_EXTSEL_2
 ((
uöt32_t
)0x00000100Ë

	)

1083 
	#ADC_CFGR_EXTSEL_3
 ((
uöt32_t
)0x00000200Ë

	)

1085 
	#ADC_CFGR_EXTEN
 ((
uöt32_t
)0x00000C00Ë

	)

1086 
	#ADC_CFGR_EXTEN_0
 ((
uöt32_t
)0x00000400Ë

	)

1087 
	#ADC_CFGR_EXTEN_1
 ((
uöt32_t
)0x00000800Ë

	)

1089 
	#ADC_CFGR_OVRMOD
 ((
uöt32_t
)0x00001000Ë

	)

1090 
	#ADC_CFGR_CONT
 ((
uöt32_t
)0x00002000Ë

	)

1091 
	#ADC_CFGR_AUTDLY
 ((
uöt32_t
)0x00004000Ë

	)

1092 
	#ADC_CFGR_AUTOFF
 ((
uöt32_t
)0x00008000Ë

	)

1093 
	#ADC_CFGR_DISCEN
 ((
uöt32_t
)0x00010000Ë

	)

1095 
	#ADC_CFGR_DISCNUM
 ((
uöt32_t
)0x000E0000Ë

	)

1096 
	#ADC_CFGR_DISCNUM_0
 ((
uöt32_t
)0x00020000Ë

	)

1097 
	#ADC_CFGR_DISCNUM_1
 ((
uöt32_t
)0x00040000Ë

	)

1098 
	#ADC_CFGR_DISCNUM_2
 ((
uöt32_t
)0x00080000Ë

	)

1100 
	#ADC_CFGR_JDISCEN
 ((
uöt32_t
)0x00100000Ë

	)

1101 
	#ADC_CFGR_JQM
 ((
uöt32_t
)0x00200000Ë

	)

1102 
	#ADC_CFGR_AWD1SGL
 ((
uöt32_t
)0x00400000Ë

	)

1103 
	#ADC_CFGR_AWD1EN
 ((
uöt32_t
)0x00800000Ë

	)

1104 
	#ADC_CFGR_JAWD1EN
 ((
uöt32_t
)0x01000000Ë

	)

1105 
	#ADC_CFGR_JAUTO
 ((
uöt32_t
)0x02000000Ë

	)

1107 
	#ADC_CFGR_AWD1CH
 ((
uöt32_t
)0x7C000000Ë

	)

1108 
	#ADC_CFGR_AWD1CH_0
 ((
uöt32_t
)0x04000000Ë

	)

1109 
	#ADC_CFGR_AWD1CH_1
 ((
uöt32_t
)0x08000000Ë

	)

1110 
	#ADC_CFGR_AWD1CH_2
 ((
uöt32_t
)0x10000000Ë

	)

1111 
	#ADC_CFGR_AWD1CH_3
 ((
uöt32_t
)0x20000000Ë

	)

1112 
	#ADC_CFGR_AWD1CH_4
 ((
uöt32_t
)0x40000000Ë

	)

1115 
	#ADC_SMPR1_SMP0
 ((
uöt32_t
)0x00000007Ë

	)

1116 
	#ADC_SMPR1_SMP0_0
 ((
uöt32_t
)0x00000001Ë

	)

1117 
	#ADC_SMPR1_SMP0_1
 ((
uöt32_t
)0x00000002Ë

	)

1118 
	#ADC_SMPR1_SMP0_2
 ((
uöt32_t
)0x00000004Ë

	)

1120 
	#ADC_SMPR1_SMP1
 ((
uöt32_t
)0x00000038Ë

	)

1121 
	#ADC_SMPR1_SMP1_0
 ((
uöt32_t
)0x00000008Ë

	)

1122 
	#ADC_SMPR1_SMP1_1
 ((
uöt32_t
)0x00000010Ë

	)

1123 
	#ADC_SMPR1_SMP1_2
 ((
uöt32_t
)0x00000020Ë

	)

1125 
	#ADC_SMPR1_SMP2
 ((
uöt32_t
)0x000001C0Ë

	)

1126 
	#ADC_SMPR1_SMP2_0
 ((
uöt32_t
)0x00000040Ë

	)

1127 
	#ADC_SMPR1_SMP2_1
 ((
uöt32_t
)0x00000080Ë

	)

1128 
	#ADC_SMPR1_SMP2_2
 ((
uöt32_t
)0x00000100Ë

	)

1130 
	#ADC_SMPR1_SMP3
 ((
uöt32_t
)0x00000E00Ë

	)

1131 
	#ADC_SMPR1_SMP3_0
 ((
uöt32_t
)0x00000200Ë

	)

1132 
	#ADC_SMPR1_SMP3_1
 ((
uöt32_t
)0x00000400Ë

	)

1133 
	#ADC_SMPR1_SMP3_2
 ((
uöt32_t
)0x00000800Ë

	)

1135 
	#ADC_SMPR1_SMP4
 ((
uöt32_t
)0x00007000Ë

	)

1136 
	#ADC_SMPR1_SMP4_0
 ((
uöt32_t
)0x00001000Ë

	)

1137 
	#ADC_SMPR1_SMP4_1
 ((
uöt32_t
)0x00002000Ë

	)

1138 
	#ADC_SMPR1_SMP4_2
 ((
uöt32_t
)0x00004000Ë

	)

1140 
	#ADC_SMPR1_SMP5
 ((
uöt32_t
)0x00038000Ë

	)

1141 
	#ADC_SMPR1_SMP5_0
 ((
uöt32_t
)0x00008000Ë

	)

1142 
	#ADC_SMPR1_SMP5_1
 ((
uöt32_t
)0x00010000Ë

	)

1143 
	#ADC_SMPR1_SMP5_2
 ((
uöt32_t
)0x00020000Ë

	)

1145 
	#ADC_SMPR1_SMP6
 ((
uöt32_t
)0x001C0000Ë

	)

1146 
	#ADC_SMPR1_SMP6_0
 ((
uöt32_t
)0x00040000Ë

	)

1147 
	#ADC_SMPR1_SMP6_1
 ((
uöt32_t
)0x00080000Ë

	)

1148 
	#ADC_SMPR1_SMP6_2
 ((
uöt32_t
)0x00100000Ë

	)

1150 
	#ADC_SMPR1_SMP7
 ((
uöt32_t
)0x00E00000Ë

	)

1151 
	#ADC_SMPR1_SMP7_0
 ((
uöt32_t
)0x00200000Ë

	)

1152 
	#ADC_SMPR1_SMP7_1
 ((
uöt32_t
)0x00400000Ë

	)

1153 
	#ADC_SMPR1_SMP7_2
 ((
uöt32_t
)0x00800000Ë

	)

1155 
	#ADC_SMPR1_SMP8
 ((
uöt32_t
)0x07000000Ë

	)

1156 
	#ADC_SMPR1_SMP8_0
 ((
uöt32_t
)0x01000000Ë

	)

1157 
	#ADC_SMPR1_SMP8_1
 ((
uöt32_t
)0x02000000Ë

	)

1158 
	#ADC_SMPR1_SMP8_2
 ((
uöt32_t
)0x04000000Ë

	)

1160 
	#ADC_SMPR1_SMP9
 ((
uöt32_t
)0x38000000Ë

	)

1161 
	#ADC_SMPR1_SMP9_0
 ((
uöt32_t
)0x08000000Ë

	)

1162 
	#ADC_SMPR1_SMP9_1
 ((
uöt32_t
)0x10000000Ë

	)

1163 
	#ADC_SMPR1_SMP9_2
 ((
uöt32_t
)0x20000000Ë

	)

1166 
	#ADC_SMPR2_SMP10
 ((
uöt32_t
)0x00000007Ë

	)

1167 
	#ADC_SMPR2_SMP10_0
 ((
uöt32_t
)0x00000001Ë

	)

1168 
	#ADC_SMPR2_SMP10_1
 ((
uöt32_t
)0x00000002Ë

	)

1169 
	#ADC_SMPR2_SMP10_2
 ((
uöt32_t
)0x00000004Ë

	)

1171 
	#ADC_SMPR2_SMP11
 ((
uöt32_t
)0x00000038Ë

	)

1172 
	#ADC_SMPR2_SMP11_0
 ((
uöt32_t
)0x00000008Ë

	)

1173 
	#ADC_SMPR2_SMP11_1
 ((
uöt32_t
)0x00000010Ë

	)

1174 
	#ADC_SMPR2_SMP11_2
 ((
uöt32_t
)0x00000020Ë

	)

1176 
	#ADC_SMPR2_SMP12
 ((
uöt32_t
)0x000001C0Ë

	)

1177 
	#ADC_SMPR2_SMP12_0
 ((
uöt32_t
)0x00000040Ë

	)

1178 
	#ADC_SMPR2_SMP12_1
 ((
uöt32_t
)0x00000080Ë

	)

1179 
	#ADC_SMPR2_SMP12_2
 ((
uöt32_t
)0x00000100Ë

	)

1181 
	#ADC_SMPR2_SMP13
 ((
uöt32_t
)0x00000E00Ë

	)

1182 
	#ADC_SMPR2_SMP13_0
 ((
uöt32_t
)0x00000200Ë

	)

1183 
	#ADC_SMPR2_SMP13_1
 ((
uöt32_t
)0x00000400Ë

	)

1184 
	#ADC_SMPR2_SMP13_2
 ((
uöt32_t
)0x00000800Ë

	)

1186 
	#ADC_SMPR2_SMP14
 ((
uöt32_t
)0x00007000Ë

	)

1187 
	#ADC_SMPR2_SMP14_0
 ((
uöt32_t
)0x00001000Ë

	)

1188 
	#ADC_SMPR2_SMP14_1
 ((
uöt32_t
)0x00002000Ë

	)

1189 
	#ADC_SMPR2_SMP14_2
 ((
uöt32_t
)0x00004000Ë

	)

1191 
	#ADC_SMPR2_SMP15
 ((
uöt32_t
)0x00038000Ë

	)

1192 
	#ADC_SMPR2_SMP15_0
 ((
uöt32_t
)0x00008000Ë

	)

1193 
	#ADC_SMPR2_SMP15_1
 ((
uöt32_t
)0x00010000Ë

	)

1194 
	#ADC_SMPR2_SMP15_2
 ((
uöt32_t
)0x00020000Ë

	)

1196 
	#ADC_SMPR2_SMP16
 ((
uöt32_t
)0x001C0000Ë

	)

1197 
	#ADC_SMPR2_SMP16_0
 ((
uöt32_t
)0x00040000Ë

	)

1198 
	#ADC_SMPR2_SMP16_1
 ((
uöt32_t
)0x00080000Ë

	)

1199 
	#ADC_SMPR2_SMP16_2
 ((
uöt32_t
)0x00100000Ë

	)

1201 
	#ADC_SMPR2_SMP17
 ((
uöt32_t
)0x00E00000Ë

	)

1202 
	#ADC_SMPR2_SMP17_0
 ((
uöt32_t
)0x00200000Ë

	)

1203 
	#ADC_SMPR2_SMP17_1
 ((
uöt32_t
)0x00400000Ë

	)

1204 
	#ADC_SMPR2_SMP17_2
 ((
uöt32_t
)0x00800000Ë

	)

1206 
	#ADC_SMPR2_SMP18
 ((
uöt32_t
)0x07000000Ë

	)

1207 
	#ADC_SMPR2_SMP18_0
 ((
uöt32_t
)0x01000000Ë

	)

1208 
	#ADC_SMPR2_SMP18_1
 ((
uöt32_t
)0x02000000Ë

	)

1209 
	#ADC_SMPR2_SMP18_2
 ((
uöt32_t
)0x04000000Ë

	)

1212 
	#ADC_TR1_LT1
 ((
uöt32_t
)0x00000FFFË

	)

1213 
	#ADC_TR1_LT1_0
 ((
uöt32_t
)0x00000001Ë

	)

1214 
	#ADC_TR1_LT1_1
 ((
uöt32_t
)0x00000002Ë

	)

1215 
	#ADC_TR1_LT1_2
 ((
uöt32_t
)0x00000004Ë

	)

1216 
	#ADC_TR1_LT1_3
 ((
uöt32_t
)0x00000008Ë

	)

1217 
	#ADC_TR1_LT1_4
 ((
uöt32_t
)0x00000010Ë

	)

1218 
	#ADC_TR1_LT1_5
 ((
uöt32_t
)0x00000020Ë

	)

1219 
	#ADC_TR1_LT1_6
 ((
uöt32_t
)0x00000040Ë

	)

1220 
	#ADC_TR1_LT1_7
 ((
uöt32_t
)0x00000080Ë

	)

1221 
	#ADC_TR1_LT1_8
 ((
uöt32_t
)0x00000100Ë

	)

1222 
	#ADC_TR1_LT1_9
 ((
uöt32_t
)0x00000200Ë

	)

1223 
	#ADC_TR1_LT1_10
 ((
uöt32_t
)0x00000400Ë

	)

1224 
	#ADC_TR1_LT1_11
 ((
uöt32_t
)0x00000800Ë

	)

1226 
	#ADC_TR1_HT1
 ((
uöt32_t
)0x0FFF0000Ë

	)

1227 
	#ADC_TR1_HT1_0
 ((
uöt32_t
)0x00010000Ë

	)

1228 
	#ADC_TR1_HT1_1
 ((
uöt32_t
)0x00020000Ë

	)

1229 
	#ADC_TR1_HT1_2
 ((
uöt32_t
)0x00040000Ë

	)

1230 
	#ADC_TR1_HT1_3
 ((
uöt32_t
)0x00080000Ë

	)

1231 
	#ADC_TR1_HT1_4
 ((
uöt32_t
)0x00100000Ë

	)

1232 
	#ADC_TR1_HT1_5
 ((
uöt32_t
)0x00200000Ë

	)

1233 
	#ADC_TR1_HT1_6
 ((
uöt32_t
)0x00400000Ë

	)

1234 
	#ADC_TR1_HT1_7
 ((
uöt32_t
)0x00800000Ë

	)

1235 
	#ADC_TR1_HT1_8
 ((
uöt32_t
)0x01000000Ë

	)

1236 
	#ADC_TR1_HT1_9
 ((
uöt32_t
)0x02000000Ë

	)

1237 
	#ADC_TR1_HT1_10
 ((
uöt32_t
)0x04000000Ë

	)

1238 
	#ADC_TR1_HT1_11
 ((
uöt32_t
)0x08000000Ë

	)

1241 
	#ADC_TR2_LT2
 ((
uöt32_t
)0x000000FFË

	)

1242 
	#ADC_TR2_LT2_0
 ((
uöt32_t
)0x00000001Ë

	)

1243 
	#ADC_TR2_LT2_1
 ((
uöt32_t
)0x00000002Ë

	)

1244 
	#ADC_TR2_LT2_2
 ((
uöt32_t
)0x00000004Ë

	)

1245 
	#ADC_TR2_LT2_3
 ((
uöt32_t
)0x00000008Ë

	)

1246 
	#ADC_TR2_LT2_4
 ((
uöt32_t
)0x00000010Ë

	)

1247 
	#ADC_TR2_LT2_5
 ((
uöt32_t
)0x00000020Ë

	)

1248 
	#ADC_TR2_LT2_6
 ((
uöt32_t
)0x00000040Ë

	)

1249 
	#ADC_TR2_LT2_7
 ((
uöt32_t
)0x00000080Ë

	)

1251 
	#ADC_TR2_HT2
 ((
uöt32_t
)0x00FF0000Ë

	)

1252 
	#ADC_TR2_HT2_0
 ((
uöt32_t
)0x00010000Ë

	)

1253 
	#ADC_TR2_HT2_1
 ((
uöt32_t
)0x00020000Ë

	)

1254 
	#ADC_TR2_HT2_2
 ((
uöt32_t
)0x00040000Ë

	)

1255 
	#ADC_TR2_HT2_3
 ((
uöt32_t
)0x00080000Ë

	)

1256 
	#ADC_TR2_HT2_4
 ((
uöt32_t
)0x00100000Ë

	)

1257 
	#ADC_TR2_HT2_5
 ((
uöt32_t
)0x00200000Ë

	)

1258 
	#ADC_TR2_HT2_6
 ((
uöt32_t
)0x00400000Ë

	)

1259 
	#ADC_TR2_HT2_7
 ((
uöt32_t
)0x00800000Ë

	)

1262 
	#ADC_TR3_LT3
 ((
uöt32_t
)0x000000FFË

	)

1263 
	#ADC_TR3_LT3_0
 ((
uöt32_t
)0x00000001Ë

	)

1264 
	#ADC_TR3_LT3_1
 ((
uöt32_t
)0x00000002Ë

	)

1265 
	#ADC_TR3_LT3_2
 ((
uöt32_t
)0x00000004Ë

	)

1266 
	#ADC_TR3_LT3_3
 ((
uöt32_t
)0x00000008Ë

	)

1267 
	#ADC_TR3_LT3_4
 ((
uöt32_t
)0x00000010Ë

	)

1268 
	#ADC_TR3_LT3_5
 ((
uöt32_t
)0x00000020Ë

	)

1269 
	#ADC_TR3_LT3_6
 ((
uöt32_t
)0x00000040Ë

	)

1270 
	#ADC_TR3_LT3_7
 ((
uöt32_t
)0x00000080Ë

	)

1272 
	#ADC_TR3_HT3
 ((
uöt32_t
)0x00FF0000Ë

	)

1273 
	#ADC_TR3_HT3_0
 ((
uöt32_t
)0x00010000Ë

	)

1274 
	#ADC_TR3_HT3_1
 ((
uöt32_t
)0x00020000Ë

	)

1275 
	#ADC_TR3_HT3_2
 ((
uöt32_t
)0x00040000Ë

	)

1276 
	#ADC_TR3_HT3_3
 ((
uöt32_t
)0x00080000Ë

	)

1277 
	#ADC_TR3_HT3_4
 ((
uöt32_t
)0x00100000Ë

	)

1278 
	#ADC_TR3_HT3_5
 ((
uöt32_t
)0x00200000Ë

	)

1279 
	#ADC_TR3_HT3_6
 ((
uöt32_t
)0x00400000Ë

	)

1280 
	#ADC_TR3_HT3_7
 ((
uöt32_t
)0x00800000Ë

	)

1283 
	#ADC_SQR1_L
 ((
uöt32_t
)0x0000000FË

	)

1284 
	#ADC_SQR1_L_0
 ((
uöt32_t
)0x00000001Ë

	)

1285 
	#ADC_SQR1_L_1
 ((
uöt32_t
)0x00000002Ë

	)

1286 
	#ADC_SQR1_L_2
 ((
uöt32_t
)0x00000004Ë

	)

1287 
	#ADC_SQR1_L_3
 ((
uöt32_t
)0x00000008Ë

	)

1289 
	#ADC_SQR1_SQ1
 ((
uöt32_t
)0x000007C0Ë

	)

1290 
	#ADC_SQR1_SQ1_0
 ((
uöt32_t
)0x00000040Ë

	)

1291 
	#ADC_SQR1_SQ1_1
 ((
uöt32_t
)0x00000080Ë

	)

1292 
	#ADC_SQR1_SQ1_2
 ((
uöt32_t
)0x00000100Ë

	)

1293 
	#ADC_SQR1_SQ1_3
 ((
uöt32_t
)0x00000200Ë

	)

1294 
	#ADC_SQR1_SQ1_4
 ((
uöt32_t
)0x00000400Ë

	)

1296 
	#ADC_SQR1_SQ2
 ((
uöt32_t
)0x0001F000Ë

	)

1297 
	#ADC_SQR1_SQ2_0
 ((
uöt32_t
)0x00001000Ë

	)

1298 
	#ADC_SQR1_SQ2_1
 ((
uöt32_t
)0x00002000Ë

	)

1299 
	#ADC_SQR1_SQ2_2
 ((
uöt32_t
)0x00004000Ë

	)

1300 
	#ADC_SQR1_SQ2_3
 ((
uöt32_t
)0x00008000Ë

	)

1301 
	#ADC_SQR1_SQ2_4
 ((
uöt32_t
)0x00010000Ë

	)

1303 
	#ADC_SQR1_SQ3
 ((
uöt32_t
)0x007C0000Ë

	)

1304 
	#ADC_SQR1_SQ3_0
 ((
uöt32_t
)0x00040000Ë

	)

1305 
	#ADC_SQR1_SQ3_1
 ((
uöt32_t
)0x00080000Ë

	)

1306 
	#ADC_SQR1_SQ3_2
 ((
uöt32_t
)0x00100000Ë

	)

1307 
	#ADC_SQR1_SQ3_3
 ((
uöt32_t
)0x00200000Ë

	)

1308 
	#ADC_SQR1_SQ3_4
 ((
uöt32_t
)0x00400000Ë

	)

1310 
	#ADC_SQR1_SQ4
 ((
uöt32_t
)0x1F000000Ë

	)

1311 
	#ADC_SQR1_SQ4_0
 ((
uöt32_t
)0x01000000Ë

	)

1312 
	#ADC_SQR1_SQ4_1
 ((
uöt32_t
)0x02000000Ë

	)

1313 
	#ADC_SQR1_SQ4_2
 ((
uöt32_t
)0x04000000Ë

	)

1314 
	#ADC_SQR1_SQ4_3
 ((
uöt32_t
)0x08000000Ë

	)

1315 
	#ADC_SQR1_SQ4_4
 ((
uöt32_t
)0x10000000Ë

	)

1318 
	#ADC_SQR2_SQ5
 ((
uöt32_t
)0x0000001FË

	)

1319 
	#ADC_SQR2_SQ5_0
 ((
uöt32_t
)0x00000001Ë

	)

1320 
	#ADC_SQR2_SQ5_1
 ((
uöt32_t
)0x00000002Ë

	)

1321 
	#ADC_SQR2_SQ5_2
 ((
uöt32_t
)0x00000004Ë

	)

1322 
	#ADC_SQR2_SQ5_3
 ((
uöt32_t
)0x00000008Ë

	)

1323 
	#ADC_SQR2_SQ5_4
 ((
uöt32_t
)0x00000010Ë

	)

1325 
	#ADC_SQR2_SQ6
 ((
uöt32_t
)0x000007C0Ë

	)

1326 
	#ADC_SQR2_SQ6_0
 ((
uöt32_t
)0x00000040Ë

	)

1327 
	#ADC_SQR2_SQ6_1
 ((
uöt32_t
)0x00000080Ë

	)

1328 
	#ADC_SQR2_SQ6_2
 ((
uöt32_t
)0x00000100Ë

	)

1329 
	#ADC_SQR2_SQ6_3
 ((
uöt32_t
)0x00000200Ë

	)

1330 
	#ADC_SQR2_SQ6_4
 ((
uöt32_t
)0x00000400Ë

	)

1332 
	#ADC_SQR2_SQ7
 ((
uöt32_t
)0x0001F000Ë

	)

1333 
	#ADC_SQR2_SQ7_0
 ((
uöt32_t
)0x00001000Ë

	)

1334 
	#ADC_SQR2_SQ7_1
 ((
uöt32_t
)0x00002000Ë

	)

1335 
	#ADC_SQR2_SQ7_2
 ((
uöt32_t
)0x00004000Ë

	)

1336 
	#ADC_SQR2_SQ7_3
 ((
uöt32_t
)0x00008000Ë

	)

1337 
	#ADC_SQR2_SQ7_4
 ((
uöt32_t
)0x00010000Ë

	)

1339 
	#ADC_SQR2_SQ8
 ((
uöt32_t
)0x007C0000Ë

	)

1340 
	#ADC_SQR2_SQ8_0
 ((
uöt32_t
)0x00040000Ë

	)

1341 
	#ADC_SQR2_SQ8_1
 ((
uöt32_t
)0x00080000Ë

	)

1342 
	#ADC_SQR2_SQ8_2
 ((
uöt32_t
)0x00100000Ë

	)

1343 
	#ADC_SQR2_SQ8_3
 ((
uöt32_t
)0x00200000Ë

	)

1344 
	#ADC_SQR2_SQ8_4
 ((
uöt32_t
)0x00400000Ë

	)

1346 
	#ADC_SQR2_SQ9
 ((
uöt32_t
)0x1F000000Ë

	)

1347 
	#ADC_SQR2_SQ9_0
 ((
uöt32_t
)0x01000000Ë

	)

1348 
	#ADC_SQR2_SQ9_1
 ((
uöt32_t
)0x02000000Ë

	)

1349 
	#ADC_SQR2_SQ9_2
 ((
uöt32_t
)0x04000000Ë

	)

1350 
	#ADC_SQR2_SQ9_3
 ((
uöt32_t
)0x08000000Ë

	)

1351 
	#ADC_SQR2_SQ9_4
 ((
uöt32_t
)0x10000000Ë

	)

1354 
	#ADC_SQR3_SQ10
 ((
uöt32_t
)0x0000001FË

	)

1355 
	#ADC_SQR3_SQ10_0
 ((
uöt32_t
)0x00000001Ë

	)

1356 
	#ADC_SQR3_SQ10_1
 ((
uöt32_t
)0x00000002Ë

	)

1357 
	#ADC_SQR3_SQ10_2
 ((
uöt32_t
)0x00000004Ë

	)

1358 
	#ADC_SQR3_SQ10_3
 ((
uöt32_t
)0x00000008Ë

	)

1359 
	#ADC_SQR3_SQ10_4
 ((
uöt32_t
)0x00000010Ë

	)

1361 
	#ADC_SQR3_SQ11
 ((
uöt32_t
)0x000007C0Ë

	)

1362 
	#ADC_SQR3_SQ11_0
 ((
uöt32_t
)0x00000040Ë

	)

1363 
	#ADC_SQR3_SQ11_1
 ((
uöt32_t
)0x00000080Ë

	)

1364 
	#ADC_SQR3_SQ11_2
 ((
uöt32_t
)0x00000100Ë

	)

1365 
	#ADC_SQR3_SQ11_3
 ((
uöt32_t
)0x00000200Ë

	)

1366 
	#ADC_SQR3_SQ11_4
 ((
uöt32_t
)0x00000400Ë

	)

1368 
	#ADC_SQR3_SQ12
 ((
uöt32_t
)0x0001F000Ë

	)

1369 
	#ADC_SQR3_SQ12_0
 ((
uöt32_t
)0x00001000Ë

	)

1370 
	#ADC_SQR3_SQ12_1
 ((
uöt32_t
)0x00002000Ë

	)

1371 
	#ADC_SQR3_SQ12_2
 ((
uöt32_t
)0x00004000Ë

	)

1372 
	#ADC_SQR3_SQ12_3
 ((
uöt32_t
)0x00008000Ë

	)

1373 
	#ADC_SQR3_SQ12_4
 ((
uöt32_t
)0x00010000Ë

	)

1375 
	#ADC_SQR3_SQ13
 ((
uöt32_t
)0x007C0000Ë

	)

1376 
	#ADC_SQR3_SQ13_0
 ((
uöt32_t
)0x00040000Ë

	)

1377 
	#ADC_SQR3_SQ13_1
 ((
uöt32_t
)0x00080000Ë

	)

1378 
	#ADC_SQR3_SQ13_2
 ((
uöt32_t
)0x00100000Ë

	)

1379 
	#ADC_SQR3_SQ13_3
 ((
uöt32_t
)0x00200000Ë

	)

1380 
	#ADC_SQR3_SQ13_4
 ((
uöt32_t
)0x00400000Ë

	)

1382 
	#ADC_SQR3_SQ14
 ((
uöt32_t
)0x1F000000Ë

	)

1383 
	#ADC_SQR3_SQ14_0
 ((
uöt32_t
)0x01000000Ë

	)

1384 
	#ADC_SQR3_SQ14_1
 ((
uöt32_t
)0x02000000Ë

	)

1385 
	#ADC_SQR3_SQ14_2
 ((
uöt32_t
)0x04000000Ë

	)

1386 
	#ADC_SQR3_SQ14_3
 ((
uöt32_t
)0x08000000Ë

	)

1387 
	#ADC_SQR3_SQ14_4
 ((
uöt32_t
)0x10000000Ë

	)

1390 
	#ADC_SQR3_SQ15
 ((
uöt32_t
)0x0000001FË

	)

1391 
	#ADC_SQR3_SQ15_0
 ((
uöt32_t
)0x00000001Ë

	)

1392 
	#ADC_SQR3_SQ15_1
 ((
uöt32_t
)0x00000002Ë

	)

1393 
	#ADC_SQR3_SQ15_2
 ((
uöt32_t
)0x00000004Ë

	)

1394 
	#ADC_SQR3_SQ15_3
 ((
uöt32_t
)0x00000008Ë

	)

1395 
	#ADC_SQR3_SQ15_4
 ((
uöt32_t
)0x00000010Ë

	)

1397 
	#ADC_SQR3_SQ16
 ((
uöt32_t
)0x000007C0Ë

	)

1398 
	#ADC_SQR3_SQ16_0
 ((
uöt32_t
)0x00000040Ë

	)

1399 
	#ADC_SQR3_SQ16_1
 ((
uöt32_t
)0x00000080Ë

	)

1400 
	#ADC_SQR3_SQ16_2
 ((
uöt32_t
)0x00000100Ë

	)

1401 
	#ADC_SQR3_SQ16_3
 ((
uöt32_t
)0x00000200Ë

	)

1402 
	#ADC_SQR3_SQ16_4
 ((
uöt32_t
)0x00000400Ë

	)

1404 
	#ADC_DR_RDATA
 ((
uöt32_t
)0x0000FFFFË

	)

1405 
	#ADC_DR_RDATA_0
 ((
uöt32_t
)0x00000001Ë

	)

1406 
	#ADC_DR_RDATA_1
 ((
uöt32_t
)0x00000002Ë

	)

1407 
	#ADC_DR_RDATA_2
 ((
uöt32_t
)0x00000004Ë

	)

1408 
	#ADC_DR_RDATA_3
 ((
uöt32_t
)0x00000008Ë

	)

1409 
	#ADC_DR_RDATA_4
 ((
uöt32_t
)0x00000010Ë

	)

1410 
	#ADC_DR_RDATA_5
 ((
uöt32_t
)0x00000020Ë

	)

1411 
	#ADC_DR_RDATA_6
 ((
uöt32_t
)0x00000040Ë

	)

1412 
	#ADC_DR_RDATA_7
 ((
uöt32_t
)0x00000080Ë

	)

1413 
	#ADC_DR_RDATA_8
 ((
uöt32_t
)0x00000100Ë

	)

1414 
	#ADC_DR_RDATA_9
 ((
uöt32_t
)0x00000200Ë

	)

1415 
	#ADC_DR_RDATA_10
 ((
uöt32_t
)0x00000400Ë

	)

1416 
	#ADC_DR_RDATA_11
 ((
uöt32_t
)0x00000800Ë

	)

1417 
	#ADC_DR_RDATA_12
 ((
uöt32_t
)0x00001000Ë

	)

1418 
	#ADC_DR_RDATA_13
 ((
uöt32_t
)0x00002000Ë

	)

1419 
	#ADC_DR_RDATA_14
 ((
uöt32_t
)0x00004000Ë

	)

1420 
	#ADC_DR_RDATA_15
 ((
uöt32_t
)0x00008000Ë

	)

1423 
	#ADC_JSQR_JL
 ((
uöt32_t
)0x00000003Ë

	)

1424 
	#ADC_JSQR_JL_0
 ((
uöt32_t
)0x00000001Ë

	)

1425 
	#ADC_JSQR_JL_1
 ((
uöt32_t
)0x00000002Ë

	)

1427 
	#ADC_JSQR_JEXTSEL
 ((
uöt32_t
)0x0000003CË

	)

1428 
	#ADC_JSQR_JEXTSEL_0
 ((
uöt32_t
)0x00000004Ë

	)

1429 
	#ADC_JSQR_JEXTSEL_1
 ((
uöt32_t
)0x00000008Ë

	)

1430 
	#ADC_JSQR_JEXTSEL_2
 ((
uöt32_t
)0x00000010Ë

	)

1431 
	#ADC_JSQR_JEXTSEL_3
 ((
uöt32_t
)0x00000020Ë

	)

1433 
	#ADC_JSQR_JEXTEN
 ((
uöt32_t
)0x000000C0Ë

	)

1434 
	#ADC_JSQR_JEXTEN_0
 ((
uöt32_t
)0x00000040Ë

	)

1435 
	#ADC_JSQR_JEXTEN_1
 ((
uöt32_t
)0x00000080Ë

	)

1437 
	#ADC_JSQR_JSQ1
 ((
uöt32_t
)0x00001F00Ë

	)

1438 
	#ADC_JSQR_JSQ1_0
 ((
uöt32_t
)0x00000100Ë

	)

1439 
	#ADC_JSQR_JSQ1_1
 ((
uöt32_t
)0x00000200Ë

	)

1440 
	#ADC_JSQR_JSQ1_2
 ((
uöt32_t
)0x00000400Ë

	)

1441 
	#ADC_JSQR_JSQ1_3
 ((
uöt32_t
)0x00000800Ë

	)

1442 
	#ADC_JSQR_JSQ1_4
 ((
uöt32_t
)0x00001000Ë

	)

1444 
	#ADC_JSQR_JSQ2
 ((
uöt32_t
)0x0007C000Ë

	)

1445 
	#ADC_JSQR_JSQ2_0
 ((
uöt32_t
)0x00004000Ë

	)

1446 
	#ADC_JSQR_JSQ2_1
 ((
uöt32_t
)0x00008000Ë

	)

1447 
	#ADC_JSQR_JSQ2_2
 ((
uöt32_t
)0x00010000Ë

	)

1448 
	#ADC_JSQR_JSQ2_3
 ((
uöt32_t
)0x00020000Ë

	)

1449 
	#ADC_JSQR_JSQ2_4
 ((
uöt32_t
)0x00040000Ë

	)

1451 
	#ADC_JSQR_JSQ3
 ((
uöt32_t
)0x01F00000Ë

	)

1452 
	#ADC_JSQR_JSQ3_0
 ((
uöt32_t
)0x00100000Ë

	)

1453 
	#ADC_JSQR_JSQ3_1
 ((
uöt32_t
)0x00200000Ë

	)

1454 
	#ADC_JSQR_JSQ3_2
 ((
uöt32_t
)0x00400000Ë

	)

1455 
	#ADC_JSQR_JSQ3_3
 ((
uöt32_t
)0x00800000Ë

	)

1456 
	#ADC_JSQR_JSQ3_4
 ((
uöt32_t
)0x01000000Ë

	)

1458 
	#ADC_JSQR_JSQ4
 ((
uöt32_t
)0x7C000000Ë

	)

1459 
	#ADC_JSQR_JSQ4_0
 ((
uöt32_t
)0x04000000Ë

	)

1460 
	#ADC_JSQR_JSQ4_1
 ((
uöt32_t
)0x08000000Ë

	)

1461 
	#ADC_JSQR_JSQ4_2
 ((
uöt32_t
)0x10000000Ë

	)

1462 
	#ADC_JSQR_JSQ4_3
 ((
uöt32_t
)0x20000000Ë

	)

1463 
	#ADC_JSQR_JSQ4_4
 ((
uöt32_t
)0x40000000Ë

	)

1466 
	#ADC_OFR1_OFFSET1
 ((
uöt32_t
)0x00000FFFË

	)

1467 
	#ADC_OFR1_OFFSET1_0
 ((
uöt32_t
)0x00000001Ë

	)

1468 
	#ADC_OFR1_OFFSET1_1
 ((
uöt32_t
)0x00000002Ë

	)

1469 
	#ADC_OFR1_OFFSET1_2
 ((
uöt32_t
)0x00000004Ë

	)

1470 
	#ADC_OFR1_OFFSET1_3
 ((
uöt32_t
)0x00000008Ë

	)

1471 
	#ADC_OFR1_OFFSET1_4
 ((
uöt32_t
)0x00000010Ë

	)

1472 
	#ADC_OFR1_OFFSET1_5
 ((
uöt32_t
)0x00000020Ë

	)

1473 
	#ADC_OFR1_OFFSET1_6
 ((
uöt32_t
)0x00000040Ë

	)

1474 
	#ADC_OFR1_OFFSET1_7
 ((
uöt32_t
)0x00000080Ë

	)

1475 
	#ADC_OFR1_OFFSET1_8
 ((
uöt32_t
)0x00000100Ë

	)

1476 
	#ADC_OFR1_OFFSET1_9
 ((
uöt32_t
)0x00000200Ë

	)

1477 
	#ADC_OFR1_OFFSET1_10
 ((
uöt32_t
)0x00000400Ë

	)

1478 
	#ADC_OFR1_OFFSET1_11
 ((
uöt32_t
)0x00000800Ë

	)

1480 
	#ADC_OFR1_OFFSET1_CH
 ((
uöt32_t
)0x7C000000Ë

	)

1481 
	#ADC_OFR1_OFFSET1_CH_0
 ((
uöt32_t
)0x04000000Ë

	)

1482 
	#ADC_OFR1_OFFSET1_CH_1
 ((
uöt32_t
)0x08000000Ë

	)

1483 
	#ADC_OFR1_OFFSET1_CH_2
 ((
uöt32_t
)0x10000000Ë

	)

1484 
	#ADC_OFR1_OFFSET1_CH_3
 ((
uöt32_t
)0x20000000Ë

	)

1485 
	#ADC_OFR1_OFFSET1_CH_4
 ((
uöt32_t
)0x40000000Ë

	)

1487 
	#ADC_OFR1_OFFSET1_EN
 ((
uöt32_t
)0x80000000Ë

	)

1490 
	#ADC_OFR2_OFFSET2
 ((
uöt32_t
)0x00000FFFË

	)

1491 
	#ADC_OFR2_OFFSET2_0
 ((
uöt32_t
)0x00000001Ë

	)

1492 
	#ADC_OFR2_OFFSET2_1
 ((
uöt32_t
)0x00000002Ë

	)

1493 
	#ADC_OFR2_OFFSET2_2
 ((
uöt32_t
)0x00000004Ë

	)

1494 
	#ADC_OFR2_OFFSET2_3
 ((
uöt32_t
)0x00000008Ë

	)

1495 
	#ADC_OFR2_OFFSET2_4
 ((
uöt32_t
)0x00000010Ë

	)

1496 
	#ADC_OFR2_OFFSET2_5
 ((
uöt32_t
)0x00000020Ë

	)

1497 
	#ADC_OFR2_OFFSET2_6
 ((
uöt32_t
)0x00000040Ë

	)

1498 
	#ADC_OFR2_OFFSET2_7
 ((
uöt32_t
)0x00000080Ë

	)

1499 
	#ADC_OFR2_OFFSET2_8
 ((
uöt32_t
)0x00000100Ë

	)

1500 
	#ADC_OFR2_OFFSET2_9
 ((
uöt32_t
)0x00000200Ë

	)

1501 
	#ADC_OFR2_OFFSET2_10
 ((
uöt32_t
)0x00000400Ë

	)

1502 
	#ADC_OFR2_OFFSET2_11
 ((
uöt32_t
)0x00000800Ë

	)

1504 
	#ADC_OFR2_OFFSET2_CH
 ((
uöt32_t
)0x7C000000Ë

	)

1505 
	#ADC_OFR2_OFFSET2_CH_0
 ((
uöt32_t
)0x04000000Ë

	)

1506 
	#ADC_OFR2_OFFSET2_CH_1
 ((
uöt32_t
)0x08000000Ë

	)

1507 
	#ADC_OFR2_OFFSET2_CH_2
 ((
uöt32_t
)0x10000000Ë

	)

1508 
	#ADC_OFR2_OFFSET2_CH_3
 ((
uöt32_t
)0x20000000Ë

	)

1509 
	#ADC_OFR2_OFFSET2_CH_4
 ((
uöt32_t
)0x40000000Ë

	)

1511 
	#ADC_OFR2_OFFSET2_EN
 ((
uöt32_t
)0x80000000Ë

	)

1514 
	#ADC_OFR3_OFFSET3
 ((
uöt32_t
)0x00000FFFË

	)

1515 
	#ADC_OFR3_OFFSET3_0
 ((
uöt32_t
)0x00000001Ë

	)

1516 
	#ADC_OFR3_OFFSET3_1
 ((
uöt32_t
)0x00000002Ë

	)

1517 
	#ADC_OFR3_OFFSET3_2
 ((
uöt32_t
)0x00000004Ë

	)

1518 
	#ADC_OFR3_OFFSET3_3
 ((
uöt32_t
)0x00000008Ë

	)

1519 
	#ADC_OFR3_OFFSET3_4
 ((
uöt32_t
)0x00000010Ë

	)

1520 
	#ADC_OFR3_OFFSET3_5
 ((
uöt32_t
)0x00000020Ë

	)

1521 
	#ADC_OFR3_OFFSET3_6
 ((
uöt32_t
)0x00000040Ë

	)

1522 
	#ADC_OFR3_OFFSET3_7
 ((
uöt32_t
)0x00000080Ë

	)

1523 
	#ADC_OFR3_OFFSET3_8
 ((
uöt32_t
)0x00000100Ë

	)

1524 
	#ADC_OFR3_OFFSET3_9
 ((
uöt32_t
)0x00000200Ë

	)

1525 
	#ADC_OFR3_OFFSET3_10
 ((
uöt32_t
)0x00000400Ë

	)

1526 
	#ADC_OFR3_OFFSET3_11
 ((
uöt32_t
)0x00000800Ë

	)

1528 
	#ADC_OFR3_OFFSET3_CH
 ((
uöt32_t
)0x7C000000Ë

	)

1529 
	#ADC_OFR3_OFFSET3_CH_0
 ((
uöt32_t
)0x04000000Ë

	)

1530 
	#ADC_OFR3_OFFSET3_CH_1
 ((
uöt32_t
)0x08000000Ë

	)

1531 
	#ADC_OFR3_OFFSET3_CH_2
 ((
uöt32_t
)0x10000000Ë

	)

1532 
	#ADC_OFR3_OFFSET3_CH_3
 ((
uöt32_t
)0x20000000Ë

	)

1533 
	#ADC_OFR3_OFFSET3_CH_4
 ((
uöt32_t
)0x40000000Ë

	)

1535 
	#ADC_OFR3_OFFSET3_EN
 ((
uöt32_t
)0x80000000Ë

	)

1538 
	#ADC_OFR4_OFFSET4
 ((
uöt32_t
)0x00000FFFË

	)

1539 
	#ADC_OFR4_OFFSET4_0
 ((
uöt32_t
)0x00000001Ë

	)

1540 
	#ADC_OFR4_OFFSET4_1
 ((
uöt32_t
)0x00000002Ë

	)

1541 
	#ADC_OFR4_OFFSET4_2
 ((
uöt32_t
)0x00000004Ë

	)

1542 
	#ADC_OFR4_OFFSET4_3
 ((
uöt32_t
)0x00000008Ë

	)

1543 
	#ADC_OFR4_OFFSET4_4
 ((
uöt32_t
)0x00000010Ë

	)

1544 
	#ADC_OFR4_OFFSET4_5
 ((
uöt32_t
)0x00000020Ë

	)

1545 
	#ADC_OFR4_OFFSET4_6
 ((
uöt32_t
)0x00000040Ë

	)

1546 
	#ADC_OFR4_OFFSET4_7
 ((
uöt32_t
)0x00000080Ë

	)

1547 
	#ADC_OFR4_OFFSET4_8
 ((
uöt32_t
)0x00000100Ë

	)

1548 
	#ADC_OFR4_OFFSET4_9
 ((
uöt32_t
)0x00000200Ë

	)

1549 
	#ADC_OFR4_OFFSET4_10
 ((
uöt32_t
)0x00000400Ë

	)

1550 
	#ADC_OFR4_OFFSET4_11
 ((
uöt32_t
)0x00000800Ë

	)

1552 
	#ADC_OFR4_OFFSET4_CH
 ((
uöt32_t
)0x7C000000Ë

	)

1553 
	#ADC_OFR4_OFFSET4_CH_0
 ((
uöt32_t
)0x04000000Ë

	)

1554 
	#ADC_OFR4_OFFSET4_CH_1
 ((
uöt32_t
)0x08000000Ë

	)

1555 
	#ADC_OFR4_OFFSET4_CH_2
 ((
uöt32_t
)0x10000000Ë

	)

1556 
	#ADC_OFR4_OFFSET4_CH_3
 ((
uöt32_t
)0x20000000Ë

	)

1557 
	#ADC_OFR4_OFFSET4_CH_4
 ((
uöt32_t
)0x40000000Ë

	)

1559 
	#ADC_OFR4_OFFSET4_EN
 ((
uöt32_t
)0x80000000Ë

	)

1562 
	#ADC_JDR1_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

1563 
	#ADC_JDR1_JDATA_0
 ((
uöt32_t
)0x00000001Ë

	)

1564 
	#ADC_JDR1_JDATA_1
 ((
uöt32_t
)0x00000002Ë

	)

1565 
	#ADC_JDR1_JDATA_2
 ((
uöt32_t
)0x00000004Ë

	)

1566 
	#ADC_JDR1_JDATA_3
 ((
uöt32_t
)0x00000008Ë

	)

1567 
	#ADC_JDR1_JDATA_4
 ((
uöt32_t
)0x00000010Ë

	)

1568 
	#ADC_JDR1_JDATA_5
 ((
uöt32_t
)0x00000020Ë

	)

1569 
	#ADC_JDR1_JDATA_6
 ((
uöt32_t
)0x00000040Ë

	)

1570 
	#ADC_JDR1_JDATA_7
 ((
uöt32_t
)0x00000080Ë

	)

1571 
	#ADC_JDR1_JDATA_8
 ((
uöt32_t
)0x00000100Ë

	)

1572 
	#ADC_JDR1_JDATA_9
 ((
uöt32_t
)0x00000200Ë

	)

1573 
	#ADC_JDR1_JDATA_10
 ((
uöt32_t
)0x00000400Ë

	)

1574 
	#ADC_JDR1_JDATA_11
 ((
uöt32_t
)0x00000800Ë

	)

1575 
	#ADC_JDR1_JDATA_12
 ((
uöt32_t
)0x00001000Ë

	)

1576 
	#ADC_JDR1_JDATA_13
 ((
uöt32_t
)0x00002000Ë

	)

1577 
	#ADC_JDR1_JDATA_14
 ((
uöt32_t
)0x00004000Ë

	)

1578 
	#ADC_JDR1_JDATA_15
 ((
uöt32_t
)0x00008000Ë

	)

1581 
	#ADC_JDR2_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

1582 
	#ADC_JDR2_JDATA_0
 ((
uöt32_t
)0x00000001Ë

	)

1583 
	#ADC_JDR2_JDATA_1
 ((
uöt32_t
)0x00000002Ë

	)

1584 
	#ADC_JDR2_JDATA_2
 ((
uöt32_t
)0x00000004Ë

	)

1585 
	#ADC_JDR2_JDATA_3
 ((
uöt32_t
)0x00000008Ë

	)

1586 
	#ADC_JDR2_JDATA_4
 ((
uöt32_t
)0x00000010Ë

	)

1587 
	#ADC_JDR2_JDATA_5
 ((
uöt32_t
)0x00000020Ë

	)

1588 
	#ADC_JDR2_JDATA_6
 ((
uöt32_t
)0x00000040Ë

	)

1589 
	#ADC_JDR2_JDATA_7
 ((
uöt32_t
)0x00000080Ë

	)

1590 
	#ADC_JDR2_JDATA_8
 ((
uöt32_t
)0x00000100Ë

	)

1591 
	#ADC_JDR2_JDATA_9
 ((
uöt32_t
)0x00000200Ë

	)

1592 
	#ADC_JDR2_JDATA_10
 ((
uöt32_t
)0x00000400Ë

	)

1593 
	#ADC_JDR2_JDATA_11
 ((
uöt32_t
)0x00000800Ë

	)

1594 
	#ADC_JDR2_JDATA_12
 ((
uöt32_t
)0x00001000Ë

	)

1595 
	#ADC_JDR2_JDATA_13
 ((
uöt32_t
)0x00002000Ë

	)

1596 
	#ADC_JDR2_JDATA_14
 ((
uöt32_t
)0x00004000Ë

	)

1597 
	#ADC_JDR2_JDATA_15
 ((
uöt32_t
)0x00008000Ë

	)

1600 
	#ADC_JDR3_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

1601 
	#ADC_JDR3_JDATA_0
 ((
uöt32_t
)0x00000001Ë

	)

1602 
	#ADC_JDR3_JDATA_1
 ((
uöt32_t
)0x00000002Ë

	)

1603 
	#ADC_JDR3_JDATA_2
 ((
uöt32_t
)0x00000004Ë

	)

1604 
	#ADC_JDR3_JDATA_3
 ((
uöt32_t
)0x00000008Ë

	)

1605 
	#ADC_JDR3_JDATA_4
 ((
uöt32_t
)0x00000010Ë

	)

1606 
	#ADC_JDR3_JDATA_5
 ((
uöt32_t
)0x00000020Ë

	)

1607 
	#ADC_JDR3_JDATA_6
 ((
uöt32_t
)0x00000040Ë

	)

1608 
	#ADC_JDR3_JDATA_7
 ((
uöt32_t
)0x00000080Ë

	)

1609 
	#ADC_JDR3_JDATA_8
 ((
uöt32_t
)0x00000100Ë

	)

1610 
	#ADC_JDR3_JDATA_9
 ((
uöt32_t
)0x00000200Ë

	)

1611 
	#ADC_JDR3_JDATA_10
 ((
uöt32_t
)0x00000400Ë

	)

1612 
	#ADC_JDR3_JDATA_11
 ((
uöt32_t
)0x00000800Ë

	)

1613 
	#ADC_JDR3_JDATA_12
 ((
uöt32_t
)0x00001000Ë

	)

1614 
	#ADC_JDR3_JDATA_13
 ((
uöt32_t
)0x00002000Ë

	)

1615 
	#ADC_JDR3_JDATA_14
 ((
uöt32_t
)0x00004000Ë

	)

1616 
	#ADC_JDR3_JDATA_15
 ((
uöt32_t
)0x00008000Ë

	)

1619 
	#ADC_JDR4_JDATA
 ((
uöt32_t
)0x0000FFFFË

	)

1620 
	#ADC_JDR4_JDATA_0
 ((
uöt32_t
)0x00000001Ë

	)

1621 
	#ADC_JDR4_JDATA_1
 ((
uöt32_t
)0x00000002Ë

	)

1622 
	#ADC_JDR4_JDATA_2
 ((
uöt32_t
)0x00000004Ë

	)

1623 
	#ADC_JDR4_JDATA_3
 ((
uöt32_t
)0x00000008Ë

	)

1624 
	#ADC_JDR4_JDATA_4
 ((
uöt32_t
)0x00000010Ë

	)

1625 
	#ADC_JDR4_JDATA_5
 ((
uöt32_t
)0x00000020Ë

	)

1626 
	#ADC_JDR4_JDATA_6
 ((
uöt32_t
)0x00000040Ë

	)

1627 
	#ADC_JDR4_JDATA_7
 ((
uöt32_t
)0x00000080Ë

	)

1628 
	#ADC_JDR4_JDATA_8
 ((
uöt32_t
)0x00000100Ë

	)

1629 
	#ADC_JDR4_JDATA_9
 ((
uöt32_t
)0x00000200Ë

	)

1630 
	#ADC_JDR4_JDATA_10
 ((
uöt32_t
)0x00000400Ë

	)

1631 
	#ADC_JDR4_JDATA_11
 ((
uöt32_t
)0x00000800Ë

	)

1632 
	#ADC_JDR4_JDATA_12
 ((
uöt32_t
)0x00001000Ë

	)

1633 
	#ADC_JDR4_JDATA_13
 ((
uöt32_t
)0x00002000Ë

	)

1634 
	#ADC_JDR4_JDATA_14
 ((
uöt32_t
)0x00004000Ë

	)

1635 
	#ADC_JDR4_JDATA_15
 ((
uöt32_t
)0x00008000Ë

	)

1638 
	#ADC_AWD2CR_AWD2CH
 ((
uöt32_t
)0x0007FFFEË

	)

1639 
	#ADC_AWD2CR_AWD2CH_0
 ((
uöt32_t
)0x00000002Ë

	)

1640 
	#ADC_AWD2CR_AWD2CH_1
 ((
uöt32_t
)0x00000004Ë

	)

1641 
	#ADC_AWD2CR_AWD2CH_2
 ((
uöt32_t
)0x00000008Ë

	)

1642 
	#ADC_AWD2CR_AWD2CH_3
 ((
uöt32_t
)0x00000010Ë

	)

1643 
	#ADC_AWD2CR_AWD2CH_4
 ((
uöt32_t
)0x00000020Ë

	)

1644 
	#ADC_AWD2CR_AWD2CH_5
 ((
uöt32_t
)0x00000040Ë

	)

1645 
	#ADC_AWD2CR_AWD2CH_6
 ((
uöt32_t
)0x00000080Ë

	)

1646 
	#ADC_AWD2CR_AWD2CH_7
 ((
uöt32_t
)0x00000100Ë

	)

1647 
	#ADC_AWD2CR_AWD2CH_8
 ((
uöt32_t
)0x00000200Ë

	)

1648 
	#ADC_AWD2CR_AWD2CH_9
 ((
uöt32_t
)0x00000400Ë

	)

1649 
	#ADC_AWD2CR_AWD2CH_10
 ((
uöt32_t
)0x00000800Ë

	)

1650 
	#ADC_AWD2CR_AWD2CH_11
 ((
uöt32_t
)0x00001000Ë

	)

1651 
	#ADC_AWD2CR_AWD2CH_12
 ((
uöt32_t
)0x00002000Ë

	)

1652 
	#ADC_AWD2CR_AWD2CH_13
 ((
uöt32_t
)0x00004000Ë

	)

1653 
	#ADC_AWD2CR_AWD2CH_14
 ((
uöt32_t
)0x00008000Ë

	)

1654 
	#ADC_AWD2CR_AWD2CH_15
 ((
uöt32_t
)0x00010000Ë

	)

1655 
	#ADC_AWD2CR_AWD2CH_16
 ((
uöt32_t
)0x00020000Ë

	)

1656 
	#ADC_AWD2CR_AWD2CH_17
 ((
uöt32_t
)0x00030000Ë

	)

1659 
	#ADC_AWD3CR_AWD3CH
 ((
uöt32_t
)0x0007FFFEË

	)

1660 
	#ADC_AWD3CR_AWD3CH_0
 ((
uöt32_t
)0x00000002Ë

	)

1661 
	#ADC_AWD3CR_AWD3CH_1
 ((
uöt32_t
)0x00000004Ë

	)

1662 
	#ADC_AWD3CR_AWD3CH_2
 ((
uöt32_t
)0x00000008Ë

	)

1663 
	#ADC_AWD3CR_AWD3CH_3
 ((
uöt32_t
)0x00000010Ë

	)

1664 
	#ADC_AWD3CR_AWD3CH_4
 ((
uöt32_t
)0x00000020Ë

	)

1665 
	#ADC_AWD3CR_AWD3CH_5
 ((
uöt32_t
)0x00000040Ë

	)

1666 
	#ADC_AWD3CR_AWD3CH_6
 ((
uöt32_t
)0x00000080Ë

	)

1667 
	#ADC_AWD3CR_AWD3CH_7
 ((
uöt32_t
)0x00000100Ë

	)

1668 
	#ADC_AWD3CR_AWD3CH_8
 ((
uöt32_t
)0x00000200Ë

	)

1669 
	#ADC_AWD3CR_AWD3CH_9
 ((
uöt32_t
)0x00000400Ë

	)

1670 
	#ADC_AWD3CR_AWD3CH_10
 ((
uöt32_t
)0x00000800Ë

	)

1671 
	#ADC_AWD3CR_AWD3CH_11
 ((
uöt32_t
)0x00001000Ë

	)

1672 
	#ADC_AWD3CR_AWD3CH_12
 ((
uöt32_t
)0x00002000Ë

	)

1673 
	#ADC_AWD3CR_AWD3CH_13
 ((
uöt32_t
)0x00004000Ë

	)

1674 
	#ADC_AWD3CR_AWD3CH_14
 ((
uöt32_t
)0x00008000Ë

	)

1675 
	#ADC_AWD3CR_AWD3CH_15
 ((
uöt32_t
)0x00010000Ë

	)

1676 
	#ADC_AWD3CR_AWD3CH_16
 ((
uöt32_t
)0x00020000Ë

	)

1677 
	#ADC_AWD3CR_AWD3CH_17
 ((
uöt32_t
)0x00030000Ë

	)

1680 
	#ADC_DIFSEL_DIFSEL
 ((
uöt32_t
)0x0007FFFEË

	)

1681 
	#ADC_DIFSEL_DIFSEL_0
 ((
uöt32_t
)0x00000002Ë

	)

1682 
	#ADC_DIFSEL_DIFSEL_1
 ((
uöt32_t
)0x00000004Ë

	)

1683 
	#ADC_DIFSEL_DIFSEL_2
 ((
uöt32_t
)0x00000008Ë

	)

1684 
	#ADC_DIFSEL_DIFSEL_3
 ((
uöt32_t
)0x00000010Ë

	)

1685 
	#ADC_DIFSEL_DIFSEL_4
 ((
uöt32_t
)0x00000020Ë

	)

1686 
	#ADC_DIFSEL_DIFSEL_5
 ((
uöt32_t
)0x00000040Ë

	)

1687 
	#ADC_DIFSEL_DIFSEL_6
 ((
uöt32_t
)0x00000080Ë

	)

1688 
	#ADC_DIFSEL_DIFSEL_7
 ((
uöt32_t
)0x00000100Ë

	)

1689 
	#ADC_DIFSEL_DIFSEL_8
 ((
uöt32_t
)0x00000200Ë

	)

1690 
	#ADC_DIFSEL_DIFSEL_9
 ((
uöt32_t
)0x00000400Ë

	)

1691 
	#ADC_DIFSEL_DIFSEL_10
 ((
uöt32_t
)0x00000800Ë

	)

1692 
	#ADC_DIFSEL_DIFSEL_11
 ((
uöt32_t
)0x00001000Ë

	)

1693 
	#ADC_DIFSEL_DIFSEL_12
 ((
uöt32_t
)0x00002000Ë

	)

1694 
	#ADC_DIFSEL_DIFSEL_13
 ((
uöt32_t
)0x00004000Ë

	)

1695 
	#ADC_DIFSEL_DIFSEL_14
 ((
uöt32_t
)0x00008000Ë

	)

1696 
	#ADC_DIFSEL_DIFSEL_15
 ((
uöt32_t
)0x00010000Ë

	)

1697 
	#ADC_DIFSEL_DIFSEL_16
 ((
uöt32_t
)0x00020000Ë

	)

1698 
	#ADC_DIFSEL_DIFSEL_17
 ((
uöt32_t
)0x00030000Ë

	)

1701 
	#ADC_CALFACT_CALFACT_S
 ((
uöt32_t
)0x0000007FË

	)

1702 
	#ADC_CALFACT_CALFACT_S_0
 ((
uöt32_t
)0x00000001Ë

	)

1703 
	#ADC_CALFACT_CALFACT_S_1
 ((
uöt32_t
)0x00000002Ë

	)

1704 
	#ADC_CALFACT_CALFACT_S_2
 ((
uöt32_t
)0x00000004Ë

	)

1705 
	#ADC_CALFACT_CALFACT_S_3
 ((
uöt32_t
)0x00000008Ë

	)

1706 
	#ADC_CALFACT_CALFACT_S_4
 ((
uöt32_t
)0x00000010Ë

	)

1707 
	#ADC_CALFACT_CALFACT_S_5
 ((
uöt32_t
)0x00000020Ë

	)

1708 
	#ADC_CALFACT_CALFACT_S_6
 ((
uöt32_t
)0x00000040Ë

	)

1709 
	#ADC_CALFACT_CALFACT_D
 ((
uöt32_t
)0x007F0000Ë

	)

1710 
	#ADC_CALFACT_CALFACT_D_0
 ((
uöt32_t
)0x00010000Ë

	)

1711 
	#ADC_CALFACT_CALFACT_D_1
 ((
uöt32_t
)0x00020000Ë

	)

1712 
	#ADC_CALFACT_CALFACT_D_2
 ((
uöt32_t
)0x00040000Ë

	)

1713 
	#ADC_CALFACT_CALFACT_D_3
 ((
uöt32_t
)0x00080000Ë

	)

1714 
	#ADC_CALFACT_CALFACT_D_4
 ((
uöt32_t
)0x00100000Ë

	)

1715 
	#ADC_CALFACT_CALFACT_D_5
 ((
uöt32_t
)0x00200000Ë

	)

1716 
	#ADC_CALFACT_CALFACT_D_6
 ((
uöt32_t
)0x00400000Ë

	)

1720 
	#ADC12_CSR_ADRDY_MST
 ((
uöt32_t
)0x00000001Ë

	)

1721 
	#ADC12_CSR_ADRDY_EOSMP_MST
 ((
uöt32_t
)0x00000002Ë

	)

1722 
	#ADC12_CSR_ADRDY_EOC_MST
 ((
uöt32_t
)0x00000004Ë

	)

1723 
	#ADC12_CSR_ADRDY_EOS_MST
 ((
uöt32_t
)0x00000008Ë

	)

1724 
	#ADC12_CSR_ADRDY_OVR_MST
 ((
uöt32_t
)0x00000010Ë

	)

1725 
	#ADC12_CSR_ADRDY_JEOC_MST
 ((
uöt32_t
)0x00000020Ë

	)

1726 
	#ADC12_CSR_ADRDY_JEOS_MST
 ((
uöt32_t
)0x00000040Ë

	)

1727 
	#ADC12_CSR_AWD1_MST
 ((
uöt32_t
)0x00000080Ë

	)

1728 
	#ADC12_CSR_AWD2_MST
 ((
uöt32_t
)0x00000100Ë

	)

1729 
	#ADC12_CSR_AWD3_MST
 ((
uöt32_t
)0x00000200Ë

	)

1730 
	#ADC12_CSR_JQOVF_MST
 ((
uöt32_t
)0x00000400Ë

	)

1731 
	#ADC12_CSR_ADRDY_SLV
 ((
uöt32_t
)0x00010000Ë

	)

1732 
	#ADC12_CSR_ADRDY_EOSMP_SLV
 ((
uöt32_t
)0x00020000Ë

	)

1733 
	#ADC12_CSR_ADRDY_EOC_SLV
 ((
uöt32_t
)0x00040000Ë

	)

1734 
	#ADC12_CSR_ADRDY_EOS_SLV
 ((
uöt32_t
)0x00080000Ë

	)

1735 
	#ADC12_CSR_ADRDY_OVR_SLV
 ((
uöt32_t
)0x00100000Ë

	)

1736 
	#ADC12_CSR_ADRDY_JEOC_SLV
 ((
uöt32_t
)0x00200000Ë

	)

1737 
	#ADC12_CSR_ADRDY_JEOS_SLV
 ((
uöt32_t
)0x00400000Ë

	)

1738 
	#ADC12_CSR_AWD1_SLV
 ((
uöt32_t
)0x00800000Ë

	)

1739 
	#ADC12_CSR_AWD2_SLV
 ((
uöt32_t
)0x01000000Ë

	)

1740 
	#ADC12_CSR_AWD3_SLV
 ((
uöt32_t
)0x02000000Ë

	)

1741 
	#ADC12_CSR_JQOVF_SLV
 ((
uöt32_t
)0x04000000Ë

	)

1744 
	#ADC34_CSR_ADRDY_MST
 ((
uöt32_t
)0x00000001Ë

	)

1745 
	#ADC34_CSR_ADRDY_EOSMP_MST
 ((
uöt32_t
)0x00000002Ë

	)

1746 
	#ADC34_CSR_ADRDY_EOC_MST
 ((
uöt32_t
)0x00000004Ë

	)

1747 
	#ADC34_CSR_ADRDY_EOS_MST
 ((
uöt32_t
)0x00000008Ë

	)

1748 
	#ADC34_CSR_ADRDY_OVR_MST
 ((
uöt32_t
)0x00000010Ë

	)

1749 
	#ADC34_CSR_ADRDY_JEOC_MST
 ((
uöt32_t
)0x00000020Ë

	)

1750 
	#ADC34_CSR_ADRDY_JEOS_MST
 ((
uöt32_t
)0x00000040Ë

	)

1751 
	#ADC34_CSR_AWD1_MST
 ((
uöt32_t
)0x00000080Ë

	)

1752 
	#ADC34_CSR_AWD2_MST
 ((
uöt32_t
)0x00000100Ë

	)

1753 
	#ADC34_CSR_AWD3_MST
 ((
uöt32_t
)0x00000200Ë

	)

1754 
	#ADC34_CSR_JQOVF_MST
 ((
uöt32_t
)0x00000400Ë

	)

1755 
	#ADC34_CSR_ADRDY_SLV
 ((
uöt32_t
)0x00010000Ë

	)

1756 
	#ADC34_CSR_ADRDY_EOSMP_SLV
 ((
uöt32_t
)0x00020000Ë

	)

1757 
	#ADC34_CSR_ADRDY_EOC_SLV
 ((
uöt32_t
)0x00040000Ë

	)

1758 
	#ADC34_CSR_ADRDY_EOS_SLV
 ((
uöt32_t
)0x00080000Ë

	)

1759 
	#ADC12_CSR_ADRDY_OVR_SLV
 ((
uöt32_t
)0x00100000Ë

	)

1760 
	#ADC34_CSR_ADRDY_JEOC_SLV
 ((
uöt32_t
)0x00200000Ë

	)

1761 
	#ADC34_CSR_ADRDY_JEOS_SLV
 ((
uöt32_t
)0x00400000Ë

	)

1762 
	#ADC34_CSR_AWD1_SLV
 ((
uöt32_t
)0x00800000Ë

	)

1763 
	#ADC34_CSR_AWD2_SLV
 ((
uöt32_t
)0x01000000Ë

	)

1764 
	#ADC34_CSR_AWD3_SLV
 ((
uöt32_t
)0x02000000Ë

	)

1765 
	#ADC34_CSR_JQOVF_SLV
 ((
uöt32_t
)0x04000000Ë

	)

1768 
	#ADC12_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

1769 
	#ADC12_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

1770 
	#ADC12_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

1771 
	#ADC12_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

1772 
	#ADC12_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

1773 
	#ADC12_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

1774 
	#ADC12_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

1775 
	#ADC12_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

1776 
	#ADC12_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

1777 
	#ADC12_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

1778 
	#ADC12_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

1779 
	#ADC12_CCR_DMACFG
 ((
uöt32_t
)0x00002000Ë

	)

1780 
	#ADC12_CCR_MDMA
 ((
uöt32_t
)0x0000C000Ë

	)

1781 
	#ADC12_CCR_MDMA_0
 ((
uöt32_t
)0x00004000Ë

	)

1782 
	#ADC12_CCR_MDMA_1
 ((
uöt32_t
)0x00008000Ë

	)

1783 
	#ADC12_CCR_CKMODE
 ((
uöt32_t
)0x00030000Ë

	)

1784 
	#ADC12_CCR_CKMODE_0
 ((
uöt32_t
)0x00010000Ë

	)

1785 
	#ADC12_CCR_CKMODE_1
 ((
uöt32_t
)0x00020000Ë

	)

1786 
	#ADC12_CCR_VREFEN
 ((
uöt32_t
)0x00400000Ë

	)

1787 
	#ADC12_CCR_TSEN
 ((
uöt32_t
)0x00800000Ë

	)

1788 
	#ADC12_CCR_VBATEN
 ((
uöt32_t
)0x01000000Ë

	)

1791 
	#ADC34_CCR_MULTI
 ((
uöt32_t
)0x0000001FË

	)

1792 
	#ADC34_CCR_MULTI_0
 ((
uöt32_t
)0x00000001Ë

	)

1793 
	#ADC34_CCR_MULTI_1
 ((
uöt32_t
)0x00000002Ë

	)

1794 
	#ADC34_CCR_MULTI_2
 ((
uöt32_t
)0x00000004Ë

	)

1795 
	#ADC34_CCR_MULTI_3
 ((
uöt32_t
)0x00000008Ë

	)

1796 
	#ADC34_CCR_MULTI_4
 ((
uöt32_t
)0x00000010Ë

	)

1798 
	#ADC34_CCR_DELAY
 ((
uöt32_t
)0x00000F00Ë

	)

1799 
	#ADC34_CCR_DELAY_0
 ((
uöt32_t
)0x00000100Ë

	)

1800 
	#ADC34_CCR_DELAY_1
 ((
uöt32_t
)0x00000200Ë

	)

1801 
	#ADC34_CCR_DELAY_2
 ((
uöt32_t
)0x00000400Ë

	)

1802 
	#ADC34_CCR_DELAY_3
 ((
uöt32_t
)0x00000800Ë

	)

1804 
	#ADC34_CCR_DMACFG
 ((
uöt32_t
)0x00002000Ë

	)

1805 
	#ADC34_CCR_MDMA
 ((
uöt32_t
)0x0000C000Ë

	)

1806 
	#ADC34_CCR_MDMA_0
 ((
uöt32_t
)0x00004000Ë

	)

1807 
	#ADC34_CCR_MDMA_1
 ((
uöt32_t
)0x00008000Ë

	)

1809 
	#ADC34_CCR_CKMODE
 ((
uöt32_t
)0x00030000Ë

	)

1810 
	#ADC34_CCR_CKMODE_0
 ((
uöt32_t
)0x00010000Ë

	)

1811 
	#ADC34_CCR_CKMODE_1
 ((
uöt32_t
)0x00020000Ë

	)

1813 
	#ADC34_CCR_VREFEN
 ((
uöt32_t
)0x00400000Ë

	)

1814 
	#ADC34_CCR_TSEN
 ((
uöt32_t
)0x00800000Ë

	)

1815 
	#ADC34_CCR_VBATEN
 ((
uöt32_t
)0x01000000Ë

	)

1818 
	#ADC12_CDR_RDATA_MST
 ((
uöt32_t
)0x0000FFFFË

	)

1819 
	#ADC12_CDR_RDATA_MST_0
 ((
uöt32_t
)0x00000001Ë

	)

1820 
	#ADC12_CDR_RDATA_MST_1
 ((
uöt32_t
)0x00000002Ë

	)

1821 
	#ADC12_CDR_RDATA_MST_2
 ((
uöt32_t
)0x00000004Ë

	)

1822 
	#ADC12_CDR_RDATA_MST_3
 ((
uöt32_t
)0x00000008Ë

	)

1823 
	#ADC12_CDR_RDATA_MST_4
 ((
uöt32_t
)0x00000010Ë

	)

1824 
	#ADC12_CDR_RDATA_MST_5
 ((
uöt32_t
)0x00000020Ë

	)

1825 
	#ADC12_CDR_RDATA_MST_6
 ((
uöt32_t
)0x00000040Ë

	)

1826 
	#ADC12_CDR_RDATA_MST_7
 ((
uöt32_t
)0x00000080Ë

	)

1827 
	#ADC12_CDR_RDATA_MST_8
 ((
uöt32_t
)0x00000100Ë

	)

1828 
	#ADC12_CDR_RDATA_MST_9
 ((
uöt32_t
)0x00000200Ë

	)

1829 
	#ADC12_CDR_RDATA_MST_10
 ((
uöt32_t
)0x00000400Ë

	)

1830 
	#ADC12_CDR_RDATA_MST_11
 ((
uöt32_t
)0x00000800Ë

	)

1831 
	#ADC12_CDR_RDATA_MST_12
 ((
uöt32_t
)0x00001000Ë

	)

1832 
	#ADC12_CDR_RDATA_MST_13
 ((
uöt32_t
)0x00002000Ë

	)

1833 
	#ADC12_CDR_RDATA_MST_14
 ((
uöt32_t
)0x00004000Ë

	)

1834 
	#ADC12_CDR_RDATA_MST_15
 ((
uöt32_t
)0x00008000Ë

	)

1836 
	#ADC12_CDR_RDATA_SLV
 ((
uöt32_t
)0xFFFF0000Ë

	)

1837 
	#ADC12_CDR_RDATA_SLV_0
 ((
uöt32_t
)0x00010000Ë

	)

1838 
	#ADC12_CDR_RDATA_SLV_1
 ((
uöt32_t
)0x00020000Ë

	)

1839 
	#ADC12_CDR_RDATA_SLV_2
 ((
uöt32_t
)0x00040000Ë

	)

1840 
	#ADC12_CDR_RDATA_SLV_3
 ((
uöt32_t
)0x00080000Ë

	)

1841 
	#ADC12_CDR_RDATA_SLV_4
 ((
uöt32_t
)0x00100000Ë

	)

1842 
	#ADC12_CDR_RDATA_SLV_5
 ((
uöt32_t
)0x00200000Ë

	)

1843 
	#ADC12_CDR_RDATA_SLV_6
 ((
uöt32_t
)0x00400000Ë

	)

1844 
	#ADC12_CDR_RDATA_SLV_7
 ((
uöt32_t
)0x00800000Ë

	)

1845 
	#ADC12_CDR_RDATA_SLV_8
 ((
uöt32_t
)0x01000000Ë

	)

1846 
	#ADC12_CDR_RDATA_SLV_9
 ((
uöt32_t
)0x02000000Ë

	)

1847 
	#ADC12_CDR_RDATA_SLV_10
 ((
uöt32_t
)0x04000000Ë

	)

1848 
	#ADC12_CDR_RDATA_SLV_11
 ((
uöt32_t
)0x08000000Ë

	)

1849 
	#ADC12_CDR_RDATA_SLV_12
 ((
uöt32_t
)0x10000000Ë

	)

1850 
	#ADC12_CDR_RDATA_SLV_13
 ((
uöt32_t
)0x20000000Ë

	)

1851 
	#ADC12_CDR_RDATA_SLV_14
 ((
uöt32_t
)0x40000000Ë

	)

1852 
	#ADC12_CDR_RDATA_SLV_15
 ((
uöt32_t
)0x80000000Ë

	)

1855 
	#ADC34_CDR_RDATA_MST
 ((
uöt32_t
)0x0000FFFFË

	)

1856 
	#ADC34_CDR_RDATA_MST_0
 ((
uöt32_t
)0x00000001Ë

	)

1857 
	#ADC34_CDR_RDATA_MST_1
 ((
uöt32_t
)0x00000002Ë

	)

1858 
	#ADC34_CDR_RDATA_MST_2
 ((
uöt32_t
)0x00000004Ë

	)

1859 
	#ADC34_CDR_RDATA_MST_3
 ((
uöt32_t
)0x00000008Ë

	)

1860 
	#ADC34_CDR_RDATA_MST_4
 ((
uöt32_t
)0x00000010Ë

	)

1861 
	#ADC34_CDR_RDATA_MST_5
 ((
uöt32_t
)0x00000020Ë

	)

1862 
	#ADC34_CDR_RDATA_MST_6
 ((
uöt32_t
)0x00000040Ë

	)

1863 
	#ADC34_CDR_RDATA_MST_7
 ((
uöt32_t
)0x00000080Ë

	)

1864 
	#ADC34_CDR_RDATA_MST_8
 ((
uöt32_t
)0x00000100Ë

	)

1865 
	#ADC34_CDR_RDATA_MST_9
 ((
uöt32_t
)0x00000200Ë

	)

1866 
	#ADC34_CDR_RDATA_MST_10
 ((
uöt32_t
)0x00000400Ë

	)

1867 
	#ADC34_CDR_RDATA_MST_11
 ((
uöt32_t
)0x00000800Ë

	)

1868 
	#ADC34_CDR_RDATA_MST_12
 ((
uöt32_t
)0x00001000Ë

	)

1869 
	#ADC34_CDR_RDATA_MST_13
 ((
uöt32_t
)0x00002000Ë

	)

1870 
	#ADC34_CDR_RDATA_MST_14
 ((
uöt32_t
)0x00004000Ë

	)

1871 
	#ADC34_CDR_RDATA_MST_15
 ((
uöt32_t
)0x00008000Ë

	)

1873 
	#ADC34_CDR_RDATA_SLV
 ((
uöt32_t
)0xFFFF0000Ë

	)

1874 
	#ADC34_CDR_RDATA_SLV_0
 ((
uöt32_t
)0x00010000Ë

	)

1875 
	#ADC34_CDR_RDATA_SLV_1
 ((
uöt32_t
)0x00020000Ë

	)

1876 
	#ADC34_CDR_RDATA_SLV_2
 ((
uöt32_t
)0x00040000Ë

	)

1877 
	#ADC34_CDR_RDATA_SLV_3
 ((
uöt32_t
)0x00080000Ë

	)

1878 
	#ADC34_CDR_RDATA_SLV_4
 ((
uöt32_t
)0x00100000Ë

	)

1879 
	#ADC34_CDR_RDATA_SLV_5
 ((
uöt32_t
)0x00200000Ë

	)

1880 
	#ADC34_CDR_RDATA_SLV_6
 ((
uöt32_t
)0x00400000Ë

	)

1881 
	#ADC34_CDR_RDATA_SLV_7
 ((
uöt32_t
)0x00800000Ë

	)

1882 
	#ADC34_CDR_RDATA_SLV_8
 ((
uöt32_t
)0x01000000Ë

	)

1883 
	#ADC34_CDR_RDATA_SLV_9
 ((
uöt32_t
)0x02000000Ë

	)

1884 
	#ADC34_CDR_RDATA_SLV_10
 ((
uöt32_t
)0x04000000Ë

	)

1885 
	#ADC34_CDR_RDATA_SLV_11
 ((
uöt32_t
)0x08000000Ë

	)

1886 
	#ADC34_CDR_RDATA_SLV_12
 ((
uöt32_t
)0x10000000Ë

	)

1887 
	#ADC34_CDR_RDATA_SLV_13
 ((
uöt32_t
)0x20000000Ë

	)

1888 
	#ADC34_CDR_RDATA_SLV_14
 ((
uöt32_t
)0x40000000Ë

	)

1889 
	#ADC34_CDR_RDATA_SLV_15
 ((
uöt32_t
)0x80000000Ë

	)

1897 
	#COMP1_CSR_COMP1EN
 ((
uöt32_t
)0x00000001Ë

	)

1898 
	#COMP1_CSR_COMP1SW1
 ((
uöt32_t
)0x00000002Ë

	)

1899 
	#COMP1_CSR_COMP1MODE
 ((
uöt32_t
)0x0000000CË

	)

1900 
	#COMP1_CSR_COMP1MODE_0
 ((
uöt32_t
)0x00000004Ë

	)

1901 
	#COMP1_CSR_COMP1MODE_1
 ((
uöt32_t
)0x00000008Ë

	)

1902 
	#COMP1_CSR_COMP1INSEL
 ((
uöt32_t
)0x00000070Ë

	)

1903 
	#COMP1_CSR_COMP1INSEL_0
 ((
uöt32_t
)0x00000010Ë

	)

1904 
	#COMP1_CSR_COMP1INSEL_1
 ((
uöt32_t
)0x00000020Ë

	)

1905 
	#COMP1_CSR_COMP1INSEL_2
 ((
uöt32_t
)0x00000040Ë

	)

1906 
	#COMP1_CSR_COMP1NONINSEL
 ((
uöt32_t
)0x00000080Ë

	)

1907 
	#COMP1_CSR_COMP1OUTSEL
 ((
uöt32_t
)0x00003C00Ë

	)

1908 
	#COMP1_CSR_COMP1OUTSEL_0
 ((
uöt32_t
)0x00000400Ë

	)

1909 
	#COMP1_CSR_COMP1OUTSEL_1
 ((
uöt32_t
)0x00000800Ë

	)

1910 
	#COMP1_CSR_COMP1OUTSEL_2
 ((
uöt32_t
)0x00001000Ë

	)

1911 
	#COMP1_CSR_COMP1OUTSEL_3
 ((
uöt32_t
)0x00002000Ë

	)

1912 
	#COMP1_CSR_COMP1POL
 ((
uöt32_t
)0x00008000Ë

	)

1913 
	#COMP1_CSR_COMP1HYST
 ((
uöt32_t
)0x00030000Ë

	)

1914 
	#COMP1_CSR_COMP1HYST_0
 ((
uöt32_t
)0x00010000Ë

	)

1915 
	#COMP1_CSR_COMP1HYST_1
 ((
uöt32_t
)0x00020000Ë

	)

1916 
	#COMP1_CSR_COMP1BLANKING
 ((
uöt32_t
)0x000C0000Ë

	)

1917 
	#COMP1_CSR_COMP1BLANKING_0
 ((
uöt32_t
)0x00040000Ë

	)

1918 
	#COMP1_CSR_COMP1BLANKING_1
 ((
uöt32_t
)0x00080000Ë

	)

1919 
	#COMP1_CSR_COMP1BLANKING_2
 ((
uöt32_t
)0x00100000Ë

	)

1920 
	#COMP1_CSR_COMP1OUT
 ((
uöt32_t
)0x40000000Ë

	)

1921 
	#COMP1_CSR_COMP1LOCK
 ((
uöt32_t
)0x80000000Ë

	)

1924 
	#COMP2_CSR_COMP2EN
 ((
uöt32_t
)0x00000001Ë

	)

1925 
	#COMP2_CSR_COMP2MODE
 ((
uöt32_t
)0x0000000CË

	)

1926 
	#COMP2_CSR_COMP2MODE_0
 ((
uöt32_t
)0x00000004Ë

	)

1927 
	#COMP2_CSR_COMP2MODE_1
 ((
uöt32_t
)0x00000008Ë

	)

1928 
	#COMP2_CSR_COMP2INSEL
 ((
uöt32_t
)0x00000070Ë

	)

1929 
	#COMP2_CSR_COMP2INSEL_0
 ((
uöt32_t
)0x00000010Ë

	)

1930 
	#COMP2_CSR_COMP2INSEL_1
 ((
uöt32_t
)0x00000020Ë

	)

1931 
	#COMP2_CSR_COMP2INSEL_2
 ((
uöt32_t
)0x00000040Ë

	)

1932 
	#COMP2_CSR_COMP2NONINSEL
 ((
uöt32_t
)0x00000080Ë

	)

1933 
	#COMP2_CSR_COMP2WNDWEN
 ((
uöt32_t
)0x00000200Ë

	)

1934 
	#COMP2_CSR_COMP2OUTSEL
 ((
uöt32_t
)0x00003C00Ë

	)

1935 
	#COMP2_CSR_COMP2OUTSEL_0
 ((
uöt32_t
)0x00000400Ë

	)

1936 
	#COMP2_CSR_COMP2OUTSEL_1
 ((
uöt32_t
)0x00000800Ë

	)

1937 
	#COMP2_CSR_COMP2OUTSEL_2
 ((
uöt32_t
)0x00001000Ë

	)

1938 
	#COMP2_CSR_COMP2OUTSEL_3
 ((
uöt32_t
)0x00002000Ë

	)

1939 
	#COMP2_CSR_COMP2POL
 ((
uöt32_t
)0x00008000Ë

	)

1940 
	#COMP2_CSR_COMP2HYST
 ((
uöt32_t
)0x00030000Ë

	)

1941 
	#COMP2_CSR_COMP2HYST_0
 ((
uöt32_t
)0x00010000Ë

	)

1942 
	#COMP2_CSR_COMP2HYST_1
 ((
uöt32_t
)0x00020000Ë

	)

1943 
	#COMP2_CSR_COMP2BLANKING
 ((
uöt32_t
)0x000C0000Ë

	)

1944 
	#COMP2_CSR_COMP2BLANKING_0
 ((
uöt32_t
)0x00040000Ë

	)

1945 
	#COMP2_CSR_COMP2BLANKING_1
 ((
uöt32_t
)0x00080000Ë

	)

1946 
	#COMP2_CSR_COMP2BLANKING_2
 ((
uöt32_t
)0x00100000Ë

	)

1947 
	#COMP2_CSR_COMP2OUT
 ((
uöt32_t
)0x40000000Ë

	)

1948 
	#COMP2_CSR_COMP2LOCK
 ((
uöt32_t
)0x80000000Ë

	)

1951 
	#COMP3_CSR_COMP3EN
 ((
uöt32_t
)0x00000001Ë

	)

1952 
	#COMP3_CSR_COMP3MODE
 ((
uöt32_t
)0x0000000CË

	)

1953 
	#COMP3_CSR_COMP3MODE_0
 ((
uöt32_t
)0x00000004Ë

	)

1954 
	#COMP3_CSR_COMP3MODE_1
 ((
uöt32_t
)0x00000008Ë

	)

1955 
	#COMP3_CSR_COMP3INSEL
 ((
uöt32_t
)0x00000070Ë

	)

1956 
	#COMP3_CSR_COMP3INSEL_0
 ((
uöt32_t
)0x00000010Ë

	)

1957 
	#COMP3_CSR_COMP3INSEL_1
 ((
uöt32_t
)0x00000020Ë

	)

1958 
	#COMP3_CSR_COMP3INSEL_2
 ((
uöt32_t
)0x00000040Ë

	)

1959 
	#COMP3_CSR_COMP3NONINSEL
 ((
uöt32_t
)0x00000080Ë

	)

1960 
	#COMP3_CSR_COMP3OUTSEL
 ((
uöt32_t
)0x00003C00Ë

	)

1961 
	#COMP3_CSR_COMP3OUTSEL_0
 ((
uöt32_t
)0x00000400Ë

	)

1962 
	#COMP3_CSR_COMP3OUTSEL_1
 ((
uöt32_t
)0x00000800Ë

	)

1963 
	#COMP3_CSR_COMP3OUTSEL_2
 ((
uöt32_t
)0x00001000Ë

	)

1964 
	#COMP3_CSR_COMP3OUTSEL_3
 ((
uöt32_t
)0x00002000Ë

	)

1965 
	#COMP3_CSR_COMP3POL
 ((
uöt32_t
)0x00008000Ë

	)

1966 
	#COMP3_CSR_COMP3HYST
 ((
uöt32_t
)0x00030000Ë

	)

1967 
	#COMP3_CSR_COMP3HYST_0
 ((
uöt32_t
)0x00010000Ë

	)

1968 
	#COMP3_CSR_COMP3HYST_1
 ((
uöt32_t
)0x00020000Ë

	)

1969 
	#COMP3_CSR_COMP3BLANKING
 ((
uöt32_t
)0x000C0000Ë

	)

1970 
	#COMP3_CSR_COMP3BLANKING_0
 ((
uöt32_t
)0x00040000Ë

	)

1971 
	#COMP3_CSR_COMP3BLANKING_1
 ((
uöt32_t
)0x00080000Ë

	)

1972 
	#COMP3_CSR_COMP3BLANKING_2
 ((
uöt32_t
)0x00100000Ë

	)

1973 
	#COMP3_CSR_COMP3OUT
 ((
uöt32_t
)0x40000000Ë

	)

1974 
	#COMP3_CSR_COMP3LOCK
 ((
uöt32_t
)0x80000000Ë

	)

1977 
	#COMP4_CSR_COMP4EN
 ((
uöt32_t
)0x00000001Ë

	)

1978 
	#COMP4_CSR_COMP4MODE
 ((
uöt32_t
)0x0000000CË

	)

1979 
	#COMP4_CSR_COMP4MODE_0
 ((
uöt32_t
)0x00000004Ë

	)

1980 
	#COMP4_CSR_COMP4MODE_1
 ((
uöt32_t
)0x00000008Ë

	)

1981 
	#COMP4_CSR_COMP4INSEL
 ((
uöt32_t
)0x00000070Ë

	)

1982 
	#COMP4_CSR_COMP4INSEL_0
 ((
uöt32_t
)0x00000010Ë

	)

1983 
	#COMP4_CSR_COMP4INSEL_1
 ((
uöt32_t
)0x00000020Ë

	)

1984 
	#COMP4_CSR_COMP4INSEL_2
 ((
uöt32_t
)0x00000040Ë

	)

1985 
	#COMP4_CSR_COMP4NONINSEL
 ((
uöt32_t
)0x00000080Ë

	)

1986 
	#COMP4_CSR_COMP4WNDWEN
 ((
uöt32_t
)0x00000200Ë

	)

1987 
	#COMP4_CSR_COMP4OUTSEL
 ((
uöt32_t
)0x00003C00Ë

	)

1988 
	#COMP4_CSR_COMP4OUTSEL_0
 ((
uöt32_t
)0x00000400Ë

	)

1989 
	#COMP4_CSR_COMP4OUTSEL_1
 ((
uöt32_t
)0x00000800Ë

	)

1990 
	#COMP4_CSR_COMP4OUTSEL_2
 ((
uöt32_t
)0x00001000Ë

	)

1991 
	#COMP4_CSR_COMP4OUTSEL_3
 ((
uöt32_t
)0x00002000Ë

	)

1992 
	#COMP4_CSR_COMP4POL
 ((
uöt32_t
)0x00008000Ë

	)

1993 
	#COMP4_CSR_COMP4HYST
 ((
uöt32_t
)0x00030000Ë

	)

1994 
	#COMP4_CSR_COMP4HYST_0
 ((
uöt32_t
)0x00010000Ë

	)

1995 
	#COMP4_CSR_COMP4HYST_1
 ((
uöt32_t
)0x00020000Ë

	)

1996 
	#COMP4_CSR_COMP4BLANKING
 ((
uöt32_t
)0x000C0000Ë

	)

1997 
	#COMP4_CSR_COMP4BLANKING_0
 ((
uöt32_t
)0x00040000Ë

	)

1998 
	#COMP4_CSR_COMP4BLANKING_1
 ((
uöt32_t
)0x00080000Ë

	)

1999 
	#COMP4_CSR_COMP4BLANKING_2
 ((
uöt32_t
)0x00100000Ë

	)

2000 
	#COMP4_CSR_COMP4OUT
 ((
uöt32_t
)0x40000000Ë

	)

2001 
	#COMP4_CSR_COMP4LOCK
 ((
uöt32_t
)0x80000000Ë

	)

2004 
	#COMP5_CSR_COMP5EN
 ((
uöt32_t
)0x00000001Ë

	)

2005 
	#COMP5_CSR_COMP5MODE
 ((
uöt32_t
)0x0000000CË

	)

2006 
	#COMP5_CSR_COMP5MODE_0
 ((
uöt32_t
)0x00000004Ë

	)

2007 
	#COMP5_CSR_COMP5MODE_1
 ((
uöt32_t
)0x00000008Ë

	)

2008 
	#COMP5_CSR_COMP5INSEL
 ((
uöt32_t
)0x00000070Ë

	)

2009 
	#COMP5_CSR_COMP5INSEL_0
 ((
uöt32_t
)0x00000010Ë

	)

2010 
	#COMP5_CSR_COMP5INSEL_1
 ((
uöt32_t
)0x00000020Ë

	)

2011 
	#COMP5_CSR_COMP5INSEL_2
 ((
uöt32_t
)0x00000040Ë

	)

2012 
	#COMP5_CSR_COMP5NONINSEL
 ((
uöt32_t
)0x00000080Ë

	)

2013 
	#COMP5_CSR_COMP5OUTSEL
 ((
uöt32_t
)0x00003C00Ë

	)

2014 
	#COMP5_CSR_COMP5OUTSEL_0
 ((
uöt32_t
)0x00000400Ë

	)

2015 
	#COMP5_CSR_COMP5OUTSEL_1
 ((
uöt32_t
)0x00000800Ë

	)

2016 
	#COMP5_CSR_COMP5OUTSEL_2
 ((
uöt32_t
)0x00001000Ë

	)

2017 
	#COMP5_CSR_COMP5OUTSEL_3
 ((
uöt32_t
)0x00002000Ë

	)

2018 
	#COMP5_CSR_COMP5POL
 ((
uöt32_t
)0x00008000Ë

	)

2019 
	#COMP5_CSR_COMP5HYST
 ((
uöt32_t
)0x00030000Ë

	)

2020 
	#COMP5_CSR_COMP5HYST_0
 ((
uöt32_t
)0x00010000Ë

	)

2021 
	#COMP5_CSR_COMP5HYST_1
 ((
uöt32_t
)0x00020000Ë

	)

2022 
	#COMP5_CSR_COMP5BLANKING
 ((
uöt32_t
)0x000C0000Ë

	)

2023 
	#COMP5_CSR_COMP5BLANKING_0
 ((
uöt32_t
)0x00040000Ë

	)

2024 
	#COMP5_CSR_COMP5BLANKING_1
 ((
uöt32_t
)0x00080000Ë

	)

2025 
	#COMP5_CSR_COMP5BLANKING_2
 ((
uöt32_t
)0x00100000Ë

	)

2026 
	#COMP5_CSR_COMP5OUT
 ((
uöt32_t
)0x40000000Ë

	)

2027 
	#COMP5_CSR_COMP5LOCK
 ((
uöt32_t
)0x80000000Ë

	)

2030 
	#COMP6_CSR_COMP6EN
 ((
uöt32_t
)0x00000001Ë

	)

2031 
	#COMP6_CSR_COMP6MODE
 ((
uöt32_t
)0x0000000CË

	)

2032 
	#COMP6_CSR_COMP6MODE_0
 ((
uöt32_t
)0x00000004Ë

	)

2033 
	#COMP6_CSR_COMP6MODE_1
 ((
uöt32_t
)0x00000008Ë

	)

2034 
	#COMP6_CSR_COMP6INSEL
 ((
uöt32_t
)0x00000070Ë

	)

2035 
	#COMP6_CSR_COMP6INSEL_0
 ((
uöt32_t
)0x00000010Ë

	)

2036 
	#COMP6_CSR_COMP6INSEL_1
 ((
uöt32_t
)0x00000020Ë

	)

2037 
	#COMP6_CSR_COMP6INSEL_2
 ((
uöt32_t
)0x00000040Ë

	)

2038 
	#COMP6_CSR_COMP6NONINSEL
 ((
uöt32_t
)0x00000080Ë

	)

2039 
	#COMP6_CSR_COMP6WNDWEN
 ((
uöt32_t
)0x00000200Ë

	)

2040 
	#COMP6_CSR_COMP6OUTSEL
 ((
uöt32_t
)0x00003C00Ë

	)

2041 
	#COMP6_CSR_COMP6OUTSEL_0
 ((
uöt32_t
)0x00000400Ë

	)

2042 
	#COMP6_CSR_COMP6OUTSEL_1
 ((
uöt32_t
)0x00000800Ë

	)

2043 
	#COMP6_CSR_COMP6OUTSEL_2
 ((
uöt32_t
)0x00001000Ë

	)

2044 
	#COMP6_CSR_COMP6OUTSEL_3
 ((
uöt32_t
)0x00002000Ë

	)

2045 
	#COMP6_CSR_COMP6POL
 ((
uöt32_t
)0x00008000Ë

	)

2046 
	#COMP6_CSR_COMP6HYST
 ((
uöt32_t
)0x00030000Ë

	)

2047 
	#COMP6_CSR_COMP6HYST_0
 ((
uöt32_t
)0x00010000Ë

	)

2048 
	#COMP6_CSR_COMP6HYST_1
 ((
uöt32_t
)0x00020000Ë

	)

2049 
	#COMP6_CSR_COMP6BLANKING
 ((
uöt32_t
)0x000C0000Ë

	)

2050 
	#COMP6_CSR_COMP6BLANKING_0
 ((
uöt32_t
)0x00040000Ë

	)

2051 
	#COMP6_CSR_COMP6BLANKING_1
 ((
uöt32_t
)0x00080000Ë

	)

2052 
	#COMP6_CSR_COMP6BLANKING_2
 ((
uöt32_t
)0x00100000Ë

	)

2053 
	#COMP6_CSR_COMP6OUT
 ((
uöt32_t
)0x40000000Ë

	)

2054 
	#COMP6_CSR_COMP6LOCK
 ((
uöt32_t
)0x80000000Ë

	)

2057 
	#COMP7_CSR_COMP7EN
 ((
uöt32_t
)0x00000001Ë

	)

2058 
	#COMP7_CSR_COMP7MODE
 ((
uöt32_t
)0x0000000CË

	)

2059 
	#COMP7_CSR_COMP7MODE_0
 ((
uöt32_t
)0x00000004Ë

	)

2060 
	#COMP7_CSR_COMP7MODE_1
 ((
uöt32_t
)0x00000008Ë

	)

2061 
	#COMP7_CSR_COMP7INSEL
 ((
uöt32_t
)0x00000070Ë

	)

2062 
	#COMP7_CSR_COMP7INSEL_0
 ((
uöt32_t
)0x00000010Ë

	)

2063 
	#COMP7_CSR_COMP7INSEL_1
 ((
uöt32_t
)0x00000020Ë

	)

2064 
	#COMP7_CSR_COMP7INSEL_2
 ((
uöt32_t
)0x00000040Ë

	)

2065 
	#COMP7_CSR_COMP7NONINSEL
 ((
uöt32_t
)0x00000080Ë

	)

2066 
	#COMP7_CSR_COMP7OUTSEL
 ((
uöt32_t
)0x00003C00Ë

	)

2067 
	#COMP7_CSR_COMP7OUTSEL_0
 ((
uöt32_t
)0x00000400Ë

	)

2068 
	#COMP7_CSR_COMP7OUTSEL_1
 ((
uöt32_t
)0x00000800Ë

	)

2069 
	#COMP7_CSR_COMP7OUTSEL_2
 ((
uöt32_t
)0x00001000Ë

	)

2070 
	#COMP7_CSR_COMP7OUTSEL_3
 ((
uöt32_t
)0x00002000Ë

	)

2071 
	#COMP7_CSR_COMP7POL
 ((
uöt32_t
)0x00008000Ë

	)

2072 
	#COMP7_CSR_COMP7HYST
 ((
uöt32_t
)0x00030000Ë

	)

2073 
	#COMP7_CSR_COMP7HYST_0
 ((
uöt32_t
)0x00010000Ë

	)

2074 
	#COMP7_CSR_COMP7HYST_1
 ((
uöt32_t
)0x00020000Ë

	)

2075 
	#COMP7_CSR_COMP7BLANKING
 ((
uöt32_t
)0x000C0000Ë

	)

2076 
	#COMP7_CSR_COMP7BLANKING_0
 ((
uöt32_t
)0x00040000Ë

	)

2077 
	#COMP7_CSR_COMP7BLANKING_1
 ((
uöt32_t
)0x00080000Ë

	)

2078 
	#COMP7_CSR_COMP7BLANKING_2
 ((
uöt32_t
)0x00100000Ë

	)

2079 
	#COMP7_CSR_COMP7OUT
 ((
uöt32_t
)0x40000000Ë

	)

2080 
	#COMP7_CSR_COMP7LOCK
 ((
uöt32_t
)0x80000000Ë

	)

2083 
	#COMP_CSR_COMPxEN
 ((
uöt32_t
)0x00000001Ë

	)

2084 
	#COMP_CSR_COMP1SW1
 ((
uöt32_t
)0x00000002Ë

	)

2085 
	#COMP_CSR_COMPxMODE
 ((
uöt32_t
)0x0000000CË

	)

2086 
	#COMP_CSR_COMPxMODE_0
 ((
uöt32_t
)0x00000004Ë

	)

2087 
	#COMP_CSR_COMPxMODE_1
 ((
uöt32_t
)0x00000008Ë

	)

2088 
	#COMP_CSR_COMPxINSEL
 ((
uöt32_t
)0x00000070Ë

	)

2089 
	#COMP_CSR_COMPxINSEL_0
 ((
uöt32_t
)0x00000010Ë

	)

2090 
	#COMP_CSR_COMPxINSEL_1
 ((
uöt32_t
)0x00000020Ë

	)

2091 
	#COMP_CSR_COMPxINSEL_2
 ((
uöt32_t
)0x00000040Ë

	)

2092 
	#COMP_CSR_COMPxNONINSEL
 ((
uöt32_t
)0x00000080Ë

	)

2093 
	#COMP_CSR_COMPxWNDWEN
 ((
uöt32_t
)0x00000200Ë

	)

2094 
	#COMP_CSR_COMPxOUTSEL
 ((
uöt32_t
)0x00003C00Ë

	)

2095 
	#COMP_CSR_COMPxOUTSEL_0
 ((
uöt32_t
)0x00000400Ë

	)

2096 
	#COMP_CSR_COMPxOUTSEL_1
 ((
uöt32_t
)0x00000800Ë

	)

2097 
	#COMP_CSR_COMPxOUTSEL_2
 ((
uöt32_t
)0x00001000Ë

	)

2098 
	#COMP_CSR_COMPxOUTSEL_3
 ((
uöt32_t
)0x00002000Ë

	)

2099 
	#COMP_CSR_COMPxPOL
 ((
uöt32_t
)0x00008000Ë

	)

2100 
	#COMP_CSR_COMPxHYST
 ((
uöt32_t
)0x00030000Ë

	)

2101 
	#COMP_CSR_COMPxHYST_0
 ((
uöt32_t
)0x00010000Ë

	)

2102 
	#COMP_CSR_COMPxHYST_1
 ((
uöt32_t
)0x00020000Ë

	)

2103 
	#COMP_CSR_COMPxBLANKING
 ((
uöt32_t
)0x000C0000Ë

	)

2104 
	#COMP_CSR_COMPxBLANKING_0
 ((
uöt32_t
)0x00040000Ë

	)

2105 
	#COMP_CSR_COMPxBLANKING_1
 ((
uöt32_t
)0x00080000Ë

	)

2106 
	#COMP_CSR_COMPxBLANKING_2
 ((
uöt32_t
)0x00100000Ë

	)

2107 
	#COMP_CSR_COMPxOUT
 ((
uöt32_t
)0x40000000Ë

	)

2108 
	#COMP_CSR_COMPxLOCK
 ((
uöt32_t
)0x80000000Ë

	)

2116 
	#OPAMP1_CSR_OPAMP1EN
 ((
uöt32_t
)0x00000001Ë

	)

2117 
	#OPAMP1_CSR_FORCEVP
 ((
uöt32_t
)0x00000002Ë

	)

2118 
	#OPAMP1_CSR_VPSEL
 ((
uöt32_t
)0x0000000CË

	)

2119 
	#OPAMP1_CSR_VPSEL_0
 ((
uöt32_t
)0x00000004Ë

	)

2120 
	#OPAMP1_CSR_VPSEL_1
 ((
uöt32_t
)0x00000008Ë

	)

2121 
	#OPAMP1_CSR_VMSEL
 ((
uöt32_t
)0x00000060Ë

	)

2122 
	#OPAMP1_CSR_VMSEL_0
 ((
uöt32_t
)0x00000020Ë

	)

2123 
	#OPAMP1_CSR_VMSEL_1
 ((
uöt32_t
)0x00000040Ë

	)

2124 
	#OPAMP1_CSR_TCMEN
 ((
uöt32_t
)0x00000080Ë

	)

2125 
	#OPAMP1_CSR_VMSSEL
 ((
uöt32_t
)0x00000100Ë

	)

2126 
	#OPAMP1_CSR_VPSSEL
 ((
uöt32_t
)0x00000600Ë

	)

2127 
	#OPAMP1_CSR_VPSSEL_0
 ((
uöt32_t
)0x00000200Ë

	)

2128 
	#OPAMP1_CSR_VPSSEL_1
 ((
uöt32_t
)0x00000400Ë

	)

2129 
	#OPAMP1_CSR_CALON
 ((
uöt32_t
)0x00000800Ë

	)

2130 
	#OPAMP1_CSR_CALSEL
 ((
uöt32_t
)0x00003000Ë

	)

2131 
	#OPAMP1_CSR_CALSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

2132 
	#OPAMP1_CSR_CALSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

2133 
	#OPAMP1_CSR_PGGAIN
 ((
uöt32_t
)0x0003C000Ë

	)

2134 
	#OPAMP1_CSR_PGGAIN_0
 ((
uöt32_t
)0x00004000Ë

	)

2135 
	#OPAMP1_CSR_PGGAIN_1
 ((
uöt32_t
)0x00008000Ë

	)

2136 
	#OPAMP1_CSR_PGGAIN_2
 ((
uöt32_t
)0x00010000Ë

	)

2137 
	#OPAMP1_CSR_PGGAIN_3
 ((
uöt32_t
)0x00020000Ë

	)

2138 
	#OPAMP1_CSR_USERTRIM
 ((
uöt32_t
)0x00040000Ë

	)

2139 
	#OPAMP1_CSR_TRIMOFFSETP
 ((
uöt32_t
)0x00F80000Ë

	)

2140 
	#OPAMP1_CSR_TRIMOFFSETN
 ((
uöt32_t
)0x1F000000Ë

	)

2141 
	#OPAMP1_CSR_TSTREF
 ((
uöt32_t
)0x20000000Ë

	)

2142 
	#OPAMP1_CSR_OUTCAL
 ((
uöt32_t
)0x40000000Ë

	)

2143 
	#OPAMP1_CSR_LOCK
 ((
uöt32_t
)0x80000000Ë

	)

2146 
	#OPAMP2_CSR_OPAMP2EN
 ((
uöt32_t
)0x00000001Ë

	)

2147 
	#OPAMP2_CSR_FORCEVP
 ((
uöt32_t
)0x00000002Ë

	)

2148 
	#OPAMP2_CSR_VPSEL
 ((
uöt32_t
)0x0000000CË

	)

2149 
	#OPAMP2_CSR_VPSEL_0
 ((
uöt32_t
)0x00000004Ë

	)

2150 
	#OPAMP2_CSR_VPSEL_1
 ((
uöt32_t
)0x00000008Ë

	)

2151 
	#OPAMP2_CSR_VMSEL
 ((
uöt32_t
)0x00000060Ë

	)

2152 
	#OPAMP2_CSR_VMSEL_0
 ((
uöt32_t
)0x00000020Ë

	)

2153 
	#OPAMP2_CSR_VMSEL_1
 ((
uöt32_t
)0x00000040Ë

	)

2154 
	#OPAMP2_CSR_TCMEN
 ((
uöt32_t
)0x00000080Ë

	)

2155 
	#OPAMP2_CSR_VMSSEL
 ((
uöt32_t
)0x00000100Ë

	)

2156 
	#OPAMP2_CSR_VPSSEL
 ((
uöt32_t
)0x00000600Ë

	)

2157 
	#OPAMP2_CSR_VPSSEL_0
 ((
uöt32_t
)0x00000200Ë

	)

2158 
	#OPAMP2_CSR_VPSSEL_1
 ((
uöt32_t
)0x00000400Ë

	)

2159 
	#OPAMP2_CSR_CALON
 ((
uöt32_t
)0x00000800Ë

	)

2160 
	#OPAMP2_CSR_CALSEL
 ((
uöt32_t
)0x00003000Ë

	)

2161 
	#OPAMP2_CSR_CALSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

2162 
	#OPAMP2_CSR_CALSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

2163 
	#OPAMP2_CSR_PGGAIN
 ((
uöt32_t
)0x0003C000Ë

	)

2164 
	#OPAMP2_CSR_PGGAIN_0
 ((
uöt32_t
)0x00004000Ë

	)

2165 
	#OPAMP2_CSR_PGGAIN_1
 ((
uöt32_t
)0x00008000Ë

	)

2166 
	#OPAMP2_CSR_PGGAIN_2
 ((
uöt32_t
)0x00010000Ë

	)

2167 
	#OPAMP2_CSR_PGGAIN_3
 ((
uöt32_t
)0x00020000Ë

	)

2168 
	#OPAMP2_CSR_USERTRIM
 ((
uöt32_t
)0x00040000Ë

	)

2169 
	#OPAMP2_CSR_TRIMOFFSETP
 ((
uöt32_t
)0x00F80000Ë

	)

2170 
	#OPAMP2_CSR_TRIMOFFSETN
 ((
uöt32_t
)0x1F000000Ë

	)

2171 
	#OPAMP2_CSR_TSTREF
 ((
uöt32_t
)0x20000000Ë

	)

2172 
	#OPAMP2_CSR_OUTCAL
 ((
uöt32_t
)0x40000000Ë

	)

2173 
	#OPAMP2_CSR_LOCK
 ((
uöt32_t
)0x80000000Ë

	)

2176 
	#OPAMP3_CSR_OPAMP3EN
 ((
uöt32_t
)0x00000001Ë

	)

2177 
	#OPAMP3_CSR_FORCEVP
 ((
uöt32_t
)0x00000002Ë

	)

2178 
	#OPAMP3_CSR_VPSEL
 ((
uöt32_t
)0x0000000CË

	)

2179 
	#OPAMP3_CSR_VPSEL_0
 ((
uöt32_t
)0x00000004Ë

	)

2180 
	#OPAMP3_CSR_VPSEL_1
 ((
uöt32_t
)0x00000008Ë

	)

2181 
	#OPAMP3_CSR_VMSEL
 ((
uöt32_t
)0x00000060Ë

	)

2182 
	#OPAMP3_CSR_VMSEL_0
 ((
uöt32_t
)0x00000020Ë

	)

2183 
	#OPAMP3_CSR_VMSEL_1
 ((
uöt32_t
)0x00000040Ë

	)

2184 
	#OPAMP3_CSR_TCMEN
 ((
uöt32_t
)0x00000080Ë

	)

2185 
	#OPAMP3_CSR_VMSSEL
 ((
uöt32_t
)0x00000100Ë

	)

2186 
	#OPAMP3_CSR_VPSSEL
 ((
uöt32_t
)0x00000600Ë

	)

2187 
	#OPAMP3_CSR_VPSSEL_0
 ((
uöt32_t
)0x00000200Ë

	)

2188 
	#OPAMP3_CSR_VPSSEL_1
 ((
uöt32_t
)0x00000400Ë

	)

2189 
	#OPAMP3_CSR_CALON
 ((
uöt32_t
)0x00000800Ë

	)

2190 
	#OPAMP3_CSR_CALSEL
 ((
uöt32_t
)0x00003000Ë

	)

2191 
	#OPAMP3_CSR_CALSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

2192 
	#OPAMP3_CSR_CALSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

2193 
	#OPAMP3_CSR_PGGAIN
 ((
uöt32_t
)0x0003C000Ë

	)

2194 
	#OPAMP3_CSR_PGGAIN_0
 ((
uöt32_t
)0x00004000Ë

	)

2195 
	#OPAMP3_CSR_PGGAIN_1
 ((
uöt32_t
)0x00008000Ë

	)

2196 
	#OPAMP3_CSR_PGGAIN_2
 ((
uöt32_t
)0x00010000Ë

	)

2197 
	#OPAMP3_CSR_PGGAIN_3
 ((
uöt32_t
)0x00020000Ë

	)

2198 
	#OPAMP3_CSR_USERTRIM
 ((
uöt32_t
)0x00040000Ë

	)

2199 
	#OPAMP3_CSR_TRIMOFFSETP
 ((
uöt32_t
)0x00F80000Ë

	)

2200 
	#OPAMP3_CSR_TRIMOFFSETN
 ((
uöt32_t
)0x1F000000Ë

	)

2201 
	#OPAMP3_CSR_TSTREF
 ((
uöt32_t
)0x20000000Ë

	)

2202 
	#OPAMP3_CSR_OUTCAL
 ((
uöt32_t
)0x40000000Ë

	)

2203 
	#OPAMP3_CSR_LOCK
 ((
uöt32_t
)0x80000000Ë

	)

2206 
	#OPAMP4_CSR_OPAMP4EN
 ((
uöt32_t
)0x00000001Ë

	)

2207 
	#OPAMP4_CSR_FORCEVP
 ((
uöt32_t
)0x00000002Ë

	)

2208 
	#OPAMP4_CSR_VPSEL
 ((
uöt32_t
)0x0000000CË

	)

2209 
	#OPAMP4_CSR_VPSEL_0
 ((
uöt32_t
)0x00000004Ë

	)

2210 
	#OPAMP4_CSR_VPSEL_1
 ((
uöt32_t
)0x00000008Ë

	)

2211 
	#OPAMP4_CSR_VMSEL
 ((
uöt32_t
)0x00000060Ë

	)

2212 
	#OPAMP4_CSR_VMSEL_0
 ((
uöt32_t
)0x00000020Ë

	)

2213 
	#OPAMP4_CSR_VMSEL_1
 ((
uöt32_t
)0x00000040Ë

	)

2214 
	#OPAMP4_CSR_TCMEN
 ((
uöt32_t
)0x00000080Ë

	)

2215 
	#OPAMP4_CSR_VMSSEL
 ((
uöt32_t
)0x00000100Ë

	)

2216 
	#OPAMP4_CSR_VPSSEL
 ((
uöt32_t
)0x00000600Ë

	)

2217 
	#OPAMP4_CSR_VPSSEL_0
 ((
uöt32_t
)0x00000200Ë

	)

2218 
	#OPAMP4_CSR_VPSSEL_1
 ((
uöt32_t
)0x00000400Ë

	)

2219 
	#OPAMP4_CSR_CALON
 ((
uöt32_t
)0x00000800Ë

	)

2220 
	#OPAMP4_CSR_CALSEL
 ((
uöt32_t
)0x00003000Ë

	)

2221 
	#OPAMP4_CSR_CALSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

2222 
	#OPAMP4_CSR_CALSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

2223 
	#OPAMP4_CSR_PGGAIN
 ((
uöt32_t
)0x0003C000Ë

	)

2224 
	#OPAMP4_CSR_PGGAIN_0
 ((
uöt32_t
)0x00004000Ë

	)

2225 
	#OPAMP4_CSR_PGGAIN_1
 ((
uöt32_t
)0x00008000Ë

	)

2226 
	#OPAMP4_CSR_PGGAIN_2
 ((
uöt32_t
)0x00010000Ë

	)

2227 
	#OPAMP4_CSR_PGGAIN_3
 ((
uöt32_t
)0x00020000Ë

	)

2228 
	#OPAMP4_CSR_USERTRIM
 ((
uöt32_t
)0x00040000Ë

	)

2229 
	#OPAMP4_CSR_TRIMOFFSETP
 ((
uöt32_t
)0x00F80000Ë

	)

2230 
	#OPAMP4_CSR_TRIMOFFSETN
 ((
uöt32_t
)0x1F000000Ë

	)

2231 
	#OPAMP4_CSR_TSTREF
 ((
uöt32_t
)0x20000000Ë

	)

2232 
	#OPAMP4_CSR_OUTCAL
 ((
uöt32_t
)0x40000000Ë

	)

2233 
	#OPAMP4_CSR_LOCK
 ((
uöt32_t
)0x80000000Ë

	)

2236 
	#OPAMP_CSR_OPAMPxEN
 ((
uöt32_t
)0x00000001Ë

	)

2237 
	#OPAMP_CSR_FORCEVP
 ((
uöt32_t
)0x00000002Ë

	)

2238 
	#OPAMP_CSR_VPSEL
 ((
uöt32_t
)0x0000000CË

	)

2239 
	#OPAMP_CSR_VPSEL_0
 ((
uöt32_t
)0x00000004Ë

	)

2240 
	#OPAMP_CSR_VPSEL_1
 ((
uöt32_t
)0x00000008Ë

	)

2241 
	#OPAMP_CSR_VMSEL
 ((
uöt32_t
)0x00000060Ë

	)

2242 
	#OPAMP_CSR_VMSEL_0
 ((
uöt32_t
)0x00000020Ë

	)

2243 
	#OPAMP_CSR_VMSEL_1
 ((
uöt32_t
)0x00000040Ë

	)

2244 
	#OPAMP_CSR_TCMEN
 ((
uöt32_t
)0x00000080Ë

	)

2245 
	#OPAMP_CSR_VMSSEL
 ((
uöt32_t
)0x00000100Ë

	)

2246 
	#OPAMP_CSR_VPSSEL
 ((
uöt32_t
)0x00000600Ë

	)

2247 
	#OPAMP_CSR_VPSSEL_0
 ((
uöt32_t
)0x00000200Ë

	)

2248 
	#OPAMP_CSR_VPSSEL_1
 ((
uöt32_t
)0x00000400Ë

	)

2249 
	#OPAMP_CSR_CALON
 ((
uöt32_t
)0x00000800Ë

	)

2250 
	#OPAMP_CSR_CALSEL
 ((
uöt32_t
)0x00003000Ë

	)

2251 
	#OPAMP_CSR_CALSEL_0
 ((
uöt32_t
)0x00001000Ë

	)

2252 
	#OPAMP_CSR_CALSEL_1
 ((
uöt32_t
)0x00002000Ë

	)

2253 
	#OPAMP_CSR_PGGAIN
 ((
uöt32_t
)0x0003C000Ë

	)

2254 
	#OPAMP_CSR_PGGAIN_0
 ((
uöt32_t
)0x00004000Ë

	)

2255 
	#OPAMP_CSR_PGGAIN_1
 ((
uöt32_t
)0x00008000Ë

	)

2256 
	#OPAMP_CSR_PGGAIN_2
 ((
uöt32_t
)0x00010000Ë

	)

2257 
	#OPAMP_CSR_PGGAIN_3
 ((
uöt32_t
)0x00020000Ë

	)

2258 
	#OPAMP_CSR_USERTRIM
 ((
uöt32_t
)0x00040000Ë

	)

2259 
	#OPAMP_CSR_TRIMOFFSETP
 ((
uöt32_t
)0x00F80000Ë

	)

2260 
	#OPAMP_CSR_TRIMOFFSETN
 ((
uöt32_t
)0x1F000000Ë

	)

2261 
	#OPAMP_CSR_TSTREF
 ((
uöt32_t
)0x20000000Ë

	)

2262 
	#OPAMP_CSR_OUTCAL
 ((
uöt32_t
)0x40000000Ë

	)

2263 
	#OPAMP_CSR_LOCK
 ((
uöt32_t
)0x80000000Ë

	)

2273 
	#CAN_MCR_INRQ
 ((
uöt16_t
)0x0001Ë

	)

2274 
	#CAN_MCR_SLEEP
 ((
uöt16_t
)0x0002Ë

	)

2275 
	#CAN_MCR_TXFP
 ((
uöt16_t
)0x0004Ë

	)

2276 
	#CAN_MCR_RFLM
 ((
uöt16_t
)0x0008Ë

	)

2277 
	#CAN_MCR_NART
 ((
uöt16_t
)0x0010Ë

	)

2278 
	#CAN_MCR_AWUM
 ((
uöt16_t
)0x0020Ë

	)

2279 
	#CAN_MCR_ABOM
 ((
uöt16_t
)0x0040Ë

	)

2280 
	#CAN_MCR_TTCM
 ((
uöt16_t
)0x0080Ë

	)

2281 
	#CAN_MCR_RESET
 ((
uöt16_t
)0x8000Ë

	)

2284 
	#CAN_MSR_INAK
 ((
uöt16_t
)0x0001Ë

	)

2285 
	#CAN_MSR_SLAK
 ((
uöt16_t
)0x0002Ë

	)

2286 
	#CAN_MSR_ERRI
 ((
uöt16_t
)0x0004Ë

	)

2287 
	#CAN_MSR_WKUI
 ((
uöt16_t
)0x0008Ë

	)

2288 
	#CAN_MSR_SLAKI
 ((
uöt16_t
)0x0010Ë

	)

2289 
	#CAN_MSR_TXM
 ((
uöt16_t
)0x0100Ë

	)

2290 
	#CAN_MSR_RXM
 ((
uöt16_t
)0x0200Ë

	)

2291 
	#CAN_MSR_SAMP
 ((
uöt16_t
)0x0400Ë

	)

2292 
	#CAN_MSR_RX
 ((
uöt16_t
)0x0800Ë

	)

2295 
	#CAN_TSR_RQCP0
 ((
uöt32_t
)0x00000001Ë

	)

2296 
	#CAN_TSR_TXOK0
 ((
uöt32_t
)0x00000002Ë

	)

2297 
	#CAN_TSR_ALST0
 ((
uöt32_t
)0x00000004Ë

	)

2298 
	#CAN_TSR_TERR0
 ((
uöt32_t
)0x00000008Ë

	)

2299 
	#CAN_TSR_ABRQ0
 ((
uöt32_t
)0x00000080Ë

	)

2300 
	#CAN_TSR_RQCP1
 ((
uöt32_t
)0x00000100Ë

	)

2301 
	#CAN_TSR_TXOK1
 ((
uöt32_t
)0x00000200Ë

	)

2302 
	#CAN_TSR_ALST1
 ((
uöt32_t
)0x00000400Ë

	)

2303 
	#CAN_TSR_TERR1
 ((
uöt32_t
)0x00000800Ë

	)

2304 
	#CAN_TSR_ABRQ1
 ((
uöt32_t
)0x00008000Ë

	)

2305 
	#CAN_TSR_RQCP2
 ((
uöt32_t
)0x00010000Ë

	)

2306 
	#CAN_TSR_TXOK2
 ((
uöt32_t
)0x00020000Ë

	)

2307 
	#CAN_TSR_ALST2
 ((
uöt32_t
)0x00040000Ë

	)

2308 
	#CAN_TSR_TERR2
 ((
uöt32_t
)0x00080000Ë

	)

2309 
	#CAN_TSR_ABRQ2
 ((
uöt32_t
)0x00800000Ë

	)

2310 
	#CAN_TSR_CODE
 ((
uöt32_t
)0x03000000Ë

	)

2312 
	#CAN_TSR_TME
 ((
uöt32_t
)0x1C000000Ë

	)

2313 
	#CAN_TSR_TME0
 ((
uöt32_t
)0x04000000Ë

	)

2314 
	#CAN_TSR_TME1
 ((
uöt32_t
)0x08000000Ë

	)

2315 
	#CAN_TSR_TME2
 ((
uöt32_t
)0x10000000Ë

	)

2317 
	#CAN_TSR_LOW
 ((
uöt32_t
)0xE0000000Ë

	)

2318 
	#CAN_TSR_LOW0
 ((
uöt32_t
)0x20000000Ë

	)

2319 
	#CAN_TSR_LOW1
 ((
uöt32_t
)0x40000000Ë

	)

2320 
	#CAN_TSR_LOW2
 ((
uöt32_t
)0x80000000Ë

	)

2323 
	#CAN_RF0R_FMP0
 ((
uöt8_t
)0x03Ë

	)

2324 
	#CAN_RF0R_FULL0
 ((
uöt8_t
)0x08Ë

	)

2325 
	#CAN_RF0R_FOVR0
 ((
uöt8_t
)0x10Ë

	)

2326 
	#CAN_RF0R_RFOM0
 ((
uöt8_t
)0x20Ë

	)

2329 
	#CAN_RF1R_FMP1
 ((
uöt8_t
)0x03Ë

	)

2330 
	#CAN_RF1R_FULL1
 ((
uöt8_t
)0x08Ë

	)

2331 
	#CAN_RF1R_FOVR1
 ((
uöt8_t
)0x10Ë

	)

2332 
	#CAN_RF1R_RFOM1
 ((
uöt8_t
)0x20Ë

	)

2335 
	#CAN_IER_TMEIE
 ((
uöt32_t
)0x00000001Ë

	)

2336 
	#CAN_IER_FMPIE0
 ((
uöt32_t
)0x00000002Ë

	)

2337 
	#CAN_IER_FFIE0
 ((
uöt32_t
)0x00000004Ë

	)

2338 
	#CAN_IER_FOVIE0
 ((
uöt32_t
)0x00000008Ë

	)

2339 
	#CAN_IER_FMPIE1
 ((
uöt32_t
)0x00000010Ë

	)

2340 
	#CAN_IER_FFIE1
 ((
uöt32_t
)0x00000020Ë

	)

2341 
	#CAN_IER_FOVIE1
 ((
uöt32_t
)0x00000040Ë

	)

2342 
	#CAN_IER_EWGIE
 ((
uöt32_t
)0x00000100Ë

	)

2343 
	#CAN_IER_EPVIE
 ((
uöt32_t
)0x00000200Ë

	)

2344 
	#CAN_IER_BOFIE
 ((
uöt32_t
)0x00000400Ë

	)

2345 
	#CAN_IER_LECIE
 ((
uöt32_t
)0x00000800Ë

	)

2346 
	#CAN_IER_ERRIE
 ((
uöt32_t
)0x00008000Ë

	)

2347 
	#CAN_IER_WKUIE
 ((
uöt32_t
)0x00010000Ë

	)

2348 
	#CAN_IER_SLKIE
 ((
uöt32_t
)0x00020000Ë

	)

2351 
	#CAN_ESR_EWGF
 ((
uöt32_t
)0x00000001Ë

	)

2352 
	#CAN_ESR_EPVF
 ((
uöt32_t
)0x00000002Ë

	)

2353 
	#CAN_ESR_BOFF
 ((
uöt32_t
)0x00000004Ë

	)

2355 
	#CAN_ESR_LEC
 ((
uöt32_t
)0x00000070Ë

	)

2356 
	#CAN_ESR_LEC_0
 ((
uöt32_t
)0x00000010Ë

	)

2357 
	#CAN_ESR_LEC_1
 ((
uöt32_t
)0x00000020Ë

	)

2358 
	#CAN_ESR_LEC_2
 ((
uöt32_t
)0x00000040Ë

	)

2360 
	#CAN_ESR_TEC
 ((
uöt32_t
)0x00FF0000Ë

	)

2361 
	#CAN_ESR_REC
 ((
uöt32_t
)0xFF000000Ë

	)

2364 
	#CAN_BTR_BRP
 ((
uöt32_t
)0x000003FFË

	)

2365 
	#CAN_BTR_TS1
 ((
uöt32_t
)0x000F0000Ë

	)

2366 
	#CAN_BTR_TS2
 ((
uöt32_t
)0x00700000Ë

	)

2367 
	#CAN_BTR_SJW
 ((
uöt32_t
)0x03000000Ë

	)

2368 
	#CAN_BTR_LBKM
 ((
uöt32_t
)0x40000000Ë

	)

2369 
	#CAN_BTR_SILM
 ((
uöt32_t
)0x80000000Ë

	)

2373 
	#CAN_TI0R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2374 
	#CAN_TI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2375 
	#CAN_TI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2376 
	#CAN_TI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2377 
	#CAN_TI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2380 
	#CAN_TDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2381 
	#CAN_TDT0R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2382 
	#CAN_TDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2385 
	#CAN_TDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2386 
	#CAN_TDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2387 
	#CAN_TDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2388 
	#CAN_TDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2391 
	#CAN_TDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2392 
	#CAN_TDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2393 
	#CAN_TDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2394 
	#CAN_TDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2397 
	#CAN_TI1R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2398 
	#CAN_TI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2399 
	#CAN_TI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2400 
	#CAN_TI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2401 
	#CAN_TI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2404 
	#CAN_TDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2405 
	#CAN_TDT1R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2406 
	#CAN_TDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2409 
	#CAN_TDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2410 
	#CAN_TDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2411 
	#CAN_TDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2412 
	#CAN_TDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2415 
	#CAN_TDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2416 
	#CAN_TDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2417 
	#CAN_TDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2418 
	#CAN_TDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2421 
	#CAN_TI2R_TXRQ
 ((
uöt32_t
)0x00000001Ë

	)

2422 
	#CAN_TI2R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2423 
	#CAN_TI2R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2424 
	#CAN_TI2R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2425 
	#CAN_TI2R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2428 
	#CAN_TDT2R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2429 
	#CAN_TDT2R_TGT
 ((
uöt32_t
)0x00000100Ë

	)

2430 
	#CAN_TDT2R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2433 
	#CAN_TDL2R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2434 
	#CAN_TDL2R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2435 
	#CAN_TDL2R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2436 
	#CAN_TDL2R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2439 
	#CAN_TDH2R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2440 
	#CAN_TDH2R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2441 
	#CAN_TDH2R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2442 
	#CAN_TDH2R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2445 
	#CAN_RI0R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2446 
	#CAN_RI0R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2447 
	#CAN_RI0R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2448 
	#CAN_RI0R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2451 
	#CAN_RDT0R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2452 
	#CAN_RDT0R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2453 
	#CAN_RDT0R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2456 
	#CAN_RDL0R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2457 
	#CAN_RDL0R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2458 
	#CAN_RDL0R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2459 
	#CAN_RDL0R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2462 
	#CAN_RDH0R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2463 
	#CAN_RDH0R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2464 
	#CAN_RDH0R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2465 
	#CAN_RDH0R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2468 
	#CAN_RI1R_RTR
 ((
uöt32_t
)0x00000002Ë

	)

2469 
	#CAN_RI1R_IDE
 ((
uöt32_t
)0x00000004Ë

	)

2470 
	#CAN_RI1R_EXID
 ((
uöt32_t
)0x001FFFF8Ë

	)

2471 
	#CAN_RI1R_STID
 ((
uöt32_t
)0xFFE00000Ë

	)

2474 
	#CAN_RDT1R_DLC
 ((
uöt32_t
)0x0000000FË

	)

2475 
	#CAN_RDT1R_FMI
 ((
uöt32_t
)0x0000FF00Ë

	)

2476 
	#CAN_RDT1R_TIME
 ((
uöt32_t
)0xFFFF0000Ë

	)

2479 
	#CAN_RDL1R_DATA0
 ((
uöt32_t
)0x000000FFË

	)

2480 
	#CAN_RDL1R_DATA1
 ((
uöt32_t
)0x0000FF00Ë

	)

2481 
	#CAN_RDL1R_DATA2
 ((
uöt32_t
)0x00FF0000Ë

	)

2482 
	#CAN_RDL1R_DATA3
 ((
uöt32_t
)0xFF000000Ë

	)

2485 
	#CAN_RDH1R_DATA4
 ((
uöt32_t
)0x000000FFË

	)

2486 
	#CAN_RDH1R_DATA5
 ((
uöt32_t
)0x0000FF00Ë

	)

2487 
	#CAN_RDH1R_DATA6
 ((
uöt32_t
)0x00FF0000Ë

	)

2488 
	#CAN_RDH1R_DATA7
 ((
uöt32_t
)0xFF000000Ë

	)

2492 
	#CAN_FMR_FINIT
 ((
uöt8_t
)0x01Ë

	)

2495 
	#CAN_FM1R_FBM
 ((
uöt16_t
)0x3FFFË

	)

2496 
	#CAN_FM1R_FBM0
 ((
uöt16_t
)0x0001Ë

	)

2497 
	#CAN_FM1R_FBM1
 ((
uöt16_t
)0x0002Ë

	)

2498 
	#CAN_FM1R_FBM2
 ((
uöt16_t
)0x0004Ë

	)

2499 
	#CAN_FM1R_FBM3
 ((
uöt16_t
)0x0008Ë

	)

2500 
	#CAN_FM1R_FBM4
 ((
uöt16_t
)0x0010Ë

	)

2501 
	#CAN_FM1R_FBM5
 ((
uöt16_t
)0x0020Ë

	)

2502 
	#CAN_FM1R_FBM6
 ((
uöt16_t
)0x0040Ë

	)

2503 
	#CAN_FM1R_FBM7
 ((
uöt16_t
)0x0080Ë

	)

2504 
	#CAN_FM1R_FBM8
 ((
uöt16_t
)0x0100Ë

	)

2505 
	#CAN_FM1R_FBM9
 ((
uöt16_t
)0x0200Ë

	)

2506 
	#CAN_FM1R_FBM10
 ((
uöt16_t
)0x0400Ë

	)

2507 
	#CAN_FM1R_FBM11
 ((
uöt16_t
)0x0800Ë

	)

2508 
	#CAN_FM1R_FBM12
 ((
uöt16_t
)0x1000Ë

	)

2509 
	#CAN_FM1R_FBM13
 ((
uöt16_t
)0x2000Ë

	)

2512 
	#CAN_FS1R_FSC
 ((
uöt16_t
)0x3FFFË

	)

2513 
	#CAN_FS1R_FSC0
 ((
uöt16_t
)0x0001Ë

	)

2514 
	#CAN_FS1R_FSC1
 ((
uöt16_t
)0x0002Ë

	)

2515 
	#CAN_FS1R_FSC2
 ((
uöt16_t
)0x0004Ë

	)

2516 
	#CAN_FS1R_FSC3
 ((
uöt16_t
)0x0008Ë

	)

2517 
	#CAN_FS1R_FSC4
 ((
uöt16_t
)0x0010Ë

	)

2518 
	#CAN_FS1R_FSC5
 ((
uöt16_t
)0x0020Ë

	)

2519 
	#CAN_FS1R_FSC6
 ((
uöt16_t
)0x0040Ë

	)

2520 
	#CAN_FS1R_FSC7
 ((
uöt16_t
)0x0080Ë

	)

2521 
	#CAN_FS1R_FSC8
 ((
uöt16_t
)0x0100Ë

	)

2522 
	#CAN_FS1R_FSC9
 ((
uöt16_t
)0x0200Ë

	)

2523 
	#CAN_FS1R_FSC10
 ((
uöt16_t
)0x0400Ë

	)

2524 
	#CAN_FS1R_FSC11
 ((
uöt16_t
)0x0800Ë

	)

2525 
	#CAN_FS1R_FSC12
 ((
uöt16_t
)0x1000Ë

	)

2526 
	#CAN_FS1R_FSC13
 ((
uöt16_t
)0x2000Ë

	)

2529 
	#CAN_FFA1R_FFA
 ((
uöt16_t
)0x3FFFË

	)

2530 
	#CAN_FFA1R_FFA0
 ((
uöt16_t
)0x0001Ë

	)

2531 
	#CAN_FFA1R_FFA1
 ((
uöt16_t
)0x0002Ë

	)

2532 
	#CAN_FFA1R_FFA2
 ((
uöt16_t
)0x0004Ë

	)

2533 
	#CAN_FFA1R_FFA3
 ((
uöt16_t
)0x0008Ë

	)

2534 
	#CAN_FFA1R_FFA4
 ((
uöt16_t
)0x0010Ë

	)

2535 
	#CAN_FFA1R_FFA5
 ((
uöt16_t
)0x0020Ë

	)

2536 
	#CAN_FFA1R_FFA6
 ((
uöt16_t
)0x0040Ë

	)

2537 
	#CAN_FFA1R_FFA7
 ((
uöt16_t
)0x0080Ë

	)

2538 
	#CAN_FFA1R_FFA8
 ((
uöt16_t
)0x0100Ë

	)

2539 
	#CAN_FFA1R_FFA9
 ((
uöt16_t
)0x0200Ë

	)

2540 
	#CAN_FFA1R_FFA10
 ((
uöt16_t
)0x0400Ë

	)

2541 
	#CAN_FFA1R_FFA11
 ((
uöt16_t
)0x0800Ë

	)

2542 
	#CAN_FFA1R_FFA12
 ((
uöt16_t
)0x1000Ë

	)

2543 
	#CAN_FFA1R_FFA13
 ((
uöt16_t
)0x2000Ë

	)

2546 
	#CAN_FA1R_FACT
 ((
uöt16_t
)0x3FFFË

	)

2547 
	#CAN_FA1R_FACT0
 ((
uöt16_t
)0x0001Ë

	)

2548 
	#CAN_FA1R_FACT1
 ((
uöt16_t
)0x0002Ë

	)

2549 
	#CAN_FA1R_FACT2
 ((
uöt16_t
)0x0004Ë

	)

2550 
	#CAN_FA1R_FACT3
 ((
uöt16_t
)0x0008Ë

	)

2551 
	#CAN_FA1R_FACT4
 ((
uöt16_t
)0x0010Ë

	)

2552 
	#CAN_FA1R_FACT5
 ((
uöt16_t
)0x0020Ë

	)

2553 
	#CAN_FA1R_FACT6
 ((
uöt16_t
)0x0040Ë

	)

2554 
	#CAN_FA1R_FACT7
 ((
uöt16_t
)0x0080Ë

	)

2555 
	#CAN_FA1R_FACT8
 ((
uöt16_t
)0x0100Ë

	)

2556 
	#CAN_FA1R_FACT9
 ((
uöt16_t
)0x0200Ë

	)

2557 
	#CAN_FA1R_FACT10
 ((
uöt16_t
)0x0400Ë

	)

2558 
	#CAN_FA1R_FACT11
 ((
uöt16_t
)0x0800Ë

	)

2559 
	#CAN_FA1R_FACT12
 ((
uöt16_t
)0x1000Ë

	)

2560 
	#CAN_FA1R_FACT13
 ((
uöt16_t
)0x2000Ë

	)

2563 
	#CAN_F0R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2564 
	#CAN_F0R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2565 
	#CAN_F0R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2566 
	#CAN_F0R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2567 
	#CAN_F0R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2568 
	#CAN_F0R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2569 
	#CAN_F0R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2570 
	#CAN_F0R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2571 
	#CAN_F0R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2572 
	#CAN_F0R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2573 
	#CAN_F0R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2574 
	#CAN_F0R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2575 
	#CAN_F0R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2576 
	#CAN_F0R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2577 
	#CAN_F0R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2578 
	#CAN_F0R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2579 
	#CAN_F0R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2580 
	#CAN_F0R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2581 
	#CAN_F0R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2582 
	#CAN_F0R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2583 
	#CAN_F0R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2584 
	#CAN_F0R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2585 
	#CAN_F0R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2586 
	#CAN_F0R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2587 
	#CAN_F0R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2588 
	#CAN_F0R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2589 
	#CAN_F0R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2590 
	#CAN_F0R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2591 
	#CAN_F0R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2592 
	#CAN_F0R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2593 
	#CAN_F0R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2594 
	#CAN_F0R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2597 
	#CAN_F1R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2598 
	#CAN_F1R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2599 
	#CAN_F1R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2600 
	#CAN_F1R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2601 
	#CAN_F1R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2602 
	#CAN_F1R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2603 
	#CAN_F1R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2604 
	#CAN_F1R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2605 
	#CAN_F1R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2606 
	#CAN_F1R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2607 
	#CAN_F1R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2608 
	#CAN_F1R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2609 
	#CAN_F1R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2610 
	#CAN_F1R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2611 
	#CAN_F1R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2612 
	#CAN_F1R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2613 
	#CAN_F1R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2614 
	#CAN_F1R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2615 
	#CAN_F1R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2616 
	#CAN_F1R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2617 
	#CAN_F1R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2618 
	#CAN_F1R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2619 
	#CAN_F1R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2620 
	#CAN_F1R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2621 
	#CAN_F1R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2622 
	#CAN_F1R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2623 
	#CAN_F1R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2624 
	#CAN_F1R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2625 
	#CAN_F1R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2626 
	#CAN_F1R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2627 
	#CAN_F1R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2628 
	#CAN_F1R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2631 
	#CAN_F2R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2632 
	#CAN_F2R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2633 
	#CAN_F2R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2634 
	#CAN_F2R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2635 
	#CAN_F2R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2636 
	#CAN_F2R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2637 
	#CAN_F2R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2638 
	#CAN_F2R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2639 
	#CAN_F2R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2640 
	#CAN_F2R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2641 
	#CAN_F2R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2642 
	#CAN_F2R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2643 
	#CAN_F2R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2644 
	#CAN_F2R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2645 
	#CAN_F2R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2646 
	#CAN_F2R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2647 
	#CAN_F2R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2648 
	#CAN_F2R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2649 
	#CAN_F2R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2650 
	#CAN_F2R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2651 
	#CAN_F2R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2652 
	#CAN_F2R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2653 
	#CAN_F2R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2654 
	#CAN_F2R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2655 
	#CAN_F2R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2656 
	#CAN_F2R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2657 
	#CAN_F2R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2658 
	#CAN_F2R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2659 
	#CAN_F2R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2660 
	#CAN_F2R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2661 
	#CAN_F2R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2662 
	#CAN_F2R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2665 
	#CAN_F3R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2666 
	#CAN_F3R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2667 
	#CAN_F3R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2668 
	#CAN_F3R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2669 
	#CAN_F3R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2670 
	#CAN_F3R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2671 
	#CAN_F3R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2672 
	#CAN_F3R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2673 
	#CAN_F3R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2674 
	#CAN_F3R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2675 
	#CAN_F3R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2676 
	#CAN_F3R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2677 
	#CAN_F3R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2678 
	#CAN_F3R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2679 
	#CAN_F3R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2680 
	#CAN_F3R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2681 
	#CAN_F3R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2682 
	#CAN_F3R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2683 
	#CAN_F3R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2684 
	#CAN_F3R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2685 
	#CAN_F3R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2686 
	#CAN_F3R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2687 
	#CAN_F3R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2688 
	#CAN_F3R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2689 
	#CAN_F3R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2690 
	#CAN_F3R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2691 
	#CAN_F3R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2692 
	#CAN_F3R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2693 
	#CAN_F3R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2694 
	#CAN_F3R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2695 
	#CAN_F3R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2696 
	#CAN_F3R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2699 
	#CAN_F4R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2700 
	#CAN_F4R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2701 
	#CAN_F4R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2702 
	#CAN_F4R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2703 
	#CAN_F4R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2704 
	#CAN_F4R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2705 
	#CAN_F4R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2706 
	#CAN_F4R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2707 
	#CAN_F4R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2708 
	#CAN_F4R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2709 
	#CAN_F4R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2710 
	#CAN_F4R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2711 
	#CAN_F4R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2712 
	#CAN_F4R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2713 
	#CAN_F4R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2714 
	#CAN_F4R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2715 
	#CAN_F4R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2716 
	#CAN_F4R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2717 
	#CAN_F4R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2718 
	#CAN_F4R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2719 
	#CAN_F4R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2720 
	#CAN_F4R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2721 
	#CAN_F4R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2722 
	#CAN_F4R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2723 
	#CAN_F4R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2724 
	#CAN_F4R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2725 
	#CAN_F4R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2726 
	#CAN_F4R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2727 
	#CAN_F4R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2728 
	#CAN_F4R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2729 
	#CAN_F4R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2730 
	#CAN_F4R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2733 
	#CAN_F5R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2734 
	#CAN_F5R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2735 
	#CAN_F5R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2736 
	#CAN_F5R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2737 
	#CAN_F5R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2738 
	#CAN_F5R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2739 
	#CAN_F5R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2740 
	#CAN_F5R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2741 
	#CAN_F5R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2742 
	#CAN_F5R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2743 
	#CAN_F5R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2744 
	#CAN_F5R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2745 
	#CAN_F5R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2746 
	#CAN_F5R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2747 
	#CAN_F5R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2748 
	#CAN_F5R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2749 
	#CAN_F5R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2750 
	#CAN_F5R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2751 
	#CAN_F5R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2752 
	#CAN_F5R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2753 
	#CAN_F5R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2754 
	#CAN_F5R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2755 
	#CAN_F5R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2756 
	#CAN_F5R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2757 
	#CAN_F5R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2758 
	#CAN_F5R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2759 
	#CAN_F5R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2760 
	#CAN_F5R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2761 
	#CAN_F5R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2762 
	#CAN_F5R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2763 
	#CAN_F5R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2764 
	#CAN_F5R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2767 
	#CAN_F6R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2768 
	#CAN_F6R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2769 
	#CAN_F6R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2770 
	#CAN_F6R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2771 
	#CAN_F6R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2772 
	#CAN_F6R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2773 
	#CAN_F6R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2774 
	#CAN_F6R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2775 
	#CAN_F6R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2776 
	#CAN_F6R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2777 
	#CAN_F6R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2778 
	#CAN_F6R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2779 
	#CAN_F6R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2780 
	#CAN_F6R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2781 
	#CAN_F6R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2782 
	#CAN_F6R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2783 
	#CAN_F6R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2784 
	#CAN_F6R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2785 
	#CAN_F6R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2786 
	#CAN_F6R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2787 
	#CAN_F6R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2788 
	#CAN_F6R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2789 
	#CAN_F6R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2790 
	#CAN_F6R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2791 
	#CAN_F6R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2792 
	#CAN_F6R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2793 
	#CAN_F6R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2794 
	#CAN_F6R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2795 
	#CAN_F6R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2796 
	#CAN_F6R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2797 
	#CAN_F6R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2798 
	#CAN_F6R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2801 
	#CAN_F7R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2802 
	#CAN_F7R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2803 
	#CAN_F7R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2804 
	#CAN_F7R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2805 
	#CAN_F7R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2806 
	#CAN_F7R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2807 
	#CAN_F7R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2808 
	#CAN_F7R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2809 
	#CAN_F7R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2810 
	#CAN_F7R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2811 
	#CAN_F7R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2812 
	#CAN_F7R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2813 
	#CAN_F7R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2814 
	#CAN_F7R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2815 
	#CAN_F7R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2816 
	#CAN_F7R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2817 
	#CAN_F7R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2818 
	#CAN_F7R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2819 
	#CAN_F7R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2820 
	#CAN_F7R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2821 
	#CAN_F7R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2822 
	#CAN_F7R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2823 
	#CAN_F7R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2824 
	#CAN_F7R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2825 
	#CAN_F7R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2826 
	#CAN_F7R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2827 
	#CAN_F7R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2828 
	#CAN_F7R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2829 
	#CAN_F7R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2830 
	#CAN_F7R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2831 
	#CAN_F7R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2832 
	#CAN_F7R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2835 
	#CAN_F8R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2836 
	#CAN_F8R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2837 
	#CAN_F8R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2838 
	#CAN_F8R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2839 
	#CAN_F8R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2840 
	#CAN_F8R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2841 
	#CAN_F8R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2842 
	#CAN_F8R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2843 
	#CAN_F8R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2844 
	#CAN_F8R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2845 
	#CAN_F8R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2846 
	#CAN_F8R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2847 
	#CAN_F8R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2848 
	#CAN_F8R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2849 
	#CAN_F8R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2850 
	#CAN_F8R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2851 
	#CAN_F8R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2852 
	#CAN_F8R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2853 
	#CAN_F8R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2854 
	#CAN_F8R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2855 
	#CAN_F8R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2856 
	#CAN_F8R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2857 
	#CAN_F8R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2858 
	#CAN_F8R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2859 
	#CAN_F8R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2860 
	#CAN_F8R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2861 
	#CAN_F8R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2862 
	#CAN_F8R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2863 
	#CAN_F8R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2864 
	#CAN_F8R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2865 
	#CAN_F8R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2866 
	#CAN_F8R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2869 
	#CAN_F9R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2870 
	#CAN_F9R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2871 
	#CAN_F9R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2872 
	#CAN_F9R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2873 
	#CAN_F9R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2874 
	#CAN_F9R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2875 
	#CAN_F9R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2876 
	#CAN_F9R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2877 
	#CAN_F9R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2878 
	#CAN_F9R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2879 
	#CAN_F9R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2880 
	#CAN_F9R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2881 
	#CAN_F9R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2882 
	#CAN_F9R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2883 
	#CAN_F9R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2884 
	#CAN_F9R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2885 
	#CAN_F9R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2886 
	#CAN_F9R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2887 
	#CAN_F9R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2888 
	#CAN_F9R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2889 
	#CAN_F9R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2890 
	#CAN_F9R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2891 
	#CAN_F9R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2892 
	#CAN_F9R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2893 
	#CAN_F9R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2894 
	#CAN_F9R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2895 
	#CAN_F9R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2896 
	#CAN_F9R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2897 
	#CAN_F9R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2898 
	#CAN_F9R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2899 
	#CAN_F9R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2900 
	#CAN_F9R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2903 
	#CAN_F10R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2904 
	#CAN_F10R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2905 
	#CAN_F10R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2906 
	#CAN_F10R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2907 
	#CAN_F10R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2908 
	#CAN_F10R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2909 
	#CAN_F10R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2910 
	#CAN_F10R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2911 
	#CAN_F10R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2912 
	#CAN_F10R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2913 
	#CAN_F10R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2914 
	#CAN_F10R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2915 
	#CAN_F10R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2916 
	#CAN_F10R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2917 
	#CAN_F10R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2918 
	#CAN_F10R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2919 
	#CAN_F10R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2920 
	#CAN_F10R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2921 
	#CAN_F10R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2922 
	#CAN_F10R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2923 
	#CAN_F10R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2924 
	#CAN_F10R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2925 
	#CAN_F10R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2926 
	#CAN_F10R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2927 
	#CAN_F10R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2928 
	#CAN_F10R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2929 
	#CAN_F10R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2930 
	#CAN_F10R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2931 
	#CAN_F10R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2932 
	#CAN_F10R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2933 
	#CAN_F10R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2934 
	#CAN_F10R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2937 
	#CAN_F11R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2938 
	#CAN_F11R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2939 
	#CAN_F11R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2940 
	#CAN_F11R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2941 
	#CAN_F11R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2942 
	#CAN_F11R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2943 
	#CAN_F11R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2944 
	#CAN_F11R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2945 
	#CAN_F11R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2946 
	#CAN_F11R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2947 
	#CAN_F11R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2948 
	#CAN_F11R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2949 
	#CAN_F11R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2950 
	#CAN_F11R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2951 
	#CAN_F11R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2952 
	#CAN_F11R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2953 
	#CAN_F11R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2954 
	#CAN_F11R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2955 
	#CAN_F11R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2956 
	#CAN_F11R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2957 
	#CAN_F11R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2958 
	#CAN_F11R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2959 
	#CAN_F11R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2960 
	#CAN_F11R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2961 
	#CAN_F11R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2962 
	#CAN_F11R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2963 
	#CAN_F11R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2964 
	#CAN_F11R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2965 
	#CAN_F11R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

2966 
	#CAN_F11R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

2967 
	#CAN_F11R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

2968 
	#CAN_F11R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

2971 
	#CAN_F12R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

2972 
	#CAN_F12R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

2973 
	#CAN_F12R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

2974 
	#CAN_F12R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

2975 
	#CAN_F12R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

2976 
	#CAN_F12R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

2977 
	#CAN_F12R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

2978 
	#CAN_F12R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

2979 
	#CAN_F12R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

2980 
	#CAN_F12R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

2981 
	#CAN_F12R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

2982 
	#CAN_F12R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

2983 
	#CAN_F12R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

2984 
	#CAN_F12R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

2985 
	#CAN_F12R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

2986 
	#CAN_F12R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

2987 
	#CAN_F12R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

2988 
	#CAN_F12R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

2989 
	#CAN_F12R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

2990 
	#CAN_F12R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

2991 
	#CAN_F12R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

2992 
	#CAN_F12R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

2993 
	#CAN_F12R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

2994 
	#CAN_F12R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

2995 
	#CAN_F12R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

2996 
	#CAN_F12R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

2997 
	#CAN_F12R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

2998 
	#CAN_F12R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

2999 
	#CAN_F12R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3000 
	#CAN_F12R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3001 
	#CAN_F12R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3002 
	#CAN_F12R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3005 
	#CAN_F13R1_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3006 
	#CAN_F13R1_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3007 
	#CAN_F13R1_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3008 
	#CAN_F13R1_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3009 
	#CAN_F13R1_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3010 
	#CAN_F13R1_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3011 
	#CAN_F13R1_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3012 
	#CAN_F13R1_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3013 
	#CAN_F13R1_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3014 
	#CAN_F13R1_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3015 
	#CAN_F13R1_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3016 
	#CAN_F13R1_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3017 
	#CAN_F13R1_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3018 
	#CAN_F13R1_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3019 
	#CAN_F13R1_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3020 
	#CAN_F13R1_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3021 
	#CAN_F13R1_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3022 
	#CAN_F13R1_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3023 
	#CAN_F13R1_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3024 
	#CAN_F13R1_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3025 
	#CAN_F13R1_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3026 
	#CAN_F13R1_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3027 
	#CAN_F13R1_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3028 
	#CAN_F13R1_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3029 
	#CAN_F13R1_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3030 
	#CAN_F13R1_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3031 
	#CAN_F13R1_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3032 
	#CAN_F13R1_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3033 
	#CAN_F13R1_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3034 
	#CAN_F13R1_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3035 
	#CAN_F13R1_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3036 
	#CAN_F13R1_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3039 
	#CAN_F0R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3040 
	#CAN_F0R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3041 
	#CAN_F0R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3042 
	#CAN_F0R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3043 
	#CAN_F0R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3044 
	#CAN_F0R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3045 
	#CAN_F0R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3046 
	#CAN_F0R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3047 
	#CAN_F0R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3048 
	#CAN_F0R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3049 
	#CAN_F0R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3050 
	#CAN_F0R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3051 
	#CAN_F0R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3052 
	#CAN_F0R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3053 
	#CAN_F0R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3054 
	#CAN_F0R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3055 
	#CAN_F0R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3056 
	#CAN_F0R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3057 
	#CAN_F0R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3058 
	#CAN_F0R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3059 
	#CAN_F0R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3060 
	#CAN_F0R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3061 
	#CAN_F0R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3062 
	#CAN_F0R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3063 
	#CAN_F0R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3064 
	#CAN_F0R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3065 
	#CAN_F0R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3066 
	#CAN_F0R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3067 
	#CAN_F0R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3068 
	#CAN_F0R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3069 
	#CAN_F0R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3070 
	#CAN_F0R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3073 
	#CAN_F1R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3074 
	#CAN_F1R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3075 
	#CAN_F1R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3076 
	#CAN_F1R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3077 
	#CAN_F1R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3078 
	#CAN_F1R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3079 
	#CAN_F1R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3080 
	#CAN_F1R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3081 
	#CAN_F1R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3082 
	#CAN_F1R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3083 
	#CAN_F1R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3084 
	#CAN_F1R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3085 
	#CAN_F1R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3086 
	#CAN_F1R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3087 
	#CAN_F1R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3088 
	#CAN_F1R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3089 
	#CAN_F1R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3090 
	#CAN_F1R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3091 
	#CAN_F1R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3092 
	#CAN_F1R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3093 
	#CAN_F1R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3094 
	#CAN_F1R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3095 
	#CAN_F1R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3096 
	#CAN_F1R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3097 
	#CAN_F1R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3098 
	#CAN_F1R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3099 
	#CAN_F1R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3100 
	#CAN_F1R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3101 
	#CAN_F1R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3102 
	#CAN_F1R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3103 
	#CAN_F1R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3104 
	#CAN_F1R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3107 
	#CAN_F2R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3108 
	#CAN_F2R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3109 
	#CAN_F2R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3110 
	#CAN_F2R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3111 
	#CAN_F2R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3112 
	#CAN_F2R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3113 
	#CAN_F2R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3114 
	#CAN_F2R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3115 
	#CAN_F2R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3116 
	#CAN_F2R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3117 
	#CAN_F2R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3118 
	#CAN_F2R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3119 
	#CAN_F2R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3120 
	#CAN_F2R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3121 
	#CAN_F2R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3122 
	#CAN_F2R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3123 
	#CAN_F2R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3124 
	#CAN_F2R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3125 
	#CAN_F2R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3126 
	#CAN_F2R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3127 
	#CAN_F2R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3128 
	#CAN_F2R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3129 
	#CAN_F2R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3130 
	#CAN_F2R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3131 
	#CAN_F2R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3132 
	#CAN_F2R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3133 
	#CAN_F2R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3134 
	#CAN_F2R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3135 
	#CAN_F2R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3136 
	#CAN_F2R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3137 
	#CAN_F2R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3138 
	#CAN_F2R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3141 
	#CAN_F3R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3142 
	#CAN_F3R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3143 
	#CAN_F3R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3144 
	#CAN_F3R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3145 
	#CAN_F3R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3146 
	#CAN_F3R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3147 
	#CAN_F3R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3148 
	#CAN_F3R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3149 
	#CAN_F3R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3150 
	#CAN_F3R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3151 
	#CAN_F3R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3152 
	#CAN_F3R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3153 
	#CAN_F3R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3154 
	#CAN_F3R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3155 
	#CAN_F3R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3156 
	#CAN_F3R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3157 
	#CAN_F3R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3158 
	#CAN_F3R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3159 
	#CAN_F3R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3160 
	#CAN_F3R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3161 
	#CAN_F3R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3162 
	#CAN_F3R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3163 
	#CAN_F3R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3164 
	#CAN_F3R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3165 
	#CAN_F3R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3166 
	#CAN_F3R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3167 
	#CAN_F3R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3168 
	#CAN_F3R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3169 
	#CAN_F3R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3170 
	#CAN_F3R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3171 
	#CAN_F3R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3172 
	#CAN_F3R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3175 
	#CAN_F4R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3176 
	#CAN_F4R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3177 
	#CAN_F4R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3178 
	#CAN_F4R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3179 
	#CAN_F4R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3180 
	#CAN_F4R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3181 
	#CAN_F4R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3182 
	#CAN_F4R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3183 
	#CAN_F4R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3184 
	#CAN_F4R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3185 
	#CAN_F4R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3186 
	#CAN_F4R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3187 
	#CAN_F4R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3188 
	#CAN_F4R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3189 
	#CAN_F4R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3190 
	#CAN_F4R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3191 
	#CAN_F4R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3192 
	#CAN_F4R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3193 
	#CAN_F4R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3194 
	#CAN_F4R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3195 
	#CAN_F4R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3196 
	#CAN_F4R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3197 
	#CAN_F4R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3198 
	#CAN_F4R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3199 
	#CAN_F4R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3200 
	#CAN_F4R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3201 
	#CAN_F4R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3202 
	#CAN_F4R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3203 
	#CAN_F4R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3204 
	#CAN_F4R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3205 
	#CAN_F4R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3206 
	#CAN_F4R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3209 
	#CAN_F5R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3210 
	#CAN_F5R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3211 
	#CAN_F5R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3212 
	#CAN_F5R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3213 
	#CAN_F5R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3214 
	#CAN_F5R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3215 
	#CAN_F5R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3216 
	#CAN_F5R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3217 
	#CAN_F5R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3218 
	#CAN_F5R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3219 
	#CAN_F5R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3220 
	#CAN_F5R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3221 
	#CAN_F5R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3222 
	#CAN_F5R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3223 
	#CAN_F5R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3224 
	#CAN_F5R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3225 
	#CAN_F5R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3226 
	#CAN_F5R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3227 
	#CAN_F5R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3228 
	#CAN_F5R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3229 
	#CAN_F5R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3230 
	#CAN_F5R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3231 
	#CAN_F5R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3232 
	#CAN_F5R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3233 
	#CAN_F5R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3234 
	#CAN_F5R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3235 
	#CAN_F5R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3236 
	#CAN_F5R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3237 
	#CAN_F5R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3238 
	#CAN_F5R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3239 
	#CAN_F5R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3240 
	#CAN_F5R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3243 
	#CAN_F6R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3244 
	#CAN_F6R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3245 
	#CAN_F6R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3246 
	#CAN_F6R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3247 
	#CAN_F6R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3248 
	#CAN_F6R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3249 
	#CAN_F6R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3250 
	#CAN_F6R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3251 
	#CAN_F6R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3252 
	#CAN_F6R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3253 
	#CAN_F6R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3254 
	#CAN_F6R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3255 
	#CAN_F6R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3256 
	#CAN_F6R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3257 
	#CAN_F6R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3258 
	#CAN_F6R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3259 
	#CAN_F6R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3260 
	#CAN_F6R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3261 
	#CAN_F6R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3262 
	#CAN_F6R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3263 
	#CAN_F6R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3264 
	#CAN_F6R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3265 
	#CAN_F6R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3266 
	#CAN_F6R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3267 
	#CAN_F6R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3268 
	#CAN_F6R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3269 
	#CAN_F6R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3270 
	#CAN_F6R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3271 
	#CAN_F6R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3272 
	#CAN_F6R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3273 
	#CAN_F6R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3274 
	#CAN_F6R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3277 
	#CAN_F7R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3278 
	#CAN_F7R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3279 
	#CAN_F7R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3280 
	#CAN_F7R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3281 
	#CAN_F7R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3282 
	#CAN_F7R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3283 
	#CAN_F7R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3284 
	#CAN_F7R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3285 
	#CAN_F7R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3286 
	#CAN_F7R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3287 
	#CAN_F7R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3288 
	#CAN_F7R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3289 
	#CAN_F7R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3290 
	#CAN_F7R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3291 
	#CAN_F7R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3292 
	#CAN_F7R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3293 
	#CAN_F7R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3294 
	#CAN_F7R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3295 
	#CAN_F7R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3296 
	#CAN_F7R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3297 
	#CAN_F7R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3298 
	#CAN_F7R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3299 
	#CAN_F7R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3300 
	#CAN_F7R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3301 
	#CAN_F7R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3302 
	#CAN_F7R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3303 
	#CAN_F7R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3304 
	#CAN_F7R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3305 
	#CAN_F7R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3306 
	#CAN_F7R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3307 
	#CAN_F7R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3308 
	#CAN_F7R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3311 
	#CAN_F8R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3312 
	#CAN_F8R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3313 
	#CAN_F8R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3314 
	#CAN_F8R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3315 
	#CAN_F8R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3316 
	#CAN_F8R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3317 
	#CAN_F8R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3318 
	#CAN_F8R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3319 
	#CAN_F8R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3320 
	#CAN_F8R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3321 
	#CAN_F8R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3322 
	#CAN_F8R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3323 
	#CAN_F8R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3324 
	#CAN_F8R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3325 
	#CAN_F8R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3326 
	#CAN_F8R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3327 
	#CAN_F8R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3328 
	#CAN_F8R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3329 
	#CAN_F8R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3330 
	#CAN_F8R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3331 
	#CAN_F8R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3332 
	#CAN_F8R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3333 
	#CAN_F8R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3334 
	#CAN_F8R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3335 
	#CAN_F8R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3336 
	#CAN_F8R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3337 
	#CAN_F8R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3338 
	#CAN_F8R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3339 
	#CAN_F8R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3340 
	#CAN_F8R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3341 
	#CAN_F8R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3342 
	#CAN_F8R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3345 
	#CAN_F9R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3346 
	#CAN_F9R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3347 
	#CAN_F9R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3348 
	#CAN_F9R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3349 
	#CAN_F9R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3350 
	#CAN_F9R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3351 
	#CAN_F9R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3352 
	#CAN_F9R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3353 
	#CAN_F9R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3354 
	#CAN_F9R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3355 
	#CAN_F9R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3356 
	#CAN_F9R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3357 
	#CAN_F9R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3358 
	#CAN_F9R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3359 
	#CAN_F9R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3360 
	#CAN_F9R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3361 
	#CAN_F9R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3362 
	#CAN_F9R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3363 
	#CAN_F9R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3364 
	#CAN_F9R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3365 
	#CAN_F9R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3366 
	#CAN_F9R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3367 
	#CAN_F9R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3368 
	#CAN_F9R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3369 
	#CAN_F9R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3370 
	#CAN_F9R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3371 
	#CAN_F9R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3372 
	#CAN_F9R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3373 
	#CAN_F9R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3374 
	#CAN_F9R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3375 
	#CAN_F9R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3376 
	#CAN_F9R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3379 
	#CAN_F10R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3380 
	#CAN_F10R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3381 
	#CAN_F10R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3382 
	#CAN_F10R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3383 
	#CAN_F10R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3384 
	#CAN_F10R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3385 
	#CAN_F10R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3386 
	#CAN_F10R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3387 
	#CAN_F10R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3388 
	#CAN_F10R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3389 
	#CAN_F10R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3390 
	#CAN_F10R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3391 
	#CAN_F10R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3392 
	#CAN_F10R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3393 
	#CAN_F10R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3394 
	#CAN_F10R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3395 
	#CAN_F10R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3396 
	#CAN_F10R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3397 
	#CAN_F10R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3398 
	#CAN_F10R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3399 
	#CAN_F10R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3400 
	#CAN_F10R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3401 
	#CAN_F10R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3402 
	#CAN_F10R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3403 
	#CAN_F10R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3404 
	#CAN_F10R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3405 
	#CAN_F10R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3406 
	#CAN_F10R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3407 
	#CAN_F10R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3408 
	#CAN_F10R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3409 
	#CAN_F10R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3410 
	#CAN_F10R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3413 
	#CAN_F11R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3414 
	#CAN_F11R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3415 
	#CAN_F11R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3416 
	#CAN_F11R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3417 
	#CAN_F11R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3418 
	#CAN_F11R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3419 
	#CAN_F11R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3420 
	#CAN_F11R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3421 
	#CAN_F11R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3422 
	#CAN_F11R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3423 
	#CAN_F11R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3424 
	#CAN_F11R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3425 
	#CAN_F11R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3426 
	#CAN_F11R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3427 
	#CAN_F11R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3428 
	#CAN_F11R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3429 
	#CAN_F11R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3430 
	#CAN_F11R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3431 
	#CAN_F11R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3432 
	#CAN_F11R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3433 
	#CAN_F11R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3434 
	#CAN_F11R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3435 
	#CAN_F11R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3436 
	#CAN_F11R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3437 
	#CAN_F11R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3438 
	#CAN_F11R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3439 
	#CAN_F11R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3440 
	#CAN_F11R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3441 
	#CAN_F11R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3442 
	#CAN_F11R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3443 
	#CAN_F11R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3444 
	#CAN_F11R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3447 
	#CAN_F12R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3448 
	#CAN_F12R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3449 
	#CAN_F12R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3450 
	#CAN_F12R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3451 
	#CAN_F12R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3452 
	#CAN_F12R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3453 
	#CAN_F12R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3454 
	#CAN_F12R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3455 
	#CAN_F12R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3456 
	#CAN_F12R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3457 
	#CAN_F12R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3458 
	#CAN_F12R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3459 
	#CAN_F12R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3460 
	#CAN_F12R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3461 
	#CAN_F12R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3462 
	#CAN_F12R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3463 
	#CAN_F12R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3464 
	#CAN_F12R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3465 
	#CAN_F12R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3466 
	#CAN_F12R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3467 
	#CAN_F12R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3468 
	#CAN_F12R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3469 
	#CAN_F12R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3470 
	#CAN_F12R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3471 
	#CAN_F12R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3472 
	#CAN_F12R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3473 
	#CAN_F12R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3474 
	#CAN_F12R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3475 
	#CAN_F12R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3476 
	#CAN_F12R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3477 
	#CAN_F12R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3478 
	#CAN_F12R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3481 
	#CAN_F13R2_FB0
 ((
uöt32_t
)0x00000001Ë

	)

3482 
	#CAN_F13R2_FB1
 ((
uöt32_t
)0x00000002Ë

	)

3483 
	#CAN_F13R2_FB2
 ((
uöt32_t
)0x00000004Ë

	)

3484 
	#CAN_F13R2_FB3
 ((
uöt32_t
)0x00000008Ë

	)

3485 
	#CAN_F13R2_FB4
 ((
uöt32_t
)0x00000010Ë

	)

3486 
	#CAN_F13R2_FB5
 ((
uöt32_t
)0x00000020Ë

	)

3487 
	#CAN_F13R2_FB6
 ((
uöt32_t
)0x00000040Ë

	)

3488 
	#CAN_F13R2_FB7
 ((
uöt32_t
)0x00000080Ë

	)

3489 
	#CAN_F13R2_FB8
 ((
uöt32_t
)0x00000100Ë

	)

3490 
	#CAN_F13R2_FB9
 ((
uöt32_t
)0x00000200Ë

	)

3491 
	#CAN_F13R2_FB10
 ((
uöt32_t
)0x00000400Ë

	)

3492 
	#CAN_F13R2_FB11
 ((
uöt32_t
)0x00000800Ë

	)

3493 
	#CAN_F13R2_FB12
 ((
uöt32_t
)0x00001000Ë

	)

3494 
	#CAN_F13R2_FB13
 ((
uöt32_t
)0x00002000Ë

	)

3495 
	#CAN_F13R2_FB14
 ((
uöt32_t
)0x00004000Ë

	)

3496 
	#CAN_F13R2_FB15
 ((
uöt32_t
)0x00008000Ë

	)

3497 
	#CAN_F13R2_FB16
 ((
uöt32_t
)0x00010000Ë

	)

3498 
	#CAN_F13R2_FB17
 ((
uöt32_t
)0x00020000Ë

	)

3499 
	#CAN_F13R2_FB18
 ((
uöt32_t
)0x00040000Ë

	)

3500 
	#CAN_F13R2_FB19
 ((
uöt32_t
)0x00080000Ë

	)

3501 
	#CAN_F13R2_FB20
 ((
uöt32_t
)0x00100000Ë

	)

3502 
	#CAN_F13R2_FB21
 ((
uöt32_t
)0x00200000Ë

	)

3503 
	#CAN_F13R2_FB22
 ((
uöt32_t
)0x00400000Ë

	)

3504 
	#CAN_F13R2_FB23
 ((
uöt32_t
)0x00800000Ë

	)

3505 
	#CAN_F13R2_FB24
 ((
uöt32_t
)0x01000000Ë

	)

3506 
	#CAN_F13R2_FB25
 ((
uöt32_t
)0x02000000Ë

	)

3507 
	#CAN_F13R2_FB26
 ((
uöt32_t
)0x04000000Ë

	)

3508 
	#CAN_F13R2_FB27
 ((
uöt32_t
)0x08000000Ë

	)

3509 
	#CAN_F13R2_FB28
 ((
uöt32_t
)0x10000000Ë

	)

3510 
	#CAN_F13R2_FB29
 ((
uöt32_t
)0x20000000Ë

	)

3511 
	#CAN_F13R2_FB30
 ((
uöt32_t
)0x40000000Ë

	)

3512 
	#CAN_F13R2_FB31
 ((
uöt32_t
)0x80000000Ë

	)

3520 
	#CRC_DR_DR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3523 
	#CRC_IDR_IDR
 ((
uöt8_t
)0xFFË

	)

3526 
	#CRC_CR_RESET
 ((
uöt32_t
)0x00000001Ë

	)

3527 
	#CRC_CR_POLSIZE
 ((
uöt32_t
)0x00000018Ë

	)

3528 
	#CRC_CR_POLSIZE_0
 ((
uöt32_t
)0x00000008Ë

	)

3529 
	#CRC_CR_POLSIZE_1
 ((
uöt32_t
)0x00000010Ë

	)

3530 
	#CRC_CR_REV_IN
 ((
uöt32_t
)0x00000060Ë

	)

3531 
	#CRC_CR_REV_IN_0
 ((
uöt32_t
)0x00000020Ë

	)

3532 
	#CRC_CR_REV_IN_1
 ((
uöt32_t
)0x00000040Ë

	)

3533 
	#CRC_CR_REV_OUT
 ((
uöt32_t
)0x00000080Ë

	)

3536 
	#CRC_INIT_INIT
 ((
uöt32_t
)0xFFFFFFFFË

	)

3539 
	#CRC_POL_POL
 ((
uöt32_t
)0xFFFFFFFFË

	)

3546 
	#DAC_CR_EN1
 ((
uöt32_t
)0x00000001Ë

	)

3547 
	#DAC_CR_BOFF1
 ((
uöt32_t
)0x00000002Ë

	)

3548 
	#DAC_CR_TEN1
 ((
uöt32_t
)0x00000004Ë

	)

3550 
	#DAC_CR_TSEL1
 ((
uöt32_t
)0x00000038Ë

	)

3551 
	#DAC_CR_TSEL1_0
 ((
uöt32_t
)0x00000008Ë

	)

3552 
	#DAC_CR_TSEL1_1
 ((
uöt32_t
)0x00000010Ë

	)

3553 
	#DAC_CR_TSEL1_2
 ((
uöt32_t
)0x00000020Ë

	)

3555 
	#DAC_CR_WAVE1
 ((
uöt32_t
)0x000000C0Ë

	)

3556 
	#DAC_CR_WAVE1_0
 ((
uöt32_t
)0x00000040Ë

	)

3557 
	#DAC_CR_WAVE1_1
 ((
uöt32_t
)0x00000080Ë

	)

3559 
	#DAC_CR_MAMP1
 ((
uöt32_t
)0x00000F00Ë

	)

3560 
	#DAC_CR_MAMP1_0
 ((
uöt32_t
)0x00000100Ë

	)

3561 
	#DAC_CR_MAMP1_1
 ((
uöt32_t
)0x00000200Ë

	)

3562 
	#DAC_CR_MAMP1_2
 ((
uöt32_t
)0x00000400Ë

	)

3563 
	#DAC_CR_MAMP1_3
 ((
uöt32_t
)0x00000800Ë

	)

3565 
	#DAC_CR_DMAEN1
 ((
uöt32_t
)0x00001000Ë

	)

3566 
	#DAC_CR_EN2
 ((
uöt32_t
)0x00010000Ë

	)

3567 
	#DAC_CR_BOFF2
 ((
uöt32_t
)0x00020000Ë

	)

3568 
	#DAC_CR_TEN2
 ((
uöt32_t
)0x00040000Ë

	)

3570 
	#DAC_CR_TSEL2
 ((
uöt32_t
)0x00380000Ë

	)

3571 
	#DAC_CR_TSEL2_0
 ((
uöt32_t
)0x00080000Ë

	)

3572 
	#DAC_CR_TSEL2_1
 ((
uöt32_t
)0x00100000Ë

	)

3573 
	#DAC_CR_TSEL2_2
 ((
uöt32_t
)0x00200000Ë

	)

3575 
	#DAC_CR_WAVE2
 ((
uöt32_t
)0x00C00000Ë

	)

3576 
	#DAC_CR_WAVE2_0
 ((
uöt32_t
)0x00400000Ë

	)

3577 
	#DAC_CR_WAVE2_1
 ((
uöt32_t
)0x00800000Ë

	)

3579 
	#DAC_CR_MAMP2
 ((
uöt32_t
)0x0F000000Ë

	)

3580 
	#DAC_CR_MAMP2_0
 ((
uöt32_t
)0x01000000Ë

	)

3581 
	#DAC_CR_MAMP2_1
 ((
uöt32_t
)0x02000000Ë

	)

3582 
	#DAC_CR_MAMP2_2
 ((
uöt32_t
)0x04000000Ë

	)

3583 
	#DAC_CR_MAMP2_3
 ((
uöt32_t
)0x08000000Ë

	)

3585 
	#DAC_CR_DMAEN2
 ((
uöt32_t
)0x10000000Ë

	)

3588 
	#DAC_SWTRIGR_SWTRIG1
 ((
uöt8_t
)0x01Ë

	)

3589 
	#DAC_SWTRIGR_SWTRIG2
 ((
uöt8_t
)0x02Ë

	)

3592 
	#DAC_DHR12R1_DACC1DHR
 ((
uöt16_t
)0x0FFFË

	)

3595 
	#DAC_DHR12L1_DACC1DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3598 
	#DAC_DHR8R1_DACC1DHR
 ((
uöt8_t
)0xFFË

	)

3601 
	#DAC_DHR12R2_DACC2DHR
 ((
uöt16_t
)0x0FFFË

	)

3604 
	#DAC_DHR12L2_DACC2DHR
 ((
uöt16_t
)0xFFF0Ë

	)

3607 
	#DAC_DHR8R2_DACC2DHR
 ((
uöt8_t
)0xFFË

	)

3610 
	#DAC_DHR12RD_DACC1DHR
 ((
uöt32_t
)0x00000FFFË

	)

3611 
	#DAC_DHR12RD_DACC2DHR
 ((
uöt32_t
)0x0FFF0000Ë

	)

3614 
	#DAC_DHR12LD_DACC1DHR
 ((
uöt32_t
)0x0000FFF0Ë

	)

3615 
	#DAC_DHR12LD_DACC2DHR
 ((
uöt32_t
)0xFFF00000Ë

	)

3618 
	#DAC_DHR8RD_DACC1DHR
 ((
uöt16_t
)0x00FFË

	)

3619 
	#DAC_DHR8RD_DACC2DHR
 ((
uöt16_t
)0xFF00Ë

	)

3622 
	#DAC_DOR1_DACC1DOR
 ((
uöt16_t
)0x0FFFË

	)

3625 
	#DAC_DOR2_DACC2DOR
 ((
uöt16_t
)0x0FFFË

	)

3628 
	#DAC_SR_DMAUDR1
 ((
uöt32_t
)0x00002000Ë

	)

3629 
	#DAC_SR_DMAUDR2
 ((
uöt32_t
)0x20000000Ë

	)

3637 
	#DBGMCU_IDCODE_DEV_ID
 ((
uöt32_t
)0x00000FFF)

	)

3638 
	#DBGMCU_IDCODE_REV_ID
 ((
uöt32_t
)0xFFFF0000)

	)

3641 
	#DBGMCU_CR_DBG_SLEEP
 ((
uöt32_t
)0x00000001)

	)

3642 
	#DBGMCU_CR_DBG_STOP
 ((
uöt32_t
)0x00000002)

	)

3643 
	#DBGMCU_CR_DBG_STANDBY
 ((
uöt32_t
)0x00000004)

	)

3644 
	#DBGMCU_CR_TRACE_IOEN
 ((
uöt32_t
)0x00000020)

	)

3646 
	#DBGMCU_CR_TRACE_MODE
 ((
uöt32_t
)0x000000C0)

	)

3647 
	#DBGMCU_CR_TRACE_MODE_0
 ((
uöt32_t
)0x00000040)

	)

3648 
	#DBGMCU_CR_TRACE_MODE_1
 ((
uöt32_t
)0x00000080)

	)

3651 
	#DBGMCU_APB1_FZ_DBG_TIM2_STOP
 ((
uöt32_t
)0x00000001)

	)

3652 
	#DBGMCU_APB1_FZ_DBG_TIM3_STOP
 ((
uöt32_t
)0x00000002)

	)

3653 
	#DBGMCU_APB1_FZ_DBG_TIM4_STOP
 ((
uöt32_t
)0x00000004)

	)

3654 
	#DBGMCU_APB1_FZ_DBG_TIM6_STOP
 ((
uöt32_t
)0x00000010)

	)

3655 
	#DBGMCU_APB1_FZ_DBG_TIM7_STOP
 ((
uöt32_t
)0x00000020)

	)

3656 
	#DBGMCU_APB1_FZ_DBG_RTC_STOP
 ((
uöt32_t
)0x00000400)

	)

3657 
	#DBGMCU_APB1_FZ_DBG_WWDG_STOP
 ((
uöt32_t
)0x00000800)

	)

3658 
	#DBGMCU_APB1_FZ_DBG_IWDG_STOP
 ((
uöt32_t
)0x00001000)

	)

3659 
	#DBGMCU_APB1_FZ_DBG_I2C1_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00200000)

	)

3660 
	#DBGMCU_APB1_FZ_DBG_I2C2_SMBUS_TIMEOUT
 ((
uöt32_t
)0x00400000)

	)

3661 
	#DBGMCU_APB1_FZ_DBG_CAN1_STOP
 ((
uöt32_t
)0x02000000)

	)

3664 
	#DBGMCU_APB2_FZ_DBG_TIM1_STOP
 ((
uöt32_t
)0x00000001)

	)

3665 
	#DBGMCU_APB2_FZ_DBG_TIM8_STOP
 ((
uöt32_t
)0x00000002)

	)

3666 
	#DBGMCU_APB2_FZ_DBG_TIM15_STOP
 ((
uöt32_t
)0x00000004)

	)

3667 
	#DBGMCU_APB2_FZ_DBG_TIM16_STOP
 ((
uöt32_t
)0x00000008)

	)

3668 
	#DBGMCU_APB2_FZ_DBG_TIM17_STOP
 ((
uöt32_t
)0x00000010)

	)

3676 
	#DMA_ISR_GIF1
 ((
uöt32_t
)0x00000001Ë

	)

3677 
	#DMA_ISR_TCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3678 
	#DMA_ISR_HTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3679 
	#DMA_ISR_TEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3680 
	#DMA_ISR_GIF2
 ((
uöt32_t
)0x00000010Ë

	)

3681 
	#DMA_ISR_TCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3682 
	#DMA_ISR_HTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3683 
	#DMA_ISR_TEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3684 
	#DMA_ISR_GIF3
 ((
uöt32_t
)0x00000100Ë

	)

3685 
	#DMA_ISR_TCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3686 
	#DMA_ISR_HTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3687 
	#DMA_ISR_TEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3688 
	#DMA_ISR_GIF4
 ((
uöt32_t
)0x00001000Ë

	)

3689 
	#DMA_ISR_TCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3690 
	#DMA_ISR_HTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3691 
	#DMA_ISR_TEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3692 
	#DMA_ISR_GIF5
 ((
uöt32_t
)0x00010000Ë

	)

3693 
	#DMA_ISR_TCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3694 
	#DMA_ISR_HTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3695 
	#DMA_ISR_TEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3696 
	#DMA_ISR_GIF6
 ((
uöt32_t
)0x00100000Ë

	)

3697 
	#DMA_ISR_TCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3698 
	#DMA_ISR_HTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3699 
	#DMA_ISR_TEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3700 
	#DMA_ISR_GIF7
 ((
uöt32_t
)0x01000000Ë

	)

3701 
	#DMA_ISR_TCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3702 
	#DMA_ISR_HTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3703 
	#DMA_ISR_TEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3706 
	#DMA_IFCR_CGIF1
 ((
uöt32_t
)0x00000001Ë

	)

3707 
	#DMA_IFCR_CTCIF1
 ((
uöt32_t
)0x00000002Ë

	)

3708 
	#DMA_IFCR_CHTIF1
 ((
uöt32_t
)0x00000004Ë

	)

3709 
	#DMA_IFCR_CTEIF1
 ((
uöt32_t
)0x00000008Ë

	)

3710 
	#DMA_IFCR_CGIF2
 ((
uöt32_t
)0x00000010Ë

	)

3711 
	#DMA_IFCR_CTCIF2
 ((
uöt32_t
)0x00000020Ë

	)

3712 
	#DMA_IFCR_CHTIF2
 ((
uöt32_t
)0x00000040Ë

	)

3713 
	#DMA_IFCR_CTEIF2
 ((
uöt32_t
)0x00000080Ë

	)

3714 
	#DMA_IFCR_CGIF3
 ((
uöt32_t
)0x00000100Ë

	)

3715 
	#DMA_IFCR_CTCIF3
 ((
uöt32_t
)0x00000200Ë

	)

3716 
	#DMA_IFCR_CHTIF3
 ((
uöt32_t
)0x00000400Ë

	)

3717 
	#DMA_IFCR_CTEIF3
 ((
uöt32_t
)0x00000800Ë

	)

3718 
	#DMA_IFCR_CGIF4
 ((
uöt32_t
)0x00001000Ë

	)

3719 
	#DMA_IFCR_CTCIF4
 ((
uöt32_t
)0x00002000Ë

	)

3720 
	#DMA_IFCR_CHTIF4
 ((
uöt32_t
)0x00004000Ë

	)

3721 
	#DMA_IFCR_CTEIF4
 ((
uöt32_t
)0x00008000Ë

	)

3722 
	#DMA_IFCR_CGIF5
 ((
uöt32_t
)0x00010000Ë

	)

3723 
	#DMA_IFCR_CTCIF5
 ((
uöt32_t
)0x00020000Ë

	)

3724 
	#DMA_IFCR_CHTIF5
 ((
uöt32_t
)0x00040000Ë

	)

3725 
	#DMA_IFCR_CTEIF5
 ((
uöt32_t
)0x00080000Ë

	)

3726 
	#DMA_IFCR_CGIF6
 ((
uöt32_t
)0x00100000Ë

	)

3727 
	#DMA_IFCR_CTCIF6
 ((
uöt32_t
)0x00200000Ë

	)

3728 
	#DMA_IFCR_CHTIF6
 ((
uöt32_t
)0x00400000Ë

	)

3729 
	#DMA_IFCR_CTEIF6
 ((
uöt32_t
)0x00800000Ë

	)

3730 
	#DMA_IFCR_CGIF7
 ((
uöt32_t
)0x01000000Ë

	)

3731 
	#DMA_IFCR_CTCIF7
 ((
uöt32_t
)0x02000000Ë

	)

3732 
	#DMA_IFCR_CHTIF7
 ((
uöt32_t
)0x04000000Ë

	)

3733 
	#DMA_IFCR_CTEIF7
 ((
uöt32_t
)0x08000000Ë

	)

3736 
	#DMA_CCR_EN
 ((
uöt32_t
)0x00000001Ë

	)

3737 
	#DMA_CCR_TCIE
 ((
uöt32_t
)0x00000002Ë

	)

3738 
	#DMA_CCR_HTIE
 ((
uöt32_t
)0x00000004Ë

	)

3739 
	#DMA_CCR_TEIE
 ((
uöt32_t
)0x00000008Ë

	)

3740 
	#DMA_CCR_DIR
 ((
uöt32_t
)0x00000010Ë

	)

3741 
	#DMA_CCR_CIRC
 ((
uöt32_t
)0x00000020Ë

	)

3742 
	#DMA_CCR_PINC
 ((
uöt32_t
)0x00000040Ë

	)

3743 
	#DMA_CCR_MINC
 ((
uöt32_t
)0x00000080Ë

	)

3745 
	#DMA_CCR_PSIZE
 ((
uöt32_t
)0x00000300Ë

	)

3746 
	#DMA_CCR_PSIZE_0
 ((
uöt32_t
)0x00000100Ë

	)

3747 
	#DMA_CCR_PSIZE_1
 ((
uöt32_t
)0x00000200Ë

	)

3749 
	#DMA_CCR_MSIZE
 ((
uöt32_t
)0x00000C00Ë

	)

3750 
	#DMA_CCR_MSIZE_0
 ((
uöt32_t
)0x00000400Ë

	)

3751 
	#DMA_CCR_MSIZE_1
 ((
uöt32_t
)0x00000800Ë

	)

3753 
	#DMA_CCR_PL
 ((
uöt32_t
)0x00003000Ë

	)

3754 
	#DMA_CCR_PL_0
 ((
uöt32_t
)0x00001000Ë

	)

3755 
	#DMA_CCR_PL_1
 ((
uöt32_t
)0x00002000Ë

	)

3757 
	#DMA_CCR_MEM2MEM
 ((
uöt32_t
)0x00004000Ë

	)

3760 
	#DMA_CNDTR_NDT
 ((
uöt32_t
)0x0000FFFFË

	)

3763 
	#DMA_CPAR_PA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3766 
	#DMA_CMAR_MA
 ((
uöt32_t
)0xFFFFFFFFË

	)

3774 
	#EXTI_IMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3775 
	#EXTI_IMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3776 
	#EXTI_IMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3777 
	#EXTI_IMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3778 
	#EXTI_IMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3779 
	#EXTI_IMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3780 
	#EXTI_IMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3781 
	#EXTI_IMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3782 
	#EXTI_IMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3783 
	#EXTI_IMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3784 
	#EXTI_IMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3785 
	#EXTI_IMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3786 
	#EXTI_IMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3787 
	#EXTI_IMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3788 
	#EXTI_IMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3789 
	#EXTI_IMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3790 
	#EXTI_IMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3791 
	#EXTI_IMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3792 
	#EXTI_IMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3793 
	#EXTI_IMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3794 
	#EXTI_IMR_MR20
 ((
uöt32_t
)0x00100000Ë

	)

3795 
	#EXTI_IMR_MR21
 ((
uöt32_t
)0x00200000Ë

	)

3796 
	#EXTI_IMR_MR22
 ((
uöt32_t
)0x00400000Ë

	)

3797 
	#EXTI_IMR_MR23
 ((
uöt32_t
)0x00800000Ë

	)

3798 
	#EXTI_IMR_MR24
 ((
uöt32_t
)0x01000000Ë

	)

3799 
	#EXTI_IMR_MR25
 ((
uöt32_t
)0x02000000Ë

	)

3800 
	#EXTI_IMR_MR26
 ((
uöt32_t
)0x04000000Ë

	)

3801 
	#EXTI_IMR_MR27
 ((
uöt32_t
)0x08000000Ë

	)

3802 
	#EXTI_IMR_MR28
 ((
uöt32_t
)0x10000000Ë

	)

3805 
	#EXTI_EMR_MR0
 ((
uöt32_t
)0x00000001Ë

	)

3806 
	#EXTI_EMR_MR1
 ((
uöt32_t
)0x00000002Ë

	)

3807 
	#EXTI_EMR_MR2
 ((
uöt32_t
)0x00000004Ë

	)

3808 
	#EXTI_EMR_MR3
 ((
uöt32_t
)0x00000008Ë

	)

3809 
	#EXTI_EMR_MR4
 ((
uöt32_t
)0x00000010Ë

	)

3810 
	#EXTI_EMR_MR5
 ((
uöt32_t
)0x00000020Ë

	)

3811 
	#EXTI_EMR_MR6
 ((
uöt32_t
)0x00000040Ë

	)

3812 
	#EXTI_EMR_MR7
 ((
uöt32_t
)0x00000080Ë

	)

3813 
	#EXTI_EMR_MR8
 ((
uöt32_t
)0x00000100Ë

	)

3814 
	#EXTI_EMR_MR9
 ((
uöt32_t
)0x00000200Ë

	)

3815 
	#EXTI_EMR_MR10
 ((
uöt32_t
)0x00000400Ë

	)

3816 
	#EXTI_EMR_MR11
 ((
uöt32_t
)0x00000800Ë

	)

3817 
	#EXTI_EMR_MR12
 ((
uöt32_t
)0x00001000Ë

	)

3818 
	#EXTI_EMR_MR13
 ((
uöt32_t
)0x00002000Ë

	)

3819 
	#EXTI_EMR_MR14
 ((
uöt32_t
)0x00004000Ë

	)

3820 
	#EXTI_EMR_MR15
 ((
uöt32_t
)0x00008000Ë

	)

3821 
	#EXTI_EMR_MR16
 ((
uöt32_t
)0x00010000Ë

	)

3822 
	#EXTI_EMR_MR17
 ((
uöt32_t
)0x00020000Ë

	)

3823 
	#EXTI_EMR_MR18
 ((
uöt32_t
)0x00040000Ë

	)

3824 
	#EXTI_EMR_MR19
 ((
uöt32_t
)0x00080000Ë

	)

3825 
	#EXTI_EMR_MR20
 ((
uöt32_t
)0x00100000Ë

	)

3826 
	#EXTI_EMR_MR21
 ((
uöt32_t
)0x00200000Ë

	)

3827 
	#EXTI_EMR_MR22
 ((
uöt32_t
)0x00400000Ë

	)

3828 
	#EXTI_EMR_MR23
 ((
uöt32_t
)0x00800000Ë

	)

3829 
	#EXTI_EMR_MR24
 ((
uöt32_t
)0x01000000Ë

	)

3830 
	#EXTI_EMR_MR25
 ((
uöt32_t
)0x02000000Ë

	)

3831 
	#EXTI_EMR_MR26
 ((
uöt32_t
)0x04000000Ë

	)

3832 
	#EXTI_EMR_MR27
 ((
uöt32_t
)0x08000000Ë

	)

3833 
	#EXTI_EMR_MR28
 ((
uöt32_t
)0x10000000Ë

	)

3836 
	#EXTI_RTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3837 
	#EXTI_RTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3838 
	#EXTI_RTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3839 
	#EXTI_RTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3840 
	#EXTI_RTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3841 
	#EXTI_RTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3842 
	#EXTI_RTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3843 
	#EXTI_RTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3844 
	#EXTI_RTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3845 
	#EXTI_RTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3846 
	#EXTI_RTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3847 
	#EXTI_RTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3848 
	#EXTI_RTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3849 
	#EXTI_RTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3850 
	#EXTI_RTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3851 
	#EXTI_RTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3852 
	#EXTI_RTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3853 
	#EXTI_RTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3854 
	#EXTI_RTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3855 
	#EXTI_RTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3856 
	#EXTI_RTSR_TR20
 ((
uöt32_t
)0x00100000Ë

	)

3857 
	#EXTI_RTSR_TR21
 ((
uöt32_t
)0x00200000Ë

	)

3858 
	#EXTI_RTSR_TR22
 ((
uöt32_t
)0x00400000Ë

	)

3859 
	#EXTI_RTSR_TR23
 ((
uöt32_t
)0x00800000Ë

	)

3860 
	#EXTI_RTSR_TR24
 ((
uöt32_t
)0x01000000Ë

	)

3861 
	#EXTI_RTSR_TR25
 ((
uöt32_t
)0x02000000Ë

	)

3862 
	#EXTI_RTSR_TR26
 ((
uöt32_t
)0x04000000Ë

	)

3863 
	#EXTI_RTSR_TR27
 ((
uöt32_t
)0x08000000Ë

	)

3864 
	#EXTI_RTSR_TR28
 ((
uöt32_t
)0x10000000Ë

	)

3867 
	#EXTI_FTSR_TR0
 ((
uöt32_t
)0x00000001Ë

	)

3868 
	#EXTI_FTSR_TR1
 ((
uöt32_t
)0x00000002Ë

	)

3869 
	#EXTI_FTSR_TR2
 ((
uöt32_t
)0x00000004Ë

	)

3870 
	#EXTI_FTSR_TR3
 ((
uöt32_t
)0x00000008Ë

	)

3871 
	#EXTI_FTSR_TR4
 ((
uöt32_t
)0x00000010Ë

	)

3872 
	#EXTI_FTSR_TR5
 ((
uöt32_t
)0x00000020Ë

	)

3873 
	#EXTI_FTSR_TR6
 ((
uöt32_t
)0x00000040Ë

	)

3874 
	#EXTI_FTSR_TR7
 ((
uöt32_t
)0x00000080Ë

	)

3875 
	#EXTI_FTSR_TR8
 ((
uöt32_t
)0x00000100Ë

	)

3876 
	#EXTI_FTSR_TR9
 ((
uöt32_t
)0x00000200Ë

	)

3877 
	#EXTI_FTSR_TR10
 ((
uöt32_t
)0x00000400Ë

	)

3878 
	#EXTI_FTSR_TR11
 ((
uöt32_t
)0x00000800Ë

	)

3879 
	#EXTI_FTSR_TR12
 ((
uöt32_t
)0x00001000Ë

	)

3880 
	#EXTI_FTSR_TR13
 ((
uöt32_t
)0x00002000Ë

	)

3881 
	#EXTI_FTSR_TR14
 ((
uöt32_t
)0x00004000Ë

	)

3882 
	#EXTI_FTSR_TR15
 ((
uöt32_t
)0x00008000Ë

	)

3883 
	#EXTI_FTSR_TR16
 ((
uöt32_t
)0x00010000Ë

	)

3884 
	#EXTI_FTSR_TR17
 ((
uöt32_t
)0x00020000Ë

	)

3885 
	#EXTI_FTSR_TR18
 ((
uöt32_t
)0x00040000Ë

	)

3886 
	#EXTI_FTSR_TR19
 ((
uöt32_t
)0x00080000Ë

	)

3887 
	#EXTI_FTSR_TR20
 ((
uöt32_t
)0x00100000Ë

	)

3888 
	#EXTI_FTSR_TR21
 ((
uöt32_t
)0x00200000Ë

	)

3889 
	#EXTI_FTSR_TR22
 ((
uöt32_t
)0x00400000Ë

	)

3890 
	#EXTI_FTSR_TR23
 ((
uöt32_t
)0x00800000Ë

	)

3891 
	#EXTI_FTSR_TR24
 ((
uöt32_t
)0x01000000Ë

	)

3892 
	#EXTI_FTSR_TR25
 ((
uöt32_t
)0x02000000Ë

	)

3893 
	#EXTI_FTSR_TR26
 ((
uöt32_t
)0x04000000Ë

	)

3894 
	#EXTI_FTSR_TR27
 ((
uöt32_t
)0x08000000Ë

	)

3895 
	#EXTI_FTSR_TR28
 ((
uöt32_t
)0x10000000Ë

	)

3898 
	#EXTI_SWIER_SWIER0
 ((
uöt32_t
)0x00000001Ë

	)

3899 
	#EXTI_SWIER_SWIER1
 ((
uöt32_t
)0x00000002Ë

	)

3900 
	#EXTI_SWIER_SWIER2
 ((
uöt32_t
)0x00000004Ë

	)

3901 
	#EXTI_SWIER_SWIER3
 ((
uöt32_t
)0x00000008Ë

	)

3902 
	#EXTI_SWIER_SWIER4
 ((
uöt32_t
)0x00000010Ë

	)

3903 
	#EXTI_SWIER_SWIER5
 ((
uöt32_t
)0x00000020Ë

	)

3904 
	#EXTI_SWIER_SWIER6
 ((
uöt32_t
)0x00000040Ë

	)

3905 
	#EXTI_SWIER_SWIER7
 ((
uöt32_t
)0x00000080Ë

	)

3906 
	#EXTI_SWIER_SWIER8
 ((
uöt32_t
)0x00000100Ë

	)

3907 
	#EXTI_SWIER_SWIER9
 ((
uöt32_t
)0x00000200Ë

	)

3908 
	#EXTI_SWIER_SWIER10
 ((
uöt32_t
)0x00000400Ë

	)

3909 
	#EXTI_SWIER_SWIER11
 ((
uöt32_t
)0x00000800Ë

	)

3910 
	#EXTI_SWIER_SWIER12
 ((
uöt32_t
)0x00001000Ë

	)

3911 
	#EXTI_SWIER_SWIER13
 ((
uöt32_t
)0x00002000Ë

	)

3912 
	#EXTI_SWIER_SWIER14
 ((
uöt32_t
)0x00004000Ë

	)

3913 
	#EXTI_SWIER_SWIER15
 ((
uöt32_t
)0x00008000Ë

	)

3914 
	#EXTI_SWIER_SWIER16
 ((
uöt32_t
)0x00010000Ë

	)

3915 
	#EXTI_SWIER_SWIER17
 ((
uöt32_t
)0x00020000Ë

	)

3916 
	#EXTI_SWIER_SWIER18
 ((
uöt32_t
)0x00040000Ë

	)

3917 
	#EXTI_SWIER_SWIER19
 ((
uöt32_t
)0x00080000Ë

	)

3918 
	#EXTI_SWIER_SWIER20
 ((
uöt32_t
)0x00100000Ë

	)

3919 
	#EXTI_SWIER_SWIER21
 ((
uöt32_t
)0x00200000Ë

	)

3920 
	#EXTI_SWIER_SWIER22
 ((
uöt32_t
)0x00400000Ë

	)

3921 
	#EXTI_SWIER_SWIER23
 ((
uöt32_t
)0x00800000Ë

	)

3922 
	#EXTI_SWIER_SWIER24
 ((
uöt32_t
)0x01000000Ë

	)

3923 
	#EXTI_SWIER_SWIER25
 ((
uöt32_t
)0x02000000Ë

	)

3924 
	#EXTI_SWIER_SWIER26
 ((
uöt32_t
)0x04000000Ë

	)

3925 
	#EXTI_SWIER_SWIER27
 ((
uöt32_t
)0x08000000Ë

	)

3926 
	#EXTI_SWIER_SWIER28
 ((
uöt32_t
)0x10000000Ë

	)

3929 
	#EXTI_PR_PR0
 ((
uöt32_t
)0x00000001Ë

	)

3930 
	#EXTI_PR_PR1
 ((
uöt32_t
)0x00000002Ë

	)

3931 
	#EXTI_PR_PR2
 ((
uöt32_t
)0x00000004Ë

	)

3932 
	#EXTI_PR_PR3
 ((
uöt32_t
)0x00000008Ë

	)

3933 
	#EXTI_PR_PR4
 ((
uöt32_t
)0x00000010Ë

	)

3934 
	#EXTI_PR_PR5
 ((
uöt32_t
)0x00000020Ë

	)

3935 
	#EXTI_PR_PR6
 ((
uöt32_t
)0x00000040Ë

	)

3936 
	#EXTI_PR_PR7
 ((
uöt32_t
)0x00000080Ë

	)

3937 
	#EXTI_PR_PR8
 ((
uöt32_t
)0x00000100Ë

	)

3938 
	#EXTI_PR_PR9
 ((
uöt32_t
)0x00000200Ë

	)

3939 
	#EXTI_PR_PR10
 ((
uöt32_t
)0x00000400Ë

	)

3940 
	#EXTI_PR_PR11
 ((
uöt32_t
)0x00000800Ë

	)

3941 
	#EXTI_PR_PR12
 ((
uöt32_t
)0x00001000Ë

	)

3942 
	#EXTI_PR_PR13
 ((
uöt32_t
)0x00002000Ë

	)

3943 
	#EXTI_PR_PR14
 ((
uöt32_t
)0x00004000Ë

	)

3944 
	#EXTI_PR_PR15
 ((
uöt32_t
)0x00008000Ë

	)

3945 
	#EXTI_PR_PR16
 ((
uöt32_t
)0x00010000Ë

	)

3946 
	#EXTI_PR_PR17
 ((
uöt32_t
)0x00020000Ë

	)

3947 
	#EXTI_PR_PR18
 ((
uöt32_t
)0x00040000Ë

	)

3948 
	#EXTI_PR_PR19
 ((
uöt32_t
)0x00080000Ë

	)

3949 
	#EXTI_PR_PR20
 ((
uöt32_t
)0x00100000Ë

	)

3950 
	#EXTI_PR_PR21
 ((
uöt32_t
)0x00200000Ë

	)

3951 
	#EXTI_PR_PR22
 ((
uöt32_t
)0x00400000Ë

	)

3952 
	#EXTI_PR_PR23
 ((
uöt32_t
)0x00800000Ë

	)

3953 
	#EXTI_PR_PR24
 ((
uöt32_t
)0x01000000Ë

	)

3954 
	#EXTI_PR_PR25
 ((
uöt32_t
)0x02000000Ë

	)

3955 
	#EXTI_PR_PR26
 ((
uöt32_t
)0x04000000Ë

	)

3956 
	#EXTI_PR_PR27
 ((
uöt32_t
)0x08000000Ë

	)

3957 
	#EXTI_PR_PR28
 ((
uöt32_t
)0x10000000Ë

	)

3965 
	#FLASH_ACR_LATENCY
 ((
uöt8_t
)0x03Ë

	)

3966 
	#FLASH_ACR_LATENCY_0
 ((
uöt8_t
)0x01Ë

	)

3967 
	#FLASH_ACR_LATENCY_1
 ((
uöt8_t
)0x02Ë

	)

3969 
	#FLASH_ACR_HLFCYA
 ((
uöt8_t
)0x08Ë

	)

3970 
	#FLASH_ACR_PRFTBE
 ((
uöt8_t
)0x10Ë

	)

3971 
	#FLASH_ACR_PRFTBS
 ((
uöt8_t
)0x20)

	)

3974 
	#FLASH_KEYR_FKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3976 
	#RDP_KEY
 ((
uöt16_t
)0x00A5Ë

	)

3977 
	#FLASH_KEY1
 ((
uöt32_t
)0x45670123Ë

	)

3978 
	#FLASH_KEY2
 ((
uöt32_t
)0xCDEF89ABË

	)

3981 
	#FLASH_OPTKEYR_OPTKEYR
 ((
uöt32_t
)0xFFFFFFFFË

	)

3983 
	#FLASH_OPTKEY1
 
FLASH_KEY1


	)

3984 
	#FLASH_OPTKEY2
 
FLASH_KEY2


	)

3987 
	#FLASH_SR_BSY
 ((
uöt32_t
)0x00000001Ë

	)

3988 
	#FLASH_SR_PGERR
 ((
uöt32_t
)0x00000004Ë

	)

3989 
	#FLASH_SR_WRPERR
 ((
uöt32_t
)0x00000010Ë

	)

3990 
	#FLASH_SR_EOP
 ((
uöt32_t
)0x00000020Ë

	)

3993 
	#FLASH_CR_PG
 ((
uöt32_t
)0x00000001Ë

	)

3994 
	#FLASH_CR_PER
 ((
uöt32_t
)0x00000002Ë

	)

3995 
	#FLASH_CR_MER
 ((
uöt32_t
)0x00000004Ë

	)

3996 
	#FLASH_CR_OPTPG
 ((
uöt32_t
)0x00000010Ë

	)

3997 
	#FLASH_CR_OPTER
 ((
uöt32_t
)0x00000020Ë

	)

3998 
	#FLASH_CR_STRT
 ((
uöt32_t
)0x00000040Ë

	)

3999 
	#FLASH_CR_LOCK
 ((
uöt32_t
)0x00000080Ë

	)

4000 
	#FLASH_CR_OPTWRE
 ((
uöt32_t
)0x00000200Ë

	)

4001 
	#FLASH_CR_ERRIE
 ((
uöt32_t
)0x00000400Ë

	)

4002 
	#FLASH_CR_EOPIE
 ((
uöt32_t
)0x00001000Ë

	)

4003 
	#FLASH_CR_OBL_LAUNCH
 ((
uöt32_t
)0x00002000Ë

	)

4006 
	#FLASH_AR_FAR
 ((
uöt32_t
)0xFFFFFFFFË

	)

4009 
	#FLASH_OBR_OPTERR
 ((
uöt32_t
)0x00000001Ë

	)

4010 
	#FLASH_OBR_RDPRT1
 ((
uöt32_t
)0x00000002Ë

	)

4011 
	#FLASH_OBR_RDPRT2
 ((
uöt32_t
)0x00000004Ë

	)

4013 
	#FLASH_OBR_USER
 ((
uöt32_t
)0x00003700Ë

	)

4014 
	#FLASH_OBR_IWDG_SW
 ((
uöt32_t
)0x00000100Ë

	)

4015 
	#FLASH_OBR_nRST_STOP
 ((
uöt32_t
)0x00000200Ë

	)

4016 
	#FLASH_OBR_nRST_STDBY
 ((
uöt32_t
)0x00000400Ë

	)

4019 
	#FLASH_WRPR_WRP
 ((
uöt32_t
)0xFFFFFFFFË

	)

4024 
	#OB_RDP_RDP
 ((
uöt32_t
)0x000000FFË

	)

4025 
	#OB_RDP_nRDP
 ((
uöt32_t
)0x0000FF00Ë

	)

4028 
	#OB_USER_USER
 ((
uöt32_t
)0x00FF0000Ë

	)

4029 
	#OB_USER_nUSER
 ((
uöt32_t
)0xFF000000Ë

	)

4032 
	#OB_WRP0_WRP0
 ((
uöt32_t
)0x000000FFË

	)

4033 
	#OB_WRP0_nWRP0
 ((
uöt32_t
)0x0000FF00Ë

	)

4036 
	#OB_WRP1_WRP1
 ((
uöt32_t
)0x00FF0000Ë

	)

4037 
	#OB_WRP1_nWRP1
 ((
uöt32_t
)0xFF000000Ë

	)

4040 
	#OB_WRP2_WRP2
 ((
uöt32_t
)0x000000FFË

	)

4041 
	#OB_WRP2_nWRP2
 ((
uöt32_t
)0x0000FF00Ë

	)

4044 
	#OB_WRP3_WRP3
 ((
uöt32_t
)0x00FF0000Ë

	)

4045 
	#OB_WRP3_nWRP3
 ((
uöt32_t
)0xFF000000Ë

	)

4052 
	#GPIO_MODER_MODER0
 ((
uöt32_t
)0x00000003)

	)

4053 
	#GPIO_MODER_MODER0_0
 ((
uöt32_t
)0x00000001)

	)

4054 
	#GPIO_MODER_MODER0_1
 ((
uöt32_t
)0x00000002)

	)

4055 
	#GPIO_MODER_MODER1
 ((
uöt32_t
)0x0000000C)

	)

4056 
	#GPIO_MODER_MODER1_0
 ((
uöt32_t
)0x00000004)

	)

4057 
	#GPIO_MODER_MODER1_1
 ((
uöt32_t
)0x00000008)

	)

4058 
	#GPIO_MODER_MODER2
 ((
uöt32_t
)0x00000030)

	)

4059 
	#GPIO_MODER_MODER2_0
 ((
uöt32_t
)0x00000010)

	)

4060 
	#GPIO_MODER_MODER2_1
 ((
uöt32_t
)0x00000020)

	)

4061 
	#GPIO_MODER_MODER3
 ((
uöt32_t
)0x000000C0)

	)

4062 
	#GPIO_MODER_MODER3_0
 ((
uöt32_t
)0x00000040)

	)

4063 
	#GPIO_MODER_MODER3_1
 ((
uöt32_t
)0x00000080)

	)

4064 
	#GPIO_MODER_MODER4
 ((
uöt32_t
)0x00000300)

	)

4065 
	#GPIO_MODER_MODER4_0
 ((
uöt32_t
)0x00000100)

	)

4066 
	#GPIO_MODER_MODER4_1
 ((
uöt32_t
)0x00000200)

	)

4067 
	#GPIO_MODER_MODER5
 ((
uöt32_t
)0x00000C00)

	)

4068 
	#GPIO_MODER_MODER5_0
 ((
uöt32_t
)0x00000400)

	)

4069 
	#GPIO_MODER_MODER5_1
 ((
uöt32_t
)0x00000800)

	)

4070 
	#GPIO_MODER_MODER6
 ((
uöt32_t
)0x00003000)

	)

4071 
	#GPIO_MODER_MODER6_0
 ((
uöt32_t
)0x00001000)

	)

4072 
	#GPIO_MODER_MODER6_1
 ((
uöt32_t
)0x00002000)

	)

4073 
	#GPIO_MODER_MODER7
 ((
uöt32_t
)0x0000C000)

	)

4074 
	#GPIO_MODER_MODER7_0
 ((
uöt32_t
)0x00004000)

	)

4075 
	#GPIO_MODER_MODER7_1
 ((
uöt32_t
)0x00008000)

	)

4076 
	#GPIO_MODER_MODER8
 ((
uöt32_t
)0x00030000)

	)

4077 
	#GPIO_MODER_MODER8_0
 ((
uöt32_t
)0x00010000)

	)

4078 
	#GPIO_MODER_MODER8_1
 ((
uöt32_t
)0x00020000)

	)

4079 
	#GPIO_MODER_MODER9
 ((
uöt32_t
)0x000C0000)

	)

4080 
	#GPIO_MODER_MODER9_0
 ((
uöt32_t
)0x00040000)

	)

4081 
	#GPIO_MODER_MODER9_1
 ((
uöt32_t
)0x00080000)

	)

4082 
	#GPIO_MODER_MODER10
 ((
uöt32_t
)0x00300000)

	)

4083 
	#GPIO_MODER_MODER10_0
 ((
uöt32_t
)0x00100000)

	)

4084 
	#GPIO_MODER_MODER10_1
 ((
uöt32_t
)0x00200000)

	)

4085 
	#GPIO_MODER_MODER11
 ((
uöt32_t
)0x00C00000)

	)

4086 
	#GPIO_MODER_MODER11_0
 ((
uöt32_t
)0x00400000)

	)

4087 
	#GPIO_MODER_MODER11_1
 ((
uöt32_t
)0x00800000)

	)

4088 
	#GPIO_MODER_MODER12
 ((
uöt32_t
)0x03000000)

	)

4089 
	#GPIO_MODER_MODER12_0
 ((
uöt32_t
)0x01000000)

	)

4090 
	#GPIO_MODER_MODER12_1
 ((
uöt32_t
)0x02000000)

	)

4091 
	#GPIO_MODER_MODER13
 ((
uöt32_t
)0x0C000000)

	)

4092 
	#GPIO_MODER_MODER13_0
 ((
uöt32_t
)0x04000000)

	)

4093 
	#GPIO_MODER_MODER13_1
 ((
uöt32_t
)0x08000000)

	)

4094 
	#GPIO_MODER_MODER14
 ((
uöt32_t
)0x30000000)

	)

4095 
	#GPIO_MODER_MODER14_0
 ((
uöt32_t
)0x10000000)

	)

4096 
	#GPIO_MODER_MODER14_1
 ((
uöt32_t
)0x20000000)

	)

4097 
	#GPIO_MODER_MODER15
 ((
uöt32_t
)0xC0000000)

	)

4098 
	#GPIO_MODER_MODER15_0
 ((
uöt32_t
)0x40000000)

	)

4099 
	#GPIO_MODER_MODER15_1
 ((
uöt32_t
)0x80000000)

	)

4103 
	#GPIO_OTYPER_OT_0
 ((
uöt32_t
)0x00000001)

	)

4104 
	#GPIO_OTYPER_OT_1
 ((
uöt32_t
)0x00000002)

	)

4105 
	#GPIO_OTYPER_OT_2
 ((
uöt32_t
)0x00000004)

	)

4106 
	#GPIO_OTYPER_OT_3
 ((
uöt32_t
)0x00000008)

	)

4107 
	#GPIO_OTYPER_OT_4
 ((
uöt32_t
)0x00000010)

	)

4108 
	#GPIO_OTYPER_OT_5
 ((
uöt32_t
)0x00000020)

	)

4109 
	#GPIO_OTYPER_OT_6
 ((
uöt32_t
)0x00000040)

	)

4110 
	#GPIO_OTYPER_OT_7
 ((
uöt32_t
)0x00000080)

	)

4111 
	#GPIO_OTYPER_OT_8
 ((
uöt32_t
)0x00000100)

	)

4112 
	#GPIO_OTYPER_OT_9
 ((
uöt32_t
)0x00000200)

	)

4113 
	#GPIO_OTYPER_OT_10
 ((
uöt32_t
)0x00000400)

	)

4114 
	#GPIO_OTYPER_OT_11
 ((
uöt32_t
)0x00000800)

	)

4115 
	#GPIO_OTYPER_OT_12
 ((
uöt32_t
)0x00001000)

	)

4116 
	#GPIO_OTYPER_OT_13
 ((
uöt32_t
)0x00002000)

	)

4117 
	#GPIO_OTYPER_OT_14
 ((
uöt32_t
)0x00004000)

	)

4118 
	#GPIO_OTYPER_OT_15
 ((
uöt32_t
)0x00008000)

	)

4122 
	#GPIO_OSPEEDER_OSPEEDR0
 ((
uöt32_t
)0x00000003)

	)

4123 
	#GPIO_OSPEEDER_OSPEEDR0_0
 ((
uöt32_t
)0x00000001)

	)

4124 
	#GPIO_OSPEEDER_OSPEEDR0_1
 ((
uöt32_t
)0x00000002)

	)

4125 
	#GPIO_OSPEEDER_OSPEEDR1
 ((
uöt32_t
)0x0000000C)

	)

4126 
	#GPIO_OSPEEDER_OSPEEDR1_0
 ((
uöt32_t
)0x00000004)

	)

4127 
	#GPIO_OSPEEDER_OSPEEDR1_1
 ((
uöt32_t
)0x00000008)

	)

4128 
	#GPIO_OSPEEDER_OSPEEDR2
 ((
uöt32_t
)0x00000030)

	)

4129 
	#GPIO_OSPEEDER_OSPEEDR2_0
 ((
uöt32_t
)0x00000010)

	)

4130 
	#GPIO_OSPEEDER_OSPEEDR2_1
 ((
uöt32_t
)0x00000020)

	)

4131 
	#GPIO_OSPEEDER_OSPEEDR3
 ((
uöt32_t
)0x000000C0)

	)

4132 
	#GPIO_OSPEEDER_OSPEEDR3_0
 ((
uöt32_t
)0x00000040)

	)

4133 
	#GPIO_OSPEEDER_OSPEEDR3_1
 ((
uöt32_t
)0x00000080)

	)

4134 
	#GPIO_OSPEEDER_OSPEEDR4
 ((
uöt32_t
)0x00000300)

	)

4135 
	#GPIO_OSPEEDER_OSPEEDR4_0
 ((
uöt32_t
)0x00000100)

	)

4136 
	#GPIO_OSPEEDER_OSPEEDR4_1
 ((
uöt32_t
)0x00000200)

	)

4137 
	#GPIO_OSPEEDER_OSPEEDR5
 ((
uöt32_t
)0x00000C00)

	)

4138 
	#GPIO_OSPEEDER_OSPEEDR5_0
 ((
uöt32_t
)0x00000400)

	)

4139 
	#GPIO_OSPEEDER_OSPEEDR5_1
 ((
uöt32_t
)0x00000800)

	)

4140 
	#GPIO_OSPEEDER_OSPEEDR6
 ((
uöt32_t
)0x00003000)

	)

4141 
	#GPIO_OSPEEDER_OSPEEDR6_0
 ((
uöt32_t
)0x00001000)

	)

4142 
	#GPIO_OSPEEDER_OSPEEDR6_1
 ((
uöt32_t
)0x00002000)

	)

4143 
	#GPIO_OSPEEDER_OSPEEDR7
 ((
uöt32_t
)0x0000C000)

	)

4144 
	#GPIO_OSPEEDER_OSPEEDR7_0
 ((
uöt32_t
)0x00004000)

	)

4145 
	#GPIO_OSPEEDER_OSPEEDR7_1
 ((
uöt32_t
)0x00008000)

	)

4146 
	#GPIO_OSPEEDER_OSPEEDR8
 ((
uöt32_t
)0x00030000)

	)

4147 
	#GPIO_OSPEEDER_OSPEEDR8_0
 ((
uöt32_t
)0x00010000)

	)

4148 
	#GPIO_OSPEEDER_OSPEEDR8_1
 ((
uöt32_t
)0x00020000)

	)

4149 
	#GPIO_OSPEEDER_OSPEEDR9
 ((
uöt32_t
)0x000C0000)

	)

4150 
	#GPIO_OSPEEDER_OSPEEDR9_0
 ((
uöt32_t
)0x00040000)

	)

4151 
	#GPIO_OSPEEDER_OSPEEDR9_1
 ((
uöt32_t
)0x00080000)

	)

4152 
	#GPIO_OSPEEDER_OSPEEDR10
 ((
uöt32_t
)0x00300000)

	)

4153 
	#GPIO_OSPEEDER_OSPEEDR10_0
 ((
uöt32_t
)0x00100000)

	)

4154 
	#GPIO_OSPEEDER_OSPEEDR10_1
 ((
uöt32_t
)0x00200000)

	)

4155 
	#GPIO_OSPEEDER_OSPEEDR11
 ((
uöt32_t
)0x00C00000)

	)

4156 
	#GPIO_OSPEEDER_OSPEEDR11_0
 ((
uöt32_t
)0x00400000)

	)

4157 
	#GPIO_OSPEEDER_OSPEEDR11_1
 ((
uöt32_t
)0x00800000)

	)

4158 
	#GPIO_OSPEEDER_OSPEEDR12
 ((
uöt32_t
)0x03000000)

	)

4159 
	#GPIO_OSPEEDER_OSPEEDR12_0
 ((
uöt32_t
)0x01000000)

	)

4160 
	#GPIO_OSPEEDER_OSPEEDR12_1
 ((
uöt32_t
)0x02000000)

	)

4161 
	#GPIO_OSPEEDER_OSPEEDR13
 ((
uöt32_t
)0x0C000000)

	)

4162 
	#GPIO_OSPEEDER_OSPEEDR13_0
 ((
uöt32_t
)0x04000000)

	)

4163 
	#GPIO_OSPEEDER_OSPEEDR13_1
 ((
uöt32_t
)0x08000000)

	)

4164 
	#GPIO_OSPEEDER_OSPEEDR14
 ((
uöt32_t
)0x30000000)

	)

4165 
	#GPIO_OSPEEDER_OSPEEDR14_0
 ((
uöt32_t
)0x10000000)

	)

4166 
	#GPIO_OSPEEDER_OSPEEDR14_1
 ((
uöt32_t
)0x20000000)

	)

4167 
	#GPIO_OSPEEDER_OSPEEDR15
 ((
uöt32_t
)0xC0000000)

	)

4168 
	#GPIO_OSPEEDER_OSPEEDR15_0
 ((
uöt32_t
)0x40000000)

	)

4169 
	#GPIO_OSPEEDER_OSPEEDR15_1
 ((
uöt32_t
)0x80000000)

	)

4172 
	#GPIO_PUPDR_PUPDR0
 ((
uöt32_t
)0x00000003)

	)

4173 
	#GPIO_PUPDR_PUPDR0_0
 ((
uöt32_t
)0x00000001)

	)

4174 
	#GPIO_PUPDR_PUPDR0_1
 ((
uöt32_t
)0x00000002)

	)

4175 
	#GPIO_PUPDR_PUPDR1
 ((
uöt32_t
)0x0000000C)

	)

4176 
	#GPIO_PUPDR_PUPDR1_0
 ((
uöt32_t
)0x00000004)

	)

4177 
	#GPIO_PUPDR_PUPDR1_1
 ((
uöt32_t
)0x00000008)

	)

4178 
	#GPIO_PUPDR_PUPDR2
 ((
uöt32_t
)0x00000030)

	)

4179 
	#GPIO_PUPDR_PUPDR2_0
 ((
uöt32_t
)0x00000010)

	)

4180 
	#GPIO_PUPDR_PUPDR2_1
 ((
uöt32_t
)0x00000020)

	)

4181 
	#GPIO_PUPDR_PUPDR3
 ((
uöt32_t
)0x000000C0)

	)

4182 
	#GPIO_PUPDR_PUPDR3_0
 ((
uöt32_t
)0x00000040)

	)

4183 
	#GPIO_PUPDR_PUPDR3_1
 ((
uöt32_t
)0x00000080)

	)

4184 
	#GPIO_PUPDR_PUPDR4
 ((
uöt32_t
)0x00000300)

	)

4185 
	#GPIO_PUPDR_PUPDR4_0
 ((
uöt32_t
)0x00000100)

	)

4186 
	#GPIO_PUPDR_PUPDR4_1
 ((
uöt32_t
)0x00000200)

	)

4187 
	#GPIO_PUPDR_PUPDR5
 ((
uöt32_t
)0x00000C00)

	)

4188 
	#GPIO_PUPDR_PUPDR5_0
 ((
uöt32_t
)0x00000400)

	)

4189 
	#GPIO_PUPDR_PUPDR5_1
 ((
uöt32_t
)0x00000800)

	)

4190 
	#GPIO_PUPDR_PUPDR6
 ((
uöt32_t
)0x00003000)

	)

4191 
	#GPIO_PUPDR_PUPDR6_0
 ((
uöt32_t
)0x00001000)

	)

4192 
	#GPIO_PUPDR_PUPDR6_1
 ((
uöt32_t
)0x00002000)

	)

4193 
	#GPIO_PUPDR_PUPDR7
 ((
uöt32_t
)0x0000C000)

	)

4194 
	#GPIO_PUPDR_PUPDR7_0
 ((
uöt32_t
)0x00004000)

	)

4195 
	#GPIO_PUPDR_PUPDR7_1
 ((
uöt32_t
)0x00008000)

	)

4196 
	#GPIO_PUPDR_PUPDR8
 ((
uöt32_t
)0x00030000)

	)

4197 
	#GPIO_PUPDR_PUPDR8_0
 ((
uöt32_t
)0x00010000)

	)

4198 
	#GPIO_PUPDR_PUPDR8_1
 ((
uöt32_t
)0x00020000)

	)

4199 
	#GPIO_PUPDR_PUPDR9
 ((
uöt32_t
)0x000C0000)

	)

4200 
	#GPIO_PUPDR_PUPDR9_0
 ((
uöt32_t
)0x00040000)

	)

4201 
	#GPIO_PUPDR_PUPDR9_1
 ((
uöt32_t
)0x00080000)

	)

4202 
	#GPIO_PUPDR_PUPDR10
 ((
uöt32_t
)0x00300000)

	)

4203 
	#GPIO_PUPDR_PUPDR10_0
 ((
uöt32_t
)0x00100000)

	)

4204 
	#GPIO_PUPDR_PUPDR10_1
 ((
uöt32_t
)0x00200000)

	)

4205 
	#GPIO_PUPDR_PUPDR11
 ((
uöt32_t
)0x00C00000)

	)

4206 
	#GPIO_PUPDR_PUPDR11_0
 ((
uöt32_t
)0x00400000)

	)

4207 
	#GPIO_PUPDR_PUPDR11_1
 ((
uöt32_t
)0x00800000)

	)

4208 
	#GPIO_PUPDR_PUPDR12
 ((
uöt32_t
)0x03000000)

	)

4209 
	#GPIO_PUPDR_PUPDR12_0
 ((
uöt32_t
)0x01000000)

	)

4210 
	#GPIO_PUPDR_PUPDR12_1
 ((
uöt32_t
)0x02000000)

	)

4211 
	#GPIO_PUPDR_PUPDR13
 ((
uöt32_t
)0x0C000000)

	)

4212 
	#GPIO_PUPDR_PUPDR13_0
 ((
uöt32_t
)0x04000000)

	)

4213 
	#GPIO_PUPDR_PUPDR13_1
 ((
uöt32_t
)0x08000000)

	)

4214 
	#GPIO_PUPDR_PUPDR14
 ((
uöt32_t
)0x30000000)

	)

4215 
	#GPIO_PUPDR_PUPDR14_0
 ((
uöt32_t
)0x10000000)

	)

4216 
	#GPIO_PUPDR_PUPDR14_1
 ((
uöt32_t
)0x20000000)

	)

4217 
	#GPIO_PUPDR_PUPDR15
 ((
uöt32_t
)0xC0000000)

	)

4218 
	#GPIO_PUPDR_PUPDR15_0
 ((
uöt32_t
)0x40000000)

	)

4219 
	#GPIO_PUPDR_PUPDR15_1
 ((
uöt32_t
)0x80000000)

	)

4222 
	#GPIO_IDR_0
 ((
uöt32_t
)0x00000001)

	)

4223 
	#GPIO_IDR_1
 ((
uöt32_t
)0x00000002)

	)

4224 
	#GPIO_IDR_2
 ((
uöt32_t
)0x00000004)

	)

4225 
	#GPIO_IDR_3
 ((
uöt32_t
)0x00000008)

	)

4226 
	#GPIO_IDR_4
 ((
uöt32_t
)0x00000010)

	)

4227 
	#GPIO_IDR_5
 ((
uöt32_t
)0x00000020)

	)

4228 
	#GPIO_IDR_6
 ((
uöt32_t
)0x00000040)

	)

4229 
	#GPIO_IDR_7
 ((
uöt32_t
)0x00000080)

	)

4230 
	#GPIO_IDR_8
 ((
uöt32_t
)0x00000100)

	)

4231 
	#GPIO_IDR_9
 ((
uöt32_t
)0x00000200)

	)

4232 
	#GPIO_IDR_10
 ((
uöt32_t
)0x00000400)

	)

4233 
	#GPIO_IDR_11
 ((
uöt32_t
)0x00000800)

	)

4234 
	#GPIO_IDR_12
 ((
uöt32_t
)0x00001000)

	)

4235 
	#GPIO_IDR_13
 ((
uöt32_t
)0x00002000)

	)

4236 
	#GPIO_IDR_14
 ((
uöt32_t
)0x00004000)

	)

4237 
	#GPIO_IDR_15
 ((
uöt32_t
)0x00008000)

	)

4240 
	#GPIO_ODR_0
 ((
uöt32_t
)0x00000001)

	)

4241 
	#GPIO_ODR_1
 ((
uöt32_t
)0x00000002)

	)

4242 
	#GPIO_ODR_2
 ((
uöt32_t
)0x00000004)

	)

4243 
	#GPIO_ODR_3
 ((
uöt32_t
)0x00000008)

	)

4244 
	#GPIO_ODR_4
 ((
uöt32_t
)0x00000010)

	)

4245 
	#GPIO_ODR_5
 ((
uöt32_t
)0x00000020)

	)

4246 
	#GPIO_ODR_6
 ((
uöt32_t
)0x00000040)

	)

4247 
	#GPIO_ODR_7
 ((
uöt32_t
)0x00000080)

	)

4248 
	#GPIO_ODR_8
 ((
uöt32_t
)0x00000100)

	)

4249 
	#GPIO_ODR_9
 ((
uöt32_t
)0x00000200)

	)

4250 
	#GPIO_ODR_10
 ((
uöt32_t
)0x00000400)

	)

4251 
	#GPIO_ODR_11
 ((
uöt32_t
)0x00000800)

	)

4252 
	#GPIO_ODR_12
 ((
uöt32_t
)0x00001000)

	)

4253 
	#GPIO_ODR_13
 ((
uöt32_t
)0x00002000)

	)

4254 
	#GPIO_ODR_14
 ((
uöt32_t
)0x00004000)

	)

4255 
	#GPIO_ODR_15
 ((
uöt32_t
)0x00008000)

	)

4258 
	#GPIO_BSRR_BS_0
 ((
uöt32_t
)0x00000001)

	)

4259 
	#GPIO_BSRR_BS_1
 ((
uöt32_t
)0x00000002)

	)

4260 
	#GPIO_BSRR_BS_2
 ((
uöt32_t
)0x00000004)

	)

4261 
	#GPIO_BSRR_BS_3
 ((
uöt32_t
)0x00000008)

	)

4262 
	#GPIO_BSRR_BS_4
 ((
uöt32_t
)0x00000010)

	)

4263 
	#GPIO_BSRR_BS_5
 ((
uöt32_t
)0x00000020)

	)

4264 
	#GPIO_BSRR_BS_6
 ((
uöt32_t
)0x00000040)

	)

4265 
	#GPIO_BSRR_BS_7
 ((
uöt32_t
)0x00000080)

	)

4266 
	#GPIO_BSRR_BS_8
 ((
uöt32_t
)0x00000100)

	)

4267 
	#GPIO_BSRR_BS_9
 ((
uöt32_t
)0x00000200)

	)

4268 
	#GPIO_BSRR_BS_10
 ((
uöt32_t
)0x00000400)

	)

4269 
	#GPIO_BSRR_BS_11
 ((
uöt32_t
)0x00000800)

	)

4270 
	#GPIO_BSRR_BS_12
 ((
uöt32_t
)0x00001000)

	)

4271 
	#GPIO_BSRR_BS_13
 ((
uöt32_t
)0x00002000)

	)

4272 
	#GPIO_BSRR_BS_14
 ((
uöt32_t
)0x00004000)

	)

4273 
	#GPIO_BSRR_BS_15
 ((
uöt32_t
)0x00008000)

	)

4274 
	#GPIO_BSRR_BR_0
 ((
uöt32_t
)0x00010000)

	)

4275 
	#GPIO_BSRR_BR_1
 ((
uöt32_t
)0x00020000)

	)

4276 
	#GPIO_BSRR_BR_2
 ((
uöt32_t
)0x00040000)

	)

4277 
	#GPIO_BSRR_BR_3
 ((
uöt32_t
)0x00080000)

	)

4278 
	#GPIO_BSRR_BR_4
 ((
uöt32_t
)0x00100000)

	)

4279 
	#GPIO_BSRR_BR_5
 ((
uöt32_t
)0x00200000)

	)

4280 
	#GPIO_BSRR_BR_6
 ((
uöt32_t
)0x00400000)

	)

4281 
	#GPIO_BSRR_BR_7
 ((
uöt32_t
)0x00800000)

	)

4282 
	#GPIO_BSRR_BR_8
 ((
uöt32_t
)0x01000000)

	)

4283 
	#GPIO_BSRR_BR_9
 ((
uöt32_t
)0x02000000)

	)

4284 
	#GPIO_BSRR_BR_10
 ((
uöt32_t
)0x04000000)

	)

4285 
	#GPIO_BSRR_BR_11
 ((
uöt32_t
)0x08000000)

	)

4286 
	#GPIO_BSRR_BR_12
 ((
uöt32_t
)0x10000000)

	)

4287 
	#GPIO_BSRR_BR_13
 ((
uöt32_t
)0x20000000)

	)

4288 
	#GPIO_BSRR_BR_14
 ((
uöt32_t
)0x40000000)

	)

4289 
	#GPIO_BSRR_BR_15
 ((
uöt32_t
)0x80000000)

	)

4292 
	#GPIO_LCKR_LCK0
 ((
uöt32_t
)0x00000001)

	)

4293 
	#GPIO_LCKR_LCK1
 ((
uöt32_t
)0x00000002)

	)

4294 
	#GPIO_LCKR_LCK2
 ((
uöt32_t
)0x00000004)

	)

4295 
	#GPIO_LCKR_LCK3
 ((
uöt32_t
)0x00000008)

	)

4296 
	#GPIO_LCKR_LCK4
 ((
uöt32_t
)0x00000010)

	)

4297 
	#GPIO_LCKR_LCK5
 ((
uöt32_t
)0x00000020)

	)

4298 
	#GPIO_LCKR_LCK6
 ((
uöt32_t
)0x00000040)

	)

4299 
	#GPIO_LCKR_LCK7
 ((
uöt32_t
)0x00000080)

	)

4300 
	#GPIO_LCKR_LCK8
 ((
uöt32_t
)0x00000100)

	)

4301 
	#GPIO_LCKR_LCK9
 ((
uöt32_t
)0x00000200)

	)

4302 
	#GPIO_LCKR_LCK10
 ((
uöt32_t
)0x00000400)

	)

4303 
	#GPIO_LCKR_LCK11
 ((
uöt32_t
)0x00000800)

	)

4304 
	#GPIO_LCKR_LCK12
 ((
uöt32_t
)0x00001000)

	)

4305 
	#GPIO_LCKR_LCK13
 ((
uöt32_t
)0x00002000)

	)

4306 
	#GPIO_LCKR_LCK14
 ((
uöt32_t
)0x00004000)

	)

4307 
	#GPIO_LCKR_LCK15
 ((
uöt32_t
)0x00008000)

	)

4308 
	#GPIO_LCKR_LCKK
 ((
uöt32_t
)0x00010000)

	)

4311 
	#GPIO_AFRL_AFRL0
 ((
uöt32_t
)0x0000000F)

	)

4312 
	#GPIO_AFRL_AFRL1
 ((
uöt32_t
)0x000000F0)

	)

4313 
	#GPIO_AFRL_AFRL2
 ((
uöt32_t
)0x00000F00)

	)

4314 
	#GPIO_AFRL_AFRL3
 ((
uöt32_t
)0x0000F000)

	)

4315 
	#GPIO_AFRL_AFRL4
 ((
uöt32_t
)0x000F0000)

	)

4316 
	#GPIO_AFRL_AFRL5
 ((
uöt32_t
)0x00F00000)

	)

4317 
	#GPIO_AFRL_AFRL6
 ((
uöt32_t
)0x0F000000)

	)

4318 
	#GPIO_AFRL_AFRL7
 ((
uöt32_t
)0xF0000000)

	)

4321 
	#GPIO_AFRH_AFRH0
 ((
uöt32_t
)0x0000000F)

	)

4322 
	#GPIO_AFRH_AFRH1
 ((
uöt32_t
)0x000000F0)

	)

4323 
	#GPIO_AFRH_AFRH2
 ((
uöt32_t
)0x00000F00)

	)

4324 
	#GPIO_AFRH_AFRH3
 ((
uöt32_t
)0x0000F000)

	)

4325 
	#GPIO_AFRH_AFRH4
 ((
uöt32_t
)0x000F0000)

	)

4326 
	#GPIO_AFRH_AFRH5
 ((
uöt32_t
)0x00F00000)

	)

4327 
	#GPIO_AFRH_AFRH6
 ((
uöt32_t
)0x0F000000)

	)

4328 
	#GPIO_AFRH_AFRH7
 ((
uöt32_t
)0xF0000000)

	)

4331 
	#GPIO_BRR_BR_0
 ((
uöt32_t
)0x00000001)

	)

4332 
	#GPIO_BRR_BR_1
 ((
uöt32_t
)0x00000002)

	)

4333 
	#GPIO_BRR_BR_2
 ((
uöt32_t
)0x00000004)

	)

4334 
	#GPIO_BRR_BR_3
 ((
uöt32_t
)0x00000008)

	)

4335 
	#GPIO_BRR_BR_4
 ((
uöt32_t
)0x00000010)

	)

4336 
	#GPIO_BRR_BR_5
 ((
uöt32_t
)0x00000020)

	)

4337 
	#GPIO_BRR_BR_6
 ((
uöt32_t
)0x00000040)

	)

4338 
	#GPIO_BRR_BR_7
 ((
uöt32_t
)0x00000080)

	)

4339 
	#GPIO_BRR_BR_8
 ((
uöt32_t
)0x00000100)

	)

4340 
	#GPIO_BRR_BR_9
 ((
uöt32_t
)0x00000200)

	)

4341 
	#GPIO_BRR_BR_10
 ((
uöt32_t
)0x00000400)

	)

4342 
	#GPIO_BRR_BR_11
 ((
uöt32_t
)0x00000800)

	)

4343 
	#GPIO_BRR_BR_12
 ((
uöt32_t
)0x00001000)

	)

4344 
	#GPIO_BRR_BR_13
 ((
uöt32_t
)0x00002000)

	)

4345 
	#GPIO_BRR_BR_14
 ((
uöt32_t
)0x00004000)

	)

4346 
	#GPIO_BRR_BR_15
 ((
uöt32_t
)0x00008000)

	)

4354 
	#I2C_CR1_PE
 ((
uöt32_t
)0x00000001Ë

	)

4355 
	#I2C_CR1_TXIE
 ((
uöt32_t
)0x00000002Ë

	)

4356 
	#I2C_CR1_RXIE
 ((
uöt32_t
)0x00000004Ë

	)

4357 
	#I2C_CR1_ADDRIE
 ((
uöt32_t
)0x00000008Ë

	)

4358 
	#I2C_CR1_NACKIE
 ((
uöt32_t
)0x00000010Ë

	)

4359 
	#I2C_CR1_STOPIE
 ((
uöt32_t
)0x00000020Ë

	)

4360 
	#I2C_CR1_TCIE
 ((
uöt32_t
)0x00000040Ë

	)

4361 
	#I2C_CR1_ERRIE
 ((
uöt32_t
)0x00000080Ë

	)

4362 
	#I2C_CR1_DFN
 ((
uöt32_t
)0x00000F00Ë

	)

4363 
	#I2C_CR1_ANFOFF
 ((
uöt32_t
)0x00001000Ë

	)

4364 
	#I2C_CR1_SWRST
 ((
uöt32_t
)0x00002000Ë

	)

4365 
	#I2C_CR1_TXDMAEN
 ((
uöt32_t
)0x00004000Ë

	)

4366 
	#I2C_CR1_RXDMAEN
 ((
uöt32_t
)0x00008000Ë

	)

4367 
	#I2C_CR1_SBC
 ((
uöt32_t
)0x00010000Ë

	)

4368 
	#I2C_CR1_NOSTRETCH
 ((
uöt32_t
)0x00020000Ë

	)

4369 
	#I2C_CR1_WUPEN
 ((
uöt32_t
)0x00040000Ë

	)

4370 
	#I2C_CR1_GCEN
 ((
uöt32_t
)0x00080000Ë

	)

4371 
	#I2C_CR1_SMBHEN
 ((
uöt32_t
)0x00100000Ë

	)

4372 
	#I2C_CR1_SMBDEN
 ((
uöt32_t
)0x00200000Ë

	)

4373 
	#I2C_CR1_ALERTEN
 ((
uöt32_t
)0x00400000Ë

	)

4374 
	#I2C_CR1_PECEN
 ((
uöt32_t
)0x00800000Ë

	)

4377 
	#I2C_CR2_SADD
 ((
uöt32_t
)0x000003FFË

	)

4378 
	#I2C_CR2_RD_WRN
 ((
uöt32_t
)0x00000400Ë

	)

4379 
	#I2C_CR2_ADD10
 ((
uöt32_t
)0x00000800Ë

	)

4380 
	#I2C_CR2_HEAD10R
 ((
uöt32_t
)0x00001000Ë

	)

4381 
	#I2C_CR2_START
 ((
uöt32_t
)0x00002000Ë

	)

4382 
	#I2C_CR2_STOP
 ((
uöt32_t
)0x00004000Ë

	)

4383 
	#I2C_CR2_NACK
 ((
uöt32_t
)0x00008000Ë

	)

4384 
	#I2C_CR2_NBYTES
 ((
uöt32_t
)0x00FF0000Ë

	)

4385 
	#I2C_CR2_RELOAD
 ((
uöt32_t
)0x01000000Ë

	)

4386 
	#I2C_CR2_AUTOEND
 ((
uöt32_t
)0x02000000Ë

	)

4387 
	#I2C_CR2_PECBYTE
 ((
uöt32_t
)0x04000000Ë

	)

4390 
	#I2C_OAR1_OA1
 ((
uöt32_t
)0x000003FFË

	)

4391 
	#I2C_OAR1_OA1MODE
 ((
uöt32_t
)0x00000400Ë

	)

4392 
	#I2C_OAR1_OA1EN
 ((
uöt32_t
)0x00008000Ë

	)

4395 
	#I2C_OAR2_OA2
 ((
uöt32_t
)0x000000FEË

	)

4396 
	#I2C_OAR2_OA2MSK
 ((
uöt32_t
)0x00000700Ë

	)

4397 
	#I2C_OAR2_OA2EN
 ((
uöt32_t
)0x00008000Ë

	)

4400 
	#I2C_TIMINGR_SCLL
 ((
uöt32_t
)0x000000FFË

	)

4401 
	#I2C_TIMINGR_SCLH
 ((
uöt32_t
)0x0000FF00Ë

	)

4402 
	#I2C_TIMINGR_SDADEL
 ((
uöt32_t
)0x000F0000Ë

	)

4403 
	#I2C_TIMINGR_SCLDEL
 ((
uöt32_t
)0x00F00000Ë

	)

4404 
	#I2C_TIMINGR_PRESC
 ((
uöt32_t
)0xF0000000Ë

	)

4407 
	#I2C_TIMEOUTR_TIMEOUTA
 ((
uöt32_t
)0x00000FFFË

	)

4408 
	#I2C_TIMEOUTR_TIDLE
 ((
uöt32_t
)0x00001000Ë

	)

4409 
	#I2C_TIMEOUTR_TIMOUTEN
 ((
uöt32_t
)0x00008000Ë

	)

4410 
	#I2C_TIMEOUTR_TIMEOUTB
 ((
uöt32_t
)0x0FFF0000Ë

	)

4411 
	#I2C_TIMEOUTR_TEXTEN
 ((
uöt32_t
)0x80000000Ë

	)

4414 
	#I2C_ISR_TXE
 ((
uöt32_t
)0x00000001Ë

	)

4415 
	#I2C_ISR_TXIS
 ((
uöt32_t
)0x00000002Ë

	)

4416 
	#I2C_ISR_RXNE
 ((
uöt32_t
)0x00000004Ë

	)

4417 
	#I2C_ISR_ADDR
 ((
uöt32_t
)0x00000008Ë

	)

4418 
	#I2C_ISR_NACKF
 ((
uöt32_t
)0x00000010Ë

	)

4419 
	#I2C_ISR_STOPF
 ((
uöt32_t
)0x00000020Ë

	)

4420 
	#I2C_ISR_TC
 ((
uöt32_t
)0x00000040Ë

	)

4421 
	#I2C_ISR_TCR
 ((
uöt32_t
)0x00000080Ë

	)

4422 
	#I2C_ISR_BERR
 ((
uöt32_t
)0x00000100Ë

	)

4423 
	#I2C_ISR_ARLO
 ((
uöt32_t
)0x00000200Ë

	)

4424 
	#I2C_ISR_OVR
 ((
uöt32_t
)0x00000400Ë

	)

4425 
	#I2C_ISR_PECERR
 ((
uöt32_t
)0x00000800Ë

	)

4426 
	#I2C_ISR_TIMEOUT
 ((
uöt32_t
)0x00001000Ë

	)

4427 
	#I2C_ISR_ALERT
 ((
uöt32_t
)0x00002000Ë

	)

4428 
	#I2C_ISR_BUSY
 ((
uöt32_t
)0x00008000Ë

	)

4429 
	#I2C_ISR_DIR
 ((
uöt32_t
)0x00010000Ë

	)

4430 
	#I2C_ISR_ADDCODE
 ((
uöt32_t
)0x00FE0000Ë

	)

4433 
	#I2C_ICR_ADDRCF
 ((
uöt32_t
)0x00000008Ë

	)

4434 
	#I2C_ICR_NACKCF
 ((
uöt32_t
)0x00000010Ë

	)

4435 
	#I2C_ICR_STOPCF
 ((
uöt32_t
)0x00000020Ë

	)

4436 
	#I2C_ICR_BERRCF
 ((
uöt32_t
)0x00000100Ë

	)

4437 
	#I2C_ICR_ARLOCF
 ((
uöt32_t
)0x00000200Ë

	)

4438 
	#I2C_ICR_OVRCF
 ((
uöt32_t
)0x00000400Ë

	)

4439 
	#I2C_ICR_PECCF
 ((
uöt32_t
)0x00000800Ë

	)

4440 
	#I2C_ICR_TIMOUTCF
 ((
uöt32_t
)0x00001000Ë

	)

4441 
	#I2C_ICR_ALERTCF
 ((
uöt32_t
)0x00002000Ë

	)

4444 
	#I2C_PECR_PEC
 ((
uöt32_t
)0x000000FFË

	)

4447 
	#I2C_RXDR_RXDATA
 ((
uöt32_t
)0x000000FFË

	)

4450 
	#I2C_TXDR_TXDATA
 ((
uöt32_t
)0x000000FFË

	)

4459 
	#IWDG_KR_KEY
 ((
uöt16_t
)0xFFFFË

	)

4462 
	#IWDG_PR_PR
 ((
uöt8_t
)0x07Ë

	)

4463 
	#IWDG_PR_PR_0
 ((
uöt8_t
)0x01Ë

	)

4464 
	#IWDG_PR_PR_1
 ((
uöt8_t
)0x02Ë

	)

4465 
	#IWDG_PR_PR_2
 ((
uöt8_t
)0x04Ë

	)

4468 
	#IWDG_RLR_RL
 ((
uöt16_t
)0x0FFFË

	)

4471 
	#IWDG_SR_PVU
 ((
uöt8_t
)0x01Ë

	)

4472 
	#IWDG_SR_RVU
 ((
uöt8_t
)0x02Ë

	)

4473 
	#IWDG_SR_WVU
 ((
uöt8_t
)0x04Ë

	)

4476 
	#IWDG_WINR_WIN
 ((
uöt16_t
)0x0FFFË

	)

4484 
	#PWR_CR_LPSDSR
 ((
uöt16_t
)0x0001Ë

	)

4485 
	#PWR_CR_PDDS
 ((
uöt16_t
)0x0002Ë

	)

4486 
	#PWR_CR_CWUF
 ((
uöt16_t
)0x0004Ë

	)

4487 
	#PWR_CR_CSBF
 ((
uöt16_t
)0x0008Ë

	)

4488 
	#PWR_CR_PVDE
 ((
uöt16_t
)0x0010Ë

	)

4490 
	#PWR_CR_PLS
 ((
uöt16_t
)0x00E0Ë

	)

4491 
	#PWR_CR_PLS_0
 ((
uöt16_t
)0x0020Ë

	)

4492 
	#PWR_CR_PLS_1
 ((
uöt16_t
)0x0040Ë

	)

4493 
	#PWR_CR_PLS_2
 ((
uöt16_t
)0x0080Ë

	)

4496 
	#PWR_CR_PLS_LEV0
 ((
uöt16_t
)0x0000Ë

	)

4497 
	#PWR_CR_PLS_LEV1
 ((
uöt16_t
)0x0020Ë

	)

4498 
	#PWR_CR_PLS_LEV2
 ((
uöt16_t
)0x0040Ë

	)

4499 
	#PWR_CR_PLS_LEV3
 ((
uöt16_t
)0x0060Ë

	)

4500 
	#PWR_CR_PLS_LEV4
 ((
uöt16_t
)0x0080Ë

	)

4501 
	#PWR_CR_PLS_LEV5
 ((
uöt16_t
)0x00A0Ë

	)

4502 
	#PWR_CR_PLS_LEV6
 ((
uöt16_t
)0x00C0Ë

	)

4503 
	#PWR_CR_PLS_LEV7
 ((
uöt16_t
)0x00E0Ë

	)

4505 
	#PWR_CR_DBP
 ((
uöt16_t
)0x0100Ë

	)

4508 
	#PWR_CSR_WUF
 ((
uöt16_t
)0x0001Ë

	)

4509 
	#PWR_CSR_SBF
 ((
uöt16_t
)0x0002Ë

	)

4510 
	#PWR_CSR_PVDO
 ((
uöt16_t
)0x0004Ë

	)

4511 
	#PWR_CSR_VREFINTRDYF
 ((
uöt16_t
)0x0008Ë

	)

4513 
	#PWR_CSR_EWUP1
 ((
uöt16_t
)0x0100Ë

	)

4514 
	#PWR_CSR_EWUP2
 ((
uöt16_t
)0x0200Ë

	)

4515 
	#PWR_CSR_EWUP3
 ((
uöt16_t
)0x0400Ë

	)

4523 
	#RCC_CR_HSION
 ((
uöt32_t
)0x00000001)

	)

4524 
	#RCC_CR_HSIRDY
 ((
uöt32_t
)0x00000002)

	)

4526 
	#RCC_CR_HSITRIM
 ((
uöt32_t
)0x000000F8)

	)

4527 
	#RCC_CR_HSITRIM_0
 ((
uöt32_t
)0x00000008)

	)

4528 
	#RCC_CR_HSITRIM_1
 ((
uöt32_t
)0x00000010)

	)

4529 
	#RCC_CR_HSITRIM_2
 ((
uöt32_t
)0x00000020)

	)

4530 
	#RCC_CR_HSITRIM_3
 ((
uöt32_t
)0x00000040)

	)

4531 
	#RCC_CR_HSITRIM_4
 ((
uöt32_t
)0x00000080)

	)

4533 
	#RCC_CR_HSICAL
 ((
uöt32_t
)0x0000FF00)

	)

4534 
	#RCC_CR_HSICAL_0
 ((
uöt32_t
)0x00000100)

	)

4535 
	#RCC_CR_HSICAL_1
 ((
uöt32_t
)0x00000200)

	)

4536 
	#RCC_CR_HSICAL_2
 ((
uöt32_t
)0x00000400)

	)

4537 
	#RCC_CR_HSICAL_3
 ((
uöt32_t
)0x00000800)

	)

4538 
	#RCC_CR_HSICAL_4
 ((
uöt32_t
)0x00001000)

	)

4539 
	#RCC_CR_HSICAL_5
 ((
uöt32_t
)0x00002000)

	)

4540 
	#RCC_CR_HSICAL_6
 ((
uöt32_t
)0x00004000)

	)

4541 
	#RCC_CR_HSICAL_7
 ((
uöt32_t
)0x00008000)

	)

4543 
	#RCC_CR_HSEON
 ((
uöt32_t
)0x00010000)

	)

4544 
	#RCC_CR_HSERDY
 ((
uöt32_t
)0x00020000)

	)

4545 
	#RCC_CR_HSEBYP
 ((
uöt32_t
)0x00040000)

	)

4546 
	#RCC_CR_CSSON
 ((
uöt32_t
)0x00080000)

	)

4548 
	#RCC_CR_PLLON
 ((
uöt32_t
)0x01000000)

	)

4549 
	#RCC_CR_PLLRDY
 ((
uöt32_t
)0x02000000)

	)

4553 
	#RCC_CFGR_SW
 ((
uöt32_t
)0x00000003Ë

	)

4554 
	#RCC_CFGR_SW_0
 ((
uöt32_t
)0x00000001Ë

	)

4555 
	#RCC_CFGR_SW_1
 ((
uöt32_t
)0x00000002Ë

	)

4557 
	#RCC_CFGR_SW_HSI
 ((
uöt32_t
)0x00000000Ë

	)

4558 
	#RCC_CFGR_SW_HSE
 ((
uöt32_t
)0x00000001Ë

	)

4559 
	#RCC_CFGR_SW_PLL
 ((
uöt32_t
)0x00000002Ë

	)

4562 
	#RCC_CFGR_SWS
 ((
uöt32_t
)0x0000000CË

	)

4563 
	#RCC_CFGR_SWS_0
 ((
uöt32_t
)0x00000004Ë

	)

4564 
	#RCC_CFGR_SWS_1
 ((
uöt32_t
)0x00000008Ë

	)

4566 
	#RCC_CFGR_SWS_HSI
 ((
uöt32_t
)0x00000000Ë

	)

4567 
	#RCC_CFGR_SWS_HSE
 ((
uöt32_t
)0x00000004Ë

	)

4568 
	#RCC_CFGR_SWS_PLL
 ((
uöt32_t
)0x00000008Ë

	)

4571 
	#RCC_CFGR_HPRE
 ((
uöt32_t
)0x000000F0Ë

	)

4572 
	#RCC_CFGR_HPRE_0
 ((
uöt32_t
)0x00000010Ë

	)

4573 
	#RCC_CFGR_HPRE_1
 ((
uöt32_t
)0x00000020Ë

	)

4574 
	#RCC_CFGR_HPRE_2
 ((
uöt32_t
)0x00000040Ë

	)

4575 
	#RCC_CFGR_HPRE_3
 ((
uöt32_t
)0x00000080Ë

	)

4577 
	#RCC_CFGR_HPRE_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

4578 
	#RCC_CFGR_HPRE_DIV2
 ((
uöt32_t
)0x00000080Ë

	)

4579 
	#RCC_CFGR_HPRE_DIV4
 ((
uöt32_t
)0x00000090Ë

	)

4580 
	#RCC_CFGR_HPRE_DIV8
 ((
uöt32_t
)0x000000A0Ë

	)

4581 
	#RCC_CFGR_HPRE_DIV16
 ((
uöt32_t
)0x000000B0Ë

	)

4582 
	#RCC_CFGR_HPRE_DIV64
 ((
uöt32_t
)0x000000C0Ë

	)

4583 
	#RCC_CFGR_HPRE_DIV128
 ((
uöt32_t
)0x000000D0Ë

	)

4584 
	#RCC_CFGR_HPRE_DIV256
 ((
uöt32_t
)0x000000E0Ë

	)

4585 
	#RCC_CFGR_HPRE_DIV512
 ((
uöt32_t
)0x000000F0Ë

	)

4588 
	#RCC_CFGR_PPRE1
 ((
uöt32_t
)0x00000700Ë

	)

4589 
	#RCC_CFGR_PPRE1_0
 ((
uöt32_t
)0x00000100Ë

	)

4590 
	#RCC_CFGR_PPRE1_1
 ((
uöt32_t
)0x00000200Ë

	)

4591 
	#RCC_CFGR_PPRE1_2
 ((
uöt32_t
)0x00000400Ë

	)

4593 
	#RCC_CFGR_PPRE1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

4594 
	#RCC_CFGR_PPRE1_DIV2
 ((
uöt32_t
)0x00000400Ë

	)

4595 
	#RCC_CFGR_PPRE1_DIV4
 ((
uöt32_t
)0x00000500Ë

	)

4596 
	#RCC_CFGR_PPRE1_DIV8
 ((
uöt32_t
)0x00000600Ë

	)

4597 
	#RCC_CFGR_PPRE1_DIV16
 ((
uöt32_t
)0x00000700Ë

	)

4600 
	#RCC_CFGR_PPRE2
 ((
uöt32_t
)0x00003800Ë

	)

4601 
	#RCC_CFGR_PPRE2_0
 ((
uöt32_t
)0x00000800Ë

	)

4602 
	#RCC_CFGR_PPRE2_1
 ((
uöt32_t
)0x00001000Ë

	)

4603 
	#RCC_CFGR_PPRE2_2
 ((
uöt32_t
)0x00002000Ë

	)

4605 
	#RCC_CFGR_PPRE2_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

4606 
	#RCC_CFGR_PPRE2_DIV2
 ((
uöt32_t
)0x00002000Ë

	)

4607 
	#RCC_CFGR_PPRE2_DIV4
 ((
uöt32_t
)0x00002800Ë

	)

4608 
	#RCC_CFGR_PPRE2_DIV8
 ((
uöt32_t
)0x00003000Ë

	)

4609 
	#RCC_CFGR_PPRE2_DIV16
 ((
uöt32_t
)0x00003800Ë

	)

4611 
	#RCC_CFGR_PLLSRC
 ((
uöt32_t
)0x00010000Ë

	)

4613 
	#RCC_CFGR_PLLXTPRE
 ((
uöt32_t
)0x00020000Ë

	)

4616 
	#RCC_CFGR_PLLMULL
 ((
uöt32_t
)0x003C0000Ë

	)

4617 
	#RCC_CFGR_PLLMULL_0
 ((
uöt32_t
)0x00040000Ë

	)

4618 
	#RCC_CFGR_PLLMULL_1
 ((
uöt32_t
)0x00080000Ë

	)

4619 
	#RCC_CFGR_PLLMULL_2
 ((
uöt32_t
)0x00100000Ë

	)

4620 
	#RCC_CFGR_PLLMULL_3
 ((
uöt32_t
)0x00200000Ë

	)

4622 
	#RCC_CFGR_PLLSRC_HSI_Div2
 ((
uöt32_t
)0x00000000Ë

	)

4623 
	#RCC_CFGR_PLLSRC_PREDIV1
 ((
uöt32_t
)0x00010000Ë

	)

4625 
	#RCC_CFGR_PLLXTPRE_PREDIV1
 ((
uöt32_t
)0x00000000Ë

	)

4626 
	#RCC_CFGR_PLLXTPRE_PREDIV1_Div2
 ((
uöt32_t
)0x00020000Ë

	)

4628 
	#RCC_CFGR_PLLMULL2
 ((
uöt32_t
)0x00000000Ë

	)

4629 
	#RCC_CFGR_PLLMULL3
 ((
uöt32_t
)0x00040000Ë

	)

4630 
	#RCC_CFGR_PLLMULL4
 ((
uöt32_t
)0x00080000Ë

	)

4631 
	#RCC_CFGR_PLLMULL5
 ((
uöt32_t
)0x000C0000Ë

	)

4632 
	#RCC_CFGR_PLLMULL6
 ((
uöt32_t
)0x00100000Ë

	)

4633 
	#RCC_CFGR_PLLMULL7
 ((
uöt32_t
)0x00140000Ë

	)

4634 
	#RCC_CFGR_PLLMULL8
 ((
uöt32_t
)0x00180000Ë

	)

4635 
	#RCC_CFGR_PLLMULL9
 ((
uöt32_t
)0x001C0000Ë

	)

4636 
	#RCC_CFGR_PLLMULL10
 ((
uöt32_t
)0x00200000Ë

	)

4637 
	#RCC_CFGR_PLLMULL11
 ((
uöt32_t
)0x00240000Ë

	)

4638 
	#RCC_CFGR_PLLMULL12
 ((
uöt32_t
)0x00280000Ë

	)

4639 
	#RCC_CFGR_PLLMULL13
 ((
uöt32_t
)0x002C0000Ë

	)

4640 
	#RCC_CFGR_PLLMULL14
 ((
uöt32_t
)0x00300000Ë

	)

4641 
	#RCC_CFGR_PLLMULL15
 ((
uöt32_t
)0x00340000Ë

	)

4642 
	#RCC_CFGR_PLLMULL16
 ((
uöt32_t
)0x00380000Ë

	)

4645 
	#RCC_CFGR_USBPRE
 ((
uöt32_t
)0x00400000Ë

	)

4648 
	#RCC_CFGR_I2SSRC
 ((
uöt32_t
)0x00800000Ë

	)

4651 
	#RCC_CFGR_MCO
 ((
uöt32_t
)0x07000000Ë

	)

4652 
	#RCC_CFGR_MCO_0
 ((
uöt32_t
)0x01000000Ë

	)

4653 
	#RCC_CFGR_MCO_1
 ((
uöt32_t
)0x02000000Ë

	)

4654 
	#RCC_CFGR_MCO_2
 ((
uöt32_t
)0x04000000Ë

	)

4656 
	#RCC_CFGR_MCO_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

4657 
	#RCC_CFGR_MCO_LSI
 ((
uöt32_t
)0x02000000Ë

	)

4658 
	#RCC_CFGR_MCO_LSE
 ((
uöt32_t
)0x03000000Ë

	)

4659 
	#RCC_CFGR_MCO_SYSCLK
 ((
uöt32_t
)0x04000000Ë

	)

4660 
	#RCC_CFGR_MCO_HSI
 ((
uöt32_t
)0x05000000Ë

	)

4661 
	#RCC_CFGR_MCO_HSE
 ((
uöt32_t
)0x06000000Ë

	)

4662 
	#RCC_CFGR_MCO_PLL
 ((
uöt32_t
)0x07000000Ë

	)

4664 
	#RCC_CFGR_MCOF
 ((
uöt32_t
)0x10000000Ë

	)

4667 
	#RCC_CIR_LSIRDYF
 ((
uöt32_t
)0x00000001Ë

	)

4668 
	#RCC_CIR_LSERDYF
 ((
uöt32_t
)0x00000002Ë

	)

4669 
	#RCC_CIR_HSIRDYF
 ((
uöt32_t
)0x00000004Ë

	)

4670 
	#RCC_CIR_HSERDYF
 ((
uöt32_t
)0x00000008Ë

	)

4671 
	#RCC_CIR_PLLRDYF
 ((
uöt32_t
)0x00000010Ë

	)

4672 
	#RCC_CIR_CSSF
 ((
uöt32_t
)0x00000080Ë

	)

4673 
	#RCC_CIR_LSIRDYIE
 ((
uöt32_t
)0x00000100Ë

	)

4674 
	#RCC_CIR_LSERDYIE
 ((
uöt32_t
)0x00000200Ë

	)

4675 
	#RCC_CIR_HSIRDYIE
 ((
uöt32_t
)0x00000400Ë

	)

4676 
	#RCC_CIR_HSERDYIE
 ((
uöt32_t
)0x00000800Ë

	)

4677 
	#RCC_CIR_PLLRDYIE
 ((
uöt32_t
)0x00001000Ë

	)

4678 
	#RCC_CIR_LSIRDYC
 ((
uöt32_t
)0x00010000Ë

	)

4679 
	#RCC_CIR_LSERDYC
 ((
uöt32_t
)0x00020000Ë

	)

4680 
	#RCC_CIR_HSIRDYC
 ((
uöt32_t
)0x00040000Ë

	)

4681 
	#RCC_CIR_HSERDYC
 ((
uöt32_t
)0x00080000Ë

	)

4682 
	#RCC_CIR_PLLRDYC
 ((
uöt32_t
)0x00100000Ë

	)

4683 
	#RCC_CIR_CSSC
 ((
uöt32_t
)0x00800000Ë

	)

4686 
	#RCC_APB2RSTR_SYSCFGRST
 ((
uöt32_t
)0x00000001Ë

	)

4687 
	#RCC_APB2RSTR_TIM1RST
 ((
uöt32_t
)0x00000200Ë

	)

4688 
	#RCC_APB2RSTR_SPI1RST
 ((
uöt32_t
)0x00001000Ë

	)

4689 
	#RCC_APB2RSTR_TIM8RST
 ((
uöt32_t
)0x00000200Ë

	)

4690 
	#RCC_APB2RSTR_USART1RST
 ((
uöt32_t
)0x00004000Ë

	)

4691 
	#RCC_APB2RSTR_TIM15RST
 ((
uöt32_t
)0x00010000Ë

	)

4692 
	#RCC_APB2RSTR_TIM16RST
 ((
uöt32_t
)0x00020000Ë

	)

4693 
	#RCC_APB2RSTR_TIM17RST
 ((
uöt32_t
)0x00040000Ë

	)

4696 
	#RCC_APB1RSTR_TIM2RST
 ((
uöt32_t
)0x00000001Ë

	)

4697 
	#RCC_APB1RSTR_TIM3RST
 ((
uöt32_t
)0x00000002Ë

	)

4698 
	#RCC_APB1RSTR_TIM4RST
 ((
uöt32_t
)0x00000004Ë

	)

4699 
	#RCC_APB1RSTR_TIM6RST
 ((
uöt32_t
)0x00000010Ë

	)

4700 
	#RCC_APB1RSTR_TIM7RST
 ((
uöt32_t
)0x00000020Ë

	)

4701 
	#RCC_APB1RSTR_WWDGRST
 ((
uöt32_t
)0x00000800Ë

	)

4702 
	#RCC_APB1RSTR_SPI2RST
 ((
uöt32_t
)0x00004000Ë

	)

4703 
	#RCC_APB1RSTR_SPI3RST
 ((
uöt32_t
)0x00008000Ë

	)

4704 
	#RCC_APB1RSTR_USART2RST
 ((
uöt32_t
)0x00020000Ë

	)

4705 
	#RCC_APB1RSTR_USART3RST
 ((
uöt32_t
)0x00040000Ë

	)

4706 
	#RCC_APB1RSTR_UART4RST
 ((
uöt32_t
)0x00080000Ë

	)

4707 
	#RCC_APB1RSTR_UART5RST
 ((
uöt32_t
)0x00100000Ë

	)

4708 
	#RCC_APB1RSTR_I2C1RST
 ((
uöt32_t
)0x00200000Ë

	)

4709 
	#RCC_APB1RSTR_I2C2RST
 ((
uöt32_t
)0x00400000Ë

	)

4710 
	#RCC_APB1RSTR_USBRST
 ((
uöt32_t
)0x00800000Ë

	)

4711 
	#RCC_APB1RSTR_CAN1RST
 ((
uöt32_t
)0x02000000Ë

	)

4712 
	#RCC_APB1RSTR_PWRRST
 ((
uöt32_t
)0x10000000Ë

	)

4713 
	#RCC_APB1RSTR_DACRST
 ((
uöt32_t
)0x20000000Ë

	)

4716 
	#RCC_AHBENR_DMA1EN
 ((
uöt32_t
)0x00000001Ë

	)

4717 
	#RCC_AHBENR_DMA2EN
 ((
uöt32_t
)0x00000002Ë

	)

4718 
	#RCC_AHBENR_SRAMEN
 ((
uöt32_t
)0x00000004Ë

	)

4719 
	#RCC_AHBENR_FLITFEN
 ((
uöt32_t
)0x00000010Ë

	)

4720 
	#RCC_AHBENR_CRCEN
 ((
uöt32_t
)0x00000040Ë

	)

4721 
	#RCC_AHBENR_GPIOAEN
 ((
uöt32_t
)0x00020000Ë

	)

4722 
	#RCC_AHBENR_GPIOBEN
 ((
uöt32_t
)0x00040000Ë

	)

4723 
	#RCC_AHBENR_GPIOCEN
 ((
uöt32_t
)0x00080000Ë

	)

4724 
	#RCC_AHBENR_GPIODEN
 ((
uöt32_t
)0x00100000Ë

	)

4725 
	#RCC_AHBENR_GPIOEEN
 ((
uöt32_t
)0x00200000Ë

	)

4726 
	#RCC_AHBENR_GPIOFEN
 ((
uöt32_t
)0x00400000Ë

	)

4727 
	#RCC_AHBENR_TSEN
 ((
uöt32_t
)0x01000000Ë

	)

4728 
	#RCC_AHBENR_ADC12EN
 ((
uöt32_t
)0x10000000Ë

	)

4729 
	#RCC_AHBENR_ADC34EN
 ((
uöt32_t
)0x20000000Ë

	)

4732 
	#RCC_APB2ENR_SYSCFGEN
 ((
uöt32_t
)0x00000001Ë

	)

4733 
	#RCC_APB2ENR_TIM1EN
 ((
uöt32_t
)0x00000800Ë

	)

4734 
	#RCC_APB2ENR_SPI1EN
 ((
uöt32_t
)0x00001000Ë

	)

4735 
	#RCC_APB2ENR_TIM8EN
 ((
uöt32_t
)0x00002000Ë

	)

4736 
	#RCC_APB2ENR_USART1EN
 ((
uöt32_t
)0x00004000Ë

	)

4737 
	#RCC_APB2ENR_TIM15EN
 ((
uöt32_t
)0x00010000Ë

	)

4738 
	#RCC_APB2ENR_TIM16EN
 ((
uöt32_t
)0x00020000Ë

	)

4739 
	#RCC_APB2ENR_TIM17EN
 ((
uöt32_t
)0x00040000Ë

	)

4742 
	#RCC_APB1ENR_TIM2EN
 ((
uöt32_t
)0x00000001Ë

	)

4743 
	#RCC_APB1ENR_TIM3EN
 ((
uöt32_t
)0x00000002Ë

	)

4744 
	#RCC_APB1ENR_TIM4EN
 ((
uöt32_t
)0x00000004Ë

	)

4745 
	#RCC_APB1ENR_TIM6EN
 ((
uöt32_t
)0x00000010Ë

	)

4746 
	#RCC_APB1ENR_TIM7EN
 ((
uöt32_t
)0x00000020Ë

	)

4747 
	#RCC_APB1ENR_WWDGEN
 ((
uöt32_t
)0x00000800Ë

	)

4748 
	#RCC_APB1ENR_SPI2EN
 ((
uöt32_t
)0x00004000Ë

	)

4749 
	#RCC_APB1ENR_SPI3EN
 ((
uöt32_t
)0x00008000Ë

	)

4750 
	#RCC_APB1ENR_USART2EN
 ((
uöt32_t
)0x00020000Ë

	)

4751 
	#RCC_APB1ENR_USART3EN
 ((
uöt32_t
)0x00040000Ë

	)

4752 
	#RCC_APB1ENR_UART3EN
 ((
uöt32_t
)0x00080000Ë

	)

4753 
	#RCC_APB1ENR_UART4EN
 ((
uöt32_t
)0x00100000Ë

	)

4754 
	#RCC_APB1ENR_I2C1EN
 ((
uöt32_t
)0x00200000Ë

	)

4755 
	#RCC_APB1ENR_I2C2EN
 ((
uöt32_t
)0x00400000Ë

	)

4756 
	#RCC_APB1ENR_USBEN
 ((
uöt32_t
)0x00800000Ë

	)

4757 
	#RCC_APB1ENR_CAN1EN
 ((
uöt32_t
)0x02000000Ë

	)

4758 
	#RCC_APB1ENR_PWREN
 ((
uöt32_t
)0x10000000Ë

	)

4759 
	#RCC_APB1ENR_DACEN
 ((
uöt32_t
)0x20000000Ë

	)

4762 
	#RCC_BDCR_LSEON
 ((
uöt32_t
)0x00000001Ë

	)

4763 
	#RCC_BDCR_LSERDY
 ((
uöt32_t
)0x00000002Ë

	)

4764 
	#RCC_BDCR_LSEBYP
 ((
uöt32_t
)0x00000004Ë

	)

4766 
	#RCC_BDCR_LSEDRV
 ((
uöt32_t
)0x00000018Ë

	)

4767 
	#RCC_BDCR_LSEDRV_0
 ((
uöt32_t
)0x00000008Ë

	)

4768 
	#RCC_BDCR_LSEDRV_1
 ((
uöt32_t
)0x00000010Ë

	)

4771 
	#RCC_BDCR_RTCSEL
 ((
uöt32_t
)0x00000300Ë

	)

4772 
	#RCC_BDCR_RTCSEL_0
 ((
uöt32_t
)0x00000100Ë

	)

4773 
	#RCC_BDCR_RTCSEL_1
 ((
uöt32_t
)0x00000200Ë

	)

4776 
	#RCC_BDCR_RTCSEL_NOCLOCK
 ((
uöt32_t
)0x00000000Ë

	)

4777 
	#RCC_BDCR_RTCSEL_LSE
 ((
uöt32_t
)0x00000100Ë

	)

4778 
	#RCC_BDCR_RTCSEL_LSI
 ((
uöt32_t
)0x00000200Ë

	)

4779 
	#RCC_BDCR_RTCSEL_HSE
 ((
uöt32_t
)0x00000300Ë

	)

4781 
	#RCC_BDCR_RTCEN
 ((
uöt32_t
)0x00008000Ë

	)

4782 
	#RCC_BDCR_BDRST
 ((
uöt32_t
)0x00010000Ë

	)

4785 
	#RCC_CSR_LSION
 ((
uöt32_t
)0x00000001Ë

	)

4786 
	#RCC_CSR_LSIRDY
 ((
uöt32_t
)0x00000002Ë

	)

4787 
	#RCC_CSR_RMVF
 ((
uöt32_t
)0x01000000Ë

	)

4788 
	#RCC_CSR_OBLRSTF
 ((
uöt32_t
)0x02000000Ë

	)

4789 
	#RCC_CSR_PINRSTF
 ((
uöt32_t
)0x04000000Ë

	)

4790 
	#RCC_CSR_PORRSTF
 ((
uöt32_t
)0x08000000Ë

	)

4791 
	#RCC_CSR_SFTRSTF
 ((
uöt32_t
)0x10000000Ë

	)

4792 
	#RCC_CSR_IWDGRSTF
 ((
uöt32_t
)0x20000000Ë

	)

4793 
	#RCC_CSR_WWDGRSTF
 ((
uöt32_t
)0x40000000Ë

	)

4794 
	#RCC_CSR_LPWRRSTF
 ((
uöt32_t
)0x80000000Ë

	)

4797 
	#RCC_AHBRSTR_GPIOARST
 ((
uöt32_t
)0x00020000Ë

	)

4798 
	#RCC_AHBRSTR_GPIOBRST
 ((
uöt32_t
)0x00040000Ë

	)

4799 
	#RCC_AHBRSTR_GPIOCRST
 ((
uöt32_t
)0x00080000Ë

	)

4800 
	#RCC_AHBRSTR_GPIODRST
 ((
uöt32_t
)0x00010000Ë

	)

4801 
	#RCC_AHBRSTR_GPIOFRST
 ((
uöt32_t
)0x00040000Ë

	)

4802 
	#RCC_AHBRSTR_TSRST
 ((
uöt32_t
)0x00100000Ë

	)

4803 
	#RCC_AHBRSTR_ADC12RST
 ((
uöt32_t
)0x01000000Ë

	)

4804 
	#RCC_AHBRSTR_ADC34RST
 ((
uöt32_t
)0x02000000Ë

	)

4808 
	#RCC_CFGR2_PREDIV1
 ((
uöt32_t
)0x0000000FË

	)

4809 
	#RCC_CFGR2_PREDIV1_0
 ((
uöt32_t
)0x00000001Ë

	)

4810 
	#RCC_CFGR2_PREDIV1_1
 ((
uöt32_t
)0x00000002Ë

	)

4811 
	#RCC_CFGR2_PREDIV1_2
 ((
uöt32_t
)0x00000004Ë

	)

4812 
	#RCC_CFGR2_PREDIV1_3
 ((
uöt32_t
)0x00000008Ë

	)

4814 
	#RCC_CFGR2_PREDIV1_DIV1
 ((
uöt32_t
)0x00000000Ë

	)

4815 
	#RCC_CFGR2_PREDIV1_DIV2
 ((
uöt32_t
)0x00000001Ë

	)

4816 
	#RCC_CFGR2_PREDIV1_DIV3
 ((
uöt32_t
)0x00000002Ë

	)

4817 
	#RCC_CFGR2_PREDIV1_DIV4
 ((
uöt32_t
)0x00000003Ë

	)

4818 
	#RCC_CFGR2_PREDIV1_DIV5
 ((
uöt32_t
)0x00000004Ë

	)

4819 
	#RCC_CFGR2_PREDIV1_DIV6
 ((
uöt32_t
)0x00000005Ë

	)

4820 
	#RCC_CFGR2_PREDIV1_DIV7
 ((
uöt32_t
)0x00000006Ë

	)

4821 
	#RCC_CFGR2_PREDIV1_DIV8
 ((
uöt32_t
)0x00000007Ë

	)

4822 
	#RCC_CFGR2_PREDIV1_DIV9
 ((
uöt32_t
)0x00000008Ë

	)

4823 
	#RCC_CFGR2_PREDIV1_DIV10
 ((
uöt32_t
)0x00000009Ë

	)

4824 
	#RCC_CFGR2_PREDIV1_DIV11
 ((
uöt32_t
)0x0000000AË

	)

4825 
	#RCC_CFGR2_PREDIV1_DIV12
 ((
uöt32_t
)0x0000000BË

	)

4826 
	#RCC_CFGR2_PREDIV1_DIV13
 ((
uöt32_t
)0x0000000CË

	)

4827 
	#RCC_CFGR2_PREDIV1_DIV14
 ((
uöt32_t
)0x0000000DË

	)

4828 
	#RCC_CFGR2_PREDIV1_DIV15
 ((
uöt32_t
)0x0000000EË

	)

4829 
	#RCC_CFGR2_PREDIV1_DIV16
 ((
uöt32_t
)0x0000000FË

	)

4832 
	#RCC_CFGR2_ADCPRE12
 ((
uöt32_t
)0x000001F0Ë

	)

4833 
	#RCC_CFGR2_ADCPRE12_0
 ((
uöt32_t
)0x00000010Ë

	)

4834 
	#RCC_CFGR2_ADCPRE12_1
 ((
uöt32_t
)0x00000020Ë

	)

4835 
	#RCC_CFGR2_ADCPRE12_2
 ((
uöt32_t
)0x00000040Ë

	)

4836 
	#RCC_CFGR2_ADCPRE12_3
 ((
uöt32_t
)0x00000080Ë

	)

4837 
	#RCC_CFGR2_ADCPRE12_4
 ((
uöt32_t
)0x00000100Ë

	)

4839 
	#RCC_CFGR2_ADCPRE12_NO
 ((
uöt32_t
)0x00000000Ë

	)

4840 
	#RCC_CFGR2_ADCPRE12_DIV1
 ((
uöt32_t
)0x00000100Ë

	)

4841 
	#RCC_CFGR2_ADCPRE12_DIV2
 ((
uöt32_t
)0x00000110Ë

	)

4842 
	#RCC_CFGR2_ADCPRE12_DIV4
 ((
uöt32_t
)0x00000120Ë

	)

4843 
	#RCC_CFGR2_ADCPRE12_DIV6
 ((
uöt32_t
)0x00000130Ë

	)

4844 
	#RCC_CFGR2_ADCPRE12_DIV8
 ((
uöt32_t
)0x00000140Ë

	)

4845 
	#RCC_CFGR2_ADCPRE12_DIV10
 ((
uöt32_t
)0x00000150Ë

	)

4846 
	#RCC_CFGR2_ADCPRE12_DIV12
 ((
uöt32_t
)0x00000160Ë

	)

4847 
	#RCC_CFGR2_ADCPRE12_DIV16
 ((
uöt32_t
)0x00000170Ë

	)

4848 
	#RCC_CFGR2_ADCPRE12_DIV32
 ((
uöt32_t
)0x00000180Ë

	)

4849 
	#RCC_CFGR2_ADCPRE12_DIV64
 ((
uöt32_t
)0x00000190Ë

	)

4850 
	#RCC_CFGR2_ADCPRE12_DIV128
 ((
uöt32_t
)0x000001A0Ë

	)

4851 
	#RCC_CFGR2_ADCPRE12_DIV256
 ((
uöt32_t
)0x000001B0Ë

	)

4854 
	#RCC_CFGR2_ADCPRE34
 ((
uöt32_t
)0x00003E00Ë

	)

4855 
	#RCC_CFGR2_ADCPRE34_0
 ((
uöt32_t
)0x00000200Ë

	)

4856 
	#RCC_CFGR2_ADCPRE34_1
 ((
uöt32_t
)0x00000400Ë

	)

4857 
	#RCC_CFGR2_ADCPRE34_2
 ((
uöt32_t
)0x00000800Ë

	)

4858 
	#RCC_CFGR2_ADCPRE34_3
 ((
uöt32_t
)0x00001000Ë

	)

4859 
	#RCC_CFGR2_ADCPRE34_4
 ((
uöt32_t
)0x00002000Ë

	)

4861 
	#RCC_CFGR2_ADCPRE34_NO
 ((
uöt32_t
)0x00000000Ë

	)

4862 
	#RCC_CFGR2_ADCPRE34_DIV1
 ((
uöt32_t
)0x00002000Ë

	)

4863 
	#RCC_CFGR2_ADCPRE34_DIV2
 ((
uöt32_t
)0x00002200Ë

	)

4864 
	#RCC_CFGR2_ADCPRE34_DIV4
 ((
uöt32_t
)0x00002400Ë

	)

4865 
	#RCC_CFGR2_ADCPRE34_DIV6
 ((
uöt32_t
)0x00002600Ë

	)

4866 
	#RCC_CFGR2_ADCPRE34_DIV8
 ((
uöt32_t
)0x00002800Ë

	)

4867 
	#RCC_CFGR2_ADCPRE34_DIV10
 ((
uöt32_t
)0x00002A00Ë

	)

4868 
	#RCC_CFGR2_ADCPRE34_DIV12
 ((
uöt32_t
)0x00002C00Ë

	)

4869 
	#RCC_CFGR2_ADCPRE34_DIV16
 ((
uöt32_t
)0x00002E00Ë

	)

4870 
	#RCC_CFGR2_ADCPRE34_DIV32
 ((
uöt32_t
)0x00003000Ë

	)

4871 
	#RCC_CFGR2_ADCPRE34_DIV64
 ((
uöt32_t
)0x00003200Ë

	)

4872 
	#RCC_CFGR2_ADCPRE34_DIV128
 ((
uöt32_t
)0x00003400Ë

	)

4873 
	#RCC_CFGR2_ADCPRE34_DIV256
 ((
uöt32_t
)0x00003600Ë

	)

4876 
	#RCC_CFGR3_USART1SW
 ((
uöt32_t
)0x00000003Ë

	)

4877 
	#RCC_CFGR3_USART1SW_0
 ((
uöt32_t
)0x00000001Ë

	)

4878 
	#RCC_CFGR3_USART1SW_1
 ((
uöt32_t
)0x00000002Ë

	)

4880 
	#RCC_CFGR3_I2CSW
 ((
uöt32_t
)0x00000030Ë

	)

4881 
	#RCC_CFGR3_I2C1SW
 ((
uöt32_t
)0x00000010Ë

	)

4882 
	#RCC_CFGR3_I2C2SW
 ((
uöt32_t
)0x00000020Ë

	)

4884 
	#RCC_CFGR3_TIMSW
 ((
uöt32_t
)0x00000300Ë

	)

4885 
	#RCC_CFGR3_TIM1SW
 ((
uöt32_t
)0x00000100Ë

	)

4886 
	#RCC_CFGR3_TIM8SW
 ((
uöt32_t
)0x00000200Ë

	)

4888 
	#RCC_CFGR3_USART2SW
 ((
uöt32_t
)0x00030000Ë

	)

4889 
	#RCC_CFGR3_USART2SW_0
 ((
uöt32_t
)0x00010000Ë

	)

4890 
	#RCC_CFGR3_USART2SW_1
 ((
uöt32_t
)0x00020000Ë

	)

4892 
	#RCC_CFGR3_USART3SW
 ((
uöt32_t
)0x000C0000Ë

	)

4893 
	#RCC_CFGR3_USART3SW_0
 ((
uöt32_t
)0x00040000Ë

	)

4894 
	#RCC_CFGR3_USART3SW_1
 ((
uöt32_t
)0x00080000Ë

	)

4896 
	#RCC_CFGR3_UART4SW
 ((
uöt32_t
)0x00300000Ë

	)

4897 
	#RCC_CFGR3_UART4SW_0
 ((
uöt32_t
)0x00100000Ë

	)

4898 
	#RCC_CFGR3_UART4SW_1
 ((
uöt32_t
)0x00200000Ë

	)

4900 
	#RCC_CFGR3_UART5SW
 ((
uöt32_t
)0x00C00000Ë

	)

4901 
	#RCC_CFGR3_UART5SW_0
 ((
uöt32_t
)0x00400000Ë

	)

4902 
	#RCC_CFGR3_UART5SW_1
 ((
uöt32_t
)0x00800000Ë

	)

4910 
	#RTC_TR_PM
 ((
uöt32_t
)0x00400000)

	)

4911 
	#RTC_TR_HT
 ((
uöt32_t
)0x00300000)

	)

4912 
	#RTC_TR_HT_0
 ((
uöt32_t
)0x00100000)

	)

4913 
	#RTC_TR_HT_1
 ((
uöt32_t
)0x00200000)

	)

4914 
	#RTC_TR_HU
 ((
uöt32_t
)0x000F0000)

	)

4915 
	#RTC_TR_HU_0
 ((
uöt32_t
)0x00010000)

	)

4916 
	#RTC_TR_HU_1
 ((
uöt32_t
)0x00020000)

	)

4917 
	#RTC_TR_HU_2
 ((
uöt32_t
)0x00040000)

	)

4918 
	#RTC_TR_HU_3
 ((
uöt32_t
)0x00080000)

	)

4919 
	#RTC_TR_MNT
 ((
uöt32_t
)0x00007000)

	)

4920 
	#RTC_TR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

4921 
	#RTC_TR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

4922 
	#RTC_TR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

4923 
	#RTC_TR_MNU
 ((
uöt32_t
)0x00000F00)

	)

4924 
	#RTC_TR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

4925 
	#RTC_TR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

4926 
	#RTC_TR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

4927 
	#RTC_TR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

4928 
	#RTC_TR_ST
 ((
uöt32_t
)0x00000070)

	)

4929 
	#RTC_TR_ST_0
 ((
uöt32_t
)0x00000010)

	)

4930 
	#RTC_TR_ST_1
 ((
uöt32_t
)0x00000020)

	)

4931 
	#RTC_TR_ST_2
 ((
uöt32_t
)0x00000040)

	)

4932 
	#RTC_TR_SU
 ((
uöt32_t
)0x0000000F)

	)

4933 
	#RTC_TR_SU_0
 ((
uöt32_t
)0x00000001)

	)

4934 
	#RTC_TR_SU_1
 ((
uöt32_t
)0x00000002)

	)

4935 
	#RTC_TR_SU_2
 ((
uöt32_t
)0x00000004)

	)

4936 
	#RTC_TR_SU_3
 ((
uöt32_t
)0x00000008)

	)

4939 
	#RTC_DR_YT
 ((
uöt32_t
)0x00F00000)

	)

4940 
	#RTC_DR_YT_0
 ((
uöt32_t
)0x00100000)

	)

4941 
	#RTC_DR_YT_1
 ((
uöt32_t
)0x00200000)

	)

4942 
	#RTC_DR_YT_2
 ((
uöt32_t
)0x00400000)

	)

4943 
	#RTC_DR_YT_3
 ((
uöt32_t
)0x00800000)

	)

4944 
	#RTC_DR_YU
 ((
uöt32_t
)0x000F0000)

	)

4945 
	#RTC_DR_YU_0
 ((
uöt32_t
)0x00010000)

	)

4946 
	#RTC_DR_YU_1
 ((
uöt32_t
)0x00020000)

	)

4947 
	#RTC_DR_YU_2
 ((
uöt32_t
)0x00040000)

	)

4948 
	#RTC_DR_YU_3
 ((
uöt32_t
)0x00080000)

	)

4949 
	#RTC_DR_WDU
 ((
uöt32_t
)0x0000E000)

	)

4950 
	#RTC_DR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

4951 
	#RTC_DR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

4952 
	#RTC_DR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

4953 
	#RTC_DR_MT
 ((
uöt32_t
)0x00001000)

	)

4954 
	#RTC_DR_MU
 ((
uöt32_t
)0x00000F00)

	)

4955 
	#RTC_DR_MU_0
 ((
uöt32_t
)0x00000100)

	)

4956 
	#RTC_DR_MU_1
 ((
uöt32_t
)0x00000200)

	)

4957 
	#RTC_DR_MU_2
 ((
uöt32_t
)0x00000400)

	)

4958 
	#RTC_DR_MU_3
 ((
uöt32_t
)0x00000800)

	)

4959 
	#RTC_DR_DT
 ((
uöt32_t
)0x00000030)

	)

4960 
	#RTC_DR_DT_0
 ((
uöt32_t
)0x00000010)

	)

4961 
	#RTC_DR_DT_1
 ((
uöt32_t
)0x00000020)

	)

4962 
	#RTC_DR_DU
 ((
uöt32_t
)0x0000000F)

	)

4963 
	#RTC_DR_DU_0
 ((
uöt32_t
)0x00000001)

	)

4964 
	#RTC_DR_DU_1
 ((
uöt32_t
)0x00000002)

	)

4965 
	#RTC_DR_DU_2
 ((
uöt32_t
)0x00000004)

	)

4966 
	#RTC_DR_DU_3
 ((
uöt32_t
)0x00000008)

	)

4969 
	#RTC_CR_COE
 ((
uöt32_t
)0x00800000)

	)

4970 
	#RTC_CR_OSEL
 ((
uöt32_t
)0x00600000)

	)

4971 
	#RTC_CR_OSEL_0
 ((
uöt32_t
)0x00200000)

	)

4972 
	#RTC_CR_OSEL_1
 ((
uöt32_t
)0x00400000)

	)

4973 
	#RTC_CR_POL
 ((
uöt32_t
)0x00100000)

	)

4974 
	#RTC_CR_COSEL
 ((
uöt32_t
)0x00080000)

	)

4975 
	#RTC_CR_BCK
 ((
uöt32_t
)0x00040000)

	)

4976 
	#RTC_CR_SUB1H
 ((
uöt32_t
)0x00020000)

	)

4977 
	#RTC_CR_ADD1H
 ((
uöt32_t
)0x00010000)

	)

4978 
	#RTC_CR_TSIE
 ((
uöt32_t
)0x00008000)

	)

4979 
	#RTC_CR_WUTIE
 ((
uöt32_t
)0x00004000)

	)

4980 
	#RTC_CR_ALRBIE
 ((
uöt32_t
)0x00002000)

	)

4981 
	#RTC_CR_ALRAIE
 ((
uöt32_t
)0x00001000)

	)

4982 
	#RTC_CR_TSE
 ((
uöt32_t
)0x00000800)

	)

4983 
	#RTC_CR_WUTE
 ((
uöt32_t
)0x00000400)

	)

4984 
	#RTC_CR_ALRBE
 ((
uöt32_t
)0x00000200)

	)

4985 
	#RTC_CR_ALRAE
 ((
uöt32_t
)0x00000100)

	)

4986 
	#RTC_CR_FMT
 ((
uöt32_t
)0x00000040)

	)

4987 
	#RTC_CR_BYPSHAD
 ((
uöt32_t
)0x00000020)

	)

4988 
	#RTC_CR_REFCKON
 ((
uöt32_t
)0x00000010)

	)

4989 
	#RTC_CR_TSEDGE
 ((
uöt32_t
)0x00000008)

	)

4990 
	#RTC_CR_WUCKSEL
 ((
uöt32_t
)0x00000007)

	)

4991 
	#RTC_CR_WUCKSEL_0
 ((
uöt32_t
)0x00000001)

	)

4992 
	#RTC_CR_WUCKSEL_1
 ((
uöt32_t
)0x00000002)

	)

4993 
	#RTC_CR_WUCKSEL_2
 ((
uöt32_t
)0x00000004)

	)

4996 
	#RTC_ISR_RECALPF
 ((
uöt32_t
)0x00010000)

	)

4997 
	#RTC_ISR_TAMP3F
 ((
uöt32_t
)0x00008000)

	)

4998 
	#RTC_ISR_TAMP2F
 ((
uöt32_t
)0x00004000)

	)

4999 
	#RTC_ISR_TAMP1F
 ((
uöt32_t
)0x00002000)

	)

5000 
	#RTC_ISR_TSOVF
 ((
uöt32_t
)0x00001000)

	)

5001 
	#RTC_ISR_TSF
 ((
uöt32_t
)0x00000800)

	)

5002 
	#RTC_ISR_WUTF
 ((
uöt32_t
)0x00000400)

	)

5003 
	#RTC_ISR_ALRBF
 ((
uöt32_t
)0x00000200)

	)

5004 
	#RTC_ISR_ALRAF
 ((
uöt32_t
)0x00000100)

	)

5005 
	#RTC_ISR_INIT
 ((
uöt32_t
)0x00000080)

	)

5006 
	#RTC_ISR_INITF
 ((
uöt32_t
)0x00000040)

	)

5007 
	#RTC_ISR_RSF
 ((
uöt32_t
)0x00000020)

	)

5008 
	#RTC_ISR_INITS
 ((
uöt32_t
)0x00000010)

	)

5009 
	#RTC_ISR_SHPF
 ((
uöt32_t
)0x00000008)

	)

5010 
	#RTC_ISR_WUTWF
 ((
uöt32_t
)0x00000004)

	)

5011 
	#RTC_ISR_ALRBWF
 ((
uöt32_t
)0x00000002)

	)

5012 
	#RTC_ISR_ALRAWF
 ((
uöt32_t
)0x00000001)

	)

5015 
	#RTC_PRER_PREDIV_A
 ((
uöt32_t
)0x007F0000)

	)

5016 
	#RTC_PRER_PREDIV_S
 ((
uöt32_t
)0x00007FFF)

	)

5019 
	#RTC_WUTR_WUT
 ((
uöt32_t
)0x0000FFFF)

	)

5022 
	#RTC_ALRMAR_MSK4
 ((
uöt32_t
)0x80000000)

	)

5023 
	#RTC_ALRMAR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

5024 
	#RTC_ALRMAR_DT
 ((
uöt32_t
)0x30000000)

	)

5025 
	#RTC_ALRMAR_DT_0
 ((
uöt32_t
)0x10000000)

	)

5026 
	#RTC_ALRMAR_DT_1
 ((
uöt32_t
)0x20000000)

	)

5027 
	#RTC_ALRMAR_DU
 ((
uöt32_t
)0x0F000000)

	)

5028 
	#RTC_ALRMAR_DU_0
 ((
uöt32_t
)0x01000000)

	)

5029 
	#RTC_ALRMAR_DU_1
 ((
uöt32_t
)0x02000000)

	)

5030 
	#RTC_ALRMAR_DU_2
 ((
uöt32_t
)0x04000000)

	)

5031 
	#RTC_ALRMAR_DU_3
 ((
uöt32_t
)0x08000000)

	)

5032 
	#RTC_ALRMAR_MSK3
 ((
uöt32_t
)0x00800000)

	)

5033 
	#RTC_ALRMAR_PM
 ((
uöt32_t
)0x00400000)

	)

5034 
	#RTC_ALRMAR_HT
 ((
uöt32_t
)0x00300000)

	)

5035 
	#RTC_ALRMAR_HT_0
 ((
uöt32_t
)0x00100000)

	)

5036 
	#RTC_ALRMAR_HT_1
 ((
uöt32_t
)0x00200000)

	)

5037 
	#RTC_ALRMAR_HU
 ((
uöt32_t
)0x000F0000)

	)

5038 
	#RTC_ALRMAR_HU_0
 ((
uöt32_t
)0x00010000)

	)

5039 
	#RTC_ALRMAR_HU_1
 ((
uöt32_t
)0x00020000)

	)

5040 
	#RTC_ALRMAR_HU_2
 ((
uöt32_t
)0x00040000)

	)

5041 
	#RTC_ALRMAR_HU_3
 ((
uöt32_t
)0x00080000)

	)

5042 
	#RTC_ALRMAR_MSK2
 ((
uöt32_t
)0x00008000)

	)

5043 
	#RTC_ALRMAR_MNT
 ((
uöt32_t
)0x00007000)

	)

5044 
	#RTC_ALRMAR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

5045 
	#RTC_ALRMAR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

5046 
	#RTC_ALRMAR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

5047 
	#RTC_ALRMAR_MNU
 ((
uöt32_t
)0x00000F00)

	)

5048 
	#RTC_ALRMAR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

5049 
	#RTC_ALRMAR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

5050 
	#RTC_ALRMAR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

5051 
	#RTC_ALRMAR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

5052 
	#RTC_ALRMAR_MSK1
 ((
uöt32_t
)0x00000080)

	)

5053 
	#RTC_ALRMAR_ST
 ((
uöt32_t
)0x00000070)

	)

5054 
	#RTC_ALRMAR_ST_0
 ((
uöt32_t
)0x00000010)

	)

5055 
	#RTC_ALRMAR_ST_1
 ((
uöt32_t
)0x00000020)

	)

5056 
	#RTC_ALRMAR_ST_2
 ((
uöt32_t
)0x00000040)

	)

5057 
	#RTC_ALRMAR_SU
 ((
uöt32_t
)0x0000000F)

	)

5058 
	#RTC_ALRMAR_SU_0
 ((
uöt32_t
)0x00000001)

	)

5059 
	#RTC_ALRMAR_SU_1
 ((
uöt32_t
)0x00000002)

	)

5060 
	#RTC_ALRMAR_SU_2
 ((
uöt32_t
)0x00000004)

	)

5061 
	#RTC_ALRMAR_SU_3
 ((
uöt32_t
)0x00000008)

	)

5064 
	#RTC_ALRMBR_MSK4
 ((
uöt32_t
)0x80000000)

	)

5065 
	#RTC_ALRMBR_WDSEL
 ((
uöt32_t
)0x40000000)

	)

5066 
	#RTC_ALRMBR_DT
 ((
uöt32_t
)0x30000000)

	)

5067 
	#RTC_ALRMBR_DT_0
 ((
uöt32_t
)0x10000000)

	)

5068 
	#RTC_ALRMBR_DT_1
 ((
uöt32_t
)0x20000000)

	)

5069 
	#RTC_ALRMBR_DU
 ((
uöt32_t
)0x0F000000)

	)

5070 
	#RTC_ALRMBR_DU_0
 ((
uöt32_t
)0x01000000)

	)

5071 
	#RTC_ALRMBR_DU_1
 ((
uöt32_t
)0x02000000)

	)

5072 
	#RTC_ALRMBR_DU_2
 ((
uöt32_t
)0x04000000)

	)

5073 
	#RTC_ALRMBR_DU_3
 ((
uöt32_t
)0x08000000)

	)

5074 
	#RTC_ALRMBR_MSK3
 ((
uöt32_t
)0x00800000)

	)

5075 
	#RTC_ALRMBR_PM
 ((
uöt32_t
)0x00400000)

	)

5076 
	#RTC_ALRMBR_HT
 ((
uöt32_t
)0x00300000)

	)

5077 
	#RTC_ALRMBR_HT_0
 ((
uöt32_t
)0x00100000)

	)

5078 
	#RTC_ALRMBR_HT_1
 ((
uöt32_t
)0x00200000)

	)

5079 
	#RTC_ALRMBR_HU
 ((
uöt32_t
)0x000F0000)

	)

5080 
	#RTC_ALRMBR_HU_0
 ((
uöt32_t
)0x00010000)

	)

5081 
	#RTC_ALRMBR_HU_1
 ((
uöt32_t
)0x00020000)

	)

5082 
	#RTC_ALRMBR_HU_2
 ((
uöt32_t
)0x00040000)

	)

5083 
	#RTC_ALRMBR_HU_3
 ((
uöt32_t
)0x00080000)

	)

5084 
	#RTC_ALRMBR_MSK2
 ((
uöt32_t
)0x00008000)

	)

5085 
	#RTC_ALRMBR_MNT
 ((
uöt32_t
)0x00007000)

	)

5086 
	#RTC_ALRMBR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

5087 
	#RTC_ALRMBR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

5088 
	#RTC_ALRMBR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

5089 
	#RTC_ALRMBR_MNU
 ((
uöt32_t
)0x00000F00)

	)

5090 
	#RTC_ALRMBR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

5091 
	#RTC_ALRMBR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

5092 
	#RTC_ALRMBR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

5093 
	#RTC_ALRMBR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

5094 
	#RTC_ALRMBR_MSK1
 ((
uöt32_t
)0x00000080)

	)

5095 
	#RTC_ALRMBR_ST
 ((
uöt32_t
)0x00000070)

	)

5096 
	#RTC_ALRMBR_ST_0
 ((
uöt32_t
)0x00000010)

	)

5097 
	#RTC_ALRMBR_ST_1
 ((
uöt32_t
)0x00000020)

	)

5098 
	#RTC_ALRMBR_ST_2
 ((
uöt32_t
)0x00000040)

	)

5099 
	#RTC_ALRMBR_SU
 ((
uöt32_t
)0x0000000F)

	)

5100 
	#RTC_ALRMBR_SU_0
 ((
uöt32_t
)0x00000001)

	)

5101 
	#RTC_ALRMBR_SU_1
 ((
uöt32_t
)0x00000002)

	)

5102 
	#RTC_ALRMBR_SU_2
 ((
uöt32_t
)0x00000004)

	)

5103 
	#RTC_ALRMBR_SU_3
 ((
uöt32_t
)0x00000008)

	)

5106 
	#RTC_WPR_KEY
 ((
uöt32_t
)0x000000FF)

	)

5109 
	#RTC_SSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

5112 
	#RTC_SHIFTR_SUBFS
 ((
uöt32_t
)0x00007FFF)

	)

5113 
	#RTC_SHIFTR_ADD1S
 ((
uöt32_t
)0x80000000)

	)

5116 
	#RTC_TSTR_PM
 ((
uöt32_t
)0x00400000)

	)

5117 
	#RTC_TSTR_HT
 ((
uöt32_t
)0x00300000)

	)

5118 
	#RTC_TSTR_HT_0
 ((
uöt32_t
)0x00100000)

	)

5119 
	#RTC_TSTR_HT_1
 ((
uöt32_t
)0x00200000)

	)

5120 
	#RTC_TSTR_HU
 ((
uöt32_t
)0x000F0000)

	)

5121 
	#RTC_TSTR_HU_0
 ((
uöt32_t
)0x00010000)

	)

5122 
	#RTC_TSTR_HU_1
 ((
uöt32_t
)0x00020000)

	)

5123 
	#RTC_TSTR_HU_2
 ((
uöt32_t
)0x00040000)

	)

5124 
	#RTC_TSTR_HU_3
 ((
uöt32_t
)0x00080000)

	)

5125 
	#RTC_TSTR_MNT
 ((
uöt32_t
)0x00007000)

	)

5126 
	#RTC_TSTR_MNT_0
 ((
uöt32_t
)0x00001000)

	)

5127 
	#RTC_TSTR_MNT_1
 ((
uöt32_t
)0x00002000)

	)

5128 
	#RTC_TSTR_MNT_2
 ((
uöt32_t
)0x00004000)

	)

5129 
	#RTC_TSTR_MNU
 ((
uöt32_t
)0x00000F00)

	)

5130 
	#RTC_TSTR_MNU_0
 ((
uöt32_t
)0x00000100)

	)

5131 
	#RTC_TSTR_MNU_1
 ((
uöt32_t
)0x00000200)

	)

5132 
	#RTC_TSTR_MNU_2
 ((
uöt32_t
)0x00000400)

	)

5133 
	#RTC_TSTR_MNU_3
 ((
uöt32_t
)0x00000800)

	)

5134 
	#RTC_TSTR_ST
 ((
uöt32_t
)0x00000070)

	)

5135 
	#RTC_TSTR_ST_0
 ((
uöt32_t
)0x00000010)

	)

5136 
	#RTC_TSTR_ST_1
 ((
uöt32_t
)0x00000020)

	)

5137 
	#RTC_TSTR_ST_2
 ((
uöt32_t
)0x00000040)

	)

5138 
	#RTC_TSTR_SU
 ((
uöt32_t
)0x0000000F)

	)

5139 
	#RTC_TSTR_SU_0
 ((
uöt32_t
)0x00000001)

	)

5140 
	#RTC_TSTR_SU_1
 ((
uöt32_t
)0x00000002)

	)

5141 
	#RTC_TSTR_SU_2
 ((
uöt32_t
)0x00000004)

	)

5142 
	#RTC_TSTR_SU_3
 ((
uöt32_t
)0x00000008)

	)

5145 
	#RTC_TSDR_WDU
 ((
uöt32_t
)0x0000E000)

	)

5146 
	#RTC_TSDR_WDU_0
 ((
uöt32_t
)0x00002000)

	)

5147 
	#RTC_TSDR_WDU_1
 ((
uöt32_t
)0x00004000)

	)

5148 
	#RTC_TSDR_WDU_2
 ((
uöt32_t
)0x00008000)

	)

5149 
	#RTC_TSDR_MT
 ((
uöt32_t
)0x00001000)

	)

5150 
	#RTC_TSDR_MU
 ((
uöt32_t
)0x00000F00)

	)

5151 
	#RTC_TSDR_MU_0
 ((
uöt32_t
)0x00000100)

	)

5152 
	#RTC_TSDR_MU_1
 ((
uöt32_t
)0x00000200)

	)

5153 
	#RTC_TSDR_MU_2
 ((
uöt32_t
)0x00000400)

	)

5154 
	#RTC_TSDR_MU_3
 ((
uöt32_t
)0x00000800)

	)

5155 
	#RTC_TSDR_DT
 ((
uöt32_t
)0x00000030)

	)

5156 
	#RTC_TSDR_DT_0
 ((
uöt32_t
)0x00000010)

	)

5157 
	#RTC_TSDR_DT_1
 ((
uöt32_t
)0x00000020)

	)

5158 
	#RTC_TSDR_DU
 ((
uöt32_t
)0x0000000F)

	)

5159 
	#RTC_TSDR_DU_0
 ((
uöt32_t
)0x00000001)

	)

5160 
	#RTC_TSDR_DU_1
 ((
uöt32_t
)0x00000002)

	)

5161 
	#RTC_TSDR_DU_2
 ((
uöt32_t
)0x00000004)

	)

5162 
	#RTC_TSDR_DU_3
 ((
uöt32_t
)0x00000008)

	)

5165 
	#RTC_TSSSR_SS
 ((
uöt32_t
)0x0000FFFF)

	)

5168 
	#RTC_CALR_CALP
 ((
uöt32_t
)0x00008000)

	)

5169 
	#RTC_CALR_CALW8
 ((
uöt32_t
)0x00004000)

	)

5170 
	#RTC_CALR_CALW16
 ((
uöt32_t
)0x00002000)

	)

5171 
	#RTC_CALR_CALM
 ((
uöt32_t
)0x000001FF)

	)

5172 
	#RTC_CALR_CALM_0
 ((
uöt32_t
)0x00000001)

	)

5173 
	#RTC_CALR_CALM_1
 ((
uöt32_t
)0x00000002)

	)

5174 
	#RTC_CALR_CALM_2
 ((
uöt32_t
)0x00000004)

	)

5175 
	#RTC_CALR_CALM_3
 ((
uöt32_t
)0x00000008)

	)

5176 
	#RTC_CALR_CALM_4
 ((
uöt32_t
)0x00000010)

	)

5177 
	#RTC_CALR_CALM_5
 ((
uöt32_t
)0x00000020)

	)

5178 
	#RTC_CALR_CALM_6
 ((
uöt32_t
)0x00000040)

	)

5179 
	#RTC_CALR_CALM_7
 ((
uöt32_t
)0x00000080)

	)

5180 
	#RTC_CALR_CALM_8
 ((
uöt32_t
)0x00000100)

	)

5183 
	#RTC_TAFCR_ALARMOUTTYPE
 ((
uöt32_t
)0x00040000)

	)

5184 
	#RTC_TAFCR_TAMPPUDIS
 ((
uöt32_t
)0x00008000)

	)

5185 
	#RTC_TAFCR_TAMPPRCH
 ((
uöt32_t
)0x00006000)

	)

5186 
	#RTC_TAFCR_TAMPPRCH_0
 ((
uöt32_t
)0x00002000)

	)

5187 
	#RTC_TAFCR_TAMPPRCH_1
 ((
uöt32_t
)0x00004000)

	)

5188 
	#RTC_TAFCR_TAMPFLT
 ((
uöt32_t
)0x00001800)

	)

5189 
	#RTC_TAFCR_TAMPFLT_0
 ((
uöt32_t
)0x00000800)

	)

5190 
	#RTC_TAFCR_TAMPFLT_1
 ((
uöt32_t
)0x00001000)

	)

5191 
	#RTC_TAFCR_TAMPFREQ
 ((
uöt32_t
)0x00000700)

	)

5192 
	#RTC_TAFCR_TAMPFREQ_0
 ((
uöt32_t
)0x00000100)

	)

5193 
	#RTC_TAFCR_TAMPFREQ_1
 ((
uöt32_t
)0x00000200)

	)

5194 
	#RTC_TAFCR_TAMPFREQ_2
 ((
uöt32_t
)0x00000400)

	)

5195 
	#RTC_TAFCR_TAMPTS
 ((
uöt32_t
)0x00000080)

	)

5196 
	#RTC_TAFCR_TAMP3TRG
 ((
uöt32_t
)0x00000040)

	)

5197 
	#RTC_TAFCR_TAMP3E
 ((
uöt32_t
)0x00000020)

	)

5198 
	#RTC_TAFCR_TAMP2TRG
 ((
uöt32_t
)0x00000010)

	)

5199 
	#RTC_TAFCR_TAMP2E
 ((
uöt32_t
)0x00000008)

	)

5200 
	#RTC_TAFCR_TAMPIE
 ((
uöt32_t
)0x00000004)

	)

5201 
	#RTC_TAFCR_TAMP1TRG
 ((
uöt32_t
)0x00000002)

	)

5202 
	#RTC_TAFCR_TAMP1E
 ((
uöt32_t
)0x00000001)

	)

5205 
	#RTC_ALRMASSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

5206 
	#RTC_ALRMASSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

5207 
	#RTC_ALRMASSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

5208 
	#RTC_ALRMASSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

5209 
	#RTC_ALRMASSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

5210 
	#RTC_ALRMASSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

5213 
	#RTC_ALRMBSSR_MASKSS
 ((
uöt32_t
)0x0F000000)

	)

5214 
	#RTC_ALRMBSSR_MASKSS_0
 ((
uöt32_t
)0x01000000)

	)

5215 
	#RTC_ALRMBSSR_MASKSS_1
 ((
uöt32_t
)0x02000000)

	)

5216 
	#RTC_ALRMBSSR_MASKSS_2
 ((
uöt32_t
)0x04000000)

	)

5217 
	#RTC_ALRMBSSR_MASKSS_3
 ((
uöt32_t
)0x08000000)

	)

5218 
	#RTC_ALRMBSSR_SS
 ((
uöt32_t
)0x00007FFF)

	)

5221 
	#RTC_BKP0R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5224 
	#RTC_BKP1R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5227 
	#RTC_BKP2R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5230 
	#RTC_BKP3R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5233 
	#RTC_BKP4R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5236 
	#RTC_BKP5R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5239 
	#RTC_BKP6R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5242 
	#RTC_BKP7R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5245 
	#RTC_BKP8R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5248 
	#RTC_BKP9R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5251 
	#RTC_BKP10R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5254 
	#RTC_BKP11R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5257 
	#RTC_BKP12R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5260 
	#RTC_BKP13R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5263 
	#RTC_BKP14R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5266 
	#RTC_BKP15R
 ((
uöt32_t
)0xFFFFFFFF)

	)

5274 
	#SPI_CR1_CPHA
 ((
uöt16_t
)0x0001Ë

	)

5275 
	#SPI_CR1_CPOL
 ((
uöt16_t
)0x0002Ë

	)

5276 
	#SPI_CR1_MSTR
 ((
uöt16_t
)0x0004Ë

	)

5278 
	#SPI_CR1_BR
 ((
uöt16_t
)0x0038Ë

	)

5279 
	#SPI_CR1_BR_0
 ((
uöt16_t
)0x0008Ë

	)

5280 
	#SPI_CR1_BR_1
 ((
uöt16_t
)0x0010Ë

	)

5281 
	#SPI_CR1_BR_2
 ((
uöt16_t
)0x0020Ë

	)

5283 
	#SPI_CR1_SPE
 ((
uöt16_t
)0x0040Ë

	)

5284 
	#SPI_CR1_LSBFIRST
 ((
uöt16_t
)0x0080Ë

	)

5285 
	#SPI_CR1_SSI
 ((
uöt16_t
)0x0100Ë

	)

5286 
	#SPI_CR1_SSM
 ((
uöt16_t
)0x0200Ë

	)

5287 
	#SPI_CR1_RXONLY
 ((
uöt16_t
)0x0400Ë

	)

5288 
	#SPI_CR1_CRCL
 ((
uöt16_t
)0x0800Ë

	)

5289 
	#SPI_CR1_CRCNEXT
 ((
uöt16_t
)0x1000Ë

	)

5290 
	#SPI_CR1_CRCEN
 ((
uöt16_t
)0x2000Ë

	)

5291 
	#SPI_CR1_BIDIOE
 ((
uöt16_t
)0x4000Ë

	)

5292 
	#SPI_CR1_BIDIMODE
 ((
uöt16_t
)0x8000Ë

	)

5295 
	#SPI_CR2_RXDMAEN
 ((
uöt16_t
)0x0001Ë

	)

5296 
	#SPI_CR2_TXDMAEN
 ((
uöt16_t
)0x0002Ë

	)

5297 
	#SPI_CR2_SSOE
 ((
uöt16_t
)0x0004Ë

	)

5298 
	#SPI_CR2_NSSP
 ((
uöt16_t
)0x0008Ë

	)

5299 
	#SPI_CR2_FRF
 ((
uöt16_t
)0x0010Ë

	)

5300 
	#SPI_CR2_ERRIE
 ((
uöt16_t
)0x0020Ë

	)

5301 
	#SPI_CR2_RXNEIE
 ((
uöt16_t
)0x0040Ë

	)

5302 
	#SPI_CR2_TXEIE
 ((
uöt16_t
)0x0080Ë

	)

5304 
	#SPI_CR2_DS
 ((
uöt16_t
)0x0F00Ë

	)

5305 
	#SPI_CR2_DS_0
 ((
uöt16_t
)0x0100Ë

	)

5306 
	#SPI_CR2_DS_1
 ((
uöt16_t
)0x0200Ë

	)

5307 
	#SPI_CR2_DS_2
 ((
uöt16_t
)0x0400Ë

	)

5308 
	#SPI_CR2_DS_3
 ((
uöt16_t
)0x0800Ë

	)

5310 
	#SPI_CR2_FRXTH
 ((
uöt16_t
)0x1000Ë

	)

5311 
	#SPI_CR2_LDMARX
 ((
uöt16_t
)0x2000Ë

	)

5312 
	#SPI_CR2_LDMATX
 ((
uöt16_t
)0x4000Ë

	)

5315 
	#SPI_SR_RXNE
 ((
uöt16_t
)0x0001Ë

	)

5316 
	#SPI_SR_TXE
 ((
uöt16_t
)0x0002Ë

	)

5317 
	#SPI_SR_CRCERR
 ((
uöt16_t
)0x0010Ë

	)

5318 
	#SPI_SR_MODF
 ((
uöt16_t
)0x0020Ë

	)

5319 
	#SPI_SR_OVR
 ((
uöt16_t
)0x0040Ë

	)

5320 
	#SPI_SR_BSY
 ((
uöt16_t
)0x0080Ë

	)

5321 
	#SPI_SR_FRE
 ((
uöt16_t
)0x0100Ë

	)

5322 
	#SPI_SR_FRLVL
 ((
uöt16_t
)0x0600Ë

	)

5323 
	#SPI_SR_FRLVL_0
 ((
uöt16_t
)0x0200Ë

	)

5324 
	#SPI_SR_FRLVL_1
 ((
uöt16_t
)0x0400Ë

	)

5325 
	#SPI_SR_FTLVL
 ((
uöt16_t
)0x1800Ë

	)

5326 
	#SPI_SR_FTLVL_0
 ((
uöt16_t
)0x0800Ë

	)

5327 
	#SPI_SR_FTLVL_1
 ((
uöt16_t
)0x1000Ë

	)

5330 
	#SPI_DR_DR
 ((
uöt16_t
)0xFFFFË

	)

5333 
	#SPI_CRCPR_CRCPOLY
 ((
uöt16_t
)0xFFFFË

	)

5336 
	#SPI_RXCRCR_RXCRC
 ((
uöt16_t
)0xFFFFË

	)

5339 
	#SPI_TXCRCR_TXCRC
 ((
uöt16_t
)0xFFFFË

	)

5342 
	#SPI_I2SCFGR_CHLEN
 ((
uöt16_t
)0x0001Ë

	)

5344 
	#SPI_I2SCFGR_DATLEN
 ((
uöt16_t
)0x0006Ë

	)

5345 
	#SPI_I2SCFGR_DATLEN_0
 ((
uöt16_t
)0x0002Ë

	)

5346 
	#SPI_I2SCFGR_DATLEN_1
 ((
uöt16_t
)0x0004Ë

	)

5348 
	#SPI_I2SCFGR_CKPOL
 ((
uöt16_t
)0x0008Ë

	)

5350 
	#SPI_I2SCFGR_I2SSTD
 ((
uöt16_t
)0x0030Ë

	)

5351 
	#SPI_I2SCFGR_I2SSTD_0
 ((
uöt16_t
)0x0010Ë

	)

5352 
	#SPI_I2SCFGR_I2SSTD_1
 ((
uöt16_t
)0x0020Ë

	)

5354 
	#SPI_I2SCFGR_PCMSYNC
 ((
uöt16_t
)0x0080Ë

	)

5356 
	#SPI_I2SCFGR_I2SCFG
 ((
uöt16_t
)0x0300Ë

	)

5357 
	#SPI_I2SCFGR_I2SCFG_0
 ((
uöt16_t
)0x0100Ë

	)

5358 
	#SPI_I2SCFGR_I2SCFG_1
 ((
uöt16_t
)0x0200Ë

	)

5360 
	#SPI_I2SCFGR_I2SE
 ((
uöt16_t
)0x0400Ë

	)

5361 
	#SPI_I2SCFGR_I2SMOD
 ((
uöt16_t
)0x0800Ë

	)

5364 
	#SPI_I2SPR_I2SDIV
 ((
uöt16_t
)0x00FFË

	)

5365 
	#SPI_I2SPR_ODD
 ((
uöt16_t
)0x0100Ë

	)

5366 
	#SPI_I2SPR_MCKOE
 ((
uöt16_t
)0x0200Ë

	)

5374 
	#SYSCFG_CFGR1_MEM_MODE
 ((
uöt32_t
)0x00000003Ë

	)

5375 
	#SYSCFG_CFGR1_MEM_MODE_0
 ((
uöt32_t
)0x00000001Ë

	)

5376 
	#SYSCFG_CFGR1_MEM_MODE_1
 ((
uöt32_t
)0x00000002Ë

	)

5377 
	#SYSCFG_CFGR1_USB_IT_RMP
 ((
uöt32_t
)0x00000020Ë

	)

5378 
	#SYSCFG_CFGR1_TIM1_ITR3_RMP
 ((
uöt32_t
)0x00000040Ë

	)

5379 
	#SYSCFG_CFGR1_DAC_TRIG_RMP
 ((
uöt32_t
)0x00000080Ë

	)

5380 
	#SYSCFG_CFGR1_ADC24_DMA_RMP
 ((
uöt32_t
)0x00000100Ë

	)

5381 
	#SYSCFG_CFGR1_TIM16_DMA_RMP
 ((
uöt32_t
)0x00000800Ë

	)

5382 
	#SYSCFG_CFGR1_TIM17_DMA_RMP
 ((
uöt32_t
)0x00001000Ë

	)

5383 
	#SYSCFG_CFGR1_TIM6DAC1_DMA_RMP
 ((
uöt32_t
)0x00002000Ë

	)

5384 
	#SYSCFG_CFGR1_TIM7DAC2_DMA_RMP
 ((
uöt32_t
)0x00004000Ë

	)

5385 
	#SYSCFG_CFGR1_I2C_PB6_FMP
 ((
uöt32_t
)0x00010000Ë

	)

5386 
	#SYSCFG_CFGR1_I2C_PB7_FMP
 ((
uöt32_t
)0x00020000Ë

	)

5387 
	#SYSCFG_CFGR1_I2C_PB8_FMP
 ((
uöt32_t
)0x00040000Ë

	)

5388 
	#SYSCFG_CFGR1_I2C_PB9_FMP
 ((
uöt32_t
)0x00080000Ë

	)

5389 
	#SYSCFG_CFGR1_I2C1_FMP
 ((
uöt32_t
)0x00100000Ë

	)

5390 
	#SYSCFG_CFGR1_I2C2_FMP
 ((
uöt32_t
)0x00200000Ë

	)

5391 
	#SYSCFG_CFGR1_ENCODER_MODE
 ((
uöt32_t
)0x00C00000Ë

	)

5392 
	#SYSCFG_CFGR1_ENCODER_MODE_0
 ((
uöt32_t
)0x00400000Ë

	)

5393 
	#SYSCFG_CFGR1_ENCODER_MODE_1
 ((
uöt32_t
)0x00800000Ë

	)

5394 
	#SYSCFG_CFGR1_FPU_IE
 ((
uöt32_t
)0xFC000000Ë

	)

5395 
	#SYSCFG_CFGR1_FPU_IE_0
 ((
uöt32_t
)0x04000000Ë

	)

5396 
	#SYSCFG_CFGR1_FPU_IE_1
 ((
uöt32_t
)0x08000000Ë

	)

5397 
	#SYSCFG_CFGR1_FPU_IE_2
 ((
uöt32_t
)0x10000000Ë

	)

5398 
	#SYSCFG_CFGR1_FPU_IE_3
 ((
uöt32_t
)0x20000000Ë

	)

5399 
	#SYSCFG_CFGR1_FPU_IE_4
 ((
uöt32_t
)0x40000000Ë

	)

5400 
	#SYSCFG_CFGR1_FPU_IE_5
 ((
uöt32_t
)0x80000000Ë

	)

5403 
	#SYSCFG_RCR_PAGE0
 ((
uöt32_t
)0x00000001Ë

	)

5404 
	#SYSCFG_RCR_PAGE1
 ((
uöt32_t
)0x00000002Ë

	)

5405 
	#SYSCFG_RCR_PAGE2
 ((
uöt32_t
)0x00000004Ë

	)

5406 
	#SYSCFG_RCR_PAGE3
 ((
uöt32_t
)0x00000008Ë

	)

5407 
	#SYSCFG_RCR_PAGE4
 ((
uöt32_t
)0x00000010Ë

	)

5408 
	#SYSCFG_RCR_PAGE5
 ((
uöt32_t
)0x00000020Ë

	)

5409 
	#SYSCFG_RCR_PAGE6
 ((
uöt32_t
)0x00000040Ë

	)

5410 
	#SYSCFG_RCR_PAGE7
 ((
uöt32_t
)0x00000080Ë

	)

5413 
	#SYSCFG_EXTICR1_EXTI0
 ((
uöt16_t
)0x000FË

	)

5414 
	#SYSCFG_EXTICR1_EXTI1
 ((
uöt16_t
)0x00F0Ë

	)

5415 
	#SYSCFG_EXTICR1_EXTI2
 ((
uöt16_t
)0x0F00Ë

	)

5416 
	#SYSCFG_EXTICR1_EXTI3
 ((
uöt16_t
)0xF000Ë

	)

5421 
	#SYSCFG_EXTICR1_EXTI0_PA
 ((
uöt16_t
)0x0000Ë

	)

5422 
	#SYSCFG_EXTICR1_EXTI0_PB
 ((
uöt16_t
)0x0001Ë

	)

5423 
	#SYSCFG_EXTICR1_EXTI0_PC
 ((
uöt16_t
)0x0002Ë

	)

5424 
	#SYSCFG_EXTICR1_EXTI0_PD
 ((
uöt16_t
)0x0003Ë

	)

5425 
	#SYSCFG_EXTICR1_EXTI0_PE
 ((
uöt16_t
)0x0004Ë

	)

5426 
	#SYSCFG_EXTICR1_EXTI0_PF
 ((
uöt16_t
)0x0005Ë

	)

5431 
	#SYSCFG_EXTICR1_EXTI1_PA
 ((
uöt16_t
)0x0000Ë

	)

5432 
	#SYSCFG_EXTICR1_EXTI1_PB
 ((
uöt16_t
)0x0010Ë

	)

5433 
	#SYSCFG_EXTICR1_EXTI1_PC
 ((
uöt16_t
)0x0020Ë

	)

5434 
	#SYSCFG_EXTICR1_EXTI1_PD
 ((
uöt16_t
)0x0030Ë

	)

5435 
	#SYSCFG_EXTICR1_EXTI1_PE
 ((
uöt16_t
)0x0040Ë

	)

5436 
	#SYSCFG_EXTICR1_EXTI1_PF
 ((
uöt16_t
)0x0050Ë

	)

5441 
	#SYSCFG_EXTICR1_EXTI2_PA
 ((
uöt16_t
)0x0000Ë

	)

5442 
	#SYSCFG_EXTICR1_EXTI2_PB
 ((
uöt16_t
)0x0100Ë

	)

5443 
	#SYSCFG_EXTICR1_EXTI2_PC
 ((
uöt16_t
)0x0200Ë

	)

5444 
	#SYSCFG_EXTICR1_EXTI2_PD
 ((
uöt16_t
)0x0300Ë

	)

5445 
	#SYSCFG_EXTICR1_EXTI2_PE
 ((
uöt16_t
)0x0400Ë

	)

5446 
	#SYSCFG_EXTICR1_EXTI2_PF
 ((
uöt16_t
)0x0500Ë

	)

5451 
	#SYSCFG_EXTICR1_EXTI3_PA
 ((
uöt16_t
)0x0000Ë

	)

5452 
	#SYSCFG_EXTICR1_EXTI3_PB
 ((
uöt16_t
)0x1000Ë

	)

5453 
	#SYSCFG_EXTICR1_EXTI3_PC
 ((
uöt16_t
)0x2000Ë

	)

5454 
	#SYSCFG_EXTICR1_EXTI3_PD
 ((
uöt16_t
)0x3000Ë

	)

5455 
	#SYSCFG_EXTICR1_EXTI3_PE
 ((
uöt16_t
)0x4000Ë

	)

5458 
	#SYSCFG_EXTIRCR_EXTI4
 ((
uöt16_t
)0x000FË

	)

5459 
	#SYSCFG_EXTIRCR_EXTI5
 ((
uöt16_t
)0x00F0Ë

	)

5460 
	#SYSCFG_EXTIRCR_EXTI6
 ((
uöt16_t
)0x0F00Ë

	)

5461 
	#SYSCFG_EXTIRCR_EXTI7
 ((
uöt16_t
)0xF000Ë

	)

5466 
	#SYSCFG_EXTIRCR_EXTI4_PA
 ((
uöt16_t
)0x0000Ë

	)

5467 
	#SYSCFG_EXTIRCR_EXTI4_PB
 ((
uöt16_t
)0x0001Ë

	)

5468 
	#SYSCFG_EXTIRCR_EXTI4_PC
 ((
uöt16_t
)0x0002Ë

	)

5469 
	#SYSCFG_EXTIRCR_EXTI4_PD
 ((
uöt16_t
)0x0003Ë

	)

5470 
	#SYSCFG_EXTIRCR_EXTI4_PE
 ((
uöt16_t
)0x0004Ë

	)

5471 
	#SYSCFG_EXTIRCR_EXTI4_PF
 ((
uöt16_t
)0x0005Ë

	)

5476 
	#SYSCFG_EXTIRCR_EXTI5_PA
 ((
uöt16_t
)0x0000Ë

	)

5477 
	#SYSCFG_EXTIRCR_EXTI5_PB
 ((
uöt16_t
)0x0010Ë

	)

5478 
	#SYSCFG_EXTIRCR_EXTI5_PC
 ((
uöt16_t
)0x0020Ë

	)

5479 
	#SYSCFG_EXTIRCR_EXTI5_PD
 ((
uöt16_t
)0x0030Ë

	)

5480 
	#SYSCFG_EXTIRCR_EXTI5_PE
 ((
uöt16_t
)0x0040Ë

	)

5481 
	#SYSCFG_EXTIRCR_EXTI5_PF
 ((
uöt16_t
)0x0050Ë

	)

5486 
	#SYSCFG_EXTIRCR_EXTI6_PA
 ((
uöt16_t
)0x0000Ë

	)

5487 
	#SYSCFG_EXTIRCR_EXTI6_PB
 ((
uöt16_t
)0x0100Ë

	)

5488 
	#SYSCFG_EXTIRCR_EXTI6_PC
 ((
uöt16_t
)0x0200Ë

	)

5489 
	#SYSCFG_EXTIRCR_EXTI6_PD
 ((
uöt16_t
)0x0300Ë

	)

5490 
	#SYSCFG_EXTIRCR_EXTI6_PE
 ((
uöt16_t
)0x0400Ë

	)

5491 
	#SYSCFG_EXTIRCR_EXTI6_PF
 ((
uöt16_t
)0x0500Ë

	)

5496 
	#SYSCFG_EXTIRCR_EXTI7_PA
 ((
uöt16_t
)0x0000Ë

	)

5497 
	#SYSCFG_EXTIRCR_EXTI7_PB
 ((
uöt16_t
)0x1000Ë

	)

5498 
	#SYSCFG_EXTIRCR_EXTI7_PC
 ((
uöt16_t
)0x2000Ë

	)

5499 
	#SYSCFG_EXTIRCR_EXTI7_PD
 ((
uöt16_t
)0x3000Ë

	)

5500 
	#SYSCFG_EXTIRCR_EXTI7_PE
 ((
uöt16_t
)0x4000Ë

	)

5503 
	#SYSCFG_EXTICR3_EXTI8
 ((
uöt16_t
)0x000FË

	)

5504 
	#SYSCFG_EXTICR3_EXTI9
 ((
uöt16_t
)0x00F0Ë

	)

5505 
	#SYSCFG_EXTICR3_EXTI10
 ((
uöt16_t
)0x0F00Ë

	)

5506 
	#SYSCFG_EXTICR3_EXTI11
 ((
uöt16_t
)0xF000Ë

	)

5511 
	#SYSCFG_EXTICR3_EXTI8_PA
 ((
uöt16_t
)0x0000Ë

	)

5512 
	#SYSCFG_EXTICR3_EXTI8_PB
 ((
uöt16_t
)0x0001Ë

	)

5513 
	#SYSCFG_EXTICR3_EXTI8_PC
 ((
uöt16_t
)0x0002Ë

	)

5514 
	#SYSCFG_EXTICR3_EXTI8_PD
 ((
uöt16_t
)0x0003Ë

	)

5515 
	#SYSCFG_EXTICR3_EXTI8_PE
 ((
uöt16_t
)0x0004Ë

	)

5520 
	#SYSCFG_EXTICR3_EXTI9_PA
 ((
uöt16_t
)0x0000Ë

	)

5521 
	#SYSCFG_EXTICR3_EXTI9_PB
 ((
uöt16_t
)0x0010Ë

	)

5522 
	#SYSCFG_EXTICR3_EXTI9_PC
 ((
uöt16_t
)0x0020Ë

	)

5523 
	#SYSCFG_EXTICR3_EXTI9_PD
 ((
uöt16_t
)0x0030Ë

	)

5524 
	#SYSCFG_EXTICR3_EXTI9_PE
 ((
uöt16_t
)0x0040Ë

	)

5525 
	#SYSCFG_EXTICR3_EXTI9_PF
 ((
uöt16_t
)0x0050Ë

	)

5530 
	#SYSCFG_EXTICR3_EXTI10_PA
 ((
uöt16_t
)0x0000Ë

	)

5531 
	#SYSCFG_EXTICR3_EXTI10_PB
 ((
uöt16_t
)0x0100Ë

	)

5532 
	#SYSCFG_EXTICR3_EXTI10_PC
 ((
uöt16_t
)0x0200Ë

	)

5533 
	#SYSCFG_EXTICR3_EXTI10_PD
 ((
uöt16_t
)0x0300Ë

	)

5534 
	#SYSCFG_EXTICR3_EXTI10_PE
 ((
uöt16_t
)0x0400Ë

	)

5535 
	#SYSCFG_EXTICR3_EXTI10_PF
 ((
uöt16_t
)0x0500Ë

	)

5540 
	#SYSCFG_EXTICR3_EXTI11_PA
 ((
uöt16_t
)0x0000Ë

	)

5541 
	#SYSCFG_EXTICR3_EXTI11_PB
 ((
uöt16_t
)0x1000Ë

	)

5542 
	#SYSCFG_EXTICR3_EXTI11_PC
 ((
uöt16_t
)0x2000Ë

	)

5543 
	#SYSCFG_EXTICR3_EXTI11_PD
 ((
uöt16_t
)0x3000Ë

	)

5544 
	#SYSCFG_EXTICR3_EXTI11_PE
 ((
uöt16_t
)0x4000Ë

	)

5547 
	#SYSCFG_EXTICR4_EXTI12
 ((
uöt16_t
)0x000FË

	)

5548 
	#SYSCFG_EXTICR4_EXTI13
 ((
uöt16_t
)0x00F0Ë

	)

5549 
	#SYSCFG_EXTICR4_EXTI14
 ((
uöt16_t
)0x0F00Ë

	)

5550 
	#SYSCFG_EXTICR4_EXTI15
 ((
uöt16_t
)0xF000Ë

	)

5555 
	#SYSCFG_EXTICR4_EXTI12_PA
 ((
uöt16_t
)0x0000Ë

	)

5556 
	#SYSCFG_EXTICR4_EXTI12_PB
 ((
uöt16_t
)0x0001Ë

	)

5557 
	#SYSCFG_EXTICR4_EXTI12_PC
 ((
uöt16_t
)0x0002Ë

	)

5558 
	#SYSCFG_EXTICR4_EXTI12_PD
 ((
uöt16_t
)0x0003Ë

	)

5559 
	#SYSCFG_EXTICR4_EXTI12_PE
 ((
uöt16_t
)0x0004Ë

	)

5564 
	#SYSCFG_EXTICR4_EXTI13_PA
 ((
uöt16_t
)0x0000Ë

	)

5565 
	#SYSCFG_EXTICR4_EXTI13_PB
 ((
uöt16_t
)0x0010Ë

	)

5566 
	#SYSCFG_EXTICR4_EXTI13_PC
 ((
uöt16_t
)0x0020Ë

	)

5567 
	#SYSCFG_EXTICR4_EXTI13_PD
 ((
uöt16_t
)0x0030Ë

	)

5568 
	#SYSCFG_EXTICR4_EXTI13_PE
 ((
uöt16_t
)0x0040Ë

	)

5573 
	#SYSCFG_EXTICR4_EXTI14_PA
 ((
uöt16_t
)0x0000Ë

	)

5574 
	#SYSCFG_EXTICR4_EXTI14_PB
 ((
uöt16_t
)0x0100Ë

	)

5575 
	#SYSCFG_EXTICR4_EXTI14_PC
 ((
uöt16_t
)0x0200Ë

	)

5576 
	#SYSCFG_EXTICR4_EXTI14_PD
 ((
uöt16_t
)0x0300Ë

	)

5577 
	#SYSCFG_EXTICR4_EXTI14_PE
 ((
uöt16_t
)0x0400Ë

	)

5582 
	#SYSCFG_EXTICR4_EXTI15_PA
 ((
uöt16_t
)0x0000Ë

	)

5583 
	#SYSCFG_EXTICR4_EXTI15_PB
 ((
uöt16_t
)0x1000Ë

	)

5584 
	#SYSCFG_EXTICR4_EXTI15_PC
 ((
uöt16_t
)0x2000Ë

	)

5585 
	#SYSCFG_EXTICR4_EXTI15_PD
 ((
uöt16_t
)0x3000Ë

	)

5586 
	#SYSCFG_EXTICR4_EXTI15_PE
 ((
uöt16_t
)0x4000Ë

	)

5589 
	#SYSCFG_CFGR2_LOCKUP_LOCK
 ((
uöt32_t
)0x00000001Ë

	)

5590 
	#SYSCFG_CFGR2_SRAM_PARITY_LOCK
 ((
uöt32_t
)0x00000002Ë

	)

5591 
	#SYSCFG_CFGR2_PVD_LOCK
 ((
uöt32_t
)0x00000004Ë

	)

5592 
	#SYSCFG_CFGR2_BYP_ADDR_PAR
 ((
uöt32_t
)0x00000010Ë

	)

5593 
	#SYSCFG_CFGR2_SRAM_PE
 ((
uöt32_t
)0x00000100Ë

	)

5602 
	#TIM_CR1_CEN
 ((
uöt16_t
)0x0001Ë

	)

5603 
	#TIM_CR1_UDIS
 ((
uöt16_t
)0x0002Ë

	)

5604 
	#TIM_CR1_URS
 ((
uöt16_t
)0x0004Ë

	)

5605 
	#TIM_CR1_OPM
 ((
uöt16_t
)0x0008Ë

	)

5606 
	#TIM_CR1_DIR
 ((
uöt16_t
)0x0010Ë

	)

5608 
	#TIM_CR1_CMS
 ((
uöt16_t
)0x0060Ë

	)

5609 
	#TIM_CR1_CMS_0
 ((
uöt16_t
)0x0020Ë

	)

5610 
	#TIM_CR1_CMS_1
 ((
uöt16_t
)0x0040Ë

	)

5612 
	#TIM_CR1_ARPE
 ((
uöt16_t
)0x0080Ë

	)

5614 
	#TIM_CR1_CKD
 ((
uöt16_t
)0x0300Ë

	)

5615 
	#TIM_CR1_CKD_0
 ((
uöt16_t
)0x0100Ë

	)

5616 
	#TIM_CR1_CKD_1
 ((
uöt16_t
)0x0200Ë

	)

5618 
	#TIM_CR1_UIFREMAP
 ((
uöt16_t
)0x0800Ë

	)

5621 
	#TIM_CR2_CCPC
 ((
uöt32_t
)0x00000001Ë

	)

5622 
	#TIM_CR2_CCUS
 ((
uöt32_t
)0x00000004Ë

	)

5623 
	#TIM_CR2_CCDS
 ((
uöt32_t
)0x00000008Ë

	)

5625 
	#TIM_CR2_MMS
 ((
uöt32_t
)0x00000070Ë

	)

5626 
	#TIM_CR2_MMS_0
 ((
uöt32_t
)0x00000010Ë

	)

5627 
	#TIM_CR2_MMS_1
 ((
uöt32_t
)0x00000020Ë

	)

5628 
	#TIM_CR2_MMS_2
 ((
uöt32_t
)0x00000040Ë

	)

5630 
	#TIM_CR2_TI1S
 ((
uöt32_t
)0x00000080Ë

	)

5631 
	#TIM_CR2_OIS1
 ((
uöt32_t
)0x00000100Ë

	)

5632 
	#TIM_CR2_OIS1N
 ((
uöt32_t
)0x00000200Ë

	)

5633 
	#TIM_CR2_OIS2
 ((
uöt32_t
)0x00000400Ë

	)

5634 
	#TIM_CR2_OIS2N
 ((
uöt32_t
)0x00000800Ë

	)

5635 
	#TIM_CR2_OIS3
 ((
uöt32_t
)0x00001000Ë

	)

5636 
	#TIM_CR2_OIS3N
 ((
uöt32_t
)0x00002000Ë

	)

5637 
	#TIM_CR2_OIS4
 ((
uöt32_t
)0x00004000Ë

	)

5638 
	#TIM_CR2_OIS5
 ((
uöt32_t
)0x00010000Ë

	)

5639 
	#TIM_CR2_OIS6
 ((
uöt32_t
)0x00020000Ë

	)

5641 
	#TIM_CR2_MMS2
 ((
uöt32_t
)0x00F00000Ë

	)

5642 
	#TIM_CR2_MMS2_0
 ((
uöt32_t
)0x00100000Ë

	)

5643 
	#TIM_CR2_MMS2_1
 ((
uöt32_t
)0x00200000Ë

	)

5644 
	#TIM_CR2_MMS2_2
 ((
uöt32_t
)0x00400000Ë

	)

5645 
	#TIM_CR2_MMS2_3
 ((
uöt32_t
)0x00800000Ë

	)

5648 
	#TIM_SMCR_SMS
 ((
uöt32_t
)0x00010007Ë

	)

5649 
	#TIM_SMCR_SMS_0
 ((
uöt32_t
)0x00000001Ë

	)

5650 
	#TIM_SMCR_SMS_1
 ((
uöt32_t
)0x00000002Ë

	)

5651 
	#TIM_SMCR_SMS_2
 ((
uöt32_t
)0x00000004Ë

	)

5652 
	#TIM_SMCR_SMS_3
 ((
uöt32_t
)0x00010000Ë

	)

5654 
	#TIM_SMCR_OCCS
 ((
uöt32_t
)0x00000008Ë

	)

5656 
	#TIM_SMCR_TS
 ((
uöt32_t
)0x00000070Ë

	)

5657 
	#TIM_SMCR_TS_0
 ((
uöt32_t
)0x00000010Ë

	)

5658 
	#TIM_SMCR_TS_1
 ((
uöt32_t
)0x00000020Ë

	)

5659 
	#TIM_SMCR_TS_2
 ((
uöt32_t
)0x00000040Ë

	)

5661 
	#TIM_SMCR_MSM
 ((
uöt32_t
)0x00000080Ë

	)

5663 
	#TIM_SMCR_ETF
 ((
uöt32_t
)0x00000F00Ë

	)

5664 
	#TIM_SMCR_ETF_0
 ((
uöt32_t
)0x00000100Ë

	)

5665 
	#TIM_SMCR_ETF_1
 ((
uöt32_t
)0x00000200Ë

	)

5666 
	#TIM_SMCR_ETF_2
 ((
uöt32_t
)0x00000400Ë

	)

5667 
	#TIM_SMCR_ETF_3
 ((
uöt32_t
)0x00000800Ë

	)

5669 
	#TIM_SMCR_ETPS
 ((
uöt32_t
)0x00003000Ë

	)

5670 
	#TIM_SMCR_ETPS_0
 ((
uöt32_t
)0x00001000Ë

	)

5671 
	#TIM_SMCR_ETPS_1
 ((
uöt32_t
)0x00002000Ë

	)

5673 
	#TIM_SMCR_ECE
 ((
uöt32_t
)0x00004000Ë

	)

5674 
	#TIM_SMCR_ETP
 ((
uöt32_t
)0x00008000Ë

	)

5677 
	#TIM_DIER_UIE
 ((
uöt16_t
)0x0001Ë

	)

5678 
	#TIM_DIER_CC1IE
 ((
uöt16_t
)0x0002Ë

	)

5679 
	#TIM_DIER_CC2IE
 ((
uöt16_t
)0x0004Ë

	)

5680 
	#TIM_DIER_CC3IE
 ((
uöt16_t
)0x0008Ë

	)

5681 
	#TIM_DIER_CC4IE
 ((
uöt16_t
)0x0010Ë

	)

5682 
	#TIM_DIER_COMIE
 ((
uöt16_t
)0x0020Ë

	)

5683 
	#TIM_DIER_TIE
 ((
uöt16_t
)0x0040Ë

	)

5684 
	#TIM_DIER_BIE
 ((
uöt16_t
)0x0080Ë

	)

5685 
	#TIM_DIER_UDE
 ((
uöt16_t
)0x0100Ë

	)

5686 
	#TIM_DIER_CC1DE
 ((
uöt16_t
)0x0200Ë

	)

5687 
	#TIM_DIER_CC2DE
 ((
uöt16_t
)0x0400Ë

	)

5688 
	#TIM_DIER_CC3DE
 ((
uöt16_t
)0x0800Ë

	)

5689 
	#TIM_DIER_CC4DE
 ((
uöt16_t
)0x1000Ë

	)

5690 
	#TIM_DIER_COMDE
 ((
uöt16_t
)0x2000Ë

	)

5691 
	#TIM_DIER_TDE
 ((
uöt16_t
)0x4000Ë

	)

5694 
	#TIM_SR_UIF
 ((
uöt32_t
)0x00000001Ë

	)

5695 
	#TIM_SR_CC1IF
 ((
uöt32_t
)0x00000002Ë

	)

5696 
	#TIM_SR_CC2IF
 ((
uöt32_t
)0x00000004Ë

	)

5697 
	#TIM_SR_CC3IF
 ((
uöt32_t
)0x00000008Ë

	)

5698 
	#TIM_SR_CC4IF
 ((
uöt32_t
)0x00000010Ë

	)

5699 
	#TIM_SR_COMIF
 ((
uöt32_t
)0x00000020Ë

	)

5700 
	#TIM_SR_TIF
 ((
uöt32_t
)0x00000040Ë

	)

5701 
	#TIM_SR_BIF
 ((
uöt32_t
)0x00000080Ë

	)

5702 
	#TIM_SR_B2IF
 ((
uöt32_t
)0x00000100Ë

	)

5703 
	#TIM_SR_CC1OF
 ((
uöt32_t
)0x00000200Ë

	)

5704 
	#TIM_SR_CC2OF
 ((
uöt32_t
)0x00000400Ë

	)

5705 
	#TIM_SR_CC3OF
 ((
uöt32_t
)0x00000800Ë

	)

5706 
	#TIM_SR_CC4OF
 ((
uöt32_t
)0x00001000Ë

	)

5707 
	#TIM_SR_CC5IF
 ((
uöt32_t
)0x00010000Ë

	)

5708 
	#TIM_SR_CC6IF
 ((
uöt32_t
)0x00020000Ë

	)

5712 
	#TIM_EGR_UG
 ((
uöt16_t
)0x0001Ë

	)

5713 
	#TIM_EGR_CC1G
 ((
uöt16_t
)0x0002Ë

	)

5714 
	#TIM_EGR_CC2G
 ((
uöt16_t
)0x0004Ë

	)

5715 
	#TIM_EGR_CC3G
 ((
uöt16_t
)0x0008Ë

	)

5716 
	#TIM_EGR_CC4G
 ((
uöt16_t
)0x0010Ë

	)

5717 
	#TIM_EGR_COMG
 ((
uöt16_t
)0x0020Ë

	)

5718 
	#TIM_EGR_TG
 ((
uöt16_t
)0x0040Ë

	)

5719 
	#TIM_EGR_BG
 ((
uöt16_t
)0x0080Ë

	)

5720 
	#TIM_EGR_B2G
 ((
uöt16_t
)0x0100Ë

	)

5724 
	#TIM_CCMR1_CC1S
 ((
uöt32_t
)0x00000003Ë

	)

5725 
	#TIM_CCMR1_CC1S_0
 ((
uöt32_t
)0x00000001Ë

	)

5726 
	#TIM_CCMR1_CC1S_1
 ((
uöt32_t
)0x00000002Ë

	)

5728 
	#TIM_CCMR1_OC1FE
 ((
uöt32_t
)0x00000004Ë

	)

5729 
	#TIM_CCMR1_OC1PE
 ((
uöt32_t
)0x00000008Ë

	)

5731 
	#TIM_CCMR1_OC1M
 ((
uöt32_t
)0x00010070Ë

	)

5732 
	#TIM_CCMR1_OC1M_0
 ((
uöt32_t
)0x00000010Ë

	)

5733 
	#TIM_CCMR1_OC1M_1
 ((
uöt32_t
)0x00000020Ë

	)

5734 
	#TIM_CCMR1_OC1M_2
 ((
uöt32_t
)0x00000040Ë

	)

5735 
	#TIM_CCMR1_OC1M_3
 ((
uöt32_t
)0x00010000Ë

	)

5737 
	#TIM_CCMR1_OC1CE
 ((
uöt32_t
)0x00000080Ë

	)

5739 
	#TIM_CCMR1_CC2S
 ((
uöt32_t
)0x00000300Ë

	)

5740 
	#TIM_CCMR1_CC2S_0
 ((
uöt32_t
)0x00000100Ë

	)

5741 
	#TIM_CCMR1_CC2S_1
 ((
uöt32_t
)0x00000200Ë

	)

5743 
	#TIM_CCMR1_OC2FE
 ((
uöt32_t
)0x00000400Ë

	)

5744 
	#TIM_CCMR1_OC2PE
 ((
uöt32_t
)0x00000800Ë

	)

5746 
	#TIM_CCMR1_OC2M
 ((
uöt32_t
)0x01007000Ë

	)

5747 
	#TIM_CCMR1_OC2M_0
 ((
uöt32_t
)0x00001000Ë

	)

5748 
	#TIM_CCMR1_OC2M_1
 ((
uöt32_t
)0x00002000Ë

	)

5749 
	#TIM_CCMR1_OC2M_2
 ((
uöt32_t
)0x00004000Ë

	)

5750 
	#TIM_CCMR1_OC2M_3
 ((
uöt32_t
)0x01000000Ë

	)

5752 
	#TIM_CCMR1_OC2CE
 ((
uöt32_t
)0x00008000Ë

	)

5756 
	#TIM_CCMR1_IC1PSC
 ((
uöt32_t
)0x0000000CË

	)

5757 
	#TIM_CCMR1_IC1PSC_0
 ((
uöt32_t
)0x00000004Ë

	)

5758 
	#TIM_CCMR1_IC1PSC_1
 ((
uöt32_t
)0x00000008Ë

	)

5760 
	#TIM_CCMR1_IC1F
 ((
uöt32_t
)0x000000F0Ë

	)

5761 
	#TIM_CCMR1_IC1F_0
 ((
uöt32_t
)0x00000010Ë

	)

5762 
	#TIM_CCMR1_IC1F_1
 ((
uöt32_t
)0x00000020Ë

	)

5763 
	#TIM_CCMR1_IC1F_2
 ((
uöt32_t
)0x00000040Ë

	)

5764 
	#TIM_CCMR1_IC1F_3
 ((
uöt32_t
)0x00000080Ë

	)

5766 
	#TIM_CCMR1_IC2PSC
 ((
uöt32_t
)0x00000C00Ë

	)

5767 
	#TIM_CCMR1_IC2PSC_0
 ((
uöt32_t
)0x00000400Ë

	)

5768 
	#TIM_CCMR1_IC2PSC_1
 ((
uöt32_t
)0x00000800Ë

	)

5770 
	#TIM_CCMR1_IC2F
 ((
uöt32_t
)0x0000F000Ë

	)

5771 
	#TIM_CCMR1_IC2F_0
 ((
uöt32_t
)0x00001000Ë

	)

5772 
	#TIM_CCMR1_IC2F_1
 ((
uöt32_t
)0x00002000Ë

	)

5773 
	#TIM_CCMR1_IC2F_2
 ((
uöt32_t
)0x00004000Ë

	)

5774 
	#TIM_CCMR1_IC2F_3
 ((
uöt32_t
)0x00008000Ë

	)

5777 
	#TIM_CCMR2_CC3S
 ((
uöt32_t
)0x00000003Ë

	)

5778 
	#TIM_CCMR2_CC3S_0
 ((
uöt32_t
)0x00000001Ë

	)

5779 
	#TIM_CCMR2_CC3S_1
 ((
uöt32_t
)0x00000002Ë

	)

5781 
	#TIM_CCMR2_OC3FE
 ((
uöt32_t
)0x00000004Ë

	)

5782 
	#TIM_CCMR2_OC3PE
 ((
uöt32_t
)0x00000008Ë

	)

5784 
	#TIM_CCMR2_OC3M
 ((
uöt32_t
)0x00000070Ë

	)

5785 
	#TIM_CCMR2_OC3M_0
 ((
uöt32_t
)0x00000010Ë

	)

5786 
	#TIM_CCMR2_OC3M_1
 ((
uöt32_t
)0x00000020Ë

	)

5787 
	#TIM_CCMR2_OC3M_2
 ((
uöt32_t
)0x00000040Ë

	)

5788 
	#TIM_CCMR2_OC3M_3
 ((
uöt32_t
)0x00010000Ë

	)

5790 
	#TIM_CCMR2_OC3CE
 ((
uöt32_t
)0x00000080Ë

	)

5792 
	#TIM_CCMR2_CC4S
 ((
uöt32_t
)0x00000300Ë

	)

5793 
	#TIM_CCMR2_CC4S_0
 ((
uöt32_t
)0x00000100Ë

	)

5794 
	#TIM_CCMR2_CC4S_1
 ((
uöt32_t
)0x00000200Ë

	)

5796 
	#TIM_CCMR2_OC4FE
 ((
uöt32_t
)0x00000400Ë

	)

5797 
	#TIM_CCMR2_OC4PE
 ((
uöt32_t
)0x00000800Ë

	)

5799 
	#TIM_CCMR2_OC4M
 ((
uöt32_t
)0x00007000Ë

	)

5800 
	#TIM_CCMR2_OC4M_0
 ((
uöt32_t
)0x00001000Ë

	)

5801 
	#TIM_CCMR2_OC4M_1
 ((
uöt32_t
)0x00002000Ë

	)

5802 
	#TIM_CCMR2_OC4M_2
 ((
uöt32_t
)0x00004000Ë

	)

5803 
	#TIM_CCMR2_OC4M_3
 ((
uöt32_t
)0x00100000Ë

	)

5805 
	#TIM_CCMR2_OC4CE
 ((
uöt32_t
)0x00008000Ë

	)

5809 
	#TIM_CCMR2_IC3PSC
 ((
uöt16_t
)0x0000000CË

	)

5810 
	#TIM_CCMR2_IC3PSC_0
 ((
uöt16_t
)0x00000004Ë

	)

5811 
	#TIM_CCMR2_IC3PSC_1
 ((
uöt16_t
)0x00000008Ë

	)

5813 
	#TIM_CCMR2_IC3F
 ((
uöt16_t
)0x000000F0Ë

	)

5814 
	#TIM_CCMR2_IC3F_0
 ((
uöt16_t
)0x00000010Ë

	)

5815 
	#TIM_CCMR2_IC3F_1
 ((
uöt16_t
)0x00000020Ë

	)

5816 
	#TIM_CCMR2_IC3F_2
 ((
uöt16_t
)0x00000040Ë

	)

5817 
	#TIM_CCMR2_IC3F_3
 ((
uöt16_t
)0x00000080Ë

	)

5819 
	#TIM_CCMR2_IC4PSC
 ((
uöt16_t
)0x00000C00Ë

	)

5820 
	#TIM_CCMR2_IC4PSC_0
 ((
uöt16_t
)0x00000400Ë

	)

5821 
	#TIM_CCMR2_IC4PSC_1
 ((
uöt16_t
)0x00000800Ë

	)

5823 
	#TIM_CCMR2_IC4F
 ((
uöt16_t
)0x0000F000Ë

	)

5824 
	#TIM_CCMR2_IC4F_0
 ((
uöt16_t
)0x00001000Ë

	)

5825 
	#TIM_CCMR2_IC4F_1
 ((
uöt16_t
)0x00002000Ë

	)

5826 
	#TIM_CCMR2_IC4F_2
 ((
uöt16_t
)0x00004000Ë

	)

5827 
	#TIM_CCMR2_IC4F_3
 ((
uöt16_t
)0x00008000Ë

	)

5830 
	#TIM_CCER_CC1E
 ((
uöt32_t
)0x00000001Ë

	)

5831 
	#TIM_CCER_CC1P
 ((
uöt32_t
)0x00000002Ë

	)

5832 
	#TIM_CCER_CC1NE
 ((
uöt32_t
)0x00000004Ë

	)

5833 
	#TIM_CCER_CC1NP
 ((
uöt32_t
)0x00000008Ë

	)

5834 
	#TIM_CCER_CC2E
 ((
uöt32_t
)0x00000010Ë

	)

5835 
	#TIM_CCER_CC2P
 ((
uöt32_t
)0x00000020Ë

	)

5836 
	#TIM_CCER_CC2NE
 ((
uöt32_t
)0x00000040Ë

	)

5837 
	#TIM_CCER_CC2NP
 ((
uöt32_t
)0x00000080Ë

	)

5838 
	#TIM_CCER_CC3E
 ((
uöt32_t
)0x00000100Ë

	)

5839 
	#TIM_CCER_CC3P
 ((
uöt32_t
)0x00000200Ë

	)

5840 
	#TIM_CCER_CC3NE
 ((
uöt32_t
)0x00000400Ë

	)

5841 
	#TIM_CCER_CC3NP
 ((
uöt32_t
)0x00000800Ë

	)

5842 
	#TIM_CCER_CC4E
 ((
uöt32_t
)0x00001000Ë

	)

5843 
	#TIM_CCER_CC4P
 ((
uöt32_t
)0x00002000Ë

	)

5844 
	#TIM_CCER_CC4NP
 ((
uöt32_t
)0x00008000Ë

	)

5845 
	#TIM_CCER_CC5E
 ((
uöt32_t
)0x00010000Ë

	)

5846 
	#TIM_CCER_CC5P
 ((
uöt32_t
)0x00020000Ë

	)

5847 
	#TIM_CCER_CC6E
 ((
uöt32_t
)0x00100000Ë

	)

5848 
	#TIM_CCER_CC6P
 ((
uöt32_t
)0x00200000Ë

	)

5850 
	#TIM_CNT_CNT
 ((
uöt32_t
)0xFFFFFFFFË

	)

5851 
	#TIM_CNT_UIFCPY
 ((
uöt32_t
)0x80000000Ë

	)

5853 
	#TIM_PSC_PSC
 ((
uöt16_t
)0xFFFFË

	)

5856 
	#TIM_ARR_ARR
 ((
uöt32_t
)0xFFFFFFFFË

	)

5859 
	#TIM_RCR_REP
 ((
uöt8_t
)0xFFË

	)

5862 
	#TIM_CCR1_CCR1
 ((
uöt16_t
)0xFFFFË

	)

5865 
	#TIM_CCR2_CCR2
 ((
uöt16_t
)0xFFFFË

	)

5868 
	#TIM_CCR3_CCR3
 ((
uöt16_t
)0xFFFFË

	)

5871 
	#TIM_CCR4_CCR4
 ((
uöt16_t
)0xFFFFË

	)

5874 
	#TIM_CCR5_CCR5
 ((
uöt32_t
)0xFFFFFFFFË

	)

5875 
	#TIM_CCR5_GC5C1
 ((
uöt32_t
)0x20000000Ë

	)

5876 
	#TIM_CCR5_GC5C2
 ((
uöt32_t
)0x40000000Ë

	)

5877 
	#TIM_CCR5_GC5C3
 ((
uöt32_t
)0x80000000Ë

	)

5880 
	#TIM_CCR6_CCR6
 ((
uöt16_t
)0xFFFFË

	)

5883 
	#TIM_BDTR_DTG
 ((
uöt32_t
)0x000000FFË

	)

5884 
	#TIM_BDTR_DTG_0
 ((
uöt32_t
)0x00000001Ë

	)

5885 
	#TIM_BDTR_DTG_1
 ((
uöt32_t
)0x00000002Ë

	)

5886 
	#TIM_BDTR_DTG_2
 ((
uöt32_t
)0x00000004Ë

	)

5887 
	#TIM_BDTR_DTG_3
 ((
uöt32_t
)0x00000008Ë

	)

5888 
	#TIM_BDTR_DTG_4
 ((
uöt32_t
)0x00000010Ë

	)

5889 
	#TIM_BDTR_DTG_5
 ((
uöt32_t
)0x00000020Ë

	)

5890 
	#TIM_BDTR_DTG_6
 ((
uöt32_t
)0x00000040Ë

	)

5891 
	#TIM_BDTR_DTG_7
 ((
uöt32_t
)0x00000080Ë

	)

5893 
	#TIM_BDTR_LOCK
 ((
uöt32_t
)0x00000300Ë

	)

5894 
	#TIM_BDTR_LOCK_0
 ((
uöt32_t
)0x00000100Ë

	)

5895 
	#TIM_BDTR_LOCK_1
 ((
uöt32_t
)0x00000200Ë

	)

5897 
	#TIM_BDTR_OSSI
 ((
uöt32_t
)0x00000400Ë

	)

5898 
	#TIM_BDTR_OSSR
 ((
uöt32_t
)0x00000800Ë

	)

5899 
	#TIM_BDTR_BKE
 ((
uöt32_t
)0x00001000Ë

	)

5900 
	#TIM_BDTR_BKP
 ((
uöt32_t
)0x00002000Ë

	)

5901 
	#TIM_BDTR_AOE
 ((
uöt32_t
)0x00004000Ë

	)

5902 
	#TIM_BDTR_MOE
 ((
uöt32_t
)0x00008000Ë

	)

5904 
	#TIM_BDTR_BKF
 ((
uöt32_t
)0x000F0000Ë

	)

5905 
	#TIM_BDTR_BK2F
 ((
uöt32_t
)0x00F00000Ë

	)

5907 
	#TIM_BDTR_BK2E
 ((
uöt32_t
)0x01000000Ë

	)

5908 
	#TIM_BDTR_BK2P
 ((
uöt32_t
)0x02000000Ë

	)

5911 
	#TIM_DCR_DBA
 ((
uöt16_t
)0x001FË

	)

5912 
	#TIM_DCR_DBA_0
 ((
uöt16_t
)0x0001Ë

	)

5913 
	#TIM_DCR_DBA_1
 ((
uöt16_t
)0x0002Ë

	)

5914 
	#TIM_DCR_DBA_2
 ((
uöt16_t
)0x0004Ë

	)

5915 
	#TIM_DCR_DBA_3
 ((
uöt16_t
)0x0008Ë

	)

5916 
	#TIM_DCR_DBA_4
 ((
uöt16_t
)0x0010Ë

	)

5918 
	#TIM_DCR_DBL
 ((
uöt16_t
)0x1F00Ë

	)

5919 
	#TIM_DCR_DBL_0
 ((
uöt16_t
)0x0100Ë

	)

5920 
	#TIM_DCR_DBL_1
 ((
uöt16_t
)0x0200Ë

	)

5921 
	#TIM_DCR_DBL_2
 ((
uöt16_t
)0x0400Ë

	)

5922 
	#TIM_DCR_DBL_3
 ((
uöt16_t
)0x0800Ë

	)

5923 
	#TIM_DCR_DBL_4
 ((
uöt16_t
)0x1000Ë

	)

5926 
	#TIM_DMAR_DMAB
 ((
uöt16_t
)0xFFFFË

	)

5929 
	#TIM16_OR_TI1_RMP
 ((
uöt16_t
)0x00C0Ë

	)

5930 
	#TIM16_OR_TI1_RMP_0
 ((
uöt16_t
)0x0040Ë

	)

5931 
	#TIM16_OR_TI1_RMP_1
 ((
uöt16_t
)0x0080Ë

	)

5934 
	#TIM1_OR_ETR_RMP
 ((
uöt16_t
)0x000FË

	)

5935 
	#TIM1_OR_ETR_RMP_0
 ((
uöt16_t
)0x0001Ë

	)

5936 
	#TIM1_OR_ETR_RMP_1
 ((
uöt16_t
)0x0002Ë

	)

5937 
	#TIM1_OR_ETR_RMP_2
 ((
uöt16_t
)0x0004Ë

	)

5938 
	#TIM1_OR_ETR_RMP_3
 ((
uöt16_t
)0x0008Ë

	)

5941 
	#TIM8_OR_ETR_RMP
 ((
uöt16_t
)0x000FË

	)

5942 
	#TIM8_OR_ETR_RMP_0
 ((
uöt16_t
)0x0001Ë

	)

5943 
	#TIM8_OR_ETR_RMP_1
 ((
uöt16_t
)0x0002Ë

	)

5944 
	#TIM8_OR_ETR_RMP_2
 ((
uöt16_t
)0x0004Ë

	)

5945 
	#TIM8_OR_ETR_RMP_3
 ((
uöt16_t
)0x0008Ë

	)

5948 
	#TIM_CCMR3_OC5FE
 ((
uöt32_t
)0x00000004Ë

	)

5949 
	#TIM_CCMR3_OC5PE
 ((
uöt32_t
)0x00000008Ë

	)

5951 
	#TIM_CCMR3_OC5M
 ((
uöt32_t
)0x00000070Ë

	)

5952 
	#TIM_CCMR3_OC5M_0
 ((
uöt32_t
)0x00000010Ë

	)

5953 
	#TIM_CCMR3_OC5M_1
 ((
uöt32_t
)0x00000020Ë

	)

5954 
	#TIM_CCMR3_OC5M_2
 ((
uöt32_t
)0x00000040Ë

	)

5955 
	#TIM_CCMR3_OC5M_3
 ((
uöt32_t
)0x00010000Ë

	)

5957 
	#TIM_CCMR3_OC5CE
 ((
uöt32_t
)0x00000080Ë

	)

5959 
	#TIM_CCMR3_OC6FE
 ((
uöt32_t
)0x00000400Ë

	)

5960 
	#TIM_CCMR3_OC6PE
 ((
uöt32_t
)0x00000800Ë

	)

5962 
	#TIM_CCMR3_OC6M
 ((
uöt32_t
)0x00007000Ë

	)

5963 
	#TIM_CCMR3_OC6M_0
 ((
uöt32_t
)0x00001000Ë

	)

5964 
	#TIM_CCMR3_OC6M_1
 ((
uöt32_t
)0x00002000Ë

	)

5965 
	#TIM_CCMR3_OC6M_2
 ((
uöt32_t
)0x00004000Ë

	)

5966 
	#TIM_CCMR3_OC6M_3
 ((
uöt32_t
)0x00100000Ë

	)

5968 
	#TIM_CCMR3_OC6CE
 ((
uöt32_t
)0x00008000Ë

	)

5976 
	#USART_CR1_UE
 ((
uöt32_t
)0x00000001Ë

	)

5977 
	#USART_CR1_UESM
 ((
uöt32_t
)0x00000002Ë

	)

5978 
	#USART_CR1_RE
 ((
uöt32_t
)0x00000004Ë

	)

5979 
	#USART_CR1_TE
 ((
uöt32_t
)0x00000008Ë

	)

5980 
	#USART_CR1_IDLEIE
 ((
uöt32_t
)0x00000010Ë

	)

5981 
	#USART_CR1_RXNEIE
 ((
uöt32_t
)0x00000020Ë

	)

5982 
	#USART_CR1_TCIE
 ((
uöt32_t
)0x00000040Ë

	)

5983 
	#USART_CR1_TXEIE
 ((
uöt32_t
)0x00000080Ë

	)

5984 
	#USART_CR1_PEIE
 ((
uöt32_t
)0x00000100Ë

	)

5985 
	#USART_CR1_PS
 ((
uöt32_t
)0x00000200Ë

	)

5986 
	#USART_CR1_PCE
 ((
uöt32_t
)0x00000400Ë

	)

5987 
	#USART_CR1_WAKE
 ((
uöt32_t
)0x00000800Ë

	)

5988 
	#USART_CR1_M
 ((
uöt32_t
)0x00001000Ë

	)

5989 
	#USART_CR1_MME
 ((
uöt32_t
)0x00002000Ë

	)

5990 
	#USART_CR1_CMIE
 ((
uöt32_t
)0x00004000Ë

	)

5991 
	#USART_CR1_OVER8
 ((
uöt32_t
)0x00008000Ë

	)

5992 
	#USART_CR1_DEDT
 ((
uöt32_t
)0x001F0000Ë

	)

5993 
	#USART_CR1_DEDT_0
 ((
uöt32_t
)0x00010000Ë

	)

5994 
	#USART_CR1_DEDT_1
 ((
uöt32_t
)0x00020000Ë

	)

5995 
	#USART_CR1_DEDT_2
 ((
uöt32_t
)0x00040000Ë

	)

5996 
	#USART_CR1_DEDT_3
 ((
uöt32_t
)0x00080000Ë

	)

5997 
	#USART_CR1_DEDT_4
 ((
uöt32_t
)0x00100000Ë

	)

5998 
	#USART_CR1_DEAT
 ((
uöt32_t
)0x03E00000Ë

	)

5999 
	#USART_CR1_DEAT_0
 ((
uöt32_t
)0x00200000Ë

	)

6000 
	#USART_CR1_DEAT_1
 ((
uöt32_t
)0x00400000Ë

	)

6001 
	#USART_CR1_DEAT_2
 ((
uöt32_t
)0x00800000Ë

	)

6002 
	#USART_CR1_DEAT_3
 ((
uöt32_t
)0x01000000Ë

	)

6003 
	#USART_CR1_DEAT_4
 ((
uöt32_t
)0x02000000Ë

	)

6004 
	#USART_CR1_RTOIE
 ((
uöt32_t
)0x04000000Ë

	)

6005 
	#USART_CR1_EOBIE
 ((
uöt32_t
)0x08000000Ë

	)

6008 
	#USART_CR2_ADDM7
 ((
uöt32_t
)0x00000010Ë

	)

6009 
	#USART_CR2_LBDL
 ((
uöt32_t
)0x00000020Ë

	)

6010 
	#USART_CR2_LBDIE
 ((
uöt32_t
)0x00000040Ë

	)

6011 
	#USART_CR2_LBCL
 ((
uöt32_t
)0x00000100Ë

	)

6012 
	#USART_CR2_CPHA
 ((
uöt32_t
)0x00000200Ë

	)

6013 
	#USART_CR2_CPOL
 ((
uöt32_t
)0x00000400Ë

	)

6014 
	#USART_CR2_CLKEN
 ((
uöt32_t
)0x00000800Ë

	)

6015 
	#USART_CR2_STOP
 ((
uöt32_t
)0x00003000Ë

	)

6016 
	#USART_CR2_STOP_0
 ((
uöt32_t
)0x00001000Ë

	)

6017 
	#USART_CR2_STOP_1
 ((
uöt32_t
)0x00002000Ë

	)

6018 
	#USART_CR2_LINEN
 ((
uöt32_t
)0x00004000Ë

	)

6019 
	#USART_CR2_SWAP
 ((
uöt32_t
)0x00008000Ë

	)

6020 
	#USART_CR2_RXINV
 ((
uöt32_t
)0x00010000Ë

	)

6021 
	#USART_CR2_TXINV
 ((
uöt32_t
)0x00020000Ë

	)

6022 
	#USART_CR2_DATAINV
 ((
uöt32_t
)0x00040000Ë

	)

6023 
	#USART_CR2_MSBFIRST
 ((
uöt32_t
)0x00080000Ë

	)

6024 
	#USART_CR2_ABREN
 ((
uöt32_t
)0x00100000Ë

	)

6025 
	#USART_CR2_ABRMODE
 ((
uöt32_t
)0x00600000Ë

	)

6026 
	#USART_CR2_ABRMODE_0
 ((
uöt32_t
)0x00200000Ë

	)

6027 
	#USART_CR2_ABRMODE_1
 ((
uöt32_t
)0x00400000Ë

	)

6028 
	#USART_CR2_RTOEN
 ((
uöt32_t
)0x00800000Ë

	)

6029 
	#USART_CR2_ADD
 ((
uöt32_t
)0xFF000000Ë

	)

6032 
	#USART_CR3_EIE
 ((
uöt32_t
)0x00000001Ë

	)

6033 
	#USART_CR3_IREN
 ((
uöt32_t
)0x00000002Ë

	)

6034 
	#USART_CR3_IRLP
 ((
uöt32_t
)0x00000004Ë

	)

6035 
	#USART_CR3_HDSEL
 ((
uöt32_t
)0x00000008Ë

	)

6036 
	#USART_CR3_NACK
 ((
uöt32_t
)0x00000010Ë

	)

6037 
	#USART_CR3_SCEN
 ((
uöt32_t
)0x00000020Ë

	)

6038 
	#USART_CR3_DMAR
 ((
uöt32_t
)0x00000040Ë

	)

6039 
	#USART_CR3_DMAT
 ((
uöt32_t
)0x00000080Ë

	)

6040 
	#USART_CR3_RTSE
 ((
uöt32_t
)0x00000100Ë

	)

6041 
	#USART_CR3_CTSE
 ((
uöt32_t
)0x00000200Ë

	)

6042 
	#USART_CR3_CTSIE
 ((
uöt32_t
)0x00000400Ë

	)

6043 
	#USART_CR3_ONEBIT
 ((
uöt32_t
)0x00000800Ë

	)

6044 
	#USART_CR3_OVRDIS
 ((
uöt32_t
)0x00001000Ë

	)

6045 
	#USART_CR3_DDRE
 ((
uöt32_t
)0x00002000Ë

	)

6046 
	#USART_CR3_DEM
 ((
uöt32_t
)0x00004000Ë

	)

6047 
	#USART_CR3_DEP
 ((
uöt32_t
)0x00008000Ë

	)

6048 
	#USART_CR3_SCARCNT
 ((
uöt32_t
)0x000E0000Ë

	)

6049 
	#USART_CR3_SCARCNT_0
 ((
uöt32_t
)0x00020000Ë

	)

6050 
	#USART_CR3_SCARCNT_1
 ((
uöt32_t
)0x00040000Ë

	)

6051 
	#USART_CR3_SCARCNT_2
 ((
uöt32_t
)0x00080000Ë

	)

6052 
	#USART_CR3_WUS
 ((
uöt32_t
)0x00300000Ë

	)

6053 
	#USART_CR3_WUS_0
 ((
uöt32_t
)0x00100000Ë

	)

6054 
	#USART_CR3_WUS_1
 ((
uöt32_t
)0x00200000Ë

	)

6055 
	#USART_CR3_WUFIE
 ((
uöt32_t
)0x00400000Ë

	)

6058 
	#USART_BRR_DIV_FRACTION
 ((
uöt16_t
)0x000FË

	)

6059 
	#USART_BRR_DIV_MANTISSA
 ((
uöt16_t
)0xFFF0Ë

	)

6062 
	#USART_GTPR_PSC
 ((
uöt16_t
)0x00FFË

	)

6063 
	#USART_GTPR_GT
 ((
uöt16_t
)0xFF00Ë

	)

6067 
	#USART_RTOR_RTO
 ((
uöt32_t
)0x00FFFFFFË

	)

6068 
	#USART_RTOR_BLEN
 ((
uöt32_t
)0xFF000000Ë

	)

6071 
	#USART_RQR_ABRRQ
 ((
uöt16_t
)0x0001Ë

	)

6072 
	#USART_RQR_SBKRQ
 ((
uöt16_t
)0x0002Ë

	)

6073 
	#USART_RQR_MMRQ
 ((
uöt16_t
)0x0004Ë

	)

6074 
	#USART_RQR_RXFRQ
 ((
uöt16_t
)0x0008Ë

	)

6075 
	#USART_RQR_TXFRQ
 ((
uöt16_t
)0x0010Ë

	)

6078 
	#USART_ISR_PE
 ((
uöt32_t
)0x00000001Ë

	)

6079 
	#USART_ISR_FE
 ((
uöt32_t
)0x00000002Ë

	)

6080 
	#USART_ISR_NE
 ((
uöt32_t
)0x00000004Ë

	)

6081 
	#USART_ISR_ORE
 ((
uöt32_t
)0x00000008Ë

	)

6082 
	#USART_ISR_IDLE
 ((
uöt32_t
)0x00000010Ë

	)

6083 
	#USART_ISR_RXNE
 ((
uöt32_t
)0x00000020Ë

	)

6084 
	#USART_ISR_TC
 ((
uöt32_t
)0x00000040Ë

	)

6085 
	#USART_ISR_TXE
 ((
uöt32_t
)0x00000080Ë

	)

6086 
	#USART_ISR_LBD
 ((
uöt32_t
)0x00000100Ë

	)

6087 
	#USART_ISR_CTSIF
 ((
uöt32_t
)0x00000200Ë

	)

6088 
	#USART_ISR_CTS
 ((
uöt32_t
)0x00000400Ë

	)

6089 
	#USART_ISR_RTOF
 ((
uöt32_t
)0x00000800Ë

	)

6090 
	#USART_ISR_EOBF
 ((
uöt32_t
)0x00001000Ë

	)

6091 
	#USART_ISR_ABRE
 ((
uöt32_t
)0x00004000Ë

	)

6092 
	#USART_ISR_ABRF
 ((
uöt32_t
)0x00008000Ë

	)

6093 
	#USART_ISR_BUSY
 ((
uöt32_t
)0x00010000Ë

	)

6094 
	#USART_ISR_CMF
 ((
uöt32_t
)0x00020000Ë

	)

6095 
	#USART_ISR_SBKF
 ((
uöt32_t
)0x00040000Ë

	)

6096 
	#USART_ISR_RWU
 ((
uöt32_t
)0x00080000Ë

	)

6097 
	#USART_ISR_WUF
 ((
uöt32_t
)0x00100000Ë

	)

6098 
	#USART_ISR_TEACK
 ((
uöt32_t
)0x00200000Ë

	)

6099 
	#USART_ISR_REACK
 ((
uöt32_t
)0x00400000Ë

	)

6102 
	#USART_ICR_PECF
 ((
uöt32_t
)0x00000001Ë

	)

6103 
	#USART_ICR_FECF
 ((
uöt32_t
)0x00000002Ë

	)

6104 
	#USART_ICR_NCF
 ((
uöt32_t
)0x00000004Ë

	)

6105 
	#USART_ICR_ORECF
 ((
uöt32_t
)0x00000008Ë

	)

6106 
	#USART_ICR_IDLECF
 ((
uöt32_t
)0x00000010Ë

	)

6107 
	#USART_ICR_TCCF
 ((
uöt32_t
)0x00000040Ë

	)

6108 
	#USART_ICR_LBDCF
 ((
uöt32_t
)0x00000100Ë

	)

6109 
	#USART_ICR_CTSCF
 ((
uöt32_t
)0x00000200Ë

	)

6110 
	#USART_ICR_RTOCF
 ((
uöt32_t
)0x00000800Ë

	)

6111 
	#USART_ICR_EOBCF
 ((
uöt32_t
)0x00001000Ë

	)

6112 
	#USART_ICR_CMCF
 ((
uöt32_t
)0x00020000Ë

	)

6113 
	#USART_ICR_WUCF
 ((
uöt32_t
)0x00100000Ë

	)

6116 
	#USART_RDR_RDR
 ((
uöt16_t
)0x01FFË

	)

6119 
	#USART_TDR_TDR
 ((
uöt16_t
)0x01FFË

	)

6127 
	#WWDG_CR_T
 ((
uöt8_t
)0x7FË

	)

6128 
	#WWDG_CR_T0
 ((
uöt8_t
)0x01Ë

	)

6129 
	#WWDG_CR_T1
 ((
uöt8_t
)0x02Ë

	)

6130 
	#WWDG_CR_T2
 ((
uöt8_t
)0x04Ë

	)

6131 
	#WWDG_CR_T3
 ((
uöt8_t
)0x08Ë

	)

6132 
	#WWDG_CR_T4
 ((
uöt8_t
)0x10Ë

	)

6133 
	#WWDG_CR_T5
 ((
uöt8_t
)0x20Ë

	)

6134 
	#WWDG_CR_T6
 ((
uöt8_t
)0x40Ë

	)

6136 
	#WWDG_CR_WDGA
 ((
uöt8_t
)0x80Ë

	)

6139 
	#WWDG_CFR_W
 ((
uöt16_t
)0x007FË

	)

6140 
	#WWDG_CFR_W0
 ((
uöt16_t
)0x0001Ë

	)

6141 
	#WWDG_CFR_W1
 ((
uöt16_t
)0x0002Ë

	)

6142 
	#WWDG_CFR_W2
 ((
uöt16_t
)0x0004Ë

	)

6143 
	#WWDG_CFR_W3
 ((
uöt16_t
)0x0008Ë

	)

6144 
	#WWDG_CFR_W4
 ((
uöt16_t
)0x0010Ë

	)

6145 
	#WWDG_CFR_W5
 ((
uöt16_t
)0x0020Ë

	)

6146 
	#WWDG_CFR_W6
 ((
uöt16_t
)0x0040Ë

	)

6148 
	#WWDG_CFR_WDGTB
 ((
uöt16_t
)0x0180Ë

	)

6149 
	#WWDG_CFR_WDGTB0
 ((
uöt16_t
)0x0080Ë

	)

6150 
	#WWDG_CFR_WDGTB1
 ((
uöt16_t
)0x0100Ë

	)

6152 
	#WWDG_CFR_EWI
 ((
uöt16_t
)0x0200Ë

	)

6155 
	#WWDG_SR_EWIF
 ((
uöt8_t
)0x01Ë

	)

6165 #ifde‡
USE_STDPERIPH_DRIVER


6166 
	~"°m32f30x_c⁄f.h
"

6173 
	#SET_BIT
(
REG
, 
BIT
Ë((REGË|(BIT))

	)

6175 
	#CLEAR_BIT
(
REG
, 
BIT
Ë((REGË&~(BIT))

	)

6177 
	#READ_BIT
(
REG
, 
BIT
Ë((REGË& (BIT))

	)

6179 
	#CLEAR_REG
(
REG
Ë((REGË(0x0))

	)

6181 
	#WRITE_REG
(
REG
, 
VAL
Ë((REGË(VAL))

	)

6183 
	#READ_REG
(
REG
Ë((REG))

	)

6185 
	#MODIFY_REG
(
REG
, 
CLEARMASK
, 
SETMASK
Ë
	`WRITE_REG
((REG), (((
	`READ_REG
(REG)Ë& (~(CLEARMASK))Ë| (SETMASK)))

	)

6191 #ifde‡
__˝lu•lus


	@resources/startup/system_stm32f30x.c

101 
	~"°m32f30x.h
"

121 
	#VECT_TAB_OFFSET
 0x0

	)

139 
uöt32_t
 
	gSy°emC‹eClock
 = 72000000;

141 
__I
 
uöt8_t
 
	gAHBPªscTabÀ
[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};

151 
SëSysClock
();

168 
	$Sy°emInô
()

171 #i‡(
__FPU_PRESENT
 =1Ë&& (
__FPU_USED
 == 1)

172 
SCB
->
CPACR
 |= ((3UL << 10*2)|(3UL << 11*2));

177 
RCC
->
CR
 |(
uöt32_t
)0x00000001;

180 
RCC
->
CFGR
 &= 0xF87FC00C;

183 
RCC
->
CR
 &(
uöt32_t
)0xFEF6FFFF;

186 
RCC
->
CR
 &(
uöt32_t
)0xFFFBFFFF;

189 
RCC
->
CFGR
 &(
uöt32_t
)0xFF80FFFF;

192 
RCC
->
CFGR2
 &(
uöt32_t
)0xFFFFFFF0;

195 
RCC
->
CFGR3
 &(
uöt32_t
)0xFF00FCCC;

198 
RCC
->
CIR
 = 0x00000000;

202 
	`SëSysClock
();

204 #ifde‡
VECT_TAB_SRAM


205 
SCB
->
VTOR
 = 
SRAM_BASE
 | 
VECT_TAB_OFFSET
;

207 
SCB
->
VTOR
 = 
FLASH_BASE
 | 
VECT_TAB_OFFSET
;

209 
	}
}

247 
	$Sy°emC‹eClockUpd©e
 ()

249 
uöt32_t
 
tmp
 = 0, 
∂lmuŒ
 = 0, 
∂lsour˚
 = 0, 
¥ediv1Á˘‹
 = 0;

252 
tmp
 = 
RCC
->
CFGR
 & 
RCC_CFGR_SWS
;

254 
tmp
)

257 
Sy°emC‹eClock
 = 
HSI_VALUE
;

260 
Sy°emC‹eClock
 = 
HSE_VALUE
;

264 
∂lmuŒ
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLMULL
;

265 
∂lsour˚
 = 
RCC
->
CFGR
 & 
RCC_CFGR_PLLSRC
;

266 
∂lmuŒ
 = (Öllmull >> 18) + 2;

268 i‡(
∂lsour˚
 == 0x00)

271 
Sy°emC‹eClock
 = (
HSI_VALUE
 >> 1Ë* 
∂lmuŒ
;

275 
¥ediv1Á˘‹
 = (
RCC
->
CFGR2
 & 
RCC_CFGR2_PREDIV1
) + 1;

277 
Sy°emC‹eClock
 = (
HSE_VALUE
 / 
¥ediv1Á˘‹
Ë* 
∂lmuŒ
;

281 
Sy°emC‹eClock
 = 
HSI_VALUE
;

286 
tmp
 = 
AHBPªscTabÀ
[((
RCC
->
CFGR
 & 
RCC_CFGR_HPRE
) >> 4)];

288 
Sy°emC‹eClock
 >>
tmp
;

289 
	}
}

299 
	$SëSysClock
()

301 
__IO
 
uöt32_t
 
SèπUpCou¡î
 = 0, 
HSESètus
 = 0;

309 
RCC
->
CR
 |((
uöt32_t
)
RCC_CR_HSEON
);

314 
HSESètus
 = 
RCC
->
CR
 & 
RCC_CR_HSERDY
;

315 
SèπUpCou¡î
++;

316 } (
HSESètus
 =0Ë&& (
SèπUpCou¡î
 !
HSE_STARTUP_TIMEOUT
));

318 i‡((
RCC
->
CR
 & 
RCC_CR_HSERDY
Ë!
RESET
)

320 
HSESètus
 = (
uöt32_t
)0x01;

324 
HSESètus
 = (
uöt32_t
)0x00;

327 i‡(
HSESètus
 =(
uöt32_t
)0x01)

330 
FLASH
->
ACR
 = 
FLASH_ACR_PRFTBE
 | (
uöt32_t
)
FLASH_ACR_LATENCY_1
;

333 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_HPRE_DIV1
;

336 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE2_DIV1
;

339 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_PPRE1_DIV2
;

342 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_PLLSRC
 | 
RCC_CFGR_PLLXTPRE
 | 
RCC_CFGR_PLLMULL
));

343 
RCC
->
CFGR
 |(
uöt32_t
)(
RCC_CFGR_PLLSRC_PREDIV1
 | 
RCC_CFGR_PLLXTPRE_PREDIV1
 | 
RCC_CFGR_PLLMULL9
);

346 
RCC
->
CR
 |
RCC_CR_PLLON
;

349 (
RCC
->
CR
 & 
RCC_CR_PLLRDY
) == 0)

354 
RCC
->
CFGR
 &(
uöt32_t
)((uöt32_t)~(
RCC_CFGR_SW
));

355 
RCC
->
CFGR
 |(
uöt32_t
)
RCC_CFGR_SW_PLL
;

358 (
RCC
->
CFGR
 & (
uöt32_t
)
RCC_CFGR_SWS
Ë!(uöt32_t)
RCC_CFGR_SWS_PLL
)

366 
	}
}

	@resources/startup/system_stm32f30x.h

39 #i‚de‡
__SYSTEM_STM32F30X_H


40 
	#__SYSTEM_STM32F30X_H


	)

42 #ifde‡
__˝lu•lus


59 
uöt32_t
 
Sy°emC‹eClock
;

86 
Sy°emInô
();

87 
Sy°emC‹eClockUpd©e
();

92 #ifde‡
__˝lu•lus


	@stm32f30x_conf.h

29 #i‚de‡
__STM32F30X_CONF_H


30 
	#__STM32F30X_CONF_H


	)

34 
	~"°m32f30x_adc.h
"

35 
	~"°m32f30x_ˇn.h
"

36 
	~"°m32f30x_¸c.h
"

37 
	~"°m32f30x_comp.h
"

38 
	~"°m32f30x_dac.h
"

39 
	~"°m32f30x_dbgmcu.h
"

40 
	~"°m32f30x_dma.h
"

41 
	~"°m32f30x_exti.h
"

42 
	~"°m32f30x_Êash.h
"

43 
	~"°m32f30x_gpio.h
"

44 
	~"°m32f30x_syscfg.h
"

45 
	~"°m32f30x_i2c.h
"

46 
	~"°m32f30x_iwdg.h
"

47 
	~"°m32f30x_›amp.h
"

48 
	~"°m32f30x_pwr.h
"

49 
	~"°m32f30x_rcc.h
"

50 
	~"°m32f30x_πc.h
"

51 
	~"°m32f30x_•i.h
"

52 
	~"°m32f30x_tim.h
"

53 
	~"°m32f30x_ußπ.h
"

54 
	~"°m32f30x_wwdg.h
"

55 
	~"°m32f30x_misc.h
"

64 #ifde‡ 
USE_FULL_ASSERT


73 
	#as£π_∑øm
(
ex¥
Ë(”x¥Ë? ()0 : 
	`as£π_Áûed
((
uöt8_t
 *)
__FILE__
, 
__LINE__
))

	)

75 
as£π_Áûed
(
uöt8_t
* 
fûe
, 
uöt32_t
 
löe
);

77 
	#as£π_∑øm
(
ex¥
Ë(()0)

	)

	@stm32f30x_it.c

31 
	~"maö.h
"

32 
	~"ußπ.h
"

58 
	$NMI_H™dÀr
()

60 
	}
}

67 
	$H¨dFau…_H™dÀr
()

69 
	`FUSART_Síd
(
USART1
 , '%');

74 
	}
}

81 
	$MemM™age_H™dÀr
()

83 
	`FUSART_Síd
(
USART1
 , '%');

88 
	}
}

95 
	$BusFau…_H™dÀr
()

97 
	`FUSART_Síd
(
USART1
 , '%');

102 
	}
}

109 
	$UßgeFau…_H™dÀr
()

111 
	`FUSART_Síd
(
USART1
 , '%');

116 
	}
}

123 
	$SVC_H™dÀr
()

125 
	`FUSART_Síd
(
USART1
 , '%');

126 
	}
}

133 
	$DebugM⁄_H™dÀr
()

135 
	`FUSART_Síd
(
USART1
 , '%');

136 
	}
}

143 
	$PídSV_H™dÀr
()

145 
	`FUSART_Síd
(
USART1
 , '%');

146 
	}
}

153 
	$SysTick_H™dÀr
()

155 
	`FUSART_Síd
(
USART1
 , '%');

156 
	}
}

	@stm32f30x_it.h

29 #i‚de‡
__STM32F30X_IT_H


30 
	#__STM32F30X_IT_H


	)

32 #ifde‡
__˝lu•lus


37 
	~"°m32f30x.h
"

44 
NMI_H™dÀr
();

45 
H¨dFau…_H™dÀr
();

46 
MemM™age_H™dÀr
();

47 
BusFau…_H™dÀr
();

48 
UßgeFau…_H™dÀr
();

49 
SVC_H™dÀr
();

50 
DebugM⁄_H™dÀr
();

51 
PídSV_H™dÀr
();

52 
SysTick_H™dÀr
();

54 #ifde‡
__˝lu•lus


	@usart.c

1 
	~"°m32f30x.h
"

2 
	~"ußπ.h
"

3 
	~<°dio.h
>

4 
	~<°döt.h
>

5 
	~<°dlib.h
>

9 
uöt8_t
 
	$FUßπ_Clock_E«bÀ
–
USART_Ty≥Def
* 
USARTx
)

11 i‡(
USARTx
==
USART1
)

13 
RCC
->
APB2ENR
=
MUSART1_Clock_E«bÀ
;

16 i‡(
USARTx
 =
USART2
)

18 
RCC
->
APB1ENR
=
MUSART2_Clock_E«bÀ
;

21 i‡(
USARTx
 =
USART3
)

23 
RCC
->
APB1ENR
=
MUSART3_Clock_E«bÀ
;

26 i‡(
USARTx
 =
UART4
)

28 
RCC
->
APB1ENR
=
MUSART4_Clock_E«bÀ
;

31 i‡(
USARTx
 =
UART5
)

33 
RCC
->
APB1ENR
=
MUSART5_Clock_E«bÀ
;

38 
	}
}

43 
	$FUßπ_Inô
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
Buadøã
,

44 
uöt32_t
 
St›_Bôs
, uöt32_à
P¨ôy
, uöt32_à
W‹d_Lígth
, uöt32_à
H¨dw¨e_Flow_C⁄åﬁ
)

46 
USARTx
->
CR1
 = 
MUSART_RX_ENABLE
|
MUSART_TX_ENABLE
;

47 i‡(
W‹d_Lígth
==9)

49 
USARTx
->
CR1
 = USARTx->CR1 | 
MUSART_M0
;

51 i‡(
W‹d_Lígth
==7)

53 
USARTx
->
CR1
 = USARTx->CR1 | 
MUSART_M1
;

56 if(
P¨ôy
==
MUSART_PARITY_EVEN
)

57 
USARTx
->
CR1
 = USARTx->CR1 | 
MUSART_PARITY_EVEN
;

58 if(
P¨ôy
==
MUSART_PARITY_ODD
)

59 
USARTx
->
CR1
 = USARTx->CR1 | 
MUSART_PARITY_ODD
;

61 i‡(
St›_Bôs
==
MUSART_TWO_SB
 || St›_Bôs==
MUSART_ONE_SB
 ||St›_Bôs==
MUSART_HALF_SB
 || St›_Bôs==
MUSART_OH_SB
 )

63 
USARTx
->
CR2
 = USARTx->CR2 | 
St›_Bôs
;

65 i‡(
USARTx
==
USART1
)

67 
USARTx
->
BRR
=72000000/
Buadøã
;

69 i‡–
USARTx
>=
USART2
 || USARTx>=
USART3
 || USARTx>=
UART4
 || USARTx>=
UART5
)

71 
USARTx
->
BRR
=36000000/
Buadøã
;

73 
USARTx
->
CR1
|=
MUSART_ENABLE
;

75 
	}
}

77 
	$FUSART_Síd
(
USART_Ty≥Def
* 
USARTx
 , 
uöt8_t
 
D©a
)

79 !(((
USARTx
->
ISR
&
MUSART_TXE
))==MUSART_TXE));

80 
USARTx
->
TDR
=
D©a
;

81 
	}
}

84 
uöt8_t
 
	$FUSART_Recõve
(
USART_Ty≥Def
* 
USARTx
)

86 !((
USARTx
->
ISR
&
MUSART_RXNE
)==0x00));

87  (
uöt8_t
)(
USARTx
->
RDR
);

88 
	}
}

91 
	$Pröt
(
USART_Ty≥Def
* 
USARTx
 , *
a
)

93 
i
;

94 
i
 = 0; 
a
[i] != '\0'; i++)

95 
	`FUSART_Síd
(
USARTx
 , 
a
[
i
]);

96 
	}
}

99 
	$PrötHex
(
a
)

101 
°∫g
[5];

102 
	`ôﬂ
((Ë
a
,
°∫g
,16);

103 
	`FUSART_Síd
(
USART1
 , ' ');

104 
	`Pröt
(
USART1
,
°∫g
);

105 
	}
}

107 
	$Sîül_öôülize
()

110 
	`RCC_AHBPîùhClockCmd
–
RCC_AHBPîùh_GPIOA
, 
ENABLE
);

111 
GPIO_InôTy≥Def
 
GPIO_Såu˘
;

112 
GPIO_Såu˘
.
GPIO_Pö
=
GPIO_Pö_9
|
GPIO_Pö_10
;

113 
GPIO_Såu˘
.
GPIO_Mode
=
GPIO_Mode_AF
;

114 
GPIO_Såu˘
.
GPIO_S≥ed
=
GPIO_S≥ed_50MHz
;

115 
GPIO_Såu˘
.
GPIO_OTy≥
=
GPIO_OTy≥_PP
;

116 
GPIO_Såu˘
.
GPIO_PuPd
=
GPIO_PuPd_NOPULL
;

117 
	`GPIO_Inô
(
GPIOA
, &
GPIO_Såu˘
);

118 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚9
 , 
GPIO_AF_7
);

119 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚10
, 
GPIO_AF_7
);

121 
	`FUßπ_Clock_E«bÀ
(
USART1
);

122 
	`FUßπ_Inô
(
USART1
,230400,
MUSART_ONE_SB
,
MUSART_PARITY_NONE
,8,0);

124 
	}
}

	@usart.h

1 #i‚de‡
__USART_H


2 
	#__USART_H


	)

4 
	~"°m32f30x_rcc.h
"

5 
	~"°m32f30x_gpio.h
"

7 
	#MUSART1_Clock_E«bÀ
 (1<<14)

	)

8 
	#MUSART2_Clock_E«bÀ
 (1<<17)

	)

9 
	#MUSART3_Clock_E«bÀ
 (1<<18)

	)

10 
	#MUSART4_Clock_E«bÀ
 (1<<19)

	)

11 
	#MUSART5_Clock_E«bÀ
 (1<<20)

	)

15 
	#MUSART_OVER_CLOCK8
 (1<<15)

	)

16 
	#MUSART_OVER_CLOCK16
 (0)

	)

17 
	#MUSART_PARITY_NONE
 (0)

	)

18 
	#MUSART_PARITY_ODD
 ((1<<9)|(1<<10))

	)

19 
	#MUSART_PARITY_EVEN
 (0|(1<<10))

	)

20 
	#MUSART_TX_ENABLE
 (1<<3 )

	)

21 
	#MUSART_RX_ENABLE
 (1<<2)

	)

22 
	#MUSART_ENABLE
 (1<<0 )

	)

23 
	#MUSART_M1
 (1<<28)

	)

24 
	#MUSART_M0
 (1<<12)

	)

25 
	#MUSART_ONE_SB
 (0x00000000)

	)

26 
	#MUSART_HALF_SB
 (1<<12)

	)

27 
	#MUSART_TWO_SB
 (1<<13)

	)

28 
	#MUSART_OH_SB
 (1<<12|1<<13)

	)

29 
	#MUSART_TXE
 (1<<7)

	)

30 
	#MUSART_RXNE
 (1<<5)

	)

33 
uöt8_t
 
FUßπ_Clock_E«bÀ
–
USART_Ty≥Def
* 
USARTx
);

34 
FUßπ_Inô
(
USART_Ty≥Def
* 
USARTx
, 
uöt32_t
 
Buadøã
, uöt32_à
St›_Bôs
, uöt32_à
P¨ôy
, uöt32_à
W‹d_Lígth
, uöt32_à
H¨dw¨e_Flow_C⁄åﬁ
);

35 
FUSART_Síd
(
USART_Ty≥Def
* 
USARTx
 , 
uöt8_t
 
D©a
);

36 
uöt8_t
 
FUSART_Recõve
(
USART_Ty≥Def
* 
USARTx
);

37 
Pröt
(
USART_Ty≥Def
* 
USARTx
 , *
a
);

38 
PrötHex
(
a
);

39 
Sîül_öôülize
();

	@usb.c

1 
	~"usb.h
"

2 
	~"usb_mem.h
"

3 
	~"usb_desc.h
"

4 
	~"°dio.h
"

5 
	~"°dlib.h
"

6 
	~"usb_hid.h
"

10 
uöt8_t
 
Pªv
;

11 
	#TRUE
 1

	)

12 
	#FALSE
 0

	)

14 
Enumî©i⁄
 
	g°Enumî©i⁄
;

15 
uöt16_t
 
	gaddªss
=0;

16 
	#vSëEPRxSètus
(
°
Ë(
SaveRSèã
 = st)

	)

17 
	#vSëEPTxSètus
(
°
Ë(
SaveTSèã
 = st)

	)

22 
	$UsbGpioInô
()

24 
	`RCC_AHBPîùhClockCmd
–
RCC_AHBPîùh_GPIOA
, 
ENABLE
);

25 
GPIO_InôTy≥Def
 
GPIO_Såu˘
;

26 
GPIO_Såu˘
.
GPIO_Pö
=
GPIO_Pö_11
|
GPIO_Pö_12
;

27 
GPIO_Såu˘
.
GPIO_Mode
=
GPIO_Mode_AF
;

28 
GPIO_Såu˘
.
GPIO_S≥ed
=
GPIO_S≥ed_50MHz
;

29 
GPIO_Såu˘
.
GPIO_OTy≥
=
GPIO_OTy≥_PP
;

30 
GPIO_Såu˘
.
GPIO_PuPd
=
GPIO_PuPd_NOPULL
;

31 
	`GPIO_Inô
(
GPIOA
, &
GPIO_Såu˘
);

32 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚11
, 
GPIO_AF_14
);

33 
	`GPIO_PöAFC⁄fig
(
GPIOA
, 
GPIO_PöSour˚12
, 
GPIO_AF_14
);

34 
	}
}

37 
	$UsbPowîClockInô
()

41 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_PWR
, 
ENABLE
);

42 
	`RCC_USBCLKC⁄fig
(
RCC_USBCLKSour˚_PLLCLK_1Div5
);

44 
	`RCC_APB1PîùhClockCmd
(
RCC_APB1Pîùh_USB
, 
ENABLE
);

46 
	`_SëCNTR
(~
CNTR_PDWN
);

47 
	`_SëISTR
(0);

48 
	`_SëCNTR
(~
CNTR_FRES
);

50 
	}
}

52 
	$UsbI¡îru±Inô
()

54 
	`NVIC_Pri‹ôyGroupC⁄fig
(
NVIC_Pri‹ôyGroup_2
);

56 
NVIC_InôTy≥Def
 
NVIC_InôSåu˘
;

57 
NVIC_InôSåu˘
.
NVIC_IRQCh™√l
=
USB_LP_CAN1_RX0_IRQn
;

59 
NVIC_InôSåu˘
.
NVIC_IRQCh™√lPªem±i⁄Pri‹ôy
=2;

60 
NVIC_InôSåu˘
.
NVIC_IRQCh™√lSubPri‹ôy
=0;

61 
NVIC_InôSåu˘
.
NVIC_IRQCh™√lCmd
=
ENABLE
;

62 
	`NVIC_Inô
(&
NVIC_InôSåu˘
);

63 
	}
}

67 
	$USBH¨dw¨eInô
()

69 
	`UsbGpioInô
();

70 
	`UsbI¡îru±Inô
();

71 
	`UsbPowîClockInô
();

72 
	`_SëCNTR
(0);

73 
	`_SëCNTR
(
USB_INTERRRUPT_MASK
);

74 
	}
}

77 
	$SëDevi˚Addªss
(
uöt8_t
 
VÆ
)

79 
uöt32_t
 
i
;

80 
uöt32_t
 
nEP
 = 2;

83 
i
 = 0; i < 
nEP
; i++)

85 
	`_SëEPAddªss
((
uöt8_t
)
i
, (uint8_t)i);

87 
	`_SëDADDR
(
VÆ
 | 
DADDR_EF
);

88 
	}
}

95 
	$USB_LP_CAN1_RX0_IRQH™dÀr
()

97 
uöt16_t
 
wI°r
 = 
	`_GëISTR
();

98 i‡(
wI°r
 & 
ISTR_RESET
)

100 
	`_SëISTR
((
uöt16_t
)
CLR_RESET
);

101 
	`USBRe£t
();

102 
	`FUSART_Síd
(
USART1
 , '0');

104 i‡(
wI°r
 & 
ISTR_CTR
)

107 if–(
wI°r
 & 
ISTR_EP_ID
 ) =
ENDP0
)

109 
	`EndPoötZîoH™dÀ
();

113 
	`_CÀ¨EP_CTR_TX
(
ENDP1
);

114 
Pªv
=1;

115 
	`FUSART_Síd
(
USART1
 , '1');

118 i‡(
wI°r
 & 
ISTR_DOVR
)

120 
	`_SëISTR
((
uöt16_t
)
CLR_DOVR
);

121 
	`FUSART_Síd
(
USART1
 , '2');

123 i‡(
wI°r
 & 
ISTR_ERR
)

125 
	`_SëISTR
((
uöt16_t
)
CLR_ERR
);

126 
	`FUSART_Síd
(
USART1
 , '3');

128 i‡(
wI°r
 & 
ISTR_WKUP
)

130 
	`_SëISTR
((
uöt16_t
)
CLR_WKUP
);

131 
	`FUSART_Síd
(
USART1
 , '4');

133 i‡(
wI°r
 & 
ISTR_SUSP
)

135 
	`_SëISTR
((
uöt16_t
)
CLR_SUSP
);

136 
	`FUSART_Síd
(
USART1
 , '5');

140 
	`FUSART_Síd
(
USART1
 , '6');

143 
	}
}

145 
uöt8_t
 
	gÊag
=0;

146 
uöt16_t
 
	gSaveRSèã
,
	gSaveTSèã
, 
	gªg
;

148 
	$EndPoötZîoH™dÀ
()

152 
ªg
=
	`_GëENDPOINT
(
ENDP0
);

156 i‡(
ªg
 & 
EP_CTR_TX
)

158 
	`_CÀ¨EP_CTR_TX
(
ENDP0
);

159 
	`vIN0Pr€˚ss
();

161 if(
ªg
 & 
EP_SETUP
)

163 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

164 
°Enumî©i⁄
.
íC⁄åﬁSèã
 = 
SETTING_UP
;

165 
°Enumî©i⁄
.
íReque°Sèã
 = 
NOTFOUND
;

166 
uöt8_t
 *
Poöãr
 = 
PMAAddr
 + (uöt8_à*)(
	`_GëEPRxAddr
(
ENDP0
) * 2);

167 
°Enumî©i⁄
.
bmReque°Ty≥
 = *
Poöãr
++;

168 
°Enumî©i⁄
.
bReque°
 = *
Poöãr
++;

169 
°Enumî©i⁄
.
wVÆue
 = (*((
uöt16_t
 *)(
Poöãr
+2)));

170 
°Enumî©i⁄
.
wIndex
 = (*((
uöt16_t
 *)(
Poöãr
+6)));

171 
°Enumî©i⁄
.
wLígth
 = (*((
uöt16_t
 *)(
Poöãr
+10)));

172 
	`FUSART_Síd
(
USART1
,'\r');

173 
	`FUSART_Síd
(
USART1
,'\n');

174 
	`vPrötReque°
();

175 i‡(
°Enumî©i⁄
.
wLígth
 == 0)

177 
	`H™dÀSëup0NoD©a
();

181 
	`H™dÀSëup0D©a
();

184 i‡(
ªg
 & 
EP_CTR_RX
)

186 
	`_CÀ¨EP_CTR_RX
(
ENDP0
);

187 
	`FUSART_Síd
(
USART1
 , '7');

191 
	`FUSART_Síd
(
USART1
 , '$');

192 
	`FUSART_Síd
(
USART1
 , '1');

194 
	}
}

197 
	#MAX_PACKET_SIZE
 (0x40)

198 

	)

204 
	$vPrötReque°
()

206 
	`PrötHex
(
°Enumî©i⁄
.
bmReque°Ty≥
 );

207 
	`PrötHex
(
°Enumî©i⁄
.
bReque°
 );

208 
	`PrötHex
(((
°Enumî©i⁄
.
wVÆue
&0xff00)>>8));

209 
	`PrötHex
(((
°Enumî©i⁄
.
wVÆue
&0x00ff)));

210 
	`PrötHex
(((
°Enumî©i⁄
.
wIndex
&0xff00)>>8));

211 
	`PrötHex
(((
°Enumî©i⁄
.
wIndex
&0x00ff)));

212 
	`PrötHex
(((
°Enumî©i⁄
.
wLígth
&0xff00)>>8));

213 
	`PrötHex
(((
°Enumî©i⁄
.
wLígth
&0x00ff)));

214 
	`FUSART_Síd
(
USART1
 , ' ');

215 
	}
}

218 
	$H™dÀSëup0NoD©a
()

220 i‡((
°Enumî©i⁄
.
bmReque°Ty≥
 & 
BMREQUESTTYPE_TYPE_BITS
) == 0x00)

222 if(
°Enumî©i⁄
.
bReque°
 =
SET_ADDRESS
)

224 
°Enumî©i⁄
.
íReque°Sèã
=
SUPPORTED
;

225 
	`FUSART_Síd
(
USART1
 , 'a');

227 i‡(
°Enumî©i⁄
.
bReque°
 =
CLEAR_FEATURE
)

229 
	`FUSART_Síd
(
USART1
 , 'b');

230 
°Enumî©i⁄
.
íReque°Sèã
=
SUPPORTED
;

232 if(
°Enumî©i⁄
.
bReque°
 =
SET_CONFIGURATION
)

234 
°Enumî©i⁄
.
unCuºítC⁄figuøti⁄
 = stEnumî©i⁄.
wVÆue
;

235 
°Enumî©i⁄
.
íDevi˚Sèã
 = 
CONFIGURED
;

236 
°Enumî©i⁄
.
íReque°Sèã
 = 
SUPPORTED
;

237 
	`FUSART_Síd
(
USART1
 , 'c');

239 if(
°Enumî©i⁄
.
bReque°
 =
SET_FEATURE
)

241 
	`FUSART_Síd
(
USART1
 , 'd');

242 
°Enumî©i⁄
.
íReque°Sèã
=
SUPPORTED
;

244 if(
°Enumî©i⁄
.
bReque°
 =
SET_INTERFACE
)

246 
	`FUSART_Síd
(
USART1
 , 'e');

247 
°Enumî©i⁄
.
íReque°Sèã
=
SUPPORTED
;

252 i‡(
°Enumî©i⁄
.
íReque°Sèã
 =
NOTFOUND
)

254 
	`vCœssNoD©aSëup
();

257 i‡(
°Enumî©i⁄
.
íReque°Sèã
==
SUPPORTED
)

259 
	`FUSART_Síd
(
USART1
 , 'f');

260 
°Enumî©i⁄
.
íC⁄åﬁSèã
 = 
WAIT_STATUS_IN
;

261 
	`Síd0LígthD©a
();

262 
	`_SëEPRxSètus
(
ENDP0
,
EP_RX_VALID
);

264 i‡(
°Enumî©i⁄
.
íReque°Sèã
 =
UNSUPPORTED
 || stEnumî©i⁄.íReque°Sèã =
NOTFOUND
)

266 
	`FUSART_Síd
(
USART1
 , '$');

267 
	`FUSART_Síd
(
USART1
 , '2');

268 
	`_SëEPRxSètus
(
ENDP0
,
EP_RX_VALID
);

269 
	`_SëEPTxSètus
(
ENDP0
,
EP_TX_STALL
);

271 
	}
}

278 
	$H™dÀSëup0D©a
()

281 i‡((
°Enumî©i⁄
.
bmReque°Ty≥
 & 
BMREQUESTTYPE_TYPE_BITS
) == 0x00)

283 if((
°Enumî©i⁄
.
bReque°
 =
GET_CONFIGURATION
Ë&& (°Enumî©i⁄.
íDevi˚Sèã
 >
ADDRESSED
) \

284 &&(
°Enumî©i⁄
.
wVÆue
 =0)&&(°Enumî©i⁄.
wIndex
 =0)&&(°Enumî©i⁄.
wLígth
 =1)&&(°Enumî©i⁄.
bmReque°Ty≥
 == 0x80))

286 (Ë
	`GëC⁄figuøti⁄
(&
°Enumî©i⁄
);

287 
	`FUSART_Síd
(
USART1
 , 'h');

289 if((
°Enumî©i⁄
.
bReque°
 =
GET_DESCRIPTOR
))

291 
°Enumî©i⁄
.
udTŸÆSizePª£¡
=0;

292 ((
°Enumî©i⁄
.
wVÆue
&0xFF00)>>8))

294 
DEVICE_DESC_TYPE
:

295 
	`GëDevi˚Des¸ùt‹
(&
°Enumî©i⁄
);

296 
	`FUSART_Síd
(
USART1
 , 'i');

299 
DEVICE_QUALIFIER_TYPE
:

300 
°Enumî©i⁄
.
íReque°Sèã
=
UNSUPPORTED
;

301 
	`FUSART_Síd
(
USART1
 , 'T');

304 
CONFIG_DESC_TYPE
:

305 
	`GëC⁄figDes¸ùt‹
(&
°Enumî©i⁄
);

306 
	`FUSART_Síd
(
USART1
 , 'j');

309 
STRING_DESC_TYPE
:

310 
	`GëSåögDes¸ùt‹
(&
°Enumî©i⁄
);

311 
	`FUSART_Síd
(
USART1
 , 'k');

315 
°Enumî©i⁄
.
íReque°Sèã
=
NOTFOUND
;

319 if((
°Enumî©i⁄
.
bReque°
 =
GET_INTERFACE
Ë&& (°Enumî©i⁄.
íDevi˚Sèã
 =
CONFIGURED
) \

320 &&(
°Enumî©i⁄
.
wVÆue
 =0)&&(°Enumî©i⁄.
wLígth
 =1)&&(°Enumî©i⁄.
bmReque°Ty≥
 == 0x81))

322 
°Enumî©i⁄
.
u≈D©a
 = (
uöt8_t
 *)(&(°Enumî©i⁄.
unCuºítA…î«ãSëtög
));

323 
°Enumî©i⁄
.
udTŸÆSizePª£¡
 = 1;

324 
°Enumî©i⁄
.
íReque°Sèã
=
SUPPORTED
;

325 
	`FUSART_Síd
(
USART1
 , 'l');

327 if(
°Enumî©i⁄
.
bReque°
 =
GET_STATUS
 && stEnumî©i⁄.
wVÆue
==0 && stEnumî©i⁄.
wLígth
 == 2)

329 ()
	`Sènd¨dGëSètus
(&
°Enumî©i⁄
);

330 
	`FUSART_Síd
(
USART1
 , 'm');

332 if(
°Enumî©i⁄
.
bReque°
 =
SET_DESCRIPTOR
)

334 
	`FUSART_Síd
(
USART1
 , 'n');

335 
°Enumî©i⁄
.
íReque°Sèã
=
UNSUPPORTED
;

337 if(
°Enumî©i⁄
.
bReque°
 =
SYNC_FRAME
)

339 
	`FUSART_Síd
(
USART1
 , 'o');

340 
°Enumî©i⁄
.
íReque°Sèã
=
UNSUPPORTED
;

344 i‡(
°Enumî©i⁄
.
íReque°Sèã
 =
NOTFOUND
)

346 
	`FUSART_Síd
(
USART1
 , 'p');

347 
	`vCœssD©aSëup
();

350 i‡(
°Enumî©i⁄
.
udTŸÆSizePª£¡
 > 0 || stEnumî©i⁄.
íReque°Sèã
 =
SUPPORTED
)

352 
°Enumî©i⁄
.
udSizeRem
 = stEnumî©i⁄.
udTŸÆSizePª£¡
;

353 
°Enumî©i⁄
.
íC⁄åﬁSèã
 = 
IN_DATA
;

354 i‡(
°Enumî©i⁄
.
wLígth
 =°Enumî©i⁄.
udTŸÆSizePª£¡
)

356 
°Enumî©i⁄
.
bZPLSège
 = 
FALSE
;

358 if(
°Enumî©i⁄
.
wLígth
 > stEnumî©i⁄.
udTŸÆSizePª£¡
)

360 i‡((
°Enumî©i⁄
.
udTŸÆSizePª£¡
 % 
MAX_PACKET_SIZE
) == 0 )

362 
°Enumî©i⁄
.
bZPLSège
 = 
TRUE
;

366 
°Enumî©i⁄
.
bZPLSège
 = 
FALSE
;

369 
	`FUSART_Síd
(
USART1
 , 'q');

370 
	`vIN0Pr€˚ss
();

372 i‡(
°Enumî©i⁄
.
íReque°Sèã
 =
UNSUPPORTED
 || stEnumî©i⁄.íReque°Sèã =
NOTFOUND
)

375 
	`FUSART_Síd
(
USART1
 , 'r');

376 
	`_SëEPTxSètus
(
ENDP0
,
EP_TX_STALL
);

377 
	`_SëEPRxSètus
(
ENDP0
,
EP_RX_VALID
);

380 
	}
}

384 
	$vIN0Pr€˚ss
()

386 i‡–
°Enumî©i⁄
.
íC⁄åﬁSèã
 =
WAIT_STATUS_IN
 )

388 if(
°Enumî©i⁄
.
bReque°
 =
SET_ADDRESS
)

390 
	`SëDevi˚Addªss
(
°Enumî©i⁄
.
wVÆue
);

391 
°Enumî©i⁄
.
íDevi˚Sèã
 = 
ADDRESSED
;

392 
°Enumî©i⁄
.
íC⁄åﬁSèã
=
WAIT_SETUP
;

394 i‡(
°Enumî©i⁄
.
bReque°
 =
CLEAR_FEATURE
)

396 
	`FUSART_Síd
(
USART1
 , 's');

397 
°Enumî©i⁄
.
íC⁄åﬁSèã
=
WAIT_SETUP
;

399 if(
°Enumî©i⁄
.
bReque°
 =
SET_CONFIGURATION
)

401 
°Enumî©i⁄
.
íC⁄åﬁSèã
=
WAIT_SETUP
;

403 if(
°Enumî©i⁄
.
bReque°
 =
SET_FEATURE
)

405 
	`FUSART_Síd
(
USART1
 , 't');

406 
°Enumî©i⁄
.
íC⁄åﬁSèã
=
WAIT_SETUP
;

408 if(
°Enumî©i⁄
.
bReque°
 =
SET_INTERFACE
)

410 
	`FUSART_Síd
(
USART1
 , 'u');

411 
°Enumî©i⁄
.
íC⁄åﬁSèã
=
WAIT_SETUP
;

413 
	`_SëEPRxSètus
(
ENDP0
, 
EP_RX_VALID
);

415 if–
°Enumî©i⁄
.
bZPLSège
 =
TRUE
 && stEnumî©i⁄.
udSizeRem
 == 0 )

417 
	`Síd0LígthD©a
();

418 
°Enumî©i⁄
.
íC⁄åﬁSèã
 = 
WAIT_STATUS_OUT
;

419 
	`FUSART_Síd
(
USART1
 , 'v');

421 i‡(
°Enumî©i⁄
.
udSizeRem
 =0 && stEnumî©i⁄.
íC⁄åﬁSèã
 =
WAIT_STATUS_OUT
)

423 
	`_SëEPRxSètus
(
ENDP0
,
EP_RX_VALID
);

424 
	`FUSART_Síd
(
USART1
 , 'w');

426 i‡–
°Enumî©i⁄
.
íC⁄åﬁSèã
 =
IN_DATA
 )

428 i‡(
°Enumî©i⁄
.
udTŸÆSizePª£¡
 <
MAX_PACKET_SIZE
)

430 
	`U£rToPMABuf„rC›y
(
°Enumî©i⁄
.
u≈D©a
, (
uöt16_t
)
EP0TX_ADDRESS
, stEnumî©i⁄.
udTŸÆSizePª£¡
);

431 
	`_SëEPTxCou¡
(
ENDP0
,
°Enumî©i⁄
.
udTŸÆSizePª£¡
);

432 
°Enumî©i⁄
.
udSizeRem
=0;

433 
°Enumî©i⁄
.
íC⁄åﬁSèã
 = 
WAIT_STATUS_OUT
;

434 
	`FUSART_Síd
(
USART1
 , 'x');

438 if(
°Enumî©i⁄
.
udSizeRem
 > 
MAX_PACKET_SIZE
)

440 
	`U£rToPMABuf„rC›y
((
°Enumî©i⁄
.
u≈D©a
 + (°Enumî©i⁄.
udTŸÆSizePª£¡
 - stEnumî©i⁄.
udSizeRem
)Ë,(
uöt16_t
)
EP0TX_ADDRESS
,
MAX_PACKET_SIZE
);

441 
	`_SëEPTxCou¡
(
ENDP0
,
MAX_PACKET_SIZE
);

442 
°Enumî©i⁄
.
udSizeRem
-=
MAX_PACKET_SIZE
;

443 
°Enumî©i⁄
.
íC⁄åﬁSèã
 = 
IN_DATA
;

444 
	`FUSART_Síd
(
USART1
 , 'y');

449 
	`U£rToPMABuf„rC›y
((
°Enumî©i⁄
.
u≈D©a
 + (°Enumî©i⁄.
udTŸÆSizePª£¡
 - stEnumî©i⁄.
udSizeRem
)) \

450 ,(
uöt16_t
)
EP0TX_ADDRESS
,
°Enumî©i⁄
.
udSizeRem
);

451 
	`_SëEPTxCou¡
(
ENDP0
,
°Enumî©i⁄
.
udSizeRem
);

452 
	`_SëEPRxSètus
(
ENDP0
,
EP_RX_VALID
);

453 
	`Së_Sètus_Out
(
ENDP0
);

454 
°Enumî©i⁄
.
udSizeRem
=0;

455 
°Enumî©i⁄
.
íC⁄åﬁSèã
 = 
WAIT_STATUS_OUT
;

456 
	`FUSART_Síd
(
USART1
 , 'z');

460 
	`_SëEPTxSètus
(
ENDP0
,
EP_TX_VALID
);

462 
	}
}

466 
	$vCÀ¨Fótuª
()

469 
	}
}

471 
	$vSëFótuª
()

474 
	}
}

478 
Reque°Sèã
 
	$Sènd¨dGëSètus
(
Enumî©i⁄
 *
p°Enumî©i⁄
)

480 i‡(
p°Enumî©i⁄
->
wLígth
 == 0)

482 
p°Enumî©i⁄
->
íReque°Sèã
 = 
UNSUPPORTED
;

483  
UNSUPPORTED
;

487 
p°Enumî©i⁄
->
u≈D©a
 = (
uöt8_t
 *)(&’°Enumî©i⁄->
udGëSètus
));

488 
p°Enumî©i⁄
->
udTŸÆSizePª£¡
 = 2;

492 
p°Enumî©i⁄
->
u≈D©a
 = 0;

494 i‡((
p°Enumî©i⁄
->
bmReque°Ty≥
 & (
RECIEPIENT_BITS
|
BMREQUESTTYPE_TYPE_BITS
)Ë=(
DEVICE_RECIEPIENT
|
STANDARD_REQUEST
))

497 
p°Enumî©i⁄
->
udGëSètus
 = (
uöt16_t
)’°Enumî©i⁄->
unCuºítFótuª
);

498 
p°Enumî©i⁄
->
íReque°Sèã
 = 
SUPPORTED
;

499  
SUPPORTED
;

502 i‡((
p°Enumî©i⁄
->
bmReque°Ty≥
 & (
RECIEPIENT_BITS
|
BMREQUESTTYPE_TYPE_BITS
)Ë=(
INTERFACE_RECIEPIENT
|
STANDARD_REQUEST
))

505 
p°Enumî©i⁄
->
udGëSètus
 = 0;

506 
p°Enumî©i⁄
->
íReque°Sèã
 = 
SUPPORTED
;

507  
SUPPORTED
;

510 i‡((
p°Enumî©i⁄
->
bmReque°Ty≥
 & (
RECIEPIENT_BITS
|
BMREQUESTTYPE_TYPE_BITS
)Ë=(
ENDPOINT_RECIEPIENT
|
STANDARD_REQUEST
))

512 
uöt8_t
 
Rñ©ed_Endpoöt
;

513 
uöt8_t
 
wIndex0
 = 
p°Enumî©i⁄
->
wIndex
 & 0x00ff;

515 
Rñ©ed_Endpoöt
 = (
wIndex0
 & 0x0f);

516 i‡(
wIndex0
 & 0x70)

519 i‡(
	`_GëTxSèŒSètus
(
Rñ©ed_Endpoöt
))

521 
p°Enumî©i⁄
->
udGëSètus
 = 0x0001;

523 
p°Enumî©i⁄
->
íReque°Sèã
 = 
SUPPORTED
;

524  
SUPPORTED
;

529 i‡(
	`_GëRxSèŒSètus
(
Rñ©ed_Endpoöt
))

531 
p°Enumî©i⁄
->
udGëSètus
 = 0x0001;

533 
p°Enumî©i⁄
->
íReque°Sèã
 = 
SUPPORTED
;

534  
SUPPORTED
;

538 
p°Enumî©i⁄
->
íReque°Sèã
 = 
NOTFOUND
;

539  
NOTFOUND
;

540 
	}
}

543 
Reque°Sèã
 
	$GëC⁄figuøti⁄
(
Enumî©i⁄
 *
p°Enumî©i⁄
)

545 
p°Enumî©i⁄
->
u≈D©a
 = (
uöt8_t
 *)(&’°Enumî©i⁄->
unCuºítC⁄figuøti⁄
));

546 
p°Enumî©i⁄
->
udTŸÆSizePª£¡
 = 1;

547 
p°Enumî©i⁄
->
íReque°Sèã
=
SUPPORTED
;

548  
SUPPORTED
;

549 
	}
}

	@usb.h

1 #i‚de‡
__USB_H


2 
	#__USB_H


	)

4 
	~"°m32f30x_gpio.h
"

5 
	~"usb_ªgs.h
"

6 
	~"ußπ.h
"

7 
	~"°m32f30x_misc.h
"

9 
	#USB_INTERRRUPT_MASK
 (
CNTR_CTRM
 | 
CNTR_ERRM
 | 
CNTR_DOVRM
 | 
CNTR_WKUPM
 | 
CNTR_SUSPM
 | 
CNTR_RESETM
 )

	)

12 
	#BTABLE_ADDRESS
 (0x00)

	)

13 
	#EP0RX_ADDRESS
 (0x18)

	)

14 
	#EP0TX_ADDRESS
 (0x58)

	)

15 
	#EP1TX_ADDRESS
 (0x100)

	)

19 
	#DEVICE_RECIEPIENT
 (0x00)

	)

20 
	#INTERFACE_RECIEPIENT
 (0x01)

	)

21 
	#ENDPOINT_RECIEPIENT
 (0x02)

	)

22 
	#RECIEPIENT_BITS
 (0x1F)

	)

25 
	#STANDARD_REQUEST
 (0x00)

	)

26 
	#CLASS_REQUEST
 (0x20)

	)

27 
	#BMREQUESTTYPE_TYPE_BITS
 (0x60)

28 

	)

31 
	#CLEAR_FEATURE
 (0x01)

	)

32 
	#GET_CONFIGURATION
 (0x08)

	)

33 
	#GET_DESCRIPTOR
 (0x06)

	)

34 
	#GET_INTERFACE
 (0x0A)

	)

35 
	#GET_STATUS
 (0x00)

	)

36 
	#SET_ADDRESS
 (0x05)

	)

37 
	#SET_CONFIGURATION
 (0x09)

	)

38 
	#SET_DESCRIPTOR
 (0x07)

	)

39 
	#SET_FEATURE
 (0x03)

	)

40 
	#SET_INTERFACE
 (0x0B)

	)

41 
	#SYNC_FRAME
 (0x0C)

	)

45 
	#MAX_PACKET_SIZE
 (0x40)

46 

	)

48 
	eReque°Sèã


50 
	mFAULT
=0,

51 
	mSUPPORTED
=1,

52 
	mNOTREADY
=2,

53 
	mUNSUPPORTED
=3,

54 
	mNOTFOUND
=4

57 
	eC⁄åﬁSèã


59 
	mWAIT_SETUP
,

60 
	mSETTING_UP
,

61 
	mIN_DATA
,

62 
	mOUT_DATA
,

63 
	mLAST_IN_DATA
,

64 
	mLAST_OUT_DATA
,

65 
	mWAIT_STATUS_IN
,

66 
	mWAIT_STATUS_OUT
,

67 
	mSTALLED
,

68 
	mPAUSE


72 
	eDevi˚Sèã


74 
	mATTACHED
,

75 
	mPOWERED
,

76 
	mDEFUALT
,

77 
	mADDRESSED
,

78 
	mCONFIGURED
,

79 
	mSUSPENDED


83 
	#Síd0LígthD©a
(Ë{ 
	`_SëEPTxCou¡
(
ENDP0
, 0); \

	)

84 
_SëEPTxSètus
(
ENDP0
,
EP_TX_VALID
); \

88 
	sEnumî©i⁄


90 
uöt8_t
 
	mbmReque°Ty≥
;

91 
uöt8_t
 
	mbReque°
;

92 
uöt16_t
 
	mwVÆue
;

93 
uöt16_t
 
	mwIndex
;

94 
uöt16_t
 
	mwLígth
;

96 
uöt8_t
 
	munCuºítFótuª
;

97 
uöt8_t
 
	munCuºítC⁄figuøti⁄
;

98 
uöt8_t
 
	munCuºítI¡îÁ˚
;

99 
uöt8_t
 
	munCuºítA…î«ãSëtög
;

101 
uöt16_t
 
	mudGëSètus
;

103 
uöt16_t
 
	mudTŸÆSizePª£¡
;

104 
uöt16_t
 
	mudSizeRem
;

105 
uöt8_t
 *
	mu≈D©a
;

106 
uöt8_t
 
	mbZPLSège
;

108 
Devi˚Sèã
 
	míDevi˚Sèã
;

109 
C⁄åﬁSèã
 
	míC⁄åﬁSèã
;

110 
Reque°Sèã
 
	míReque°Sèã
;

113 
Enumî©i⁄
 
°Enumî©i⁄
;

116 
UsbGpioInô
();

117 
UsbPowîClockInô
();

118 
UsbI¡îru±Inô
();

119 
USBH¨dw¨eInô
();

120 
SëDevi˚Addªss
(
uöt8_t
 
VÆ
);

121 
USB_LP_CAN1_RX0_IRQH™dÀr
();

122 
EndPoötZîoH™dÀ
();

123 
vPrötReque°
();

124 
H™dÀSëup0NoD©a
();

125 
H™dÀSëup0D©a
();

126 
vIN0Pr€˚ss
();

127 
Reque°Sèã
 
Sènd¨dGëSètus
(
Enumî©i⁄
 *
p°Enumî©i⁄
);

128 
Reque°Sèã
 
GëC⁄figuøti⁄
(
Enumî©i⁄
 *
p°Enumî©i⁄
);

	@usb_desc.c

30 
	~"usb_desc.h
"

49 c⁄° 
uöt8_t
 
	gDevi˚Des¸ùt‹
[
SIZ_DEVICE_DESC
] =

52 
DEVICE_DESC_TYPE
,

78 c⁄° 
uöt8_t
 
	gC⁄figDes¸ùt‹
[
SIZ_CONFIG_DESC
] =

81 
CONFIG_DESC_TYPE
,

82 
SIZ_CONFIG_DESC
,

95 
INTERFACE_DESC_TYPE
,

106 
HID_DESCRIPTOR_TYPE
,

112 
JOYSTICK_SIZ_REPORT_DESC
,

117 
ENDPOINT_DESC_TYPE
,

127 c⁄° 
uöt8_t
 
	gJoy°ick_Rï‹tDes¸ùt‹
[
JOYSTICK_SIZ_REPORT_DESC
] =

216 c⁄° 
uöt8_t
 
	gSåögL™gID
[
SIZ_STRING_LANGID
] =

218 
SIZ_STRING_LANGID
,

219 
STRING_DESC_TYPE
,

225 c⁄° 
uöt8_t
 
	gSåögVíd‹
[
SIZ_STRING_VENDOR
] =

227 
SIZ_STRING_VENDOR
,

228 
STRING_DESC_TYPE
,

235 c⁄° 
uöt8_t
 
	gSåögProdu˘
[
SIZ_STRING_PRODUCT
] =

237 
SIZ_STRING_PRODUCT
,

238 
STRING_DESC_TYPE
,

242 
uöt8_t
 
	gSåögSîül
[
SIZ_STRING_SERIAL
] =

244 
SIZ_STRING_SERIAL
,

245 
STRING_DESC_TYPE
,

	@usb_desc.h

29 #i‚de‡
__USB_DESC_H


30 
	#__USB_DESC_H


	)

39 
	#DEVICE_DESC_TYPE
 (0x01)

	)

40 
	#CONFIG_DESC_TYPE
 (0x02)

	)

41 
	#STRING_DESC_TYPE
 (0x03)

	)

42 
	#INTERFACE_DESC_TYPE
 (0x04)

	)

43 
	#ENDPOINT_DESC_TYPE
 (0x05)

	)

44 
	#DEVICE_QUALIFIER_TYPE
 (0x06)

	)

45 
	#OTHER_SPEED_CONFIG
 (0x07)

	)

46 
	#OTG_DESC_TYPE
 (0x08)

	)

48 
	#HID_DESCRIPTOR_TYPE
 (0x21)

	)

49 
	#REPORT_DESC_TYPE
 (0x22)

	)

50 
	#JOYSTICK_SIZ_HID_DESC
 (0x09)

	)

51 
	#JOYSTICK_OFF_HID_DESC
 (0x12)

	)

53 
	#SIZ_DEVICE_DESC
 (18)

	)

54 
	#SIZ_CONFIG_DESC
 (34)

	)

55 
	#JOYSTICK_SIZ_REPORT_DESC
 (74)

	)

56 
	#SIZ_STRING_LANGID
 (4)

	)

57 
	#SIZ_STRING_VENDOR
 (38)

	)

58 
	#SIZ_STRING_PRODUCT
 (30)

	)

59 
	#SIZ_STRING_SERIAL
 (26)

	)

61 
	#STANDARD_ENDPOINT_DESC_SIZE
 (0x09)

	)

64 c⁄° 
uöt8_t
 
Devi˚Des¸ùt‹
[
SIZ_DEVICE_DESC
];

65 c⁄° 
uöt8_t
 
C⁄figDes¸ùt‹
[
SIZ_CONFIG_DESC
];

66 c⁄° 
uöt8_t
 
Joy°ick_Rï‹tDes¸ùt‹
[
JOYSTICK_SIZ_REPORT_DESC
];

67 c⁄° 
uöt8_t
 
SåögL™gID
[
SIZ_STRING_LANGID
];

68 c⁄° 
uöt8_t
 
SåögVíd‹
[
SIZ_STRING_VENDOR
];

69 c⁄° 
uöt8_t
 
SåögProdu˘
[
SIZ_STRING_PRODUCT
];

70 
uöt8_t
 
SåögSîül
[
SIZ_STRING_SERIAL
];

	@usb_hid.c

2 
	~"usb_hid.h
"

6 
	$USBRe£t
()

8 
	`SëBTABLE
(
BTABLE_ADDRESS
);

10 
	`SëEPTy≥
(
ENDP0
, 
EP_CONTROL
);

11 
	`SëEPTxSètus
(
ENDP0
, 
EP_TX_STALL
);

12 
	`SëEPRxAddr
(
ENDP0
, 
EP0RX_ADDRESS
);

13 
	`SëEPTxAddr
(
ENDP0
, 
EP0TX_ADDRESS
);

14 
	`CÀ¨_Sètus_Out
(
ENDP0
);

15 
	`SëEPRxCou¡
(
ENDP0
, 64);

16 
	`SëEPRxVÆid
(
ENDP0
);

18 
	`SëEPTy≥
(
ENDP1
, 
EP_INTERRUPT
);

19 
	`SëEPTxAddr
(
ENDP1
, 
EP1TX_ADDRESS
);

20 
	`SëEPTxCou¡
(
ENDP1
, 4);

21 
	`SëEPRxSètus
(
ENDP1
, 
EP_RX_DIS
);

22 
	`SëEPTxSètus
(
ENDP1
, 
EP_TX_VALID
);

24 
	`SëDevi˚Addªss
(0);

25 
°Enumî©i⁄
.
íC⁄åﬁSèã
 = 
WAIT_SETUP
;

26 
°Enumî©i⁄
.
unCuºítFótuª
 = ((
C⁄figDes¸ùt‹
[8] & 0x40)>>6);

27 
°Enumî©i⁄
.
unCuºítFótuª
 |((
C⁄figDes¸ùt‹
[8] & 0x20)>>5);

28 
°Enumî©i⁄
.
unCuºítC⁄figuøti⁄
 = 0;

29 
	}
}

32 
Reque°Sèã
 
	$GëDevi˚Des¸ùt‹
(
Enumî©i⁄
 *
p°Enumî©i⁄
)

34 
p°Enumî©i⁄
->
u≈D©a
 = (
uöt8_t
 *)
Devi˚Des¸ùt‹
;

35 
p°Enumî©i⁄
->
udTŸÆSizePª£¡
 = 
SIZ_DEVICE_DESC
;

36 
p°Enumî©i⁄
->
íReque°Sèã
 = 
SUPPORTED
;

37  
SUPPORTED
;

38 
	}
}

42 
Reque°Sèã
 
	$GëC⁄figDes¸ùt‹
(
Enumî©i⁄
 *
p°Enumî©i⁄
)

44 
p°Enumî©i⁄
->
u≈D©a
 = (
uöt8_t
 *Ë
C⁄figDes¸ùt‹
;

45 i‡(
p°Enumî©i⁄
->
wLígth
 =
C⁄figDes¸ùt‹
[0])

47 
p°Enumî©i⁄
->
udTŸÆSizePª£¡
 = 
C⁄figDes¸ùt‹
[0];

49 if(
p°Enumî©i⁄
->
wLígth
 >
SIZ_CONFIG_DESC
)

51 
p°Enumî©i⁄
->
udTŸÆSizePª£¡
 = 
SIZ_CONFIG_DESC
;

55 
p°Enumî©i⁄
->
íReque°Sèã
 = 
ERROR
;

56  
ERROR
;

58 
p°Enumî©i⁄
->
íReque°Sèã
 = 
SUPPORTED
;

59  
SUPPORTED
;

60 
	}
}

63 
Reque°Sèã
 
	$GëSåögDes¸ùt‹
(
Enumî©i⁄
 *
p°Enumî©i⁄
)

65  
p°Enumî©i⁄
->
wVÆue
&0x00FF )

68 
p°Enumî©i⁄
->
u≈D©a
 = (
uöt8_t
 *)
SåögL™gID
;

69 
p°Enumî©i⁄
->
udTŸÆSizePª£¡
 = 
SIZ_STRING_LANGID
;

72 
p°Enumî©i⁄
->
u≈D©a
 = (
uöt8_t
 *)
SåögVíd‹
;

73 
p°Enumî©i⁄
->
udTŸÆSizePª£¡
 = 
SIZ_STRING_VENDOR
;

76 
p°Enumî©i⁄
->
u≈D©a
 = (
uöt8_t
 *)
SåögVíd‹
;

77 
p°Enumî©i⁄
->
udTŸÆSizePª£¡
 = 
SIZ_STRING_PRODUCT
;

80 
p°Enumî©i⁄
->
u≈D©a
 = (
uöt8_t
 *)
SåögSîül
;

81 
p°Enumî©i⁄
->
udTŸÆSizePª£¡
 = 
SIZ_STRING_SERIAL
;

84 
p°Enumî©i⁄
->
íReque°Sèã
 = 
UNSUPPORTED
;

85  
UNSUPPORTED
;

88 
p°Enumî©i⁄
->
íReque°Sèã
 = 
SUPPORTED
;

89  
SUPPORTED
;

90 
	}
}

93 
	$vCœssD©aSëup
()

95 i‡((
°Enumî©i⁄
.
bReque°
 =
GET_DESCRIPTOR
Ë&& ((°Enumî©i⁄.
bmReque°Ty≥
 & 
RECIEPIENT_BITS
Ë=
INTERFACE_RECIEPIENT
))

97 i‡(((
°Enumî©i⁄
.
wVÆue
&0xFF00)>>8Ë=
REPORT_DESC_TYPE
 )

99 
°Enumî©i⁄
.
u≈D©a
 = (
uöt8_t
 *)
Joy°ick_Rï‹tDes¸ùt‹
;

100 
°Enumî©i⁄
.
wLígth
 = stEnumeration.wLength;

101 
°Enumî©i⁄
.
udTŸÆSizePª£¡
 = 
JOYSTICK_SIZ_REPORT_DESC
;

102 
°Enumî©i⁄
.
íReque°Sèã
=
SUPPORTED
;

103 
	`FUSART_Síd
(
USART1
 , 'Z');

105 i‡(((
°Enumî©i⁄
.
wVÆue
&0xFF00)>>8Ë=
HID_DESCRIPTOR_TYPE
 )

107 
°Enumî©i⁄
.
u≈D©a
 = (
uöt8_t
 *)(&
C⁄figDes¸ùt‹
[18]);

108 
°Enumî©i⁄
.
wLígth
 = stEnumeration.wLength;

109 
°Enumî©i⁄
.
udTŸÆSizePª£¡
 = 0x09;

110 
°Enumî©i⁄
.
íReque°Sèã
=
SUPPORTED
;

111 
	`FUSART_Síd
(
USART1
 , 'Y');

114 
	}
}

116 
	#HID_SET_IDLE
 (0x0a)

	)

119 
	$vCœssNoD©aSëup
()

121 if(((
°Enumî©i⁄
.
bmReque°Ty≥
 & 
BMREQUESTTYPE_TYPE_BITS
Ë=0x20Ë&& (°Enumî©i⁄.
bReque°
 =
HID_SET_IDLE
))

123 
	`FUSART_Síd
(
USART1
 , 'X');

124 
°Enumî©i⁄
.
íReque°Sèã
=
SUPPORTED
;

126 
	}
}

	@usb_hid.h

1 #i‚de‡
_USB_HID_H_


2 
	#_USB_HID_H_


	)

4 
	~"usb.h
"

5 
	~"usb_desc.h
"

10 
USBRe£t
();

11 
Reque°Sèã
 
GëDevi˚Des¸ùt‹
(
Enumî©i⁄
 *
p°Enumî©i⁄
);

12 
Reque°Sèã
 
GëC⁄figDes¸ùt‹
(
Enumî©i⁄
 *
p°Enumî©i⁄
);

13 
Reque°Sèã
 
GëSåögDes¸ùt‹
(
Enumî©i⁄
 *
p°Enumî©i⁄
);

14 
vCœssD©aSëup
();

15 
vCœssNoD©aSëup
();

	@
1
.
0
87
3918
Extra_codde.c
main.c
main.h
resources/Include/arm_common_tables.h
resources/Include/arm_math.h
resources/Include/core_cm0.h
resources/Include/core_cm3.h
resources/Include/core_cm4.h
resources/Include/core_cm4_simd.h
resources/Include/core_cmFunc.h
resources/Include/core_cmInstr.h
resources/Include/core_sc000.h
resources/Include/core_sc300.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_adc.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_can.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_comp.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_crc.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dac.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dbgmcu.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_dma.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_exti.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_flash.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_gpio.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_i2c.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_iwdg.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_misc.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_opamp.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_pwr.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rcc.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_rtc.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_spi.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_syscfg.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_tim.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_usart.h
resources/STM32F30x_StdPeriph_Driver/inc/stm32f30x_wwdg.h
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_adc.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_can.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_comp.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_crc.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_dac.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_dbgmcu.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_dma.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_exti.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_flash.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_gpio.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_i2c.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_iwdg.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_misc.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_opamp.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_pwr.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_rcc.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_rtc.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_spi.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_syscfg.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_tim.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_usart.c
resources/STM32F30x_StdPeriph_Driver/src/stm32f30x_wwdg.c
resources/STM32_USB-FS-Device_Driver/inc/usb_core.h
resources/STM32_USB-FS-Device_Driver/inc/usb_def.h
resources/STM32_USB-FS-Device_Driver/inc/usb_init.h
resources/STM32_USB-FS-Device_Driver/inc/usb_int.h
resources/STM32_USB-FS-Device_Driver/inc/usb_lib.h
resources/STM32_USB-FS-Device_Driver/inc/usb_mem.h
resources/STM32_USB-FS-Device_Driver/inc/usb_regs.h
resources/STM32_USB-FS-Device_Driver/inc/usb_sil.h
resources/STM32_USB-FS-Device_Driver/inc/usb_type.h
resources/STM32_USB-FS-Device_Driver/src/usb_core.c
resources/STM32_USB-FS-Device_Driver/src/usb_init.c
resources/STM32_USB-FS-Device_Driver/src/usb_int.c
resources/STM32_USB-FS-Device_Driver/src/usb_mem.c
resources/STM32_USB-FS-Device_Driver/src/usb_regs.c
resources/STM32_USB-FS-Device_Driver/src/usb_sil.c
resources/startup/startup_stm32f30x.s
resources/startup/stm32f30x.h
resources/startup/system_stm32f30x.c
resources/startup/system_stm32f30x.h
stm32f30x_conf.h
stm32f30x_it.c
stm32f30x_it.h
usart.c
usart.h
usb.c
usb.h
usb_desc.c
usb_desc.h
usb_hid.c
usb_hid.h
